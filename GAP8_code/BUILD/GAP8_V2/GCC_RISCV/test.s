
/home/mlonmcu/Short-exercise-3/Gapuino_software/BUILD/GAP8_V2/GCC_RISCV/test:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 00000390  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b000398  1b000398  00001398  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000f660  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000044  1c00f700  1c00f700  00012700  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00f744  1c00f744  00012744  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS
 10 .got          00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00f750  1c00f750  00020024  2**0  CONTENTS
 14 .rodata       00000af0  1c00f750  1c00f750  00012750  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         0000c100  1c010240  1c010240  00013240  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          0000043c  1c01c340  1c01c340  0001f340  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c01c77c  00020004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000008  1000001c  1c01c794  0002001c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000024  10000024  00020024  2**0  CONTENTS
 20 .debug_frame  0000c784  00000000  00000000  00020024  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000d8ea2  00000000  00000000  0002c7a8  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000da30  00000000  00000000  0010564a  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    000d6538  00000000  00000000  0011307a  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001d70  00000000  00000000  001e95b8  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 0000c148  00000000  00000000  001eb328  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00042bd9  00000000  00000000  001f7470  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    0000f4a0  00000000  00000000  0023a049  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  002494e9  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  00249503  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b000398 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00f700 l    d  .init_array	00000000 .init_array
1c00f744 l    d  .fini_array	00000000 .fini_array
1c00f750 l    d  .init	00000000 .init
1c00f750 l    d  .fini	00000000 .fini
1c00f750 l    d  .preinit_array	00000000 .preinit_array
1c00f750 l    d  .boot	00000000 .boot
1c00f750 l    d  .got	00000000 .got
1c00f750 l    d  .shbss	00000000 .shbss
1c00f750 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00f750 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00f750 l    d  .rodata	00000000 .rodata
1c010240 l    d  .data	00000000 .data
1c01c340 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000024 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c00bec0 l     F .text	0000001c __rt_event_enqueue
1c00bedc l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c00befc l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c00d482 l     F .text	00000014 l2_memcpy
1c00d496 l     F .text	00000024 rt_event_enqueue
1c00d4ba l     F .text	00000032 pi_task_wait_on.isra.4
1c00d7aa l     F .text	0000004a __pi_hyper_copy_exec
1c00d90e l     F .text	00000296 __pi_hyper_copy_misaligned
1c00d7f4 l     F .text	00000056 __pi_hyper_copy
1c00d8bc l     F .text	00000052 exec_pending_task
1c00dba4 l     F .text	0000009e __pi_hyper_copy_2d
1c00dc66 l     F .text	0000002e __rt_hyper_init
1c01c410 l     O .bss	00000080 __pi_hyper_temp_buffer
1c010104 l     O .rodata	00000034 __hyper_pad
1c01c620 l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c01c624 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c00bce0 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000ba0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00dee0 l     F .text	0000000e __rt_io_end_of_flush
1c00deee l     F .text	00000050 __rt_io_uart_wait_req
1c00df3e l     F .text	00000042 __rt_do_putc_host
1c00df80 l     F .text	0000005a __rt_io_start
1c00dfda l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00dffa l     F .text	00000070 __rt_io_lock
1c00e06a l     F .text	00000034 __rt_putc_host_cluster_req
1c00e09e l     F .text	00000070 __rt_io_unlock
1c00e10e l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00e1e8 l     F .text	00000092 __rt_io_uart_wait_pending
1c00e27a l     F .text	00000028 __rt_io_stop
1c00e3e6 l     F .text	000000ac tfp_putc.isra.9
1c01c57c l     O .bss	00000080 __rt_io_event
1b000bbc l     O .stack	00000010 __rt_io_fc_lock
1c01c2c0 l     O .data	00000080 __rt_putc_host_buffer
1c01c638 l     O .bss	00000004 __rt_io_event_current
1c01c63c l     O .bss	00000004 __rt_io_pending_flush
1c01c640 l     O .bss	00000004 __rt_putc_host_buffer_index
1c01c644 l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c0005f0 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 quant_modelKernels.c
1c01c340 l     O .bss	0000001c HyperFlash
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c0084d4 l     F .text	00000052 KerConv2x1from3x1StrideNx1_V_SQ8.isra.1
1c008526 l     F .text	000000bc KerConv3x1BorderStrideNx1_SQ8.isra.3
1c0085e2 l     F .text	000000ea KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10
1c0086cc l     F .text	0000006a KerConv3x1Stride1x1_Body_SQ8.isra.13
00000000 l    df *ABS*	00000000 CNN_MatAlgebra_SQ8.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c0098ce l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c0099c4 l     F .text	00000008 pi_flash_read_async
1c0099cc l     F .text	0000003e __pi_read_fs_write
1c009a0a l     F .text	00000010 __pi_read_fs_seek
1c009a1a l     F .text	00000042 __pi_read_fs_direct_read_async
1c009a5c l     F .text	00000018 __pi_read_fs_copy_async
1c009a74 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c009a8c l     F .text	00000024 rt_event_enqueue
1c009ab0 l     F .text	00000038 __pi_fs_free
1c009ae8 l     F .text	00000006 __pi_read_fs_unmount
1c009aee l     F .text	00000126 __pi_read_fs_open
1c009c14 l     F .text	0000012a __pi_fs_mount_step
1c009d3e l     F .text	0000004e __pi_read_fs_close
1c009d8c l     F .text	0000009c __pi_read_fs_mount
1c009e28 l     F .text	00000072 __pi_fs_read_cached
1c009f7e l     F .text	00000094 __pi_read_fs_try_read
1c00a012 l     F .text	00000042 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c00a054 l     F .text	0000000c __pi_host_fs_mount
1c00a060 l     F .text	00000002 __pi_host_fs_unmount
1c00a062 l     F .text	00000024 rt_event_enqueue
1c00a086 l     F .text	00000006 __pi_host_fs_seek
1c00a08c l     F .text	00000084 __pi_host_fs_copy_2d_async
1c00a110 l     F .text	0000002a __pi_host_fs_write_async
1c00a13a l     F .text	00000026 __pi_host_fs_read_async
1c00a160 l     F .text	00000048 __pi_host_fs_copy_async
1c00a1a8 l     F .text	00000004 __pi_host_fs_direct_read_async
1c00a1ac l     F .text	0000001c __pi_host_fs_close
1c00a1c8 l     F .text	0000005c __pi_host_fs_open
1c01c35c l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c00a224 l     F .text	0000001c __rt_event_enqueue
1c00a240 l     F .text	0000000e hyperflash_ioctl
1c00a24e l     F .text	00000040 hyperflash_stall_task
1c00a28e l     F .text	0000008a hyperflash_read_2d_async
1c00a528 l     F .text	00000106 hyperflash_handle_pending_task
1c00a318 l     F .text	0000001a hyperflash_copy_2d_async
1c00a332 l     F .text	0000000e hyperflash_set_reg_exec
1c00a340 l     F .text	000000be hyperflash_erase_sector_async
1c00ab64 l     F .text	00000054 hyperflash_check_erase
1c00a3fe l     F .text	000000b4 hyperflash_erase_chip_async
1c00a4b2 l     F .text	00000076 hyperflash_read_async
1c00a796 l     F .text	0000005e hyperflash_program_async
1c00a68e l     F .text	00000056 hyperflash_reg_set_async
1c00a62e l     F .text	00000060 hyperflash_reg_get_async
1c00a6e4 l     F .text	000000b2 hyperflash_program_resume
1c00abb8 l     F .text	00000052 hyperflash_check_program
1c00a7f4 l     F .text	0000001c hyperflash_copy_async
1c00a810 l     F .text	0000001e hyperflash_close
1c00a82e l     F .text	00000090 hyperflash_open
1c00a8be l     F .text	00000032 pi_task_wait_on.isra.3
1c00a8f0 l     F .text	0000002c hyperflash_copy_2d
1c00a91c l     F .text	00000024 hyperflash_erase_sector
1c00a940 l     F .text	00000024 hyperflash_erase_chip
1c00a964 l     F .text	00000024 hyperflash_read
1c00a988 l     F .text	00000024 hyperflash_reg_get
1c00a9ac l     F .text	00000024 hyperflash_reg_set
1c00a9d0 l     F .text	00000024 hyperflash_program
1c00a9f4 l     F .text	0000002e hyperflash_copy
1c00aa22 l     F .text	000000aa hyperflash_erase_resume
1c00aacc l     F .text	00000044 hyperflash_erase_async
1c00ab10 l     F .text	00000024 hyperflash_erase
1c00ab34 l     F .text	00000030 hyperflash_get_status_reg
1c010468 l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c00aea8 l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c00b984 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 gapuino.c
00000000 l    df *ABS*	00000000 init.c
1c00ba36 l     F .text	00000026 cluster_start
1c00f704 l     O .init_array	00000004 ctor_list
1c00f748 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00c52e l     F .text	00000018 __rt_time_poweroff
1c00c546 l     F .text	00000018 __rt_time_poweron
1c01c618 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c00c9ea l     F .text	0000002c SetFllMultDivFactors
1c00ca16 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c01c274 l     O .data	00000007 SystemStateToSCUFastSeq
1c01c28c l     O .data	00000003 ToHWDCDC_Pos
1c01c29c l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00ce36 l     F .text	00000062 __rt_init_cluster_data
1c00ce98 l     F .text	00000064 __rt_cluster_init
1c00cefc l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c00d1e2 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c01c3e4 l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c01c61c l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00dc94 l     F .text	00000012 __pos_i2s_init
1c01c490 l     O .bss	00000054 __pos_i2s
1c01c628 l     O .bss	00000004 __pos_i2s_global_open_count
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 gpio-v2.c
1c01c4e4 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00ddc2 l     F .text	00000034 __rt_i2s_resume
1c00ddf6 l     F .text	0000002a __rt_i2s_setfreq_after
1c00de20 l     F .text	0000002c __rt_i2s_setfreq_before
1c01c62c l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c01c2a0 l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c01c630 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00e654 l     F .text	00000092 _to_x
1c00e6e6 l     F .text	00000020 _rlrshift
1c00e706 l     F .text	00000044 _ldiv5
1c00e74a l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00f25a l     F .text	00000024 __rt_uart_setup.isra.5
1c00f27e l     F .text	00000022 __rt_uart_setfreq_after
1c00f2a0 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00f2e2 l     F .text	0000002c __rt_uart_setfreq_before
1c00f30e l     F .text	00000042 __rt_uart_cluster_req
1c00f350 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c01c5fc l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00f60e l       .text	00000000 __rt_slave_start
1c00f564 l       .text	00000000 __rt_master_event
1c00f578 l       .text	00000000 __rt_master_loop
1c00f568 l       .text	00000000 __rt_push_event_to_fc_retry
1c00f600 l       .text	00000000 __rt_push_event_to_fc_wait
1c00f5f2 l       .text	00000000 __rt_master_sleep
1c00f580 l       .text	00000000 __rt_master_loop_update_next
1c00f5d4 l       .text	00000000 __rt_no_stack_check
1c00f5e0 l       .text	00000000 __rt_master_no_slave_barrier
1c00f5f0 l       .text	00000000 __rt_master_loop_no_slave
1c00f62c l       .text	00000000 __rt_fork_return
1c00f630 l       .text	00000000 __rt_wait_for_dispatch
1c00f646 l       .text	00000000 __rt_other_entry
1c00f640 l       .text	00000000 __rt_fork_entry
1c00f66e l       .text	00000000 __rt_no_stack_check_end
1c00f6e0 l       .text	00000000 __rt_dma_2d_done
1c00f69e l       .text	00000000 __rt_dma_2d_redo
1c00f6a6 l       .text	00000000 __rt_dma_2d_not_last
1c00f6c8 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c00d84a g     F .text	00000016 pi_hyper_read_async
1c00e508 g     F .text	00000006 putchar
1c0098c0 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c00c510 g     F .text	0000000e pi_l2_malloc
1c00be52 g     F .text	00000038 __rt_fc_cluster_lock
1c00cbac g     F .text	000000a4 InitOneFll
1c00c51e g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c01c750 g     O .bss	00000004 __rt_cluster_tasks
1c00c024 g     F .text	00000022 __rt_bridge_send_notif
1c00c196 g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00dc42 g     F .text	00000018 pi_hyper_read_2d_async
1c00b9ec g     F .text	0000001e semihost_write
1c00c26c g     F .text	00000064 __rt_event_execute
1c00bc8e g     F .text	00000052 __rt_irq_init
1c00c34c g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00d02c g     F .text	000000d8 pi_cluster_open
1c0105d0 g     O .data	00000004 NN_output
1c00e628 g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c00c48c g     F .text	00000072 __rt_allocs_init
1c01c734 g     O .bss	00000004 __rt_alloc_l1
1c00d026 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c00d6b4 g     F .text	0000009e pi_hyper_close
1c00bbf0 g     F .text	0000004c rt_irq_set_handler
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c009912 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00cd1a g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c00ac32 g     F .text	0000000a pi_partition_get_flash_offset
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c000c5e g     F .text	00000338 .hidden __divsf3
1c00c410 g     F .text	0000002e rt_free
1c00ac3e g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c00c9ac g     F .text	0000003e __rt_freq_init
1c00ba5c g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c0105dc g     O .data	00000014 sched
1c00ce1a g     F .text	00000012 __rt_fll_init
1c0105f4 g     O .data	00000001 zero_point
1b0013d0 g       .stack	00000000 __fc_tcdm_end
1c00dcda g     F .text	00000058 rt_extern_alloc_init
1c00c122 g     F .text	00000034 __rt_bridge_init
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c008388 g     F .text	00000098 KerParReduct_CC_ReLU_SQ8
1c00deaa g     F .text	00000012 __rt_i2c_init
1c01be9c g     O .data	000003d8 rx_buff
1c00f700 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c010240 g       .data	00000000 sdata
1c00b9ce g     F .text	0000001e semihost_read
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c00ba32 g     F .text	00000004 bsp_hyperflash_open
1c00ac0a g     F .text	00000028 pi_hyperflash_conf_init
00000390 g     O .data_tiny_fc	00000004 __rtc_handler
1c00c3e0 g     F .text	00000030 rt_alloc
1c010240 g     O .data	000000ec AT_GraphNodeNames
1c00f234 g     F .text	00000026 __rt_uart_cluster_req_done
1c001b86 g     F .text	0000060e S3_Conv2d_16x16x1x3_Relu
1c00bbc4 g     F .text	00000028 __rt_deinit
1b000bb8 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c0010ee g     F .text	000000f0 cluster_task_CNN
1c00c5d8 g     F .text	00000024 rt_time_wait_us
1c00e2fc g     F .text	00000036 memcpy
1c0005da g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c00c462 g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c009990 g     F .text	0000002a pi_fs_write
1c010618 g     O .data	00000002 dense_bias
1c004078 g     F .text	000034c6 quant_modelCNN_Construct
1c00dcce g     F .text	0000000c __rt_padframe_init
1c00f750 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c00e492 g     F .text	0000002c puts
1c0104ec  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
1c009394 g     F .text	00000296 KerParMatAdd_SQ8
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00c226 g     F .text	00000022 rt_event_get_blocking
1c01c340 g       .bss	00000000 _bss_start
1c01c340 g       .data	00000000 edata
1c00c43e g     F .text	00000024 __rt_alloc_init_l1
1c0105c8  w    O .data	00000004 __rt_iodev_uart_baudrate
1c003432 g     F .text	00000624 S14_Conv2d_16x16x1x3_Relu
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c01c27c g     O .data	00000010 PMUState
1c010240 g       .data	00000000 _sdata
10000024 g       .l1cluster_g	00000000 __l1_end
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c00c77a g     F .text	00000134 rt_periph_copy
1c00e3aa g     F .text	0000003c __rt_putc_uart
1b000398 g     O .stack	00000800 __rt_fc_stack
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c00104a g     F .text	000000a4 .hidden __extendsfdf2
1c00e77e g     F .text	00000ab6 _prf
1c01439c g     O .data	00007b00 input_data
1c0082f4 g     F .text	00000094 KerParReduct_CC_SQ8
10000024 g       .l1cluster_g	00000000 _libgomp_start
1c000930 g     F .text	0000032e .hidden __umoddi3
1c00c688 g     F .text	000000f2 __rt_timer_handler
1c002e10 g     F .text	00000622 S10_Conv2d_16x16x1x3_Relu
1c01c738 g     O .bss	00000004 __rt_alloc_l2
1b0013d0 g       .stack	00000000 stack
1c0005f4 g     F .text	0000033c .hidden __udivdi3
1c00e5ac g     F .text	0000000a abort
1c009946 g     F .text	00000008 pi_fs_open
1c00c20c g     F .text	0000001a rt_event_get
1c01c744 g     O .bss	00000008 __rt_freq_domains
00000020 g       *ABS*	00000000 _l1_preload_size
1c00010c g       .text	00000000 _init
1c01c77c g       .bss	00000000 _bss_end
1c00ae3c g     F .text	0000006c flash_partition_find_first
1c0104cc  w    O .data	00000010 __rt_padframe_hyper
1c00c006 g     F .text	0000001e __rt_bridge_set_available
1c00f670 g       .text	00000000 __rt_dma_2d
1c00f4f4 g       .text	00000000 __rt_pe_start
1c01c740 g     O .bss	00000004 first_delayed
1c01032c g     O .data	000000ec AT_GraphOperInfosNames
0000038c g     O .data_tiny_fc	00000004 __rt_rtc_init_done
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c00d404 g     F .text	0000004a pi_cluster_send_task_to_cl
1c00cc50 g     F .text	000000ca __rt_pmu_cluster_power_up
1c00156a g     F .text	0000061c S2_Conv2d_16x20x1x3
1b000bd0 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c00f386 g     F .text	0000008e __rt_uart_open
1c00d89a g     F .text	00000022 pi_hyper_write
1c00bdca g     F .text	00000022 __rt_utils_init
1c00d30a g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c009e9a g     F .text	000000e4 __pi_fs_read
1c0104bc  w    O .data	00000010 __rt_padframe_default
1c00e4be g     F .text	0000001a fputc_locked
1c00c504 g     F .text	0000000c pi_cl_l1_free
1c00f414 g     F .text	0000004e rt_uart_close
1c00d554 g     F .text	00000160 pi_hyper_open
1c00c394 g     F .text	0000004c rt_user_free
1c00995e g     F .text	0000002a pi_fs_read
1c0105f0 g     O .data	00000004 quant_model_L2_Memory
1c00f700 g       .init_array	00000000 __CTOR_LIST__
1c00c8ae g     F .text	00000056 __rt_periph_wait_event
1c003a56 g     F .text	00000622 S18_Conv2d_16x16x1x3_Relu
1c00c962 g     F .text	0000004a rt_freq_set_and_get
1c00b992 g     F .text	00000008 semihost_write0
1c00bc3c  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00d136 g     F .text	00000070 __rt_cluster_push_fc_event
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00f4f4 g       .text	00000000 __cluster_text_start
1c00962a g     F .text	00000296 KerParMatAdd_ReLU_SQ8
1c00d882 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c00d860 g     F .text	00000022 pi_hyper_read
1c00c32c g     F .text	00000020 rt_user_alloc_init
1c01c648 g     O .bss	000000ec AT_GraphPerf
00000000 g       *ABS*	00000000 __rt_config
1c00b77e g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c00e2b6 g     F .text	00000020 strncmp
1c01c77c g       .bss	00000000 _l1_preload_start_inL2
1c00bdec g     F .text	00000032 __rt_fc_lock
10000024 g       .l1cluster_g	00000000 __l1_heap_start
1c00c17e g     F .text	00000018 __rt_wait_event_prepare_blocking
1c00bf42 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c00994e g     F .text	00000008 pi_fs_close
10000020 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c00c248 g     F .text	00000024 rt_event_push
1c00c046 g     F .text	00000022 __rt_bridge_clear_notif
1c00ad14 g     F .text	00000104 flash_partition_table_load
1c00910a g     F .text	0000028a KerParConvNxMDxDyStrideSxSy_SQ8
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c010504 g     O .data	000000c0 __hal_debug_struct
1c009900 g     F .text	00000012 pi_fs_conf_init
1c00b84c g     F .text	00000138 MD5_Final
1c00c5fc g     F .text	0000008c __rt_time_init
1c00d518 g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000a0 g       .text	00000000 _entry
1c00ac42 g     F .text	0000005e pi_partition_find_first
1c00c2d0 g     F .text	0000002c __rt_wait_event
1c0105d8 g     O .data	00000004 fft_flag
1c00cd5e g     F .text	000000bc __rt_pmu_init
1c00ba28 g     F .text	0000000a bsp_hyperflash_conf_init
1c0024c0 g     F .text	00000622 S6_Conv2d_16x16x1x3_Relu
1000001c g     O .l1cluster_g	00000004 quant_model_L1_Memory
1c009956 g     F .text	00000008 pi_fs_read_async
1c00bc3e g     F .text	00000050 __rt_handle_illegal_instr
1c00e2ec g     F .text	00000010 memset
1c00d752 g     F .text	00000058 __pi_hyper_copy_aligned
1c0011de g     F .text	0000038c main
1c00ce2c g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c01c73c g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00dea0 g     F .text	0000000a __rt_himax_init
1c00be8a g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00e5b6 g     F .text	00000072 __rt_io_init
1c0104dc  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c008736 g     F .text	00000850 KerConvNxMDxDyStrideSxSy_Border_SQ8
1c0098cc g     F .text	00000002 __flash_conf_init
1c0105cc  w    O .data	00000004 __rt_platform
1c00f744 g       .init_array	00000000 __CTOR_END__
1c010418 g     O .data	00000028 __pi_read_fs_api
1c00d4ec g     F .text	0000002c __pi_hyper_pin_settings
1c00e2a2 g     F .text	00000014 strcmp
1c00ba20 g     F .text	00000008 semihost_exit
1c00f744 g       .fini_array	00000000 __DTOR_LIST__
1c00c156 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00e50e g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00dc5a g     F .text	00000008 __rt_hyper_resume_emu_task
1c00cacc g     F .text	000000e0 SetFllFrequency
1c00ce2e g     F .text	00000002 __rt_flls_constructor
1c00c55e g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c00c2fc g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00f78c g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00f64c g       .text	00000000 __rt_set_slave_stack
1c00c32a g     F .text	00000002 pi_task_push_delayed_us
1c00c4fe g     F .text	00000006 pi_cl_l1_malloc
1c0105c4  w    O .data	00000004 __rt_fc_stack_size
1c00aca0 g     F .text	00000074 flash_partition_table_verify
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
00000358 g     O .data_tiny_fc	00000034 dev_rtc
1c009988 g     F .text	00000008 pi_fs_write_async
1c010440 g     O .data	00000028 __pi_host_fs_api
1c00e4d8 g     F .text	00000030 fputc
1c00dd32 g     F .text	0000000a rt_extern_alloc_deinit
1c0099ba g     F .text	0000000a pi_fs_copy_async
1c000200 g       .text	00000000 __rt_call_external_c_function
1c00be1e g     F .text	00000034 __rt_fc_unlock
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00dd3c g     F .text	00000086 __pi_gpio_handler
1c007598 g     F .text	00000d5c quant_modelCNN
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c00c068 g     F .text	00000042 __rt_bridge_printf_flush
1c00d544 g     F .text	00000010 pi_hyper_conf_init
1c01c610  w    O .bss	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c01c340 g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c00c904 g     F .text	0000005e __rt_periph_init
1c00ac3c g     F .text	00000002 pi_partition_table_free
1c00dece g     F .text	00000012 __rt_spim_init
1c00bfba g     F .text	0000004c __rt_bridge_check_connection
1c00d21e g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c002ae2 g     F .text	0000032e S8_MatAdd_16x1x299
1c00753e g     F .text	0000005a quant_modelCNN_Destruct
1c00bbec g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c00de4c g     F .text	00000054 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c0105d4 g     O .data	00000004 NN_input
1c00ae18 g     F .text	00000024 flash_partition_table_free
1c01c754 g     O .bss	00000028 __rt_fc_cluster_data
1c00e536 g     F .text	00000076 exit
1c00c316 g     F .text	00000014 __rt_event_sched_init
1c000f96 g     F .text	000000b4 .hidden __floatunsisf
1c0105f8 g     O .data	00000020 dense_kernel
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c0002b4 g       .text	00000000 udma_event_handler
1c00d104 g     F .text	00000032 pi_cluster_close
1c00dc62 g     F .text	00000004 __rt_hyper_resume_copy
1c01c60c g     O .bss	00000004 quant_model_L3_Flash
00000354 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c00993e g     F .text	00000008 pi_fs_unmount
1c00ba0a g     F .text	00000016 semihost_seek
1c00bd9a g     F .text	00000030 __rt_cbsys_exec
1c008f86 g     F .text	00000184 KerParConv3x1Stride1x1_SQ8
0000ffdc g       .l1cluster_g	00000000 __l1_heap_size
1c00ca3c g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000b98 g     O .stack	00000004 __rt_debug_config_trace
1c008420 g     F .text	000000b4 KerParSetBiasB32_SQ8
1c01c614  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c01c290 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00e2d6 g     F .text	00000016 strlen
1c00dca6 g     F .text	00000028 rt_padframe_set
1c00b9c6 g     F .text	00000008 semihost_close
1c00d44e g     F .text	00000034 pi_pad_set_function
1c01c74c g     O .bss	00000004 __rt_wakeup_use_fast
1c002194 g     F .text	0000032c S5_MatAdd_16x1x299_Relu
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00e332 g     F .text	0000001a strchr
1c00c0aa g     F .text	00000078 __rt_bridge_req_shutdown
1c00f376 g     F .text	00000010 rt_uart_conf_init
1c00f700 g       .text	00000000 __cluster_text_end
1c00f496 g     F .text	0000005c __rt_uart_init
1c01c79c g       *ABS*	00000000 __l2_end
1c00d2ae g     F .text	0000005c rt_cluster_mount
1c00debc g     F .text	00000012 __rt_rtc_init
1c00f462 g     F .text	00000034 rt_uart_cluster_write
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c00b7b0 g     F .text	0000009c MD5_Update
1b000b9c g     O .stack	00000004 __rt_debug_config
1c00ce30 g     F .text	00000006 __rt_fll_set_freq
1c00bd5c g     F .text	0000003e __rt_cbsys_add
1c00d1a6 g     F .text	0000003c __rt_cluster_new
1c00e34c g     F .text	0000005e __rt_putc_debug_bridge
1c00f700 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c00b99a g     F .text	0000002c semihost_open
1c01061c g     O .data	00003d80 cnn_data
ffffffff g       *ABS*	00000000 pulp__L1FC
1c01c294 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	0504                	addi	s1,sp,640
1c000092:	1c01                	addi	s8,s8,-32

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	43e0f06f          	j	1c00f4f4 <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	0001c297          	auipc	t0,0x1c
1c0000be:	28628293          	addi	t0,t0,646 # 1c01c340 <_edata>
  la      t1, _bss_end
1c0000c2:	0001c317          	auipc	t1,0x1c
1c0000c6:	6ba30313          	addi	t1,t1,1722 # 1c01c77c <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	00010517          	auipc	a0,0x10
1c0000d8:	4f050513          	addi	a0,a0,1264 # 1c0105c4 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	2ba10113          	addi	sp,sp,698 # 1b000398 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	1750b0ef          	jal	ra,1c00ba5c <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00001397          	auipc	t2,0x1
1c0000f8:	0ea38393          	addi	t2,t2,234 # 1c0011de <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	2c30b0ef          	jal	ra,1c00bbc4 <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	42e0e0ef          	jal	ra,1c00e536 <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	0000c617          	auipc	a2,0xc
1c000154:	df260613          	addi	a2,a2,-526 # 1c00bf42 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	0001c497          	auipc	s1,0x1c
1c00018e:	5ca48493          	addi	s1,s1,1482 # 1c01c754 <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	0001c497          	auipc	s1,0x1c
1c0001f0:	56848493          	addi	s1,s1,1384 # 1c01c754 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	0000c517          	auipc	a0,0xc
1c000252:	9f050513          	addi	a0,a0,-1552 # 1c00bc3e <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	1740006f          	j	1c0005da <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	edc5a583          	lw	a1,-292(a1) # 390 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	0000d617          	auipc	a2,0xd
1c000530:	72e60613          	addi	a2,a2,1838 # 1c00dc5a <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	0000d617          	auipc	a2,0xd
1c000550:	71660613          	addi	a2,a2,1814 # 1c00dc62 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	d9e50513          	addi	a0,a0,-610 # 354 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005dc:	0000d617          	auipc	a2,0xd
1c0005e0:	76060613          	addi	a2,a2,1888 # 1c00dd3c <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	00c48493          	addi	s1,s1,12 # 1c0005f0 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c0005f0:	eb5ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005f4 <__udivdi3>:
1c0005f4:	87b2                	mv	a5,a2
1c0005f6:	8736                	mv	a4,a3
1c0005f8:	88aa                	mv	a7,a0
1c0005fa:	882e                	mv	a6,a1
1c0005fc:	1e069d63          	bnez	a3,1c0007f6 <__udivdi3+0x202>
1c000600:	1c00f337          	lui	t1,0x1c00f
1c000604:	78c30313          	addi	t1,t1,1932 # 1c00f78c <__clz_tab>
1c000608:	0ac5fd63          	bleu	a2,a1,1c0006c2 <__udivdi3+0xce>
1c00060c:	6741                	lui	a4,0x10
1c00060e:	0ae67363          	bleu	a4,a2,1c0006b4 <__udivdi3+0xc0>
1c000612:	0ff00693          	li	a3,255
1c000616:	00c6b6b3          	sltu	a3,a3,a2
1c00061a:	068e                	slli	a3,a3,0x3
1c00061c:	00d65733          	srl	a4,a2,a3
1c000620:	933a                	add	t1,t1,a4
1c000622:	00034703          	lbu	a4,0(t1)
1c000626:	02000313          	li	t1,32
1c00062a:	96ba                	add	a3,a3,a4
1c00062c:	40d30333          	sub	t1,t1,a3
1c000630:	00030c63          	beqz	t1,1c000648 <__udivdi3+0x54>
1c000634:	00659733          	sll	a4,a1,t1
1c000638:	00d556b3          	srl	a3,a0,a3
1c00063c:	006617b3          	sll	a5,a2,t1
1c000640:	00e6e833          	or	a6,a3,a4
1c000644:	006518b3          	sll	a7,a0,t1
1c000648:	0107d513          	srli	a0,a5,0x10
1c00064c:	02a85733          	divu	a4,a6,a0
1c000650:	1007d5b3          	p.exthz	a1,a5
1c000654:	0108d693          	srli	a3,a7,0x10
1c000658:	02a87633          	remu	a2,a6,a0
1c00065c:	02e58833          	mul	a6,a1,a4
1c000660:	0642                	slli	a2,a2,0x10
1c000662:	8ed1                	or	a3,a3,a2
1c000664:	863a                	mv	a2,a4
1c000666:	0106fc63          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c00066a:	96be                	add	a3,a3,a5
1c00066c:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x23>
1c000670:	00f6e763          	bltu	a3,a5,1c00067e <__udivdi3+0x8a>
1c000674:	0106f563          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c000678:	ffe70613          	addi	a2,a4,-2
1c00067c:	96be                	add	a3,a3,a5
1c00067e:	410686b3          	sub	a3,a3,a6
1c000682:	02a6f833          	remu	a6,a3,a0
1c000686:	02a6d6b3          	divu	a3,a3,a0
1c00068a:	df0828b3          	p.insert	a7,a6,15,16
1c00068e:	02d58733          	mul	a4,a1,a3
1c000692:	8536                	mv	a0,a3
1c000694:	00e8fb63          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c000698:	98be                	add	a7,a7,a5
1c00069a:	fff68513          	addi	a0,a3,-1
1c00069e:	00f8e663          	bltu	a7,a5,1c0006aa <__udivdi3+0xb6>
1c0006a2:	00e8f463          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c0006a6:	ffe68513          	addi	a0,a3,-2
1c0006aa:	01061793          	slli	a5,a2,0x10
1c0006ae:	8fc9                	or	a5,a5,a0
1c0006b0:	4801                	li	a6,0
1c0006b2:	a06d                	j	1c00075c <__udivdi3+0x168>
1c0006b4:	01000737          	lui	a4,0x1000
1c0006b8:	46c1                	li	a3,16
1c0006ba:	f6e661e3          	bltu	a2,a4,1c00061c <__udivdi3+0x28>
1c0006be:	46e1                	li	a3,24
1c0006c0:	bfb1                	j	1c00061c <__udivdi3+0x28>
1c0006c2:	e601                	bnez	a2,1c0006ca <__udivdi3+0xd6>
1c0006c4:	4685                	li	a3,1
1c0006c6:	02c6d7b3          	divu	a5,a3,a2
1c0006ca:	66c1                	lui	a3,0x10
1c0006cc:	08d7fb63          	bleu	a3,a5,1c000762 <__udivdi3+0x16e>
1c0006d0:	0ff00693          	li	a3,255
1c0006d4:	00f6f363          	bleu	a5,a3,1c0006da <__udivdi3+0xe6>
1c0006d8:	4721                	li	a4,8
1c0006da:	00e7d6b3          	srl	a3,a5,a4
1c0006de:	9336                	add	t1,t1,a3
1c0006e0:	00034683          	lbu	a3,0(t1)
1c0006e4:	02000613          	li	a2,32
1c0006e8:	96ba                	add	a3,a3,a4
1c0006ea:	8e15                	sub	a2,a2,a3
1c0006ec:	e251                	bnez	a2,1c000770 <__udivdi3+0x17c>
1c0006ee:	40f58733          	sub	a4,a1,a5
1c0006f2:	4805                	li	a6,1
1c0006f4:	0107d513          	srli	a0,a5,0x10
1c0006f8:	1007d5b3          	p.exthz	a1,a5
1c0006fc:	0108d693          	srli	a3,a7,0x10
1c000700:	02a77633          	remu	a2,a4,a0
1c000704:	02a75733          	divu	a4,a4,a0
1c000708:	0642                	slli	a2,a2,0x10
1c00070a:	8ed1                	or	a3,a3,a2
1c00070c:	02e58333          	mul	t1,a1,a4
1c000710:	863a                	mv	a2,a4
1c000712:	0066fc63          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000716:	96be                	add	a3,a3,a5
1c000718:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c00071c:	00f6e763          	bltu	a3,a5,1c00072a <__udivdi3+0x136>
1c000720:	0066f563          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000724:	ffe70613          	addi	a2,a4,-2
1c000728:	96be                	add	a3,a3,a5
1c00072a:	406686b3          	sub	a3,a3,t1
1c00072e:	02a6f333          	remu	t1,a3,a0
1c000732:	02a6d6b3          	divu	a3,a3,a0
1c000736:	df0328b3          	p.insert	a7,t1,15,16
1c00073a:	02d58733          	mul	a4,a1,a3
1c00073e:	8536                	mv	a0,a3
1c000740:	00e8fb63          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000744:	98be                	add	a7,a7,a5
1c000746:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x23>
1c00074a:	00f8e663          	bltu	a7,a5,1c000756 <__udivdi3+0x162>
1c00074e:	00e8f463          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000752:	ffe68513          	addi	a0,a3,-2
1c000756:	01061793          	slli	a5,a2,0x10
1c00075a:	8fc9                	or	a5,a5,a0
1c00075c:	853e                	mv	a0,a5
1c00075e:	85c2                	mv	a1,a6
1c000760:	8082                	ret
1c000762:	010006b7          	lui	a3,0x1000
1c000766:	4741                	li	a4,16
1c000768:	f6d7e9e3          	bltu	a5,a3,1c0006da <__udivdi3+0xe6>
1c00076c:	4761                	li	a4,24
1c00076e:	b7b5                	j	1c0006da <__udivdi3+0xe6>
1c000770:	00c797b3          	sll	a5,a5,a2
1c000774:	00d5d333          	srl	t1,a1,a3
1c000778:	0107de13          	srli	t3,a5,0x10
1c00077c:	00c59733          	sll	a4,a1,a2
1c000780:	00c518b3          	sll	a7,a0,a2
1c000784:	00d555b3          	srl	a1,a0,a3
1c000788:	03c35533          	divu	a0,t1,t3
1c00078c:	8dd9                	or	a1,a1,a4
1c00078e:	1007d733          	p.exthz	a4,a5
1c000792:	0105d693          	srli	a3,a1,0x10
1c000796:	03c37633          	remu	a2,t1,t3
1c00079a:	882a                	mv	a6,a0
1c00079c:	02a70333          	mul	t1,a4,a0
1c0007a0:	0642                	slli	a2,a2,0x10
1c0007a2:	8ed1                	or	a3,a3,a2
1c0007a4:	0066fc63          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007a8:	96be                	add	a3,a3,a5
1c0007aa:	fff50813          	addi	a6,a0,-1
1c0007ae:	00f6e763          	bltu	a3,a5,1c0007bc <__udivdi3+0x1c8>
1c0007b2:	0066f563          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007b6:	ffe50813          	addi	a6,a0,-2
1c0007ba:	96be                	add	a3,a3,a5
1c0007bc:	406686b3          	sub	a3,a3,t1
1c0007c0:	03c6f633          	remu	a2,a3,t3
1c0007c4:	03c6d6b3          	divu	a3,a3,t3
1c0007c8:	df0625b3          	p.insert	a1,a2,15,16
1c0007cc:	02d70733          	mul	a4,a4,a3
1c0007d0:	8636                	mv	a2,a3
1c0007d2:	00e5fc63          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007d6:	95be                	add	a1,a1,a5
1c0007d8:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007dc:	00f5e763          	bltu	a1,a5,1c0007ea <__udivdi3+0x1f6>
1c0007e0:	00e5f563          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007e4:	ffe68613          	addi	a2,a3,-2
1c0007e8:	95be                	add	a1,a1,a5
1c0007ea:	0842                	slli	a6,a6,0x10
1c0007ec:	40e58733          	sub	a4,a1,a4
1c0007f0:	00c86833          	or	a6,a6,a2
1c0007f4:	b701                	j	1c0006f4 <__udivdi3+0x100>
1c0007f6:	12d5ea63          	bltu	a1,a3,1c00092a <__udivdi3+0x336>
1c0007fa:	67c1                	lui	a5,0x10
1c0007fc:	02f6fd63          	bleu	a5,a3,1c000836 <__udivdi3+0x242>
1c000800:	0ff00793          	li	a5,255
1c000804:	00d7b8b3          	sltu	a7,a5,a3
1c000808:	088e                	slli	a7,a7,0x3
1c00080a:	1c00f737          	lui	a4,0x1c00f
1c00080e:	0116d7b3          	srl	a5,a3,a7
1c000812:	78c70713          	addi	a4,a4,1932 # 1c00f78c <__clz_tab>
1c000816:	97ba                	add	a5,a5,a4
1c000818:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c00081c:	02000813          	li	a6,32
1c000820:	97c6                	add	a5,a5,a7
1c000822:	40f80833          	sub	a6,a6,a5
1c000826:	00081f63          	bnez	a6,1c000844 <__udivdi3+0x250>
1c00082a:	4785                	li	a5,1
1c00082c:	f2b6e8e3          	bltu	a3,a1,1c00075c <__udivdi3+0x168>
1c000830:	04a637b3          	p.sletu	a5,a2,a0
1c000834:	b725                	j	1c00075c <__udivdi3+0x168>
1c000836:	010007b7          	lui	a5,0x1000
1c00083a:	48c1                	li	a7,16
1c00083c:	fcf6e7e3          	bltu	a3,a5,1c00080a <__udivdi3+0x216>
1c000840:	48e1                	li	a7,24
1c000842:	b7e1                	j	1c00080a <__udivdi3+0x216>
1c000844:	00f658b3          	srl	a7,a2,a5
1c000848:	010696b3          	sll	a3,a3,a6
1c00084c:	00d8e6b3          	or	a3,a7,a3
1c000850:	00f5d333          	srl	t1,a1,a5
1c000854:	0106de13          	srli	t3,a3,0x10
1c000858:	00f55733          	srl	a4,a0,a5
1c00085c:	03c377b3          	remu	a5,t1,t3
1c000860:	1006d8b3          	p.exthz	a7,a3
1c000864:	010595b3          	sll	a1,a1,a6
1c000868:	8f4d                	or	a4,a4,a1
1c00086a:	01075593          	srli	a1,a4,0x10
1c00086e:	01061633          	sll	a2,a2,a6
1c000872:	03c35333          	divu	t1,t1,t3
1c000876:	07c2                	slli	a5,a5,0x10
1c000878:	8ddd                	or	a1,a1,a5
1c00087a:	02688eb3          	mul	t4,a7,t1
1c00087e:	879a                	mv	a5,t1
1c000880:	01d5fc63          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000884:	95b6                	add	a1,a1,a3
1c000886:	fff30793          	addi	a5,t1,-1
1c00088a:	00d5e763          	bltu	a1,a3,1c000898 <__udivdi3+0x2a4>
1c00088e:	01d5f563          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000892:	ffe30793          	addi	a5,t1,-2
1c000896:	95b6                	add	a1,a1,a3
1c000898:	41d585b3          	sub	a1,a1,t4
1c00089c:	03c5f333          	remu	t1,a1,t3
1c0008a0:	03c5d5b3          	divu	a1,a1,t3
1c0008a4:	df032733          	p.insert	a4,t1,15,16
1c0008a8:	02b888b3          	mul	a7,a7,a1
1c0008ac:	832e                	mv	t1,a1
1c0008ae:	01177c63          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008b2:	9736                	add	a4,a4,a3
1c0008b4:	fff58313          	addi	t1,a1,-1
1c0008b8:	00d76763          	bltu	a4,a3,1c0008c6 <__udivdi3+0x2d2>
1c0008bc:	01177563          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008c0:	ffe58313          	addi	t1,a1,-2
1c0008c4:	9736                	add	a4,a4,a3
1c0008c6:	07c2                	slli	a5,a5,0x10
1c0008c8:	6e41                	lui	t3,0x10
1c0008ca:	0067e7b3          	or	a5,a5,t1
1c0008ce:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x23>
1c0008d2:	00b7f6b3          	and	a3,a5,a1
1c0008d6:	41170733          	sub	a4,a4,a7
1c0008da:	8df1                	and	a1,a1,a2
1c0008dc:	0107d893          	srli	a7,a5,0x10
1c0008e0:	02b68333          	mul	t1,a3,a1
1c0008e4:	8241                	srli	a2,a2,0x10
1c0008e6:	02b885b3          	mul	a1,a7,a1
1c0008ea:	8eae                	mv	t4,a1
1c0008ec:	42c68eb3          	p.mac	t4,a3,a2
1c0008f0:	01035693          	srli	a3,t1,0x10
1c0008f4:	96f6                	add	a3,a3,t4
1c0008f6:	02c888b3          	mul	a7,a7,a2
1c0008fa:	00b6f363          	bleu	a1,a3,1c000900 <__udivdi3+0x30c>
1c0008fe:	98f2                	add	a7,a7,t3
1c000900:	0106d613          	srli	a2,a3,0x10
1c000904:	98b2                	add	a7,a7,a2
1c000906:	03176063          	bltu	a4,a7,1c000926 <__udivdi3+0x332>
1c00090a:	db1713e3          	bne	a4,a7,1c0006b0 <__udivdi3+0xbc>
1c00090e:	6741                	lui	a4,0x10
1c000910:	177d                	addi	a4,a4,-1
1c000912:	8ef9                	and	a3,a3,a4
1c000914:	06c2                	slli	a3,a3,0x10
1c000916:	00e37333          	and	t1,t1,a4
1c00091a:	01051533          	sll	a0,a0,a6
1c00091e:	969a                	add	a3,a3,t1
1c000920:	4801                	li	a6,0
1c000922:	e2d57de3          	bleu	a3,a0,1c00075c <__udivdi3+0x168>
1c000926:	17fd                	addi	a5,a5,-1
1c000928:	b361                	j	1c0006b0 <__udivdi3+0xbc>
1c00092a:	4801                	li	a6,0
1c00092c:	4781                	li	a5,0
1c00092e:	b53d                	j	1c00075c <__udivdi3+0x168>

1c000930 <__umoddi3>:
1c000930:	88b2                	mv	a7,a2
1c000932:	8736                	mv	a4,a3
1c000934:	87aa                	mv	a5,a0
1c000936:	882e                	mv	a6,a1
1c000938:	1a069963          	bnez	a3,1c000aea <__umoddi3+0x1ba>
1c00093c:	1c00f6b7          	lui	a3,0x1c00f
1c000940:	78c68693          	addi	a3,a3,1932 # 1c00f78c <__clz_tab>
1c000944:	0ac5f463          	bleu	a2,a1,1c0009ec <__umoddi3+0xbc>
1c000948:	6341                	lui	t1,0x10
1c00094a:	08667a63          	bleu	t1,a2,1c0009de <__umoddi3+0xae>
1c00094e:	0ff00313          	li	t1,255
1c000952:	00c37363          	bleu	a2,t1,1c000958 <__umoddi3+0x28>
1c000956:	4721                	li	a4,8
1c000958:	00e65333          	srl	t1,a2,a4
1c00095c:	969a                	add	a3,a3,t1
1c00095e:	0006c683          	lbu	a3,0(a3)
1c000962:	02000313          	li	t1,32
1c000966:	9736                	add	a4,a4,a3
1c000968:	40e30333          	sub	t1,t1,a4
1c00096c:	00030c63          	beqz	t1,1c000984 <__umoddi3+0x54>
1c000970:	006595b3          	sll	a1,a1,t1
1c000974:	00e55733          	srl	a4,a0,a4
1c000978:	006618b3          	sll	a7,a2,t1
1c00097c:	00b76833          	or	a6,a4,a1
1c000980:	006517b3          	sll	a5,a0,t1
1c000984:	0108d613          	srli	a2,a7,0x10
1c000988:	02c87733          	remu	a4,a6,a2
1c00098c:	1008d533          	p.exthz	a0,a7
1c000990:	0107d693          	srli	a3,a5,0x10
1c000994:	02c85833          	divu	a6,a6,a2
1c000998:	0742                	slli	a4,a4,0x10
1c00099a:	8ed9                	or	a3,a3,a4
1c00099c:	03050833          	mul	a6,a0,a6
1c0009a0:	0106f863          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009a4:	96c6                	add	a3,a3,a7
1c0009a6:	0116e563          	bltu	a3,a7,1c0009b0 <__umoddi3+0x80>
1c0009aa:	0106f363          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009ae:	96c6                	add	a3,a3,a7
1c0009b0:	410686b3          	sub	a3,a3,a6
1c0009b4:	02c6f733          	remu	a4,a3,a2
1c0009b8:	02c6d6b3          	divu	a3,a3,a2
1c0009bc:	df0727b3          	p.insert	a5,a4,15,16
1c0009c0:	02d506b3          	mul	a3,a0,a3
1c0009c4:	00d7f863          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009c8:	97c6                	add	a5,a5,a7
1c0009ca:	0117e563          	bltu	a5,a7,1c0009d4 <__umoddi3+0xa4>
1c0009ce:	00d7f363          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009d2:	97c6                	add	a5,a5,a7
1c0009d4:	8f95                	sub	a5,a5,a3
1c0009d6:	0067d533          	srl	a0,a5,t1
1c0009da:	4581                	li	a1,0
1c0009dc:	8082                	ret
1c0009de:	01000337          	lui	t1,0x1000
1c0009e2:	4741                	li	a4,16
1c0009e4:	f6666ae3          	bltu	a2,t1,1c000958 <__umoddi3+0x28>
1c0009e8:	4761                	li	a4,24
1c0009ea:	b7bd                	j	1c000958 <__umoddi3+0x28>
1c0009ec:	e601                	bnez	a2,1c0009f4 <__umoddi3+0xc4>
1c0009ee:	4605                	li	a2,1
1c0009f0:	031658b3          	divu	a7,a2,a7
1c0009f4:	6641                	lui	a2,0x10
1c0009f6:	06c8ff63          	bleu	a2,a7,1c000a74 <__umoddi3+0x144>
1c0009fa:	0ff00613          	li	a2,255
1c0009fe:	01167363          	bleu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a02:	4721                	li	a4,8
1c000a04:	00e8d633          	srl	a2,a7,a4
1c000a08:	96b2                	add	a3,a3,a2
1c000a0a:	0006c603          	lbu	a2,0(a3)
1c000a0e:	02000313          	li	t1,32
1c000a12:	963a                	add	a2,a2,a4
1c000a14:	40c30333          	sub	t1,t1,a2
1c000a18:	06031563          	bnez	t1,1c000a82 <__umoddi3+0x152>
1c000a1c:	411585b3          	sub	a1,a1,a7
1c000a20:	0108d713          	srli	a4,a7,0x10
1c000a24:	1008d533          	p.exthz	a0,a7
1c000a28:	0107d613          	srli	a2,a5,0x10
1c000a2c:	02e5f6b3          	remu	a3,a1,a4
1c000a30:	02e5d5b3          	divu	a1,a1,a4
1c000a34:	06c2                	slli	a3,a3,0x10
1c000a36:	8ed1                	or	a3,a3,a2
1c000a38:	02b505b3          	mul	a1,a0,a1
1c000a3c:	00b6f863          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a40:	96c6                	add	a3,a3,a7
1c000a42:	0116e563          	bltu	a3,a7,1c000a4c <__umoddi3+0x11c>
1c000a46:	00b6f363          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a4a:	96c6                	add	a3,a3,a7
1c000a4c:	40b685b3          	sub	a1,a3,a1
1c000a50:	02e5f6b3          	remu	a3,a1,a4
1c000a54:	02e5d5b3          	divu	a1,a1,a4
1c000a58:	df06a7b3          	p.insert	a5,a3,15,16
1c000a5c:	02b505b3          	mul	a1,a0,a1
1c000a60:	00b7f863          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a64:	97c6                	add	a5,a5,a7
1c000a66:	0117e563          	bltu	a5,a7,1c000a70 <__umoddi3+0x140>
1c000a6a:	00b7f363          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a6e:	97c6                	add	a5,a5,a7
1c000a70:	8f8d                	sub	a5,a5,a1
1c000a72:	b795                	j	1c0009d6 <__umoddi3+0xa6>
1c000a74:	01000637          	lui	a2,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f8c8e5e3          	bltu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a7e:	4761                	li	a4,24
1c000a80:	b751                	j	1c000a04 <__umoddi3+0xd4>
1c000a82:	006898b3          	sll	a7,a7,t1
1c000a86:	00c5d733          	srl	a4,a1,a2
1c000a8a:	006517b3          	sll	a5,a0,t1
1c000a8e:	00c55633          	srl	a2,a0,a2
1c000a92:	006595b3          	sll	a1,a1,t1
1c000a96:	0108d513          	srli	a0,a7,0x10
1c000a9a:	8dd1                	or	a1,a1,a2
1c000a9c:	02a77633          	remu	a2,a4,a0
1c000aa0:	1008d833          	p.exthz	a6,a7
1c000aa4:	0105d693          	srli	a3,a1,0x10
1c000aa8:	02a75733          	divu	a4,a4,a0
1c000aac:	0642                	slli	a2,a2,0x10
1c000aae:	8ed1                	or	a3,a3,a2
1c000ab0:	02e80733          	mul	a4,a6,a4
1c000ab4:	00e6f863          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ab8:	96c6                	add	a3,a3,a7
1c000aba:	0116e563          	bltu	a3,a7,1c000ac4 <__umoddi3+0x194>
1c000abe:	00e6f363          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ac2:	96c6                	add	a3,a3,a7
1c000ac4:	8e99                	sub	a3,a3,a4
1c000ac6:	02a6f733          	remu	a4,a3,a0
1c000aca:	02a6d6b3          	divu	a3,a3,a0
1c000ace:	df0725b3          	p.insert	a1,a4,15,16
1c000ad2:	02d806b3          	mul	a3,a6,a3
1c000ad6:	00d5f863          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ada:	95c6                	add	a1,a1,a7
1c000adc:	0115e563          	bltu	a1,a7,1c000ae6 <__umoddi3+0x1b6>
1c000ae0:	00d5f363          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ae4:	95c6                	add	a1,a1,a7
1c000ae6:	8d95                	sub	a1,a1,a3
1c000ae8:	bf25                	j	1c000a20 <__umoddi3+0xf0>
1c000aea:	eed5e9e3          	bltu	a1,a3,1c0009dc <__umoddi3+0xac>
1c000aee:	6741                	lui	a4,0x10
1c000af0:	04e6f563          	bleu	a4,a3,1c000b3a <__umoddi3+0x20a>
1c000af4:	0ff00e93          	li	t4,255
1c000af8:	00deb733          	sltu	a4,t4,a3
1c000afc:	070e                	slli	a4,a4,0x3
1c000afe:	1c00f337          	lui	t1,0x1c00f
1c000b02:	00e6d8b3          	srl	a7,a3,a4
1c000b06:	78c30313          	addi	t1,t1,1932 # 1c00f78c <__clz_tab>
1c000b0a:	989a                	add	a7,a7,t1
1c000b0c:	0008ce83          	lbu	t4,0(a7)
1c000b10:	02000e13          	li	t3,32
1c000b14:	9eba                	add	t4,t4,a4
1c000b16:	41de0e33          	sub	t3,t3,t4
1c000b1a:	020e1763          	bnez	t3,1c000b48 <__umoddi3+0x218>
1c000b1e:	00b6e463          	bltu	a3,a1,1c000b26 <__umoddi3+0x1f6>
1c000b22:	00c56963          	bltu	a0,a2,1c000b34 <__umoddi3+0x204>
1c000b26:	40c507b3          	sub	a5,a0,a2
1c000b2a:	8d95                	sub	a1,a1,a3
1c000b2c:	00f53533          	sltu	a0,a0,a5
1c000b30:	40a58833          	sub	a6,a1,a0
1c000b34:	853e                	mv	a0,a5
1c000b36:	85c2                	mv	a1,a6
1c000b38:	b555                	j	1c0009dc <__umoddi3+0xac>
1c000b3a:	010008b7          	lui	a7,0x1000
1c000b3e:	4741                	li	a4,16
1c000b40:	fb16efe3          	bltu	a3,a7,1c000afe <__umoddi3+0x1ce>
1c000b44:	4761                	li	a4,24
1c000b46:	bf65                	j	1c000afe <__umoddi3+0x1ce>
1c000b48:	01d65733          	srl	a4,a2,t4
1c000b4c:	01c696b3          	sll	a3,a3,t3
1c000b50:	8ed9                	or	a3,a3,a4
1c000b52:	01d5d7b3          	srl	a5,a1,t4
1c000b56:	0106d813          	srli	a6,a3,0x10
1c000b5a:	0307f333          	remu	t1,a5,a6
1c000b5e:	1006d733          	p.exthz	a4,a3
1c000b62:	01d558b3          	srl	a7,a0,t4
1c000b66:	01c595b3          	sll	a1,a1,t3
1c000b6a:	00b8e5b3          	or	a1,a7,a1
1c000b6e:	0105d893          	srli	a7,a1,0x10
1c000b72:	01c61633          	sll	a2,a2,t3
1c000b76:	01c51533          	sll	a0,a0,t3
1c000b7a:	0307d7b3          	divu	a5,a5,a6
1c000b7e:	0342                	slli	t1,t1,0x10
1c000b80:	011368b3          	or	a7,t1,a7
1c000b84:	02f70f33          	mul	t5,a4,a5
1c000b88:	833e                	mv	t1,a5
1c000b8a:	01e8fc63          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b8e:	98b6                	add	a7,a7,a3
1c000b90:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000b94:	00d8e763          	bltu	a7,a3,1c000ba2 <__umoddi3+0x272>
1c000b98:	01e8f563          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b9c:	ffe78313          	addi	t1,a5,-2
1c000ba0:	98b6                	add	a7,a7,a3
1c000ba2:	41e888b3          	sub	a7,a7,t5
1c000ba6:	0308f7b3          	remu	a5,a7,a6
1c000baa:	0308d8b3          	divu	a7,a7,a6
1c000bae:	df07a5b3          	p.insert	a1,a5,15,16
1c000bb2:	03170733          	mul	a4,a4,a7
1c000bb6:	87c6                	mv	a5,a7
1c000bb8:	00e5fc63          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bbc:	95b6                	add	a1,a1,a3
1c000bbe:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bc2:	00d5e763          	bltu	a1,a3,1c000bd0 <__umoddi3+0x2a0>
1c000bc6:	00e5f563          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bca:	ffe88793          	addi	a5,a7,-2
1c000bce:	95b6                	add	a1,a1,a3
1c000bd0:	0342                	slli	t1,t1,0x10
1c000bd2:	6f41                	lui	t5,0x10
1c000bd4:	00f36333          	or	t1,t1,a5
1c000bd8:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x23>
1c000bdc:	00f37833          	and	a6,t1,a5
1c000be0:	01035313          	srli	t1,t1,0x10
1c000be4:	8ff1                	and	a5,a5,a2
1c000be6:	02f808b3          	mul	a7,a6,a5
1c000bea:	8d99                	sub	a1,a1,a4
1c000bec:	01065713          	srli	a4,a2,0x10
1c000bf0:	02f307b3          	mul	a5,t1,a5
1c000bf4:	8fbe                	mv	t6,a5
1c000bf6:	42e80fb3          	p.mac	t6,a6,a4
1c000bfa:	0108d813          	srli	a6,a7,0x10
1c000bfe:	987e                	add	a6,a6,t6
1c000c00:	02e30333          	mul	t1,t1,a4
1c000c04:	00f87363          	bleu	a5,a6,1c000c0a <__umoddi3+0x2da>
1c000c08:	937a                	add	t1,t1,t5
1c000c0a:	01085713          	srli	a4,a6,0x10
1c000c0e:	933a                	add	t1,t1,a4
1c000c10:	6741                	lui	a4,0x10
1c000c12:	177d                	addi	a4,a4,-1
1c000c14:	00e87833          	and	a6,a6,a4
1c000c18:	0842                	slli	a6,a6,0x10
1c000c1a:	00e8f733          	and	a4,a7,a4
1c000c1e:	9742                	add	a4,a4,a6
1c000c20:	0065e663          	bltu	a1,t1,1c000c2c <__umoddi3+0x2fc>
1c000c24:	00659d63          	bne	a1,t1,1c000c3e <__umoddi3+0x30e>
1c000c28:	00e57b63          	bleu	a4,a0,1c000c3e <__umoddi3+0x30e>
1c000c2c:	40c70633          	sub	a2,a4,a2
1c000c30:	00c73733          	sltu	a4,a4,a2
1c000c34:	40d30333          	sub	t1,t1,a3
1c000c38:	40e30333          	sub	t1,t1,a4
1c000c3c:	8732                	mv	a4,a2
1c000c3e:	40e50733          	sub	a4,a0,a4
1c000c42:	00e53533          	sltu	a0,a0,a4
1c000c46:	406585b3          	sub	a1,a1,t1
1c000c4a:	8d89                	sub	a1,a1,a0
1c000c4c:	01d597b3          	sll	a5,a1,t4
1c000c50:	01c75733          	srl	a4,a4,t3
1c000c54:	00e7e533          	or	a0,a5,a4
1c000c58:	01c5d5b3          	srl	a1,a1,t3
1c000c5c:	b341                	j	1c0009dc <__umoddi3+0xac>

1c000c5e <__divsf3>:
1c000c5e:	00202e73          	frrm	t3
1c000c62:	cf7516b3          	p.extractu	a3,a0,7,23
1c000c66:	ec0518b3          	p.extractu	a7,a0,22,0
1c000c6a:	817d                	srli	a0,a0,0x1f
1c000c6c:	ce89                	beqz	a3,1c000c86 <__divsf3+0x28>
1c000c6e:	0ff00793          	li	a5,255
1c000c72:	02f68963          	beq	a3,a5,1c000ca4 <__divsf3+0x46>
1c000c76:	088e                	slli	a7,a7,0x3
1c000c78:	c1a8c8b3          	p.bset	a7,a7,0,26
1c000c7c:	f8168693          	addi	a3,a3,-127
1c000c80:	4f01                	li	t5,0
1c000c82:	4801                	li	a6,0
1c000c84:	a815                	j	1c000cb8 <__divsf3+0x5a>
1c000c86:	06088c63          	beqz	a7,1c000cfe <__divsf3+0xa0>
1c000c8a:	10089733          	p.fl1	a4,a7
1c000c8e:	47fd                	li	a5,31
1c000c90:	40e78733          	sub	a4,a5,a4
1c000c94:	ffb70793          	addi	a5,a4,-5 # fffb <__l1_heap_size+0x1f>
1c000c98:	f8a00693          	li	a3,-118
1c000c9c:	00f898b3          	sll	a7,a7,a5
1c000ca0:	8e99                	sub	a3,a3,a4
1c000ca2:	bff9                	j	1c000c80 <__divsf3+0x22>
1c000ca4:	06088063          	beqz	a7,1c000d04 <__divsf3+0xa6>
1c000ca8:	00989693          	slli	a3,a7,0x9
1c000cac:	0606c063          	bltz	a3,1c000d0c <__divsf3+0xae>
1c000cb0:	0ff00693          	li	a3,255
1c000cb4:	4f0d                	li	t5,3
1c000cb6:	4841                	li	a6,16
1c000cb8:	cf759733          	p.extractu	a4,a1,7,23
1c000cbc:	ec0597b3          	p.extractu	a5,a1,22,0
1c000cc0:	81fd                	srli	a1,a1,0x1f
1c000cc2:	cb29                	beqz	a4,1c000d14 <__divsf3+0xb6>
1c000cc4:	0ff00613          	li	a2,255
1c000cc8:	06c70463          	beq	a4,a2,1c000d30 <__divsf3+0xd2>
1c000ccc:	078e                	slli	a5,a5,0x3
1c000cce:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000cd2:	f8170713          	addi	a4,a4,-127
1c000cd6:	4601                	li	a2,0
1c000cd8:	40e68333          	sub	t1,a3,a4
1c000cdc:	002f1713          	slli	a4,t5,0x2
1c000ce0:	8f51                	or	a4,a4,a2
1c000ce2:	177d                	addi	a4,a4,-1
1c000ce4:	46b9                	li	a3,14
1c000ce6:	00b54eb3          	xor	t4,a0,a1
1c000cea:	06e6e863          	bltu	a3,a4,1c000d5a <__divsf3+0xfc>
1c000cee:	1c00f6b7          	lui	a3,0x1c00f
1c000cf2:	070a                	slli	a4,a4,0x2
1c000cf4:	75068693          	addi	a3,a3,1872 # 1c00f750 <__DTOR_END__>
1c000cf8:	20e6f703          	p.lw	a4,a4(a3)
1c000cfc:	8702                	jr	a4
1c000cfe:	4681                	li	a3,0
1c000d00:	4f05                	li	t5,1
1c000d02:	b741                	j	1c000c82 <__divsf3+0x24>
1c000d04:	0ff00693          	li	a3,255
1c000d08:	4f09                	li	t5,2
1c000d0a:	bfa5                	j	1c000c82 <__divsf3+0x24>
1c000d0c:	0ff00693          	li	a3,255
1c000d10:	4f0d                	li	t5,3
1c000d12:	bf85                	j	1c000c82 <__divsf3+0x24>
1c000d14:	cb85                	beqz	a5,1c000d44 <__divsf3+0xe6>
1c000d16:	10079633          	p.fl1	a2,a5
1c000d1a:	477d                	li	a4,31
1c000d1c:	40c70633          	sub	a2,a4,a2
1c000d20:	ffb60713          	addi	a4,a2,-5 # fffffb <__L2+0xf7fffb>
1c000d24:	00e797b3          	sll	a5,a5,a4
1c000d28:	f8a00713          	li	a4,-118
1c000d2c:	8f11                	sub	a4,a4,a2
1c000d2e:	b765                	j	1c000cd6 <__divsf3+0x78>
1c000d30:	cf89                	beqz	a5,1c000d4a <__divsf3+0xec>
1c000d32:	00979713          	slli	a4,a5,0x9
1c000d36:	00074e63          	bltz	a4,1c000d52 <__divsf3+0xf4>
1c000d3a:	0ff00713          	li	a4,255
1c000d3e:	460d                	li	a2,3
1c000d40:	4841                	li	a6,16
1c000d42:	bf59                	j	1c000cd8 <__divsf3+0x7a>
1c000d44:	4701                	li	a4,0
1c000d46:	4605                	li	a2,1
1c000d48:	bf41                	j	1c000cd8 <__divsf3+0x7a>
1c000d4a:	0ff00713          	li	a4,255
1c000d4e:	4609                	li	a2,2
1c000d50:	b761                	j	1c000cd8 <__divsf3+0x7a>
1c000d52:	0ff00713          	li	a4,255
1c000d56:	460d                	li	a2,3
1c000d58:	b741                	j	1c000cd8 <__divsf3+0x7a>
1c000d5a:	00579513          	slli	a0,a5,0x5
1c000d5e:	0cf8fa63          	bleu	a5,a7,1c000e32 <__divsf3+0x1d4>
1c000d62:	137d                	addi	t1,t1,-1
1c000d64:	4601                	li	a2,0
1c000d66:	01055793          	srli	a5,a0,0x10
1c000d6a:	02f8dfb3          	divu	t6,a7,a5
1c000d6e:	6741                	lui	a4,0x10
1c000d70:	177d                	addi	a4,a4,-1
1c000d72:	8f69                	and	a4,a4,a0
1c000d74:	8241                	srli	a2,a2,0x10
1c000d76:	02f8f6b3          	remu	a3,a7,a5
1c000d7a:	85fe                	mv	a1,t6
1c000d7c:	03f70f33          	mul	t5,a4,t6
1c000d80:	06c2                	slli	a3,a3,0x10
1c000d82:	8ed1                	or	a3,a3,a2
1c000d84:	01e6fc63          	bleu	t5,a3,1c000d9c <__divsf3+0x13e>
1c000d88:	96aa                	add	a3,a3,a0
1c000d8a:	ffff8593          	addi	a1,t6,-1
1c000d8e:	00a6e763          	bltu	a3,a0,1c000d9c <__divsf3+0x13e>
1c000d92:	01e6f563          	bleu	t5,a3,1c000d9c <__divsf3+0x13e>
1c000d96:	ffef8593          	addi	a1,t6,-2
1c000d9a:	96aa                	add	a3,a3,a0
1c000d9c:	41e686b3          	sub	a3,a3,t5
1c000da0:	02f6d8b3          	divu	a7,a3,a5
1c000da4:	02f6f6b3          	remu	a3,a3,a5
1c000da8:	03170633          	mul	a2,a4,a7
1c000dac:	01069713          	slli	a4,a3,0x10
1c000db0:	86c6                	mv	a3,a7
1c000db2:	00c77c63          	bleu	a2,a4,1c000dca <__divsf3+0x16c>
1c000db6:	972a                	add	a4,a4,a0
1c000db8:	fff88693          	addi	a3,a7,-1
1c000dbc:	00a76763          	bltu	a4,a0,1c000dca <__divsf3+0x16c>
1c000dc0:	00c77563          	bleu	a2,a4,1c000dca <__divsf3+0x16c>
1c000dc4:	ffe88693          	addi	a3,a7,-2
1c000dc8:	972a                	add	a4,a4,a0
1c000dca:	01059793          	slli	a5,a1,0x10
1c000dce:	8f11                	sub	a4,a4,a2
1c000dd0:	8fd5                	or	a5,a5,a3
1c000dd2:	00e03733          	snez	a4,a4
1c000dd6:	8fd9                	or	a5,a5,a4
1c000dd8:	07f30713          	addi	a4,t1,127
1c000ddc:	0ae05e63          	blez	a4,1c000e98 <__divsf3+0x23a>
1c000de0:	f837b6b3          	p.bclr	a3,a5,28,3
1c000de4:	ce91                	beqz	a3,1c000e00 <__divsf3+0x1a2>
1c000de6:	c0084833          	p.bset	a6,a6,0,0
1c000dea:	082e2b63          	p.beqimm	t3,2,1c000e80 <__divsf3+0x222>
1c000dee:	083e2563          	p.beqimm	t3,3,1c000e78 <__divsf3+0x21a>
1c000df2:	000e1763          	bnez	t3,1c000e00 <__divsf3+0x1a2>
1c000df6:	f647b6b3          	p.bclr	a3,a5,27,4
1c000dfa:	0046a363          	p.beqimm	a3,4,1c000e00 <__divsf3+0x1a2>
1c000dfe:	0791                	addi	a5,a5,4
1c000e00:	00479693          	slli	a3,a5,0x4
1c000e04:	0006d663          	bgez	a3,1c000e10 <__divsf3+0x1b2>
1c000e08:	c1b7b7b3          	p.bclr	a5,a5,0,27
1c000e0c:	08030713          	addi	a4,t1,128
1c000e10:	0fe00693          	li	a3,254
1c000e14:	838d                	srli	a5,a5,0x3
1c000e16:	04e6d563          	ble	a4,a3,1c000e60 <__divsf3+0x202>
1c000e1a:	062e2c63          	p.beqimm	t3,2,1c000e92 <__divsf3+0x234>
1c000e1e:	063e2463          	p.beqimm	t3,3,1c000e86 <__divsf3+0x228>
1c000e22:	060e0463          	beqz	t3,1c000e8a <__divsf3+0x22c>
1c000e26:	57fd                	li	a5,-1
1c000e28:	0fe00713          	li	a4,254
1c000e2c:	00586813          	ori	a6,a6,5
1c000e30:	a805                	j	1c000e60 <__divsf3+0x202>
1c000e32:	01f89613          	slli	a2,a7,0x1f
1c000e36:	0018d893          	srli	a7,a7,0x1
1c000e3a:	b735                	j	1c000d66 <__divsf3+0x108>
1c000e3c:	8eaa                	mv	t4,a0
1c000e3e:	87c6                	mv	a5,a7
1c000e40:	867a                	mv	a2,t5
1c000e42:	00262c63          	p.beqimm	a2,2,1c000e5a <__divsf3+0x1fc>
1c000e46:	12362b63          	p.beqimm	a2,3,1c000f7c <__divsf3+0x31e>
1c000e4a:	f81637e3          	p.bneimm	a2,1,1c000dd8 <__divsf3+0x17a>
1c000e4e:	4781                	li	a5,0
1c000e50:	aa19                	j	1c000f66 <__divsf3+0x308>
1c000e52:	8eae                	mv	t4,a1
1c000e54:	b7fd                	j	1c000e42 <__divsf3+0x1e4>
1c000e56:	c0384833          	p.bset	a6,a6,0,3
1c000e5a:	4781                	li	a5,0
1c000e5c:	0ff00713          	li	a4,255
1c000e60:	4501                	li	a0,0
1c000e62:	ec07a533          	p.insert	a0,a5,22,0
1c000e66:	cf772533          	p.insert	a0,a4,7,23
1c000e6a:	c1fea533          	p.insert	a0,t4,0,31
1c000e6e:	00080463          	beqz	a6,1c000e76 <__divsf3+0x218>
1c000e72:	00182073          	csrs	0x1,a6
1c000e76:	8082                	ret
1c000e78:	f80e94e3          	bnez	t4,1c000e00 <__divsf3+0x1a2>
1c000e7c:	07a1                	addi	a5,a5,8
1c000e7e:	b749                	j	1c000e00 <__divsf3+0x1a2>
1c000e80:	f80e80e3          	beqz	t4,1c000e00 <__divsf3+0x1a2>
1c000e84:	bfe5                	j	1c000e7c <__divsf3+0x21e>
1c000e86:	fa0e90e3          	bnez	t4,1c000e26 <__divsf3+0x1c8>
1c000e8a:	4781                	li	a5,0
1c000e8c:	0ff00713          	li	a4,255
1c000e90:	bf71                	j	1c000e2c <__divsf3+0x1ce>
1c000e92:	fe0e9ce3          	bnez	t4,1c000e8a <__divsf3+0x22c>
1c000e96:	bf41                	j	1c000e26 <__divsf3+0x1c8>
1c000e98:	4605                	li	a2,1
1c000e9a:	eb0d                	bnez	a4,1c000ecc <__divsf3+0x26e>
1c000e9c:	f837b633          	p.bclr	a2,a5,28,3
1c000ea0:	86be                	mv	a3,a5
1c000ea2:	ce19                	beqz	a2,1c000ec0 <__divsf3+0x262>
1c000ea4:	c0084833          	p.bset	a6,a6,0,0
1c000ea8:	082e2563          	p.beqimm	t3,2,1c000f32 <__divsf3+0x2d4>
1c000eac:	063e2e63          	p.beqimm	t3,3,1c000f28 <__divsf3+0x2ca>
1c000eb0:	000e1863          	bnez	t3,1c000ec0 <__divsf3+0x262>
1c000eb4:	f647b633          	p.bclr	a2,a5,27,4
1c000eb8:	00462463          	p.beqimm	a2,4,1c000ec0 <__divsf3+0x262>
1c000ebc:	00478693          	addi	a3,a5,4
1c000ec0:	01b6d613          	srli	a2,a3,0x1b
1c000ec4:	00164613          	xori	a2,a2,1
1c000ec8:	fc163633          	p.bclr	a2,a2,30,1
1c000ecc:	4685                	li	a3,1
1c000ece:	40e68733          	sub	a4,a3,a4
1c000ed2:	46ed                	li	a3,27
1c000ed4:	06e6cc63          	blt	a3,a4,1c000f4c <__divsf3+0x2ee>
1c000ed8:	09e30693          	addi	a3,t1,158
1c000edc:	00e7d733          	srl	a4,a5,a4
1c000ee0:	00d797b3          	sll	a5,a5,a3
1c000ee4:	00f037b3          	snez	a5,a5
1c000ee8:	8fd9                	or	a5,a5,a4
1c000eea:	f837b733          	p.bclr	a4,a5,28,3
1c000eee:	cf11                	beqz	a4,1c000f0a <__divsf3+0x2ac>
1c000ef0:	c0084833          	p.bset	a6,a6,0,0
1c000ef4:	042e2663          	p.beqimm	t3,2,1c000f40 <__divsf3+0x2e2>
1c000ef8:	043e2063          	p.beqimm	t3,3,1c000f38 <__divsf3+0x2da>
1c000efc:	000e1763          	bnez	t3,1c000f0a <__divsf3+0x2ac>
1c000f00:	f647b733          	p.bclr	a4,a5,27,4
1c000f04:	00472363          	p.beqimm	a4,4,1c000f0a <__divsf3+0x2ac>
1c000f08:	0791                	addi	a5,a5,4
1c000f0a:	00579713          	slli	a4,a5,0x5
1c000f0e:	02075c63          	bgez	a4,1c000f46 <__divsf3+0x2e8>
1c000f12:	c0084833          	p.bset	a6,a6,0,0
1c000f16:	4781                	li	a5,0
1c000f18:	4705                	li	a4,1
1c000f1a:	d239                	beqz	a2,1c000e60 <__divsf3+0x202>
1c000f1c:	fc1836b3          	p.bclr	a3,a6,30,1
1c000f20:	d2a1                	beqz	a3,1c000e60 <__divsf3+0x202>
1c000f22:	c0184833          	p.bset	a6,a6,0,1
1c000f26:	bf2d                	j	1c000e60 <__divsf3+0x202>
1c000f28:	f80e9ce3          	bnez	t4,1c000ec0 <__divsf3+0x262>
1c000f2c:	00878693          	addi	a3,a5,8
1c000f30:	bf41                	j	1c000ec0 <__divsf3+0x262>
1c000f32:	f80e87e3          	beqz	t4,1c000ec0 <__divsf3+0x262>
1c000f36:	bfdd                	j	1c000f2c <__divsf3+0x2ce>
1c000f38:	fc0e99e3          	bnez	t4,1c000f0a <__divsf3+0x2ac>
1c000f3c:	07a1                	addi	a5,a5,8
1c000f3e:	b7f1                	j	1c000f0a <__divsf3+0x2ac>
1c000f40:	fc0e85e3          	beqz	t4,1c000f0a <__divsf3+0x2ac>
1c000f44:	bfe5                	j	1c000f3c <__divsf3+0x2de>
1c000f46:	838d                	srli	a5,a5,0x3
1c000f48:	4701                	li	a4,0
1c000f4a:	bfc1                	j	1c000f1a <__divsf3+0x2bc>
1c000f4c:	cb99                	beqz	a5,1c000f62 <__divsf3+0x304>
1c000f4e:	c0084833          	p.bset	a6,a6,0,0
1c000f52:	022e2163          	p.beqimm	t3,2,1c000f74 <__divsf3+0x316>
1c000f56:	003e2a63          	p.beqimm	t3,3,1c000f6a <__divsf3+0x30c>
1c000f5a:	4795                	li	a5,5
1c000f5c:	000e1a63          	bnez	t3,1c000f70 <__divsf3+0x312>
1c000f60:	838d                	srli	a5,a5,0x3
1c000f62:	c0184833          	p.bset	a6,a6,0,1
1c000f66:	4701                	li	a4,0
1c000f68:	bde5                	j	1c000e60 <__divsf3+0x202>
1c000f6a:	47a5                	li	a5,9
1c000f6c:	fe0e8ae3          	beqz	t4,1c000f60 <__divsf3+0x302>
1c000f70:	4785                	li	a5,1
1c000f72:	b7fd                	j	1c000f60 <__divsf3+0x302>
1c000f74:	47a5                	li	a5,9
1c000f76:	fe0e95e3          	bnez	t4,1c000f60 <__divsf3+0x302>
1c000f7a:	bfdd                	j	1c000f70 <__divsf3+0x312>
1c000f7c:	004007b7          	lui	a5,0x400
1c000f80:	0ff00713          	li	a4,255
1c000f84:	4e81                	li	t4,0
1c000f86:	bde9                	j	1c000e60 <__divsf3+0x202>
1c000f88:	004007b7          	lui	a5,0x400
1c000f8c:	0ff00713          	li	a4,255
1c000f90:	4e81                	li	t4,0
1c000f92:	4841                	li	a6,16
1c000f94:	b5f1                	j	1c000e60 <__divsf3+0x202>

1c000f96 <__floatunsisf>:
1c000f96:	00202873          	frrm	a6
1c000f9a:	c54d                	beqz	a0,1c001044 <__floatunsisf+0xae>
1c000f9c:	477d                	li	a4,31
1c000f9e:	100517b3          	p.fl1	a5,a0
1c000fa2:	40f707b3          	sub	a5,a4,a5
1c000fa6:	09e00713          	li	a4,158
1c000faa:	8f1d                	sub	a4,a4,a5
1c000fac:	09600693          	li	a3,150
1c000fb0:	02e6c463          	blt	a3,a4,1c000fd8 <__floatunsisf+0x42>
1c000fb4:	46a1                	li	a3,8
1c000fb6:	4601                	li	a2,0
1c000fb8:	00f6d563          	ble	a5,a3,1c000fc2 <__floatunsisf+0x2c>
1c000fbc:	17e1                	addi	a5,a5,-8
1c000fbe:	00f51533          	sll	a0,a0,a5
1c000fc2:	4781                	li	a5,0
1c000fc4:	ec0527b3          	p.insert	a5,a0,22,0
1c000fc8:	cf7727b3          	p.insert	a5,a4,7,23
1c000fcc:	c1f7b533          	p.bclr	a0,a5,0,31
1c000fd0:	c219                	beqz	a2,1c000fd6 <__floatunsisf+0x40>
1c000fd2:	0010e073          	csrsi	0x1,1
1c000fd6:	8082                	ret
1c000fd8:	09900693          	li	a3,153
1c000fdc:	00e6dd63          	ble	a4,a3,1c000ff6 <__floatunsisf+0x60>
1c000fe0:	01b78693          	addi	a3,a5,27 # 40001b <__L2+0x38001b>
1c000fe4:	4615                	li	a2,5
1c000fe6:	00d516b3          	sll	a3,a0,a3
1c000fea:	8e1d                	sub	a2,a2,a5
1c000fec:	00d036b3          	snez	a3,a3
1c000ff0:	00c55533          	srl	a0,a0,a2
1c000ff4:	8d55                	or	a0,a0,a3
1c000ff6:	4695                	li	a3,5
1c000ff8:	00f6d663          	ble	a5,a3,1c001004 <__floatunsisf+0x6e>
1c000ffc:	ffb78693          	addi	a3,a5,-5
1c001000:	00d51533          	sll	a0,a0,a3
1c001004:	f83535b3          	p.bclr	a1,a0,28,3
1c001008:	c1a536b3          	p.bclr	a3,a0,0,26
1c00100c:	4601                	li	a2,0
1c00100e:	cd89                	beqz	a1,1c001028 <__floatunsisf+0x92>
1c001010:	00080663          	beqz	a6,1c00101c <__floatunsisf+0x86>
1c001014:	02382663          	p.beqimm	a6,3,1c001040 <__floatunsisf+0xaa>
1c001018:	4605                	li	a2,1
1c00101a:	a039                	j	1c001028 <__floatunsisf+0x92>
1c00101c:	f6453533          	p.bclr	a0,a0,27,4
1c001020:	4605                	li	a2,1
1c001022:	00452363          	p.beqimm	a0,4,1c001028 <__floatunsisf+0x92>
1c001026:	0691                	addi	a3,a3,4
1c001028:	00569593          	slli	a1,a3,0x5
1c00102c:	0005d763          	bgez	a1,1c00103a <__floatunsisf+0xa4>
1c001030:	09f00713          	li	a4,159
1c001034:	c1a6b6b3          	p.bclr	a3,a3,0,26
1c001038:	8f1d                	sub	a4,a4,a5
1c00103a:	0036d513          	srli	a0,a3,0x3
1c00103e:	b751                	j	1c000fc2 <__floatunsisf+0x2c>
1c001040:	06a1                	addi	a3,a3,8
1c001042:	bfd9                	j	1c001018 <__floatunsisf+0x82>
1c001044:	4701                	li	a4,0
1c001046:	4601                	li	a2,0
1c001048:	bfad                	j	1c000fc2 <__floatunsisf+0x2c>

1c00104a <__extendsfdf2>:
1c00104a:	002027f3          	frrm	a5
1c00104e:	cf751633          	p.extractu	a2,a0,7,23
1c001052:	00160713          	addi	a4,a2,1
1c001056:	ee873733          	p.bclr	a4,a4,23,8
1c00105a:	4685                	li	a3,1
1c00105c:	ec0517b3          	p.extractu	a5,a0,22,0
1c001060:	817d                	srli	a0,a0,0x1f
1c001062:	00e6d963          	ble	a4,a3,1c001074 <__extendsfdf2+0x2a>
1c001066:	0037d713          	srli	a4,a5,0x3
1c00106a:	38060613          	addi	a2,a2,896
1c00106e:	07f6                	slli	a5,a5,0x1d
1c001070:	4681                	li	a3,0
1c001072:	a899                	j	1c0010c8 <__extendsfdf2+0x7e>
1c001074:	ee05                	bnez	a2,1c0010ac <__extendsfdf2+0x62>
1c001076:	c7ad                	beqz	a5,1c0010e0 <__extendsfdf2+0x96>
1c001078:	477d                	li	a4,31
1c00107a:	100796b3          	p.fl1	a3,a5
1c00107e:	40d706b3          	sub	a3,a4,a3
1c001082:	4729                	li	a4,10
1c001084:	00d74e63          	blt	a4,a3,1c0010a0 <__extendsfdf2+0x56>
1c001088:	472d                	li	a4,11
1c00108a:	8f15                	sub	a4,a4,a3
1c00108c:	01568613          	addi	a2,a3,21
1c001090:	00e7d733          	srl	a4,a5,a4
1c001094:	00c797b3          	sll	a5,a5,a2
1c001098:	38900613          	li	a2,905
1c00109c:	8e15                	sub	a2,a2,a3
1c00109e:	bfc9                	j	1c001070 <__extendsfdf2+0x26>
1c0010a0:	ff568713          	addi	a4,a3,-11
1c0010a4:	00e79733          	sll	a4,a5,a4
1c0010a8:	4781                	li	a5,0
1c0010aa:	b7fd                	j	1c001098 <__extendsfdf2+0x4e>
1c0010ac:	cf8d                	beqz	a5,1c0010e6 <__extendsfdf2+0x9c>
1c0010ae:	004006b7          	lui	a3,0x400
1c0010b2:	8efd                	and	a3,a3,a5
1c0010b4:	0037d713          	srli	a4,a5,0x3
1c0010b8:	0016b693          	seqz	a3,a3
1c0010bc:	0692                	slli	a3,a3,0x4
1c0010be:	c1374733          	p.bset	a4,a4,0,19
1c0010c2:	07f6                	slli	a5,a5,0x1d
1c0010c4:	7ff00613          	li	a2,2047
1c0010c8:	4581                	li	a1,0
1c0010ca:	e60725b3          	p.insert	a1,a4,19,0
1c0010ce:	d54625b3          	p.insert	a1,a2,10,20
1c0010d2:	c1f525b3          	p.insert	a1,a0,0,31
1c0010d6:	853e                	mv	a0,a5
1c0010d8:	c299                	beqz	a3,1c0010de <__extendsfdf2+0x94>
1c0010da:	0016a073          	csrs	0x1,a3
1c0010de:	8082                	ret
1c0010e0:	4701                	li	a4,0
1c0010e2:	4601                	li	a2,0
1c0010e4:	b771                	j	1c001070 <__extendsfdf2+0x26>
1c0010e6:	4701                	li	a4,0
1c0010e8:	7ff00613          	li	a2,2047
1c0010ec:	b751                	j	1c001070 <__extendsfdf2+0x26>

1c0010ee <cluster_task_CNN>:
	// for (int i = 0; i < 12; ++i)
	// {
	// 	printf("%02X %02X\n", rx_buff[2*i], rx_buff[2*i + 1]);
	// }
	flag = 1;
}
1c0010ee:	1c0107b7          	lui	a5,0x1c010
1c0010f2:	5d078793          	addi	a5,a5,1488 # 1c0105d0 <NN_output>
1c0010f6:	438c                	lw	a1,0(a5)
1c0010f8:	43c8                	lw	a0,4(a5)
1c0010fa:	7179                	addi	sp,sp,-48
1c0010fc:	d606                	sw	ra,44(sp)
1c0010fe:	d422                	sw	s0,40(sp)
1c001100:	d226                	sw	s1,36(sp)
1c001102:	d04a                	sw	s2,32(sp)
1c001104:	ca56                	sw	s5,20(sp)
1c001106:	c85a                	sw	s6,16(sp)
1c001108:	c462                	sw	s8,8(sp)
1c00110a:	c266                	sw	s9,4(sp)
1c00110c:	ce4e                	sw	s3,28(sp)
1c00110e:	cc52                	sw	s4,24(sp)
1c001110:	c65e                	sw	s7,12(sp)
1c001112:	c06a                	sw	s10,0(sp)
1c001114:	484060ef          	jal	ra,1c007598 <quant_modelCNN>
1c001118:	1c010537          	lui	a0,0x1c010
1c00111c:	88c50513          	addi	a0,a0,-1908 # 1c00f88c <__clz_tab+0x100>
1c001120:	3720d0ef          	jal	ra,1c00e492 <puts>
1c001124:	1c010437          	lui	s0,0x1c010
1c001128:	4529                	li	a0,10
1c00112a:	24040413          	addi	s0,s0,576 # 1c010240 <AT_GraphNodeNames>
1c00112e:	1c01c937          	lui	s2,0x1c01c
1c001132:	1c0104b7          	lui	s1,0x1c010
1c001136:	4b01                	li	s6,0
1c001138:	4a81                	li	s5,0
1c00113a:	3ce0d0ef          	jal	ra,1c00e508 <putchar>
1c00113e:	64890913          	addi	s2,s2,1608 # 1c01c648 <AT_GraphPerf>
1c001142:	32c48493          	addi	s1,s1,812 # 1c01032c <AT_GraphOperInfosNames>
1c001146:	0ec40c93          	addi	s9,s0,236
1c00114a:	1c010c37          	lui	s8,0x1c010
1c00114e:	0004aa03          	lw	s4,0(s1)
1c001152:	00092983          	lw	s3,0(s2)
1c001156:	00442b8b          	p.lw	s7,4(s0!)
1c00115a:	8552                	mv	a0,s4
1c00115c:	3d2d                	jal	1c000f96 <__floatunsisf>
1c00115e:	8d2a                	mv	s10,a0
1c001160:	854e                	mv	a0,s3
1c001162:	3d15                	jal	1c000f96 <__floatunsisf>
1c001164:	85aa                	mv	a1,a0
1c001166:	856a                	mv	a0,s10
1c001168:	3cdd                	jal	1c000c5e <__divsf3>
1c00116a:	35c5                	jal	1c00104a <__extendsfdf2>
1c00116c:	872a                	mv	a4,a0
1c00116e:	87ae                	mv	a5,a1
1c001170:	86d2                	mv	a3,s4
1c001172:	864e                	mv	a2,s3
1c001174:	85de                	mv	a1,s7
1c001176:	89cc0513          	addi	a0,s8,-1892 # 1c00f89c <__clz_tab+0x110>
1c00117a:	4ae0d0ef          	jal	ra,1c00e628 <printf>
1c00117e:	0049270b          	p.lw	a4,4(s2!)
1c001182:	0044a78b          	p.lw	a5,4(s1!)
1c001186:	9aba                	add	s5,s5,a4
1c001188:	9b3e                	add	s6,s6,a5
1c00118a:	fd9412e3          	bne	s0,s9,1c00114e <cluster_task_CNN+0x60>
1c00118e:	4529                	li	a0,10
1c001190:	3780d0ef          	jal	ra,1c00e508 <putchar>
1c001194:	855a                	mv	a0,s6
1c001196:	3501                	jal	1c000f96 <__floatunsisf>
1c001198:	842a                	mv	s0,a0
1c00119a:	8556                	mv	a0,s5
1c00119c:	3bed                	jal	1c000f96 <__floatunsisf>
1c00119e:	85aa                	mv	a1,a0
1c0011a0:	8522                	mv	a0,s0
1c0011a2:	3c75                	jal	1c000c5e <__divsf3>
1c0011a4:	355d                	jal	1c00104a <__extendsfdf2>
1c0011a6:	87ae                	mv	a5,a1
1c0011a8:	1c0105b7          	lui	a1,0x1c010
1c0011ac:	872a                	mv	a4,a0
1c0011ae:	86da                	mv	a3,s6
1c0011b0:	8656                	mv	a2,s5
1c0011b2:	89cc0513          	addi	a0,s8,-1892
1c0011b6:	8d858593          	addi	a1,a1,-1832 # 1c00f8d8 <__clz_tab+0x14c>
1c0011ba:	46e0d0ef          	jal	ra,1c00e628 <printf>
1c0011be:	5422                	lw	s0,40(sp)
1c0011c0:	50b2                	lw	ra,44(sp)
1c0011c2:	5492                	lw	s1,36(sp)
1c0011c4:	5902                	lw	s2,32(sp)
1c0011c6:	49f2                	lw	s3,28(sp)
1c0011c8:	4a62                	lw	s4,24(sp)
1c0011ca:	4ad2                	lw	s5,20(sp)
1c0011cc:	4b42                	lw	s6,16(sp)
1c0011ce:	4bb2                	lw	s7,12(sp)
1c0011d0:	4c22                	lw	s8,8(sp)
1c0011d2:	4c92                	lw	s9,4(sp)
1c0011d4:	4d02                	lw	s10,0(sp)
1c0011d6:	4529                	li	a0,10
1c0011d8:	6145                	addi	sp,sp,48
1c0011da:	32e0d06f          	j	1c00e508 <putchar>

1c0011de <main>:

/**
 * @brief      Main function
 */
int main(void) {
	printf("\n---Start---\n\n");
1c0011de:	1c010537          	lui	a0,0x1c010
int main(void) {
1c0011e2:	7155                	addi	sp,sp,-208
	printf("\n---Start---\n\n");
1c0011e4:	8f450513          	addi	a0,a0,-1804 # 1c00f8f4 <__clz_tab+0x168>
int main(void) {
1c0011e8:	c786                	sw	ra,204(sp)
1c0011ea:	c5a2                	sw	s0,200(sp)
1c0011ec:	c1ca                	sw	s2,192(sp)
1c0011ee:	c3a6                	sw	s1,196(sp)
1c0011f0:	df4e                	sw	s3,188(sp)
1c0011f2:	dd52                	sw	s4,184(sp)
1c0011f4:	db56                	sw	s5,180(sp)
1c0011f6:	d95a                	sw	s6,176(sp)
1c0011f8:	d75e                	sw	s7,172(sp)
1c0011fa:	d562                	sw	s8,168(sp)
1c0011fc:	d366                	sw	s9,164(sp)
1c0011fe:	d16a                	sw	s10,160(sp)
1c001200:	cf6e                	sw	s11,156(sp)

	

	int data_index = 0;
		
	NN_input = (unsigned char *) AT_L2_ALLOC(0,SEQ_LENGTH*NUM_IN_FEAT); //TODO change to correct input size SEQ_LENGTH*NUM_IN_FEAT
1c001202:	6905                	lui	s2,0x1
	printf("\n---Start---\n\n");
1c001204:	28e0d0ef          	jal	ra,1c00e492 <puts>
	NN_input = (unsigned char *) AT_L2_ALLOC(0,SEQ_LENGTH*NUM_IN_FEAT); //TODO change to correct input size SEQ_LENGTH*NUM_IN_FEAT
1c001208:	75c90513          	addi	a0,s2,1884 # 175c <__rt_stack_size+0xf5c>
1c00120c:	1c010437          	lui	s0,0x1c010
1c001210:	3000b0ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c001214:	5d040413          	addi	s0,s0,1488 # 1c0105d0 <NN_output>
1c001218:	c048                	sw	a0,4(s0)
	if(NN_input == NULL) {
1c00121a:	cd39                	beqz	a0,1c001278 <main+0x9a>
		printf("Input buffer alloc error\n");
		return 2;
	}

	NN_output = (unsigned char *) AT_L2_ALLOC(0,NUM_OUT_FEAT*SEQ_LENGTH); //TODO change to correct output size NUM_OUT_FEAT*NUM_OUT_CLASSES
1c00121c:	2b090513          	addi	a0,s2,688
1c001220:	2f00b0ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c001224:	c008                	sw	a0,0(s0)
	if(NN_output == NULL) {
1c001226:	c129                	beqz	a0,1c001268 <main+0x8a>

	/* Configure and open Cluster */
	struct pi_device cluster_dev;
	struct pi_cluster_conf cl_conf;
	cl_conf.id = 0;
	pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c001228:	0088                	addi	a0,sp,64
1c00122a:	00ec                	addi	a1,sp,76
	cl_conf.id = 0;
1c00122c:	c882                	sw	zero,80(sp)
	pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c00122e:	1bf0a0ef          	jal	ra,1c00bbec <pi_open_from_conf>
	if (pi_cluster_open(&cluster_dev)){
1c001232:	0088                	addi	a0,sp,64
1c001234:	5f90b0ef          	jal	ra,1c00d02c <pi_cluster_open>
1c001238:	c921                	beqz	a0,1c001288 <main+0xaa>
		printf("Cluster open failed\n");
1c00123a:	1c010537          	lui	a0,0x1c010
1c00123e:	93c50513          	addi	a0,a0,-1732 # 1c00f93c <__clz_tab+0x1b0>
1c001242:	2500d0ef          	jal	ra,1c00e492 <puts>
		return 3;
1c001246:	448d                	li	s1,3
	printf("ended\n");

	//power off the cluster
	// rt_cluster_mount(CLUSTER_PWDOWN, CLUSTER_GAP, 0, NULL);

}
1c001248:	40be                	lw	ra,204(sp)
1c00124a:	442e                	lw	s0,200(sp)
1c00124c:	8526                	mv	a0,s1
1c00124e:	490e                	lw	s2,192(sp)
1c001250:	449e                	lw	s1,196(sp)
1c001252:	59fa                	lw	s3,188(sp)
1c001254:	5a6a                	lw	s4,184(sp)
1c001256:	5ada                	lw	s5,180(sp)
1c001258:	5b4a                	lw	s6,176(sp)
1c00125a:	5bba                	lw	s7,172(sp)
1c00125c:	5c2a                	lw	s8,168(sp)
1c00125e:	5c9a                	lw	s9,164(sp)
1c001260:	5d0a                	lw	s10,160(sp)
1c001262:	4dfa                	lw	s11,156(sp)
1c001264:	6169                	addi	sp,sp,208
1c001266:	8082                	ret
		printf("Output buffer alloc error\n");
1c001268:	1c010537          	lui	a0,0x1c010
1c00126c:	92050513          	addi	a0,a0,-1760 # 1c00f920 <__clz_tab+0x194>
1c001270:	2220d0ef          	jal	ra,1c00e492 <puts>
		return 2;
1c001274:	4489                	li	s1,2
1c001276:	bfc9                	j	1c001248 <main+0x6a>
		printf("Input buffer alloc error\n");
1c001278:	1c010537          	lui	a0,0x1c010
1c00127c:	90450513          	addi	a0,a0,-1788 # 1c00f904 <__clz_tab+0x178>
1c001280:	2120d0ef          	jal	ra,1c00e492 <puts>
		return 2;
1c001284:	4489                	li	s1,2
1c001286:	b7c9                	j	1c001248 <main+0x6a>
	if(quant_modelCNN_Construct()) {
1c001288:	5f1020ef          	jal	ra,1c004078 <quant_modelCNN_Construct>
1c00128c:	84aa                	mv	s1,a0
1c00128e:	c909                	beqz	a0,1c0012a0 <main+0xc2>
		printf("Constructor failed!\n");
1c001290:	1c010537          	lui	a0,0x1c010
1c001294:	8e050513          	addi	a0,a0,-1824 # 1c00f8e0 <__clz_tab+0x154>
1c001298:	1fa0d0ef          	jal	ra,1c00e492 <puts>
	if (construct_NN()){return 4;}
1c00129c:	4491                	li	s1,4
1c00129e:	b76d                	j	1c001248 <main+0x6a>
	printf("Initialization complete\n");
1c0012a0:	1c010537          	lui	a0,0x1c010
1c0012a4:	95050513          	addi	a0,a0,-1712 # 1c00f950 <__clz_tab+0x1c4>
1c0012a8:	1ea0d0ef          	jal	ra,1c00e492 <puts>
	struct pi_cluster_task task = {0};
1c0012ac:	02800613          	li	a2,40
1c0012b0:	4581                	li	a1,0
1c0012b2:	10a8                	addi	a0,sp,104
1c0012b4:	0380d0ef          	jal	ra,1c00e2ec <memset>
	task.entry = cluster_task_CNN;
1c0012b8:	1c0017b7          	lui	a5,0x1c001
1c0012bc:	0ee78793          	addi	a5,a5,238 # 1c0010ee <cluster_task_CNN>
	printf("RUNNING SAMPLE\n");
1c0012c0:	1c010537          	lui	a0,0x1c010
	task.entry = cluster_task_CNN;
1c0012c4:	d2be                	sw	a5,100(sp)
	task.stack_size = (unsigned int) STACK_SIZE;
1c0012c6:	80090913          	addi	s2,s2,-2048
	task.slave_stack_size = (unsigned int) 1024;
1c0012ca:	40000793          	li	a5,1024
	printf("RUNNING SAMPLE\n");
1c0012ce:	96850513          	addi	a0,a0,-1688 # 1c00f968 <__clz_tab+0x1dc>
	task.slave_stack_size = (unsigned int) 1024;
1c0012d2:	dabe                	sw	a5,116(sp)
	for (int j = 0; j < SEQ_LENGTH*NUM_IN_FEAT; j++) {
1c0012d4:	6985                	lui	s3,0x1
	task.stack_size = (unsigned int) STACK_SIZE;
1c0012d6:	d8ca                	sw	s2,112(sp)
	printf("RUNNING SAMPLE\n");
1c0012d8:	1ba0d0ef          	jal	ra,1c00e492 <puts>
	for (int j = 0; j < SEQ_LENGTH*NUM_IN_FEAT; j++) {
1c0012dc:	4701                	li	a4,0
1c0012de:	75c98793          	addi	a5,s3,1884 # 175c <__rt_stack_size+0xf5c>
1c0012e2:	0057c0fb          	lp.setup	x1,a5,1c0012ec <main+0x10e>
		NN_input[j] = 0;//test_cnn_data[i];
1c0012e6:	4054                	lw	a3,4(s0)
1c0012e8:	0006c723          	p.sb	zero,a4(a3)
	for (int j = 0; j < SEQ_LENGTH*NUM_IN_FEAT; j++) {
1c0012ec:	0705                	addi	a4,a4,1
int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *cluster_task, pi_task_t *task);
int pi_cluster_send_tasklet_to_cl_async(struct pi_device *device, struct pi_cluster_task *cluster_task, pi_task_t *task);

static inline int pi_cluster_send_task(struct pi_device *device, struct pi_cluster_task *task)
{
    return pi_cluster_send_task_to_cl(device, task);
1c0012ee:	10cc                	addi	a1,sp,100
1c0012f0:	0088                	addi	a0,sp,64
1c0012f2:	1120c0ef          	jal	ra,1c00d404 <pi_cluster_send_task_to_cl>
	printf("%d: [", i);
1c0012f6:	1c010537          	lui	a0,0x1c010
1c0012fa:	4581                	li	a1,0
1c0012fc:	97850513          	addi	a0,a0,-1672 # 1c00f978 <__clz_tab+0x1ec>
1c001300:	3280d0ef          	jal	ra,1c00e628 <printf>
	printf("]\n");
1c001304:	1c010537          	lui	a0,0x1c010
1c001308:	98050513          	addi	a0,a0,-1664 # 1c00f980 <__clz_tab+0x1f4>
1c00130c:	1860d0ef          	jal	ra,1c00e492 <puts>
	printf("Offset:  %hhd\n", offset);
1c001310:	1c010537          	lui	a0,0x1c010
1c001314:	12a00593          	li	a1,298
1c001318:	98450513          	addi	a0,a0,-1660 # 1c00f984 <__clz_tab+0x1f8>
1c00131c:	30c0d0ef          	jal	ra,1c00e628 <printf>
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001320:	00042e03          	lw	t3,0(s0)
1c001324:	1c0106b7          	lui	a3,0x1c010
1c001328:	5f468693          	addi	a3,a3,1524 # 1c0105f4 <zero_point>
1c00132c:	00068603          	lb	a2,0(a3)
1c001330:	12ae4783          	lbu	a5,298(t3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001334:	01468583          	lb	a1,20(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001338:	00468703          	lb	a4,4(a3)
1c00133c:	8f91                	sub	a5,a5,a2
1c00133e:	255e4e83          	lbu	t4,597(t3)
1c001342:	02f70733          	mul	a4,a4,a5
1c001346:	00568f83          	lb	t6,5(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00134a:	01568f03          	lb	t5,21(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00134e:	40ce8eb3          	sub	t4,t4,a2
1c001352:	380e4803          	lbu	a6,896(t3)
1c001356:	00668303          	lb	t1,6(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00135a:	01668883          	lb	a7,22(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00135e:	40c80833          	sub	a6,a6,a2
1c001362:	4abe4503          	lbu	a0,1195(t3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001366:	01768d83          	lb	s11,23(a3)
1c00136a:	02f587b3          	mul	a5,a1,a5
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00136e:	00768583          	lb	a1,7(a3)
1c001372:	8d11                	sub	a0,a0,a2
1c001374:	99f2                	add	s3,s3,t3
1c001376:	5d6e4903          	lbu	s2,1494(t3)
1c00137a:	701e4083          	lbu	ra,1793(t3)
1c00137e:	00a68e03          	lb	t3,10(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001382:	01968283          	lb	t0,25(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001386:	00868d03          	lb	s10,8(a3)
1c00138a:	c272                	sw	t3,4(sp)
1c00138c:	43df8733          	p.mac	a4,t6,t4
1c001390:	00b68e03          	lb	t3,11(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001394:	01a68f83          	lb	t6,26(a3)
1c001398:	01868c83          	lb	s9,24(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00139c:	00968c03          	lb	s8,9(a3)
1c0013a0:	82c9c383          	lbu	t2,-2004(s3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013a4:	c016                	sw	t0,0(sp)
1c0013a6:	c47e                	sw	t6,8(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013a8:	9579c283          	lbu	t0,-1705(s3)
1c0013ac:	a829cf83          	lbu	t6,-1406(s3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013b0:	43df07b3          	p.mac	a5,t5,t4
1c0013b4:	01b68e83          	lb	t4,27(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013b8:	c672                	sw	t3,12(sp)
1c0013ba:	40c90933          	sub	s2,s2,a2
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013be:	c876                	sw	t4,16(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013c0:	00c68f03          	lb	t5,12(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013c4:	01c68e03          	lb	t3,28(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013c8:	00d68e83          	lb	t4,13(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013cc:	02168b83          	lb	s7,33(a3)
1c0013d0:	cc72                	sw	t3,24(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013d2:	43030733          	p.mac	a4,t1,a6
1c0013d6:	00e68303          	lb	t1,14(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013da:	01d68e03          	lb	t3,29(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013de:	01268b03          	lb	s6,18(a3)
1c0013e2:	d21a                	sw	t1,36(sp)
1c0013e4:	00f68303          	lb	t1,15(a3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013e8:	d072                	sw	t3,32(sp)
1c0013ea:	01e68e03          	lb	t3,30(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013ee:	d61a                	sw	t1,44(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013f0:	01f68303          	lb	t1,31(a3)
1c0013f4:	430887b3          	p.mac	a5,a7,a6
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0013f8:	01068803          	lb	a6,16(a3)
1c0013fc:	0599c883          	lbu	a7,89(s3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001400:	02268a83          	lb	s5,34(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001404:	da42                	sw	a6,52(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001406:	02068803          	lb	a6,32(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00140a:	ca7a                	sw	t5,20(sp)
1c00140c:	ce76                	sw	t4,28(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00140e:	dc42                	sw	a6,56(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001410:	01168803          	lb	a6,17(a3)
1c001414:	42a58733          	p.mac	a4,a1,a0
1c001418:	bad9cf03          	lbu	t5,-1107(s3)
1c00141c:	cd89ce83          	lbu	t4,-808(s3)
1c001420:	2af9c583          	lbu	a1,687(s3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001424:	d472                	sw	t3,40(sp)
1c001426:	d81a                	sw	t1,48(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001428:	e039ce03          	lbu	t3,-509(s3)
1c00142c:	f2e9c303          	lbu	t1,-210(s3)
1c001430:	de42                	sw	a6,60(sp)
1c001432:	1849c803          	lbu	a6,388(s3)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001436:	42ad87b3          	p.mac	a5,s11,a0
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00143a:	01368a03          	lb	s4,19(a3)
1c00143e:	40c080b3          	sub	ra,ra,a2
1c001442:	40c383b3          	sub	t2,t2,a2
1c001446:	40c282b3          	sub	t0,t0,a2
1c00144a:	40cf8fb3          	sub	t6,t6,a2
1c00144e:	40cf0f33          	sub	t5,t5,a2
1c001452:	40ce8eb3          	sub	t4,t4,a2
1c001456:	40ce0e33          	sub	t3,t3,a2
1c00145a:	40c30333          	sub	t1,t1,a2
1c00145e:	432d0733          	p.mac	a4,s10,s2
1c001462:	40c888b3          	sub	a7,a7,a2
1c001466:	40c80833          	sub	a6,a6,a2
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00146a:	02368983          	lb	s3,35(a3)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00146e:	8d91                	sub	a1,a1,a2
	class_0 = class_0 + *(dense_bias);
1c001470:	02468603          	lb	a2,36(a3)
	class_1 = class_1 + *(dense_bias+1);
1c001474:	02568683          	lb	a3,37(a3)
	printf("\n");
1c001478:	4529                	li	a0,10
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00147a:	432c87b3          	p.mac	a5,s9,s2
1c00147e:	4902                	lw	s2,0(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001480:	421c0733          	p.mac	a4,s8,ra
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001484:	421907b3          	p.mac	a5,s2,ra
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001488:	4092                	lw	ra,4(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00148a:	4922                	lw	s2,8(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00148c:	42708733          	p.mac	a4,ra,t2
1c001490:	40b2                	lw	ra,12(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001492:	427907b3          	p.mac	a5,s2,t2
1c001496:	43c2                	lw	t2,16(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c001498:	4952                	lw	s2,20(sp)
1c00149a:	42508733          	p.mac	a4,ra,t0
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c00149e:	40e2                	lw	ra,24(sp)
1c0014a0:	425387b3          	p.mac	a5,t2,t0
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014a4:	42f2                	lw	t0,28(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014a6:	5382                	lw	t2,32(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014a8:	43f90733          	p.mac	a4,s2,t6
1c0014ac:	5912                	lw	s2,36(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014ae:	43f087b3          	p.mac	a5,ra,t6
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014b2:	5fb2                	lw	t6,44(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014b4:	50c2                	lw	ra,48(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014b6:	43e28733          	p.mac	a4,t0,t5
1c0014ba:	52d2                	lw	t0,52(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014bc:	43e387b3          	p.mac	a5,t2,t5
1c0014c0:	5f22                	lw	t5,40(sp)
1c0014c2:	53e2                	lw	t2,56(sp)
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014c4:	43d90733          	p.mac	a4,s2,t4
1c0014c8:	5972                	lw	s2,60(sp)
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014ca:	43df07b3          	p.mac	a5,t5,t4
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014ce:	43cf8733          	p.mac	a4,t6,t3
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014d2:	43c087b3          	p.mac	a5,ra,t3
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014d6:	42628733          	p.mac	a4,t0,t1
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014da:	426387b3          	p.mac	a5,t2,t1
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014de:	43190733          	p.mac	a4,s2,a7
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014e2:	431b87b3          	p.mac	a5,s7,a7
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014e6:	430b0733          	p.mac	a4,s6,a6
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014ea:	430a87b3          	p.mac	a5,s5,a6
		class_0 = class_0 + *(dense_kernel+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014ee:	42ba0733          	p.mac	a4,s4,a1
		class_1 = class_1 + *(dense_kernel+NUM_OUT_FEAT+i) * (*(NN_output + offset + i*SEQ_LENGTH) - zero_point);
1c0014f2:	42b987b3          	p.mac	a5,s3,a1
	class_0 = class_0 + *(dense_bias);
1c0014f6:	00e609b3          	add	s3,a2,a4
	class_1 = class_1 + *(dense_bias+1);
1c0014fa:	00f68933          	add	s2,a3,a5
	printf("\n");
1c0014fe:	00a0d0ef          	jal	ra,1c00e508 <putchar>
	printf("Class 0:  %hhd\n", class_0);
1c001502:	1c010537          	lui	a0,0x1c010
1c001506:	85ce                	mv	a1,s3
1c001508:	99450513          	addi	a0,a0,-1644 # 1c00f994 <__clz_tab+0x208>
1c00150c:	11c0d0ef          	jal	ra,1c00e628 <printf>
	printf("Class 1:  %hhd\n", class_1);
1c001510:	1c010537          	lui	a0,0x1c010
1c001514:	85ca                	mv	a1,s2
1c001516:	9a450513          	addi	a0,a0,-1628 # 1c00f9a4 <__clz_tab+0x218>
1c00151a:	10e0d0ef          	jal	ra,1c00e628 <printf>
	if (class_0 > class_1) {
1c00151e:	03395f63          	ble	s3,s2,1c00155c <main+0x37e>
	printf("Predict Class 0\n");
1c001522:	1c010537          	lui	a0,0x1c010
1c001526:	9b450513          	addi	a0,a0,-1612 # 1c00f9b4 <__clz_tab+0x228>
1c00152a:	7690c0ef          	jal	ra,1c00e492 <puts>
	quant_modelCNN_Destruct();
1c00152e:	010060ef          	jal	ra,1c00753e <quant_modelCNN_Destruct>
	pi_cluster_close(&cluster_dev);
1c001532:	0088                	addi	a0,sp,64
1c001534:	3d10b0ef          	jal	ra,1c00d104 <pi_cluster_close>
	AT_L2_FREE(0, NN_input, SEQ_LENGTH*NUM_IN_FEAT);
1c001538:	4048                	lw	a0,4(s0)
1c00153a:	6905                	lui	s2,0x1
1c00153c:	75c90593          	addi	a1,s2,1884 # 175c <__rt_stack_size+0xf5c>
1c001540:	7df0a0ef          	jal	ra,1c00c51e <pi_l2_free>
	AT_L2_FREE(0, NN_output, NUM_OUT_FEAT*SEQ_LENGTH);
1c001544:	4008                	lw	a0,0(s0)
1c001546:	2b090593          	addi	a1,s2,688
1c00154a:	7d50a0ef          	jal	ra,1c00c51e <pi_l2_free>
	printf("ended\n");
1c00154e:	1c010537          	lui	a0,0x1c010
1c001552:	9d450513          	addi	a0,a0,-1580 # 1c00f9d4 <__clz_tab+0x248>
1c001556:	73d0c0ef          	jal	ra,1c00e492 <puts>
1c00155a:	b1fd                	j	1c001248 <main+0x6a>
	printf("Predict Class 1\n");}
1c00155c:	1c010537          	lui	a0,0x1c010
1c001560:	9c450513          	addi	a0,a0,-1596 # 1c00f9c4 <__clz_tab+0x238>
1c001564:	72f0c0ef          	jal	ra,1c00e492 <puts>
1c001568:	b7d9                	j	1c00152e <main+0x350>

1c00156a <S2_Conv2d_16x20x1x3>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c00156a:	710d                	addi	sp,sp,-352
1c00156c:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
	KerArg0->W = (unsigned short int) (299);
1c001570:	1c0100b7          	lui	ra,0x1c010
{
1c001574:	15212823          	sw	s2,336(sp)
1c001578:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c00157a:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c00157e:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+5980);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c001582:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c001586:	c436                	sw	a3,8(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c001588:	46c1                	li	a3,16
1c00158a:	00d11623          	sh	a3,12(sp)
	KerArg1->W = (unsigned short int) (299);
1c00158e:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c001592:	15312623          	sw	s3,332(sp)
	KerArg1->UsedW = (unsigned short int) (299);
	KerArg1->H = (unsigned short int) (1);
	KerArg1->InFeatures = (unsigned short int) (20);
1c001596:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c00159a:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (20);
1c00159e:	9f09a683          	lw	a3,-1552(s3) # 1c00f9f0 <__clz_tab+0x264>
{
1c0015a2:	14812c23          	sw	s0,344(sp)
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (20);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+6076);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c0015a6:	1c010437          	lui	s0,0x1c010
	KerArg1->InFeatures = (unsigned short int) (20);
1c0015aa:	12d12023          	sw	a3,288(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (20);
1c0015ae:	46d1                	li	a3,20
{
1c0015b0:	14912a23          	sw	s1,340(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (20);
1c0015b4:	12d11223          	sh	a3,292(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c0015b8:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c0015bc:	9f442683          	lw	a3,-1548(s0) # 1c00f9f4 <__clz_tab+0x268>
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c0015c0:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
1c0015c4:	0004a303          	lw	t1,0(s1)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+11820);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+7036);
	KerArg2->Feat = (unsigned short int) (16);
1c0015c8:	1c0103b7          	lui	t2,0x1c010
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+5980);
1c0015cc:	6885                	lui	a7,0x1
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c0015ce:	12d12a23          	sw	a3,308(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c0015d2:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c0015d4:	9f83a683          	lw	a3,-1544(t2) # 1c00f9f8 <__clz_tab+0x26c>
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+7036);
1c0015d8:	6e89                	lui	t4,0x2
{
1c0015da:	15612023          	sw	s6,320(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+5980);
1c0015de:	75c88f13          	addi	t5,a7,1884 # 175c <__rt_stack_size+0xf5c>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+6076);
1c0015e2:	7bc88293          	addi	t0,a7,1980
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+6044);
1c0015e6:	79c88f93          	addi	t6,a7,1948
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c0015ea:	e2ce0e13          	addi	t3,t3,-468 # 2e2c <__rt_stack_size+0x262c>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+6060);
1c0015ee:	7ac88893          	addi	a7,a7,1964
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+7036);
1c0015f2:	b7ce8e93          	addi	t4,t4,-1156 # 1b7c <__rt_stack_size+0x137c>
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+30956);
1c0015f6:	6b21                	lui	s6,0x8
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c0015f8:	9e1a                	add	t3,t3,t1
{
1c0015fa:	15512223          	sw	s5,324(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+5980);
1c0015fe:	9f1a                	add	t5,t5,t1
	KerArg1->H = (unsigned short int) (1);
1c001600:	4a85                	li	s5,1
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+6076);
1c001602:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+7036);
1c001604:	9e9a                	add	t4,t4,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+6044);
1c001606:	9f9a                	add	t6,t6,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+6060);
1c001608:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+30956);
1c00160a:	8ecb0b13          	addi	s6,s6,-1812 # 78ec <__rt_stack_size+0x70ec>
1c00160e:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c001610:	c272                	sw	t3,4(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+5980);
1c001612:	c87a                	sw	t5,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c001614:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c001618:	11511e23          	sh	s5,284(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+6076);
1c00161c:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+11820);
1c001620:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+11820);
1c001624:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+7036);
1c001626:	ce76                	sw	t4,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c001628:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c00162a:	03511223          	sh	s5,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+6044);
1c00162e:	d47e                	sw	t6,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+6060);
1c001630:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+30956);
1c001632:	d85a                	sw	s6,48(sp)

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001634:	30047373          	csrrci	t1,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001638:	002046b7          	lui	a3,0x204
1c00163c:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
#if defined(__riscv__)
  unsigned int res;
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001640:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001644:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001648:	c158c8b3          	p.bset	a7,a7,0,21
1c00164c:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001650:	41e6a023          	sw	t5,1024(a3)
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001654:	40c6a023          	sw	a2,1024(a3)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c001658:	da72                	sw	t3,52(sp)

        copy->length = 0;
1c00165a:	c282                	sw	zero,68(sp)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c00165c:	30031073          	csrw	mstatus,t1
{
#ifdef __RT_USE_PROFILE
  int trace = __rt_pe_trace[rt_core_id()];
  gv_vcd_dump_trace(trace, 5);
#endif
  if (copy->length == 0)
1c001660:	4616                	lw	a2,68(sp)
1c001662:	4c060863          	beqz	a2,1c001b32 <S2_Conv2d_16x20x1x3+0x5c8>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001666:	48b6                	lw	a7,76(sp)
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001668:	02000613          	li	a2,32
1c00166c:	00088b63          	beqz	a7,1c001682 <S2_Conv2d_16x20x1x3+0x118>
1c001670:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001674:	03c6e883          	p.elw	a7,60(a3)
  This is the opposite of eu_evt_maskSet. For each bit at 1 in the new value, the corresponding bit is set to 0 in the event mask and the others remain the same.
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the event mask.
  */
static inline void eu_evt_maskClr(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001678:	00c6a223          	sw	a2,4(a3)
1c00167c:	48b6                	lw	a7,76(sp)
1c00167e:	fe0899e3          	bnez	a7,1c001670 <S2_Conv2d_16x20x1x3+0x106>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5980), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+6044), 16, 0, &DmaR_Evt2);
1c001682:	0004a883          	lw	a7,0(s1)
1c001686:	6685                	lui	a3,0x1
1c001688:	79c68693          	addi	a3,a3,1948 # 179c <__rt_stack_size+0xf9c>
1c00168c:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00168e:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001692:	002046b7          	lui	a3,0x204
1c001696:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00169a:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00169e:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0016a0:	c1564633          	p.bset	a2,a2,0,21
1c0016a4:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0016a8:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0016ac:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c0016b0:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c0016b2:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c0016b4:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c0016b8:	5716                	lw	a4,100(sp)
1c0016ba:	42070263          	beqz	a4,1c001ade <S2_Conv2d_16x20x1x3+0x574>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0016be:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016c0:	02000693          	li	a3,32
1c0016c4:	00204737          	lui	a4,0x204
1c0016c8:	ca09                	beqz	a2,1c0016da <S2_Conv2d_16x20x1x3+0x170>
1c0016ca:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0016ce:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0016d2:	00d72223          	sw	a3,4(a4)
1c0016d6:	5636                	lw	a2,108(sp)
1c0016d8:	fa6d                	bnez	a2,1c0016ca <S2_Conv2d_16x20x1x3+0x160>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+6060), 16, 0, &DmaR_Evt3);
1c0016da:	4090                	lw	a2,0(s1)
1c0016dc:	6705                	lui	a4,0x1
1c0016de:	7ac70713          	addi	a4,a4,1964 # 17ac <__rt_stack_size+0xfac>
1c0016e2:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0016e4:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0016e8:	00204737          	lui	a4,0x204
1c0016ec:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0016f0:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0016f4:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0016f6:	c156c6b3          	p.bset	a3,a3,0,21
1c0016fa:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0016fe:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001702:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001706:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c001708:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c00170a:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c00170e:	479a                	lw	a5,132(sp)
1c001710:	36078d63          	beqz	a5,1c001a8a <S2_Conv2d_16x20x1x3+0x520>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001714:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001716:	02000713          	li	a4,32
1c00171a:	002047b7          	lui	a5,0x204
1c00171e:	ca89                	beqz	a3,1c001730 <S2_Conv2d_16x20x1x3+0x1c6>
1c001720:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001724:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001728:	00e7a223          	sw	a4,4(a5)
1c00172c:	46ba                	lw	a3,140(sp)
1c00172e:	faed                	bnez	a3,1c001720 <S2_Conv2d_16x20x1x3+0x1b6>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+6076), 960, 0, &DmaR_Evt4);
1c001730:	4094                	lw	a3,0(s1)
1c001732:	6785                	lui	a5,0x1
1c001734:	7bc78793          	addi	a5,a5,1980 # 17bc <__rt_stack_size+0xfbc>
1c001738:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00173a:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00173e:	002047b7          	lui	a5,0x204
1c001742:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001746:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00174a:	3c070713          	addi	a4,a4,960 # b03c0 <__L2+0x303c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00174e:	c1574733          	p.bset	a4,a4,0,21
1c001752:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001756:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00175a:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c00175e:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c001760:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c001762:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001766:	571a                	lw	a4,164(sp)
1c001768:	2c070763          	beqz	a4,1c001a36 <S2_Conv2d_16x20x1x3+0x4cc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00176c:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00176e:	02000713          	li	a4,32
1c001772:	ca89                	beqz	a3,1c001784 <S2_Conv2d_16x20x1x3+0x21a>
1c001774:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001778:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00177c:	00e7a223          	sw	a4,4(a5)
1c001780:	56ba                	lw	a3,172(sp)
1c001782:	faed                	bnez	a3,1c001774 <S2_Conv2d_16x20x1x3+0x20a>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 5980, 0, &DmaR_Evt5);
1c001784:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001786:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00178a:	002047b7          	lui	a5,0x204
1c00178e:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001792:	00031737          	lui	a4,0x31
1c001796:	75c70713          	addi	a4,a4,1884 # 3175c <__L1Cl+0x2175c>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00179a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00179e:	c1574733          	p.bset	a4,a4,0,21
1c0017a2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0017a6:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0017aa:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0017ae:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c0017b0:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c0017b2:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0017b6:	471e                	lw	a4,196(sp)
1c0017b8:	22070563          	beqz	a4,1c0019e2 <S2_Conv2d_16x20x1x3+0x478>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0017bc:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0017be:	02000713          	li	a4,32
1c0017c2:	ca89                	beqz	a3,1c0017d4 <S2_Conv2d_16x20x1x3+0x26a>
1c0017c4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0017c8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0017cc:	00e7a223          	sw	a4,4(a5)
1c0017d0:	46be                	lw	a3,204(sp)
1c0017d2:	faed                	bnez	a3,1c0017c4 <S2_Conv2d_16x20x1x3+0x25a>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+30956), 9, 0, &DmaR_Evt6);
1c0017d4:	4094                	lw	a3,0(s1)
1c0017d6:	67a1                	lui	a5,0x8
1c0017d8:	8ec78793          	addi	a5,a5,-1812 # 78ec <__rt_stack_size+0x70ec>
1c0017dc:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0017de:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0017e2:	002047b7          	lui	a5,0x204
1c0017e6:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0017ea:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0017ee:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0017f0:	c1574733          	p.bset	a4,a4,0,21
1c0017f4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0017f8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0017fc:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c001800:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c001802:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c001804:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001808:	571e                	lw	a4,228(sp)
1c00180a:	18070263          	beqz	a4,1c00198e <S2_Conv2d_16x20x1x3+0x424>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00180e:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001810:	02000713          	li	a4,32
1c001814:	ca89                	beqz	a3,1c001826 <S2_Conv2d_16x20x1x3+0x2bc>
1c001816:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00181a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00181e:	00e7a223          	sw	a4,4(a5)
1c001822:	56be                	lw	a3,236(sp)
1c001824:	faed                	bnez	a3,1c001816 <S2_Conv2d_16x20x1x3+0x2ac>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+30956))[5]);
1c001826:	409c                	lw	a5,0(s1)
1c001828:	6721                	lui	a4,0x8
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00182a:	0ff00a13          	li	s4,255
1c00182e:	97ba                	add	a5,a5,a4
1c001830:	8f17c783          	lbu	a5,-1807(a5)
1c001834:	00204437          	lui	s0,0x204
1c001838:	00f10a23          	sb	a5,20(sp)
1c00183c:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001840:	20040993          	addi	s3,s0,512
1c001844:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001848:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00184c:	1c0087b7          	lui	a5,0x1c008
1c001850:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c001854:	08f42023          	sw	a5,128(s0)
1c001858:	0048                	addi	a0,sp,4
1c00185a:	08a42023          	sw	a0,128(s0)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c00185e:	3c3060ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001862:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c001866:	4785                	li	a5,1
1c001868:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00186c:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001870:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001874:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001878:	1c0097b7          	lui	a5,0x1c009
1c00187c:	f8678793          	addi	a5,a5,-122 # 1c008f86 <KerParConv3x1Stride1x1_SQ8>
1c001880:	08f42023          	sw	a5,128(s0)
1c001884:	0a48                	addi	a0,sp,276
1c001886:	08a42023          	sw	a0,128(s0)
1c00188a:	6fc070ef          	jal	ra,1c008f86 <KerParConv3x1Stride1x1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00188e:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001892:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001896:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00189a:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00189e:	1c0087b7          	lui	a5,0x1c008
1c0018a2:	2f478793          	addi	a5,a5,756 # 1c0082f4 <KerParReduct_CC_SQ8>
1c0018a6:	08f42023          	sw	a5,128(s0)
1c0018aa:	0828                	addi	a0,sp,24
1c0018ac:	08a42023          	sw	a0,128(s0)
1c0018b0:	245060ef          	jal	ra,1c0082f4 <KerParReduct_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018b4:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+7036), 4784, 1, &DmaW_Evt1);
1c0018b8:	6789                	lui	a5,0x2
1c0018ba:	4098                	lw	a4,0(s1)
1c0018bc:	b7c78793          	addi	a5,a5,-1156 # 1b7c <__rt_stack_size+0x137c>
1c0018c0:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018c2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0018c6:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0018ca:	000217b7          	lui	a5,0x21
1c0018ce:	2b078793          	addi	a5,a5,688 # 212b0 <__L1Cl+0x112b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0018d2:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0018d6:	c157c7b3          	p.bset	a5,a5,0,21
1c0018da:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0018de:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0018e2:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c0018e6:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c0018e8:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c0018ec:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0018f0:	10412783          	lw	a5,260(sp)
1c0018f4:	c3b9                	beqz	a5,1c00193a <S2_Conv2d_16x20x1x3+0x3d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0018f6:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018fa:	02000713          	li	a4,32
1c0018fe:	002047b7          	lui	a5,0x204
1c001902:	ca91                	beqz	a3,1c001916 <S2_Conv2d_16x20x1x3+0x3ac>
1c001904:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001908:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00190c:	00e7a223          	sw	a4,4(a5)
1c001910:	10c12683          	lw	a3,268(sp)
1c001914:	fae5                	bnez	a3,1c001904 <S2_Conv2d_16x20x1x3+0x39a>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001916:	15c12083          	lw	ra,348(sp)
1c00191a:	15812403          	lw	s0,344(sp)
1c00191e:	15412483          	lw	s1,340(sp)
1c001922:	15012903          	lw	s2,336(sp)
1c001926:	14c12983          	lw	s3,332(sp)
1c00192a:	14812a03          	lw	s4,328(sp)
1c00192e:	14412a83          	lw	s5,324(sp)
1c001932:	14012b03          	lw	s6,320(sp)
1c001936:	6135                	addi	sp,sp,352
1c001938:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00193a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00193e:	40442403          	lw	s0,1028(s0)
1c001942:	56de                	lw	a3,244(sp)
1c001944:	40d45433          	sra	s0,s0,a3
1c001948:	fc143433          	p.bclr	s0,s0,30,1
1c00194c:	c41d                	beqz	s0,1c00197a <S2_Conv2d_16x20x1x3+0x410>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00194e:	10000593          	li	a1,256
1c001952:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001956:	30061073          	csrw	mstatus,a2
1c00195a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00195e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001962:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001966:	30047673          	csrrci	a2,mstatus,8
1c00196a:	40472783          	lw	a5,1028(a4)
1c00196e:	56de                	lw	a3,244(sp)
1c001970:	40d7d7b3          	sra	a5,a5,a3
1c001974:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001978:	fff9                	bnez	a5,1c001956 <S2_Conv2d_16x20x1x3+0x3ec>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00197a:	4785                	li	a5,1
1c00197c:	00d796b3          	sll	a3,a5,a3
1c001980:	002047b7          	lui	a5,0x204
1c001984:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001988:	30061073          	csrw	mstatus,a2
1c00198c:	b769                	j	1c001916 <S2_Conv2d_16x20x1x3+0x3ac>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00198e:	30047673          	csrrci	a2,mstatus,8
1c001992:	4047a783          	lw	a5,1028(a5)
1c001996:	46de                	lw	a3,212(sp)
1c001998:	40d7d7b3          	sra	a5,a5,a3
1c00199c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0019a0:	c79d                	beqz	a5,1c0019ce <S2_Conv2d_16x20x1x3+0x464>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0019a2:	10000593          	li	a1,256
1c0019a6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0019aa:	30061073          	csrw	mstatus,a2
1c0019ae:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019b2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0019b6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019ba:	30047673          	csrrci	a2,mstatus,8
1c0019be:	40472783          	lw	a5,1028(a4)
1c0019c2:	46de                	lw	a3,212(sp)
1c0019c4:	40d7d7b3          	sra	a5,a5,a3
1c0019c8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0019cc:	fff9                	bnez	a5,1c0019aa <S2_Conv2d_16x20x1x3+0x440>
1c0019ce:	4785                	li	a5,1
1c0019d0:	00d796b3          	sll	a3,a5,a3
1c0019d4:	002047b7          	lui	a5,0x204
1c0019d8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0019dc:	30061073          	csrw	mstatus,a2
1c0019e0:	b599                	j	1c001826 <S2_Conv2d_16x20x1x3+0x2bc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019e2:	30047673          	csrrci	a2,mstatus,8
1c0019e6:	4047a783          	lw	a5,1028(a5)
1c0019ea:	56da                	lw	a3,180(sp)
1c0019ec:	40d7d7b3          	sra	a5,a5,a3
1c0019f0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0019f4:	c79d                	beqz	a5,1c001a22 <S2_Conv2d_16x20x1x3+0x4b8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0019f6:	10000593          	li	a1,256
1c0019fa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0019fe:	30061073          	csrw	mstatus,a2
1c001a02:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a06:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a0a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a0e:	30047673          	csrrci	a2,mstatus,8
1c001a12:	40472783          	lw	a5,1028(a4)
1c001a16:	56da                	lw	a3,180(sp)
1c001a18:	40d7d7b3          	sra	a5,a5,a3
1c001a1c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a20:	fff9                	bnez	a5,1c0019fe <S2_Conv2d_16x20x1x3+0x494>
1c001a22:	4785                	li	a5,1
1c001a24:	00d796b3          	sll	a3,a5,a3
1c001a28:	002047b7          	lui	a5,0x204
1c001a2c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001a30:	30061073          	csrw	mstatus,a2
1c001a34:	b345                	j	1c0017d4 <S2_Conv2d_16x20x1x3+0x26a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a36:	30047673          	csrrci	a2,mstatus,8
1c001a3a:	4047a783          	lw	a5,1028(a5)
1c001a3e:	46da                	lw	a3,148(sp)
1c001a40:	40d7d7b3          	sra	a5,a5,a3
1c001a44:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a48:	c79d                	beqz	a5,1c001a76 <S2_Conv2d_16x20x1x3+0x50c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a4a:	10000593          	li	a1,256
1c001a4e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001a52:	30061073          	csrw	mstatus,a2
1c001a56:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a5a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a5e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a62:	30047673          	csrrci	a2,mstatus,8
1c001a66:	40472783          	lw	a5,1028(a4)
1c001a6a:	46da                	lw	a3,148(sp)
1c001a6c:	40d7d7b3          	sra	a5,a5,a3
1c001a70:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a74:	fff9                	bnez	a5,1c001a52 <S2_Conv2d_16x20x1x3+0x4e8>
1c001a76:	4785                	li	a5,1
1c001a78:	00d796b3          	sll	a3,a5,a3
1c001a7c:	002047b7          	lui	a5,0x204
1c001a80:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001a84:	30061073          	csrw	mstatus,a2
1c001a88:	b9f5                	j	1c001784 <S2_Conv2d_16x20x1x3+0x21a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a8a:	30047673          	csrrci	a2,mstatus,8
1c001a8e:	40472703          	lw	a4,1028(a4)
1c001a92:	56d6                	lw	a3,116(sp)
1c001a94:	40d75733          	sra	a4,a4,a3
1c001a98:	fc173733          	p.bclr	a4,a4,30,1
1c001a9c:	c71d                	beqz	a4,1c001aca <S2_Conv2d_16x20x1x3+0x560>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a9e:	10000893          	li	a7,256
1c001aa2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001aa6:	30061073          	csrw	mstatus,a2
1c001aaa:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001aae:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001ab2:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ab6:	30047673          	csrrci	a2,mstatus,8
1c001aba:	40472783          	lw	a5,1028(a4)
1c001abe:	56d6                	lw	a3,116(sp)
1c001ac0:	40d7d7b3          	sra	a5,a5,a3
1c001ac4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ac8:	fff9                	bnez	a5,1c001aa6 <S2_Conv2d_16x20x1x3+0x53c>
1c001aca:	4785                	li	a5,1
1c001acc:	00d796b3          	sll	a3,a5,a3
1c001ad0:	002047b7          	lui	a5,0x204
1c001ad4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001ad8:	30061073          	csrw	mstatus,a2
1c001adc:	b991                	j	1c001730 <S2_Conv2d_16x20x1x3+0x1c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ade:	300478f3          	csrrci	a7,mstatus,8
1c001ae2:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c001ae6:	4656                	lw	a2,84(sp)
1c001ae8:	40c6d6b3          	sra	a3,a3,a2
1c001aec:	fc16b6b3          	p.bclr	a3,a3,30,1
1c001af0:	c69d                	beqz	a3,1c001b1e <S2_Conv2d_16x20x1x3+0x5b4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001af2:	10000313          	li	t1,256
1c001af6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c001afa:	30089073          	csrw	mstatus,a7
1c001afe:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001b02:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001b06:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b0a:	300478f3          	csrrci	a7,mstatus,8
1c001b0e:	4046a703          	lw	a4,1028(a3)
1c001b12:	4656                	lw	a2,84(sp)
1c001b14:	40c75733          	sra	a4,a4,a2
1c001b18:	fc173733          	p.bclr	a4,a4,30,1
1c001b1c:	ff79                	bnez	a4,1c001afa <S2_Conv2d_16x20x1x3+0x590>
1c001b1e:	4705                	li	a4,1
1c001b20:	00c71633          	sll	a2,a4,a2
1c001b24:	00204737          	lui	a4,0x204
1c001b28:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001b2c:	30089073          	csrw	mstatus,a7
1c001b30:	b66d                	j	1c0016da <S2_Conv2d_16x20x1x3+0x170>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b32:	30047373          	csrrci	t1,mstatus,8
1c001b36:	4046a683          	lw	a3,1028(a3)
1c001b3a:	58d2                	lw	a7,52(sp)
1c001b3c:	4116d6b3          	sra	a3,a3,a7
1c001b40:	fc16b6b3          	p.bclr	a3,a3,30,1
1c001b44:	c69d                	beqz	a3,1c001b72 <S2_Conv2d_16x20x1x3+0x608>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001b46:	10000e13          	li	t3,256
1c001b4a:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c001b4e:	30031073          	csrw	mstatus,t1
1c001b52:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001b56:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001b5a:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b5e:	30047373          	csrrci	t1,mstatus,8
1c001b62:	4046a603          	lw	a2,1028(a3)
1c001b66:	58d2                	lw	a7,52(sp)
1c001b68:	41165633          	sra	a2,a2,a7
1c001b6c:	fc163633          	p.bclr	a2,a2,30,1
1c001b70:	fe79                	bnez	a2,1c001b4e <S2_Conv2d_16x20x1x3+0x5e4>
1c001b72:	4685                	li	a3,1
1c001b74:	011698b3          	sll	a7,a3,a7
1c001b78:	002046b7          	lui	a3,0x204
1c001b7c:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001b80:	30031073          	csrw	mstatus,t1
1c001b84:	bcfd                	j	1c001682 <S2_Conv2d_16x20x1x3+0x118>

1c001b86 <S3_Conv2d_16x16x1x3_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c001b86:	710d                	addi	sp,sp,-352
1c001b88:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg0->W = (unsigned short int) (299);
1c001b8c:	1c0100b7          	lui	ra,0x1c010
{
1c001b90:	15212823          	sw	s2,336(sp)
1c001b94:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c001b96:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c001b9a:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c001b9e:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c001ba2:	c436                	sw	a3,8(sp)
	KerArg1->W = (unsigned short int) (299);
1c001ba4:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c001ba8:	15312623          	sw	s3,332(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (16);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c001bac:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c001bb0:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c001bb4:	008066d7          	pv.add.sci.h	a3,zero,16
{
1c001bb8:	14912a23          	sw	s1,340(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c001bbc:	12d12023          	sw	a3,288(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001bc0:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c001bc4:	9f49a683          	lw	a3,-1548(s3) # 1c00f9f4 <__clz_tab+0x268>
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001bc8:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
1c001bcc:	0004a303          	lw	t1,0(s1)
{
1c001bd0:	14812c23          	sw	s0,344(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
	KerArg2->Feat = (unsigned short int) (16);
1c001bd4:	1c010437          	lui	s0,0x1c010
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c001bd8:	6885                	lui	a7,0x1
{
1c001bda:	15612023          	sw	s6,320(sp)
	KerArg1->Pad = (v4s) ((v4s){2,0,0,0});
1c001bde:	12d12a23          	sw	a3,308(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001be2:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c001be4:	9f842683          	lw	a3,-1544(s0) # 1c00f9f8 <__clz_tab+0x26c>
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c001be8:	6b1d                	lui	s6,0x7
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c001bea:	2b088e93          	addi	t4,a7,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c001bee:	31088293          	addi	t0,a7,784
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c001bf2:	61088f93          	addi	t6,a7,1552
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c001bf6:	2f088f13          	addi	t5,a7,752
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001bfa:	8c0e0e13          	addi	t3,t3,-1856 # 28c0 <__rt_stack_size+0x20c0>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c001bfe:	30088893          	addi	a7,a7,768
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c001c02:	380b0b13          	addi	s6,s6,896 # 7380 <__rt_stack_size+0x6b80>
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001c06:	9e1a                	add	t3,t3,t1
	KerArg1->H = (unsigned short int) (1);
1c001c08:	4385                	li	t2,1
{
1c001c0a:	15512223          	sw	s5,324(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c001c0e:	9e9a                	add	t4,t4,t1
	KerArg0->Feat = (unsigned short int) (16);
1c001c10:	4ac1                	li	s5,16
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c001c12:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c001c14:	9f9a                	add	t6,t6,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c001c16:	9f1a                	add	t5,t5,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c001c18:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c001c1a:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001c1c:	c272                	sw	t3,4(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c001c1e:	01511623          	sh	s5,12(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c001c22:	c876                	sw	t4,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c001c24:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c001c28:	10711e23          	sh	t2,284(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (16);
1c001c2c:	13511223          	sh	s5,292(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c001c30:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c001c34:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
1c001c38:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c001c3a:	ce7e                	sw	t6,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c001c3c:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c001c3e:	02711223          	sh	t2,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c001c42:	d47a                	sw	t5,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c001c44:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c001c46:	d85a                	sw	s6,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c48:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001c4c:	002046b7          	lui	a3,0x204
1c001c50:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001c54:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001c58:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001c5c:	c158c8b3          	p.bset	a7,a7,0,21
1c001c60:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001c64:	41d6a023          	sw	t4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001c68:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c001c6c:	da72                	sw	t3,52(sp)
        copy->length = 0;
1c001c6e:	c282                	sw	zero,68(sp)
  __builtin_pulp_spr_write(reg, val);
1c001c70:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c001c74:	4616                	lw	a2,68(sp)
1c001c76:	4c060563          	beqz	a2,1c002140 <S3_Conv2d_16x16x1x3_Relu+0x5ba>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001c7a:	48b6                	lw	a7,76(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c7c:	02000613          	li	a2,32
1c001c80:	00088b63          	beqz	a7,1c001c96 <S3_Conv2d_16x16x1x3_Relu+0x110>
1c001c84:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c88:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c8c:	00c6a223          	sw	a2,4(a3)
1c001c90:	48b6                	lw	a7,76(sp)
1c001c92:	fe0899e3          	bnez	a7,1c001c84 <S3_Conv2d_16x16x1x3_Relu+0xfe>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4848), 16, 0, &DmaR_Evt2);
1c001c96:	0004a883          	lw	a7,0(s1)
1c001c9a:	6685                	lui	a3,0x1
1c001c9c:	2f068693          	addi	a3,a3,752 # 12f0 <__rt_stack_size+0xaf0>
1c001ca0:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ca2:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ca6:	002046b7          	lui	a3,0x204
1c001caa:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001cae:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001cb2:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001cb4:	c1564633          	p.bset	a2,a2,0,21
1c001cb8:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001cbc:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001cc0:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c001cc4:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c001cc6:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c001cc8:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c001ccc:	5716                	lw	a4,100(sp)
1c001cce:	40070f63          	beqz	a4,1c0020ec <S3_Conv2d_16x16x1x3_Relu+0x566>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001cd2:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001cd4:	02000693          	li	a3,32
1c001cd8:	00204737          	lui	a4,0x204
1c001cdc:	ca09                	beqz	a2,1c001cee <S3_Conv2d_16x16x1x3_Relu+0x168>
1c001cde:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ce2:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001ce6:	00d72223          	sw	a3,4(a4)
1c001cea:	5636                	lw	a2,108(sp)
1c001cec:	fa6d                	bnez	a2,1c001cde <S3_Conv2d_16x16x1x3_Relu+0x158>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4864), 16, 0, &DmaR_Evt3);
1c001cee:	4090                	lw	a2,0(s1)
1c001cf0:	6705                	lui	a4,0x1
1c001cf2:	30070713          	addi	a4,a4,768 # 1300 <__rt_stack_size+0xb00>
1c001cf6:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001cf8:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001cfc:	00204737          	lui	a4,0x204
1c001d00:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001d04:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001d08:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001d0a:	c156c6b3          	p.bset	a3,a3,0,21
1c001d0e:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001d12:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001d16:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001d1a:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c001d1c:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c001d1e:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c001d22:	479a                	lw	a5,132(sp)
1c001d24:	36078a63          	beqz	a5,1c002098 <S3_Conv2d_16x16x1x3_Relu+0x512>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001d28:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001d2a:	02000713          	li	a4,32
1c001d2e:	002047b7          	lui	a5,0x204
1c001d32:	ca89                	beqz	a3,1c001d44 <S3_Conv2d_16x16x1x3_Relu+0x1be>
1c001d34:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d38:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d3c:	00e7a223          	sw	a4,4(a5)
1c001d40:	46ba                	lw	a3,140(sp)
1c001d42:	faed                	bnez	a3,1c001d34 <S3_Conv2d_16x16x1x3_Relu+0x1ae>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4880), 768, 0, &DmaR_Evt4);
1c001d44:	4094                	lw	a3,0(s1)
1c001d46:	6785                	lui	a5,0x1
1c001d48:	31078793          	addi	a5,a5,784 # 1310 <__rt_stack_size+0xb10>
1c001d4c:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d4e:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001d52:	002047b7          	lui	a5,0x204
1c001d56:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001d5a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001d5e:	30070713          	addi	a4,a4,768 # b0300 <__L2+0x30300>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001d62:	c1574733          	p.bset	a4,a4,0,21
1c001d66:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001d6a:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001d6e:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c001d72:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c001d74:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c001d76:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001d7a:	571a                	lw	a4,164(sp)
1c001d7c:	2c070463          	beqz	a4,1c002044 <S3_Conv2d_16x16x1x3_Relu+0x4be>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001d80:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001d82:	02000713          	li	a4,32
1c001d86:	ca89                	beqz	a3,1c001d98 <S3_Conv2d_16x16x1x3_Relu+0x212>
1c001d88:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d8c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d90:	00e7a223          	sw	a4,4(a5)
1c001d94:	56ba                	lw	a3,172(sp)
1c001d96:	faed                	bnez	a3,1c001d88 <S3_Conv2d_16x16x1x3_Relu+0x202>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt5);
1c001d98:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d9a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001d9e:	002047b7          	lui	a5,0x204
1c001da2:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001da6:	00031737          	lui	a4,0x31
1c001daa:	2b070713          	addi	a4,a4,688 # 312b0 <__L1Cl+0x212b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001dae:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001db2:	c1574733          	p.bset	a4,a4,0,21
1c001db6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001dba:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001dbe:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c001dc2:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c001dc4:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c001dc6:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c001dca:	471e                	lw	a4,196(sp)
1c001dcc:	22070263          	beqz	a4,1c001ff0 <S3_Conv2d_16x16x1x3_Relu+0x46a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001dd0:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001dd2:	02000713          	li	a4,32
1c001dd6:	ca89                	beqz	a3,1c001de8 <S3_Conv2d_16x16x1x3_Relu+0x262>
1c001dd8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ddc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001de0:	00e7a223          	sw	a4,4(a5)
1c001de4:	46be                	lw	a3,204(sp)
1c001de6:	faed                	bnez	a3,1c001dd8 <S3_Conv2d_16x16x1x3_Relu+0x252>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+29568), 9, 0, &DmaR_Evt6);
1c001de8:	4094                	lw	a3,0(s1)
1c001dea:	679d                	lui	a5,0x7
1c001dec:	38078793          	addi	a5,a5,896 # 7380 <__rt_stack_size+0x6b80>
1c001df0:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001df2:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001df6:	002047b7          	lui	a5,0x204
1c001dfa:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001dfe:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001e02:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001e04:	c1574733          	p.bset	a4,a4,0,21
1c001e08:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001e0c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001e10:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c001e14:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c001e16:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c001e18:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c001e1c:	571e                	lw	a4,228(sp)
1c001e1e:	16070f63          	beqz	a4,1c001f9c <S3_Conv2d_16x16x1x3_Relu+0x416>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001e22:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001e24:	02000713          	li	a4,32
1c001e28:	ca89                	beqz	a3,1c001e3a <S3_Conv2d_16x16x1x3_Relu+0x2b4>
1c001e2a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e2e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001e32:	00e7a223          	sw	a4,4(a5)
1c001e36:	56be                	lw	a3,236(sp)
1c001e38:	faed                	bnez	a3,1c001e2a <S3_Conv2d_16x16x1x3_Relu+0x2a4>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+29568))[5]);
1c001e3a:	409c                	lw	a5,0(s1)
1c001e3c:	671d                	lui	a4,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001e3e:	0ff00a13          	li	s4,255
1c001e42:	97ba                	add	a5,a5,a4
1c001e44:	3857c783          	lbu	a5,901(a5)
1c001e48:	00204437          	lui	s0,0x204
1c001e4c:	00f10a23          	sb	a5,20(sp)
1c001e50:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001e54:	20040993          	addi	s3,s0,512
1c001e58:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001e5c:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001e60:	1c0087b7          	lui	a5,0x1c008
1c001e64:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c001e68:	08f42023          	sw	a5,128(s0)
1c001e6c:	0048                	addi	a0,sp,4
1c001e6e:	08a42023          	sw	a0,128(s0)
1c001e72:	5ae060ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e76:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c001e7a:	4785                	li	a5,1
1c001e7c:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001e80:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001e84:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001e88:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001e8c:	1c0097b7          	lui	a5,0x1c009
1c001e90:	f8678793          	addi	a5,a5,-122 # 1c008f86 <KerParConv3x1Stride1x1_SQ8>
1c001e94:	08f42023          	sw	a5,128(s0)
1c001e98:	0a48                	addi	a0,sp,276
1c001e9a:	08a42023          	sw	a0,128(s0)
1c001e9e:	0e8070ef          	jal	ra,1c008f86 <KerParConv3x1Stride1x1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ea2:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001ea6:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001eaa:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001eae:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001eb2:	1c0087b7          	lui	a5,0x1c008
1c001eb6:	38878793          	addi	a5,a5,904 # 1c008388 <KerParReduct_CC_ReLU_SQ8>
1c001eba:	08f42023          	sw	a5,128(s0)
1c001ebe:	0828                	addi	a0,sp,24
1c001ec0:	08a42023          	sw	a0,128(s0)
1c001ec4:	4c4060ef          	jal	ra,1c008388 <KerParReduct_CC_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ec8:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_ReLU_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_ReLU_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5648), 4784, 1, &DmaW_Evt1);
1c001ecc:	6785                	lui	a5,0x1
1c001ece:	4098                	lw	a4,0(s1)
1c001ed0:	61078693          	addi	a3,a5,1552 # 1610 <__rt_stack_size+0xe10>
1c001ed4:	9736                	add	a4,a4,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ed6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001eda:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001ede:	002a05b7          	lui	a1,0x2a0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001ee2:	2b078793          	addi	a5,a5,688
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001ee6:	8fcd                	or	a5,a5,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ee8:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001eec:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001ef0:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c001ef4:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c001ef6:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c001efa:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c001efe:	10412783          	lw	a5,260(sp)
1c001f02:	c3b9                	beqz	a5,1c001f48 <S3_Conv2d_16x16x1x3_Relu+0x3c2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001f04:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f08:	02000713          	li	a4,32
1c001f0c:	002047b7          	lui	a5,0x204
1c001f10:	ca91                	beqz	a3,1c001f24 <S3_Conv2d_16x16x1x3_Relu+0x39e>
1c001f12:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f16:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f1a:	00e7a223          	sw	a4,4(a5)
1c001f1e:	10c12683          	lw	a3,268(sp)
1c001f22:	fae5                	bnez	a3,1c001f12 <S3_Conv2d_16x16x1x3_Relu+0x38c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001f24:	15c12083          	lw	ra,348(sp)
1c001f28:	15812403          	lw	s0,344(sp)
1c001f2c:	15412483          	lw	s1,340(sp)
1c001f30:	15012903          	lw	s2,336(sp)
1c001f34:	14c12983          	lw	s3,332(sp)
1c001f38:	14812a03          	lw	s4,328(sp)
1c001f3c:	14412a83          	lw	s5,324(sp)
1c001f40:	14012b03          	lw	s6,320(sp)
1c001f44:	6135                	addi	sp,sp,352
1c001f46:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f48:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001f4c:	40442403          	lw	s0,1028(s0)
1c001f50:	56de                	lw	a3,244(sp)
1c001f52:	40d45433          	sra	s0,s0,a3
1c001f56:	fc143433          	p.bclr	s0,s0,30,1
1c001f5a:	c41d                	beqz	s0,1c001f88 <S3_Conv2d_16x16x1x3_Relu+0x402>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f5c:	10000593          	li	a1,256
1c001f60:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001f64:	30061073          	csrw	mstatus,a2
1c001f68:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f6c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f70:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f74:	30047673          	csrrci	a2,mstatus,8
1c001f78:	40472783          	lw	a5,1028(a4)
1c001f7c:	56de                	lw	a3,244(sp)
1c001f7e:	40d7d7b3          	sra	a5,a5,a3
1c001f82:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f86:	fff9                	bnez	a5,1c001f64 <S3_Conv2d_16x16x1x3_Relu+0x3de>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001f88:	4785                	li	a5,1
1c001f8a:	00d796b3          	sll	a3,a5,a3
1c001f8e:	002047b7          	lui	a5,0x204
1c001f92:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001f96:	30061073          	csrw	mstatus,a2
1c001f9a:	b769                	j	1c001f24 <S3_Conv2d_16x16x1x3_Relu+0x39e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f9c:	30047673          	csrrci	a2,mstatus,8
1c001fa0:	4047a783          	lw	a5,1028(a5)
1c001fa4:	46de                	lw	a3,212(sp)
1c001fa6:	40d7d7b3          	sra	a5,a5,a3
1c001faa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001fae:	c79d                	beqz	a5,1c001fdc <S3_Conv2d_16x16x1x3_Relu+0x456>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001fb0:	10000593          	li	a1,256
1c001fb4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001fb8:	30061073          	csrw	mstatus,a2
1c001fbc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001fc0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001fc4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001fc8:	30047673          	csrrci	a2,mstatus,8
1c001fcc:	40472783          	lw	a5,1028(a4)
1c001fd0:	46de                	lw	a3,212(sp)
1c001fd2:	40d7d7b3          	sra	a5,a5,a3
1c001fd6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001fda:	fff9                	bnez	a5,1c001fb8 <S3_Conv2d_16x16x1x3_Relu+0x432>
1c001fdc:	4785                	li	a5,1
1c001fde:	00d796b3          	sll	a3,a5,a3
1c001fe2:	002047b7          	lui	a5,0x204
1c001fe6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001fea:	30061073          	csrw	mstatus,a2
1c001fee:	b5b1                	j	1c001e3a <S3_Conv2d_16x16x1x3_Relu+0x2b4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ff0:	30047673          	csrrci	a2,mstatus,8
1c001ff4:	4047a783          	lw	a5,1028(a5)
1c001ff8:	56da                	lw	a3,180(sp)
1c001ffa:	40d7d7b3          	sra	a5,a5,a3
1c001ffe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002002:	c79d                	beqz	a5,1c002030 <S3_Conv2d_16x16x1x3_Relu+0x4aa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002004:	10000593          	li	a1,256
1c002008:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00200c:	30061073          	csrw	mstatus,a2
1c002010:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002014:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002018:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00201c:	30047673          	csrrci	a2,mstatus,8
1c002020:	40472783          	lw	a5,1028(a4)
1c002024:	56da                	lw	a3,180(sp)
1c002026:	40d7d7b3          	sra	a5,a5,a3
1c00202a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00202e:	fff9                	bnez	a5,1c00200c <S3_Conv2d_16x16x1x3_Relu+0x486>
1c002030:	4785                	li	a5,1
1c002032:	00d796b3          	sll	a3,a5,a3
1c002036:	002047b7          	lui	a5,0x204
1c00203a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00203e:	30061073          	csrw	mstatus,a2
1c002042:	b35d                	j	1c001de8 <S3_Conv2d_16x16x1x3_Relu+0x262>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002044:	30047673          	csrrci	a2,mstatus,8
1c002048:	4047a783          	lw	a5,1028(a5)
1c00204c:	46da                	lw	a3,148(sp)
1c00204e:	40d7d7b3          	sra	a5,a5,a3
1c002052:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002056:	c79d                	beqz	a5,1c002084 <S3_Conv2d_16x16x1x3_Relu+0x4fe>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002058:	10000593          	li	a1,256
1c00205c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002060:	30061073          	csrw	mstatus,a2
1c002064:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002068:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00206c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002070:	30047673          	csrrci	a2,mstatus,8
1c002074:	40472783          	lw	a5,1028(a4)
1c002078:	46da                	lw	a3,148(sp)
1c00207a:	40d7d7b3          	sra	a5,a5,a3
1c00207e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002082:	fff9                	bnez	a5,1c002060 <S3_Conv2d_16x16x1x3_Relu+0x4da>
1c002084:	4785                	li	a5,1
1c002086:	00d796b3          	sll	a3,a5,a3
1c00208a:	002047b7          	lui	a5,0x204
1c00208e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002092:	30061073          	csrw	mstatus,a2
1c002096:	b309                	j	1c001d98 <S3_Conv2d_16x16x1x3_Relu+0x212>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002098:	30047673          	csrrci	a2,mstatus,8
1c00209c:	40472703          	lw	a4,1028(a4)
1c0020a0:	56d6                	lw	a3,116(sp)
1c0020a2:	40d75733          	sra	a4,a4,a3
1c0020a6:	fc173733          	p.bclr	a4,a4,30,1
1c0020aa:	c71d                	beqz	a4,1c0020d8 <S3_Conv2d_16x16x1x3_Relu+0x552>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0020ac:	10000893          	li	a7,256
1c0020b0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0020b4:	30061073          	csrw	mstatus,a2
1c0020b8:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0020bc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0020c0:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0020c4:	30047673          	csrrci	a2,mstatus,8
1c0020c8:	40472783          	lw	a5,1028(a4)
1c0020cc:	56d6                	lw	a3,116(sp)
1c0020ce:	40d7d7b3          	sra	a5,a5,a3
1c0020d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020d6:	fff9                	bnez	a5,1c0020b4 <S3_Conv2d_16x16x1x3_Relu+0x52e>
1c0020d8:	4785                	li	a5,1
1c0020da:	00d796b3          	sll	a3,a5,a3
1c0020de:	002047b7          	lui	a5,0x204
1c0020e2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0020e6:	30061073          	csrw	mstatus,a2
1c0020ea:	b9a9                	j	1c001d44 <S3_Conv2d_16x16x1x3_Relu+0x1be>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0020ec:	300478f3          	csrrci	a7,mstatus,8
1c0020f0:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c0020f4:	4656                	lw	a2,84(sp)
1c0020f6:	40c6d6b3          	sra	a3,a3,a2
1c0020fa:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0020fe:	c69d                	beqz	a3,1c00212c <S3_Conv2d_16x16x1x3_Relu+0x5a6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002100:	10000313          	li	t1,256
1c002104:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c002108:	30089073          	csrw	mstatus,a7
1c00210c:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002110:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002114:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002118:	300478f3          	csrrci	a7,mstatus,8
1c00211c:	4046a703          	lw	a4,1028(a3)
1c002120:	4656                	lw	a2,84(sp)
1c002122:	40c75733          	sra	a4,a4,a2
1c002126:	fc173733          	p.bclr	a4,a4,30,1
1c00212a:	ff79                	bnez	a4,1c002108 <S3_Conv2d_16x16x1x3_Relu+0x582>
1c00212c:	4705                	li	a4,1
1c00212e:	00c71633          	sll	a2,a4,a2
1c002132:	00204737          	lui	a4,0x204
1c002136:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00213a:	30089073          	csrw	mstatus,a7
1c00213e:	be45                	j	1c001cee <S3_Conv2d_16x16x1x3_Relu+0x168>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002140:	30047373          	csrrci	t1,mstatus,8
1c002144:	4046a683          	lw	a3,1028(a3)
1c002148:	58d2                	lw	a7,52(sp)
1c00214a:	4116d6b3          	sra	a3,a3,a7
1c00214e:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002152:	c69d                	beqz	a3,1c002180 <S3_Conv2d_16x16x1x3_Relu+0x5fa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002154:	10000e13          	li	t3,256
1c002158:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c00215c:	30031073          	csrw	mstatus,t1
1c002160:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002164:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002168:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00216c:	30047373          	csrrci	t1,mstatus,8
1c002170:	4046a603          	lw	a2,1028(a3)
1c002174:	58d2                	lw	a7,52(sp)
1c002176:	41165633          	sra	a2,a2,a7
1c00217a:	fc163633          	p.bclr	a2,a2,30,1
1c00217e:	fe79                	bnez	a2,1c00215c <S3_Conv2d_16x16x1x3_Relu+0x5d6>
1c002180:	4685                	li	a3,1
1c002182:	011698b3          	sll	a7,a3,a7
1c002186:	002046b7          	lui	a3,0x204
1c00218a:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00218e:	30031073          	csrw	mstatus,t1
1c002192:	b611                	j	1c001c96 <S3_Conv2d_16x16x1x3_Relu+0x110>

1c002194 <S5_MatAdd_16x1x299_Relu>:
		signed char * __restrict__ In1,
		signed char * __restrict__ In2,
		signed char * __restrict__ Out,
		signed char * __restrict__ Infos)

{
1c002194:	7131                	addi	sp,sp,-192
1c002196:	db26                	sw	s1,180(sp)
			[Tile0, 1:[1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c002198:	100004b7          	lui	s1,0x10000
1c00219c:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
	KerArg0->Feat = (unsigned short int) (16);
1c0021a0:	1c010337          	lui	t1,0x1c010
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c0021a4:	0004a803          	lw	a6,0(s1)
{
1c0021a8:	d94a                	sw	s2,176(sp)
1c0021aa:	8932                	mv	s2,a2
	KerArg0->Feat = (unsigned short int) (16);
1c0021ac:	9fc32603          	lw	a2,-1540(t1) # 1c00f9fc <__clz_tab+0x270>
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c0021b0:	6705                	lui	a4,0x1
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c0021b2:	6889                	lui	a7,0x2
	KerArg0->W = (unsigned short int) (1);
	KerArg0->H = (unsigned short int) (299);
	KerArg0->DoScale = (unsigned char) (0);
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c0021b4:	6791                	lui	a5,0x4
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c0021b6:	2b070713          	addi	a4,a4,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c0021ba:	56088893          	addi	a7,a7,1376 # 2560 <__rt_stack_size+0x1d60>
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c0021be:	81078793          	addi	a5,a5,-2032 # 3810 <__rt_stack_size+0x3010>
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c0021c2:	00e80e33          	add	t3,a6,a4
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c0021c6:	98c2                	add	a7,a7,a6
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c0021c8:	97c2                	add	a5,a5,a6
	KerArg0->Feat = (unsigned short int) (16);
1c0021ca:	ca32                	sw	a2,20(sp)
	KerArg0->H = (unsigned short int) (299);
1c0021cc:	12b00613          	li	a2,299
{
1c0021d0:	df06                	sw	ra,188(sp)
1c0021d2:	dd22                	sw	s0,184(sp)
1c0021d4:	d74e                	sw	s3,172(sp)
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c0021d6:	c442                	sw	a6,8(sp)
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c0021d8:	c672                	sw	t3,12(sp)
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c0021da:	c846                	sw	a7,16(sp)
	KerArg0->H = (unsigned short int) (299);
1c0021dc:	00c11c23          	sh	a2,24(sp)
	KerArg0->DoScale = (unsigned char) (0);
1c0021e0:	00010d23          	sb	zero,26(sp)
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c0021e4:	ce3e                	sw	a5,28(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021e6:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0021ea:	002047b7          	lui	a5,0x204
1c0021ee:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0021f2:	002b0337          	lui	t1,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0021f6:	00676733          	or	a4,a4,t1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0021fa:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0021fe:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002202:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c002206:	d046                	sw	a7,32(sp)
        copy->length = 0;
1c002208:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c00220a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00220e:	5742                	lw	a4,48(sp)
1c002210:	24070e63          	beqz	a4,1c00246c <S5_MatAdd_16x1x299_Relu+0x2d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002214:	5662                	lw	a2,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002216:	02000713          	li	a4,32
1c00221a:	ca09                	beqz	a2,1c00222c <S5_MatAdd_16x1x299_Relu+0x98>
1c00221c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002220:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002224:	00e7a223          	sw	a4,4(a5)
1c002228:	5662                	lw	a2,56(sp)
1c00222a:	fa6d                	bnez	a2,1c00221c <S5_MatAdd_16x1x299_Relu+0x88>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 4784, 0, &DmaR_Evt2);
1c00222c:	4090                	lw	a2,0(s1)
1c00222e:	6705                	lui	a4,0x1
1c002230:	2b070713          	addi	a4,a4,688 # 12b0 <__rt_stack_size+0xab0>
1c002234:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002236:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00223a:	002047b7          	lui	a5,0x204
1c00223e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002242:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002246:	01176733          	or	a4,a4,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00224a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00224e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002252:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c002256:	c0c2                	sw	a6,64(sp)
        copy->length = 0;
1c002258:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c00225a:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00225e:	4746                	lw	a4,80(sp)
1c002260:	1a070c63          	beqz	a4,1c002418 <S5_MatAdd_16x1x299_Relu+0x284>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002264:	4666                	lw	a2,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002266:	02000713          	li	a4,32
1c00226a:	ca09                	beqz	a2,1c00227c <S5_MatAdd_16x1x299_Relu+0xe8>
1c00226c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002270:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002274:	00e7a223          	sw	a4,4(a5)
1c002278:	4666                	lw	a2,88(sp)
1c00227a:	fa6d                	bnez	a2,1c00226c <S5_MatAdd_16x1x299_Relu+0xd8>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read In2 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+14352), 9, 0, &DmaR_Evt3);
1c00227c:	4090                	lw	a2,0(s1)
1c00227e:	6791                	lui	a5,0x4
1c002280:	81078793          	addi	a5,a5,-2032 # 3810 <__rt_stack_size+0x3010>
1c002284:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002286:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00228a:	002047b7          	lui	a5,0x204
1c00228e:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002292:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002296:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002298:	c1574733          	p.bset	a4,a4,0,21
1c00229c:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0022a0:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0022a4:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c0022a8:	d0aa                	sw	a0,96(sp)
        copy->length = 0;
1c0022aa:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c0022ac:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0022b0:	5746                	lw	a4,112(sp)
1c0022b2:	10070963          	beqz	a4,1c0023c4 <S5_MatAdd_16x1x299_Relu+0x230>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0022b6:	56e6                	lw	a3,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0022b8:	02000713          	li	a4,32
1c0022bc:	ca89                	beqz	a3,1c0022ce <S5_MatAdd_16x1x299_Relu+0x13a>
1c0022be:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022c2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0022c6:	00e7a223          	sw	a4,4(a5)
1c0022ca:	56e6                	lw	a3,120(sp)
1c0022cc:	faed                	bnez	a3,1c0022be <S5_MatAdd_16x1x299_Relu+0x12a>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0022ce:	0ff00793          	li	a5,255
1c0022d2:	00204437          	lui	s0,0x204
1c0022d6:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0022da:	20040993          	addi	s3,s0,512
1c0022de:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0022e2:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0022e6:	1c0097b7          	lui	a5,0x1c009
1c0022ea:	62a78793          	addi	a5,a5,1578 # 1c00962a <KerParMatAdd_ReLU_SQ8>
1c0022ee:	08f42023          	sw	a5,128(s0)
1c0022f2:	0028                	addi	a0,sp,8
1c0022f4:	08a42023          	sw	a0,128(s0)
1c0022f8:	332070ef          	jal	ra,1c00962a <KerParMatAdd_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022fc:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAdd_ReLU_SQ8, (void *) KerArg0);
			__CALL(KerParMatAdd_ReLU_SQ8, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+9568), 4784, 1, &DmaW_Evt1);
1c002300:	6789                	lui	a5,0x2
1c002302:	4098                	lw	a4,0(s1)
1c002304:	56078793          	addi	a5,a5,1376 # 2560 <__rt_stack_size+0x1d60>
1c002308:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00230a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00230e:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002312:	000217b7          	lui	a5,0x21
1c002316:	2b078793          	addi	a5,a5,688 # 212b0 <__L1Cl+0x112b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00231a:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00231e:	c157c7b3          	p.bset	a5,a5,0,21
1c002322:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002326:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00232a:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c00232e:	c132                	sw	a2,128(sp)
        copy->length = 0;
1c002330:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c002332:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c002336:	47ca                	lw	a5,144(sp)
1c002338:	c795                	beqz	a5,1c002364 <S5_MatAdd_16x1x299_Relu+0x1d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00233a:	46ea                	lw	a3,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00233c:	02000713          	li	a4,32
1c002340:	002047b7          	lui	a5,0x204
1c002344:	ca89                	beqz	a3,1c002356 <S5_MatAdd_16x1x299_Relu+0x1c2>
1c002346:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00234a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00234e:	00e7a223          	sw	a4,4(a5)
1c002352:	46ea                	lw	a3,152(sp)
1c002354:	faed                	bnez	a3,1c002346 <S5_MatAdd_16x1x299_Relu+0x1b2>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002356:	50fa                	lw	ra,188(sp)
1c002358:	546a                	lw	s0,184(sp)
1c00235a:	54da                	lw	s1,180(sp)
1c00235c:	594a                	lw	s2,176(sp)
1c00235e:	59ba                	lw	s3,172(sp)
1c002360:	6129                	addi	sp,sp,192
1c002362:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002364:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002368:	40442403          	lw	s0,1028(s0)
1c00236c:	468a                	lw	a3,128(sp)
1c00236e:	40d45433          	sra	s0,s0,a3
1c002372:	fc143433          	p.bclr	s0,s0,30,1
1c002376:	c41d                	beqz	s0,1c0023a4 <S5_MatAdd_16x1x299_Relu+0x210>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002378:	10000593          	li	a1,256
1c00237c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002380:	30061073          	csrw	mstatus,a2
1c002384:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002388:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00238c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002390:	30047673          	csrrci	a2,mstatus,8
1c002394:	40472783          	lw	a5,1028(a4)
1c002398:	468a                	lw	a3,128(sp)
1c00239a:	40d7d7b3          	sra	a5,a5,a3
1c00239e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0023a2:	fff9                	bnez	a5,1c002380 <S5_MatAdd_16x1x299_Relu+0x1ec>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0023a4:	4785                	li	a5,1
1c0023a6:	00d796b3          	sll	a3,a5,a3
1c0023aa:	002047b7          	lui	a5,0x204
1c0023ae:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0023b2:	30061073          	csrw	mstatus,a2
1c0023b6:	50fa                	lw	ra,188(sp)
1c0023b8:	546a                	lw	s0,184(sp)
1c0023ba:	54da                	lw	s1,180(sp)
1c0023bc:	594a                	lw	s2,176(sp)
1c0023be:	59ba                	lw	s3,172(sp)
1c0023c0:	6129                	addi	sp,sp,192
1c0023c2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0023c4:	30047673          	csrrci	a2,mstatus,8
1c0023c8:	4047a783          	lw	a5,1028(a5)
1c0023cc:	5686                	lw	a3,96(sp)
1c0023ce:	40d7d7b3          	sra	a5,a5,a3
1c0023d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0023d6:	c79d                	beqz	a5,1c002404 <S5_MatAdd_16x1x299_Relu+0x270>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0023d8:	10000593          	li	a1,256
1c0023dc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0023e0:	30061073          	csrw	mstatus,a2
1c0023e4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0023e8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0023ec:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0023f0:	30047673          	csrrci	a2,mstatus,8
1c0023f4:	40472783          	lw	a5,1028(a4)
1c0023f8:	5686                	lw	a3,96(sp)
1c0023fa:	40d7d7b3          	sra	a5,a5,a3
1c0023fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002402:	fff9                	bnez	a5,1c0023e0 <S5_MatAdd_16x1x299_Relu+0x24c>
1c002404:	4785                	li	a5,1
1c002406:	00d796b3          	sll	a3,a5,a3
1c00240a:	002047b7          	lui	a5,0x204
1c00240e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002412:	30061073          	csrw	mstatus,a2
1c002416:	bd65                	j	1c0022ce <S5_MatAdd_16x1x299_Relu+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002418:	300475f3          	csrrci	a1,mstatus,8
1c00241c:	4047a783          	lw	a5,1028(a5)
1c002420:	4606                	lw	a2,64(sp)
1c002422:	40c7d7b3          	sra	a5,a5,a2
1c002426:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00242a:	c79d                	beqz	a5,1c002458 <S5_MatAdd_16x1x299_Relu+0x2c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00242c:	10000513          	li	a0,256
1c002430:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002434:	30059073          	csrw	mstatus,a1
1c002438:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00243c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002440:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002444:	300475f3          	csrrci	a1,mstatus,8
1c002448:	40472783          	lw	a5,1028(a4)
1c00244c:	4606                	lw	a2,64(sp)
1c00244e:	40c7d7b3          	sra	a5,a5,a2
1c002452:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002456:	fff9                	bnez	a5,1c002434 <S5_MatAdd_16x1x299_Relu+0x2a0>
1c002458:	4785                	li	a5,1
1c00245a:	00c79633          	sll	a2,a5,a2
1c00245e:	002047b7          	lui	a5,0x204
1c002462:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002466:	30059073          	csrw	mstatus,a1
1c00246a:	bd09                	j	1c00227c <S5_MatAdd_16x1x299_Relu+0xe8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00246c:	30047573          	csrrci	a0,mstatus,8
1c002470:	4047a783          	lw	a5,1028(a5)
1c002474:	5602                	lw	a2,32(sp)
1c002476:	40c7d7b3          	sra	a5,a5,a2
1c00247a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00247e:	c79d                	beqz	a5,1c0024ac <S5_MatAdd_16x1x299_Relu+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002480:	10000813          	li	a6,256
1c002484:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002488:	30051073          	csrw	mstatus,a0
1c00248c:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002490:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002494:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002498:	30047573          	csrrci	a0,mstatus,8
1c00249c:	40472783          	lw	a5,1028(a4)
1c0024a0:	5602                	lw	a2,32(sp)
1c0024a2:	40c7d7b3          	sra	a5,a5,a2
1c0024a6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0024aa:	fff9                	bnez	a5,1c002488 <S5_MatAdd_16x1x299_Relu+0x2f4>
1c0024ac:	4785                	li	a5,1
1c0024ae:	00c79633          	sll	a2,a5,a2
1c0024b2:	002047b7          	lui	a5,0x204
1c0024b6:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0024ba:	30051073          	csrw	mstatus,a0
1c0024be:	b3bd                	j	1c00222c <S5_MatAdd_16x1x299_Relu+0x98>

1c0024c0 <S6_Conv2d_16x16x1x3_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c0024c0:	710d                	addi	sp,sp,-352
1c0024c2:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg0->W = (unsigned short int) (299);
1c0024c6:	1c0100b7          	lui	ra,0x1c010
{
1c0024ca:	15212823          	sw	s2,336(sp)
1c0024ce:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c0024d0:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c0024d4:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c0024d8:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c0024dc:	c436                	sw	a3,8(sp)
	KerArg1->W = (unsigned short int) (299);
1c0024de:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c0024e2:	15312623          	sw	s3,332(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (16);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg1->Pad = (v4s) ((v4s){4,0,0,0});
1c0024e6:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c0024ea:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c0024ee:	008066d7          	pv.add.sci.h	a3,zero,16
1c0024f2:	12d12023          	sw	a3,288(sp)
	KerArg1->Pad = (v4s) ((v4s){4,0,0,0});
1c0024f6:	a009a683          	lw	a3,-1536(s3) # 1c00fa00 <__clz_tab+0x274>
{
1c0024fa:	14912a23          	sw	s1,340(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0024fe:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){4,0,0,0});
1c002502:	12d12a23          	sw	a3,308(sp)
	KerArg1->N = (unsigned char) (3);
1c002506:	010206b7          	lui	a3,0x1020
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c00250a:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
	KerArg1->N = (unsigned char) (3);
1c00250e:	10368693          	addi	a3,a3,259 # 1020103 <__L2+0xfa0103>
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002512:	0004a303          	lw	t1,0(s1)
{
1c002516:	14812c23          	sw	s0,344(sp)
	KerArg1->N = (unsigned char) (3);
1c00251a:	12d12d23          	sw	a3,314(sp)
	KerArg1->Ny = (unsigned char) (1);
	KerArg1->Sy = (unsigned char) (1);
	KerArg1->Dy = (unsigned char) (2);
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
	KerArg2->Feat = (unsigned short int) (16);
1c00251e:	1c010437          	lui	s0,0x1c010
	KerArg1->N = (unsigned char) (3);
1c002522:	20100693          	li	a3,513
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002526:	6885                	lui	a7,0x1
	KerArg1->N = (unsigned char) (3);
1c002528:	12d11f23          	sh	a3,318(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c00252c:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c00252e:	9f842683          	lw	a3,-1544(s0) # 1c00f9f8 <__clz_tab+0x26c>
{
1c002532:	15612023          	sw	s6,320(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002536:	2b088e93          	addi	t4,a7,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c00253a:	31088293          	addi	t0,a7,784
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c00253e:	61088f93          	addi	t6,a7,1552
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c002542:	2f088f13          	addi	t5,a7,752
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002546:	8c0e0e13          	addi	t3,t3,-1856 # 28c0 <__rt_stack_size+0x20c0>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c00254a:	6b1d                	lui	s6,0x7
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c00254c:	9e1a                	add	t3,t3,t1
{
1c00254e:	15512223          	sw	s5,324(sp)
	KerArg1->H = (unsigned short int) (1);
1c002552:	4385                	li	t2,1
	KerArg0->Feat = (unsigned short int) (16);
1c002554:	4ac1                	li	s5,16
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002556:	9e9a                	add	t4,t4,t1
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c002558:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c00255a:	9f9a                	add	t6,t6,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c00255c:	9f1a                	add	t5,t5,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c00255e:	30088893          	addi	a7,a7,768
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002562:	380b0b13          	addi	s6,s6,896 # 7380 <__rt_stack_size+0x6b80>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c002566:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002568:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c00256a:	c272                	sw	t3,4(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c00256c:	01511623          	sh	s5,12(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002570:	c876                	sw	t4,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c002572:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c002576:	10711e23          	sh	t2,284(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (16);
1c00257a:	13511223          	sh	s5,292(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c00257e:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002582:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
1c002586:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c002588:	ce7e                	sw	t6,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c00258a:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c00258c:	02711223          	sh	t2,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c002590:	d47a                	sw	t5,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c002592:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002594:	d85a                	sw	s6,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002596:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00259a:	002046b7          	lui	a3,0x204
1c00259e:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025a2:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0025a6:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0025aa:	c158c8b3          	p.bset	a7,a7,0,21
1c0025ae:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0025b2:	41d6a023          	sw	t4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0025b6:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c0025ba:	da72                	sw	t3,52(sp)
        copy->length = 0;
1c0025bc:	c282                	sw	zero,68(sp)
  __builtin_pulp_spr_write(reg, val);
1c0025be:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c0025c2:	4616                	lw	a2,68(sp)
1c0025c4:	4c060563          	beqz	a2,1c002a8e <S6_Conv2d_16x16x1x3_Relu+0x5ce>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0025c8:	48b6                	lw	a7,76(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0025ca:	02000613          	li	a2,32
1c0025ce:	00088b63          	beqz	a7,1c0025e4 <S6_Conv2d_16x16x1x3_Relu+0x124>
1c0025d2:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0025d6:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0025da:	00c6a223          	sw	a2,4(a3)
1c0025de:	48b6                	lw	a7,76(sp)
1c0025e0:	fe0899e3          	bnez	a7,1c0025d2 <S6_Conv2d_16x16x1x3_Relu+0x112>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4848), 16, 0, &DmaR_Evt2);
1c0025e4:	0004a883          	lw	a7,0(s1)
1c0025e8:	6685                	lui	a3,0x1
1c0025ea:	2f068693          	addi	a3,a3,752 # 12f0 <__rt_stack_size+0xaf0>
1c0025ee:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025f0:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0025f4:	002046b7          	lui	a3,0x204
1c0025f8:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025fc:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002600:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002602:	c1564633          	p.bset	a2,a2,0,21
1c002606:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00260a:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00260e:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c002612:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c002614:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c002616:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c00261a:	5716                	lw	a4,100(sp)
1c00261c:	40070f63          	beqz	a4,1c002a3a <S6_Conv2d_16x16x1x3_Relu+0x57a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002620:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002622:	02000693          	li	a3,32
1c002626:	00204737          	lui	a4,0x204
1c00262a:	ca09                	beqz	a2,1c00263c <S6_Conv2d_16x16x1x3_Relu+0x17c>
1c00262c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002630:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002634:	00d72223          	sw	a3,4(a4)
1c002638:	5636                	lw	a2,108(sp)
1c00263a:	fa6d                	bnez	a2,1c00262c <S6_Conv2d_16x16x1x3_Relu+0x16c>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4864), 16, 0, &DmaR_Evt3);
1c00263c:	4090                	lw	a2,0(s1)
1c00263e:	6705                	lui	a4,0x1
1c002640:	30070713          	addi	a4,a4,768 # 1300 <__rt_stack_size+0xb00>
1c002644:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002646:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00264a:	00204737          	lui	a4,0x204
1c00264e:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002652:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002656:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002658:	c156c6b3          	p.bset	a3,a3,0,21
1c00265c:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002660:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002664:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c002668:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c00266a:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c00266c:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c002670:	479a                	lw	a5,132(sp)
1c002672:	36078a63          	beqz	a5,1c0029e6 <S6_Conv2d_16x16x1x3_Relu+0x526>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002676:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002678:	02000713          	li	a4,32
1c00267c:	002047b7          	lui	a5,0x204
1c002680:	ca89                	beqz	a3,1c002692 <S6_Conv2d_16x16x1x3_Relu+0x1d2>
1c002682:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002686:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00268a:	00e7a223          	sw	a4,4(a5)
1c00268e:	46ba                	lw	a3,140(sp)
1c002690:	faed                	bnez	a3,1c002682 <S6_Conv2d_16x16x1x3_Relu+0x1c2>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4880), 768, 0, &DmaR_Evt4);
1c002692:	4094                	lw	a3,0(s1)
1c002694:	6785                	lui	a5,0x1
1c002696:	31078793          	addi	a5,a5,784 # 1310 <__rt_stack_size+0xb10>
1c00269a:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00269c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0026a0:	002047b7          	lui	a5,0x204
1c0026a4:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0026a8:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0026ac:	30070713          	addi	a4,a4,768 # b0300 <__L2+0x30300>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0026b0:	c1574733          	p.bset	a4,a4,0,21
1c0026b4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0026b8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0026bc:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0026c0:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c0026c2:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c0026c4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0026c8:	571a                	lw	a4,164(sp)
1c0026ca:	2c070463          	beqz	a4,1c002992 <S6_Conv2d_16x16x1x3_Relu+0x4d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0026ce:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0026d0:	02000713          	li	a4,32
1c0026d4:	ca89                	beqz	a3,1c0026e6 <S6_Conv2d_16x16x1x3_Relu+0x226>
1c0026d6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0026da:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0026de:	00e7a223          	sw	a4,4(a5)
1c0026e2:	56ba                	lw	a3,172(sp)
1c0026e4:	faed                	bnez	a3,1c0026d6 <S6_Conv2d_16x16x1x3_Relu+0x216>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt5);
1c0026e6:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0026e8:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0026ec:	002047b7          	lui	a5,0x204
1c0026f0:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0026f4:	00031737          	lui	a4,0x31
1c0026f8:	2b070713          	addi	a4,a4,688 # 312b0 <__L1Cl+0x212b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0026fc:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002700:	c1574733          	p.bset	a4,a4,0,21
1c002704:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002708:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00270c:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c002710:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c002712:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c002714:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c002718:	471e                	lw	a4,196(sp)
1c00271a:	22070263          	beqz	a4,1c00293e <S6_Conv2d_16x16x1x3_Relu+0x47e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00271e:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002720:	02000713          	li	a4,32
1c002724:	ca89                	beqz	a3,1c002736 <S6_Conv2d_16x16x1x3_Relu+0x276>
1c002726:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00272a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00272e:	00e7a223          	sw	a4,4(a5)
1c002732:	46be                	lw	a3,204(sp)
1c002734:	faed                	bnez	a3,1c002726 <S6_Conv2d_16x16x1x3_Relu+0x266>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+29568), 9, 0, &DmaR_Evt6);
1c002736:	4094                	lw	a3,0(s1)
1c002738:	679d                	lui	a5,0x7
1c00273a:	38078793          	addi	a5,a5,896 # 7380 <__rt_stack_size+0x6b80>
1c00273e:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002740:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002744:	002047b7          	lui	a5,0x204
1c002748:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00274c:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002750:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002752:	c1574733          	p.bset	a4,a4,0,21
1c002756:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00275a:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00275e:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c002762:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c002764:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c002766:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00276a:	571e                	lw	a4,228(sp)
1c00276c:	16070f63          	beqz	a4,1c0028ea <S6_Conv2d_16x16x1x3_Relu+0x42a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002770:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002772:	02000713          	li	a4,32
1c002776:	ca89                	beqz	a3,1c002788 <S6_Conv2d_16x16x1x3_Relu+0x2c8>
1c002778:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00277c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002780:	00e7a223          	sw	a4,4(a5)
1c002784:	56be                	lw	a3,236(sp)
1c002786:	faed                	bnez	a3,1c002778 <S6_Conv2d_16x16x1x3_Relu+0x2b8>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+29568))[5]);
1c002788:	409c                	lw	a5,0(s1)
1c00278a:	671d                	lui	a4,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00278c:	0ff00a13          	li	s4,255
1c002790:	97ba                	add	a5,a5,a4
1c002792:	3857c783          	lbu	a5,901(a5)
1c002796:	00204437          	lui	s0,0x204
1c00279a:	00f10a23          	sb	a5,20(sp)
1c00279e:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0027a2:	20040993          	addi	s3,s0,512
1c0027a6:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0027aa:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0027ae:	1c0087b7          	lui	a5,0x1c008
1c0027b2:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c0027b6:	08f42023          	sw	a5,128(s0)
1c0027ba:	0048                	addi	a0,sp,4
1c0027bc:	08a42023          	sw	a0,128(s0)
1c0027c0:	461050ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0027c4:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c0027c8:	4785                	li	a5,1
1c0027ca:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0027ce:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0027d2:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0027d6:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0027da:	1c0097b7          	lui	a5,0x1c009
1c0027de:	10a78793          	addi	a5,a5,266 # 1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
1c0027e2:	08f42023          	sw	a5,128(s0)
1c0027e6:	0a48                	addi	a0,sp,276
1c0027e8:	08a42023          	sw	a0,128(s0)
1c0027ec:	11f060ef          	jal	ra,1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0027f0:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0027f4:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0027f8:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0027fc:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002800:	1c0087b7          	lui	a5,0x1c008
1c002804:	38878793          	addi	a5,a5,904 # 1c008388 <KerParReduct_CC_ReLU_SQ8>
1c002808:	08f42023          	sw	a5,128(s0)
1c00280c:	0828                	addi	a0,sp,24
1c00280e:	08a42023          	sw	a0,128(s0)
1c002812:	377050ef          	jal	ra,1c008388 <KerParReduct_CC_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002816:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_ReLU_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_ReLU_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5648), 4784, 1, &DmaW_Evt1);
1c00281a:	6785                	lui	a5,0x1
1c00281c:	4098                	lw	a4,0(s1)
1c00281e:	61078693          	addi	a3,a5,1552 # 1610 <__rt_stack_size+0xe10>
1c002822:	9736                	add	a4,a4,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002824:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002828:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00282c:	002a05b7          	lui	a1,0x2a0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002830:	2b078793          	addi	a5,a5,688
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002834:	8fcd                	or	a5,a5,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002836:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00283a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00283e:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c002842:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c002844:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c002848:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00284c:	10412783          	lw	a5,260(sp)
1c002850:	c3b9                	beqz	a5,1c002896 <S6_Conv2d_16x16x1x3_Relu+0x3d6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002852:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002856:	02000713          	li	a4,32
1c00285a:	002047b7          	lui	a5,0x204
1c00285e:	ca91                	beqz	a3,1c002872 <S6_Conv2d_16x16x1x3_Relu+0x3b2>
1c002860:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002864:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002868:	00e7a223          	sw	a4,4(a5)
1c00286c:	10c12683          	lw	a3,268(sp)
1c002870:	fae5                	bnez	a3,1c002860 <S6_Conv2d_16x16x1x3_Relu+0x3a0>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002872:	15c12083          	lw	ra,348(sp)
1c002876:	15812403          	lw	s0,344(sp)
1c00287a:	15412483          	lw	s1,340(sp)
1c00287e:	15012903          	lw	s2,336(sp)
1c002882:	14c12983          	lw	s3,332(sp)
1c002886:	14812a03          	lw	s4,328(sp)
1c00288a:	14412a83          	lw	s5,324(sp)
1c00288e:	14012b03          	lw	s6,320(sp)
1c002892:	6135                	addi	sp,sp,352
1c002894:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002896:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00289a:	40442403          	lw	s0,1028(s0)
1c00289e:	56de                	lw	a3,244(sp)
1c0028a0:	40d45433          	sra	s0,s0,a3
1c0028a4:	fc143433          	p.bclr	s0,s0,30,1
1c0028a8:	c41d                	beqz	s0,1c0028d6 <S6_Conv2d_16x16x1x3_Relu+0x416>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0028aa:	10000593          	li	a1,256
1c0028ae:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0028b2:	30061073          	csrw	mstatus,a2
1c0028b6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0028ba:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0028be:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028c2:	30047673          	csrrci	a2,mstatus,8
1c0028c6:	40472783          	lw	a5,1028(a4)
1c0028ca:	56de                	lw	a3,244(sp)
1c0028cc:	40d7d7b3          	sra	a5,a5,a3
1c0028d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0028d4:	fff9                	bnez	a5,1c0028b2 <S6_Conv2d_16x16x1x3_Relu+0x3f2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0028d6:	4785                	li	a5,1
1c0028d8:	00d796b3          	sll	a3,a5,a3
1c0028dc:	002047b7          	lui	a5,0x204
1c0028e0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0028e4:	30061073          	csrw	mstatus,a2
1c0028e8:	b769                	j	1c002872 <S6_Conv2d_16x16x1x3_Relu+0x3b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028ea:	30047673          	csrrci	a2,mstatus,8
1c0028ee:	4047a783          	lw	a5,1028(a5)
1c0028f2:	46de                	lw	a3,212(sp)
1c0028f4:	40d7d7b3          	sra	a5,a5,a3
1c0028f8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0028fc:	c79d                	beqz	a5,1c00292a <S6_Conv2d_16x16x1x3_Relu+0x46a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0028fe:	10000593          	li	a1,256
1c002902:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002906:	30061073          	csrw	mstatus,a2
1c00290a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00290e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002912:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002916:	30047673          	csrrci	a2,mstatus,8
1c00291a:	40472783          	lw	a5,1028(a4)
1c00291e:	46de                	lw	a3,212(sp)
1c002920:	40d7d7b3          	sra	a5,a5,a3
1c002924:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002928:	fff9                	bnez	a5,1c002906 <S6_Conv2d_16x16x1x3_Relu+0x446>
1c00292a:	4785                	li	a5,1
1c00292c:	00d796b3          	sll	a3,a5,a3
1c002930:	002047b7          	lui	a5,0x204
1c002934:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002938:	30061073          	csrw	mstatus,a2
1c00293c:	b5b1                	j	1c002788 <S6_Conv2d_16x16x1x3_Relu+0x2c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00293e:	30047673          	csrrci	a2,mstatus,8
1c002942:	4047a783          	lw	a5,1028(a5)
1c002946:	56da                	lw	a3,180(sp)
1c002948:	40d7d7b3          	sra	a5,a5,a3
1c00294c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002950:	c79d                	beqz	a5,1c00297e <S6_Conv2d_16x16x1x3_Relu+0x4be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002952:	10000593          	li	a1,256
1c002956:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00295a:	30061073          	csrw	mstatus,a2
1c00295e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002962:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002966:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00296a:	30047673          	csrrci	a2,mstatus,8
1c00296e:	40472783          	lw	a5,1028(a4)
1c002972:	56da                	lw	a3,180(sp)
1c002974:	40d7d7b3          	sra	a5,a5,a3
1c002978:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00297c:	fff9                	bnez	a5,1c00295a <S6_Conv2d_16x16x1x3_Relu+0x49a>
1c00297e:	4785                	li	a5,1
1c002980:	00d796b3          	sll	a3,a5,a3
1c002984:	002047b7          	lui	a5,0x204
1c002988:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00298c:	30061073          	csrw	mstatus,a2
1c002990:	b35d                	j	1c002736 <S6_Conv2d_16x16x1x3_Relu+0x276>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002992:	30047673          	csrrci	a2,mstatus,8
1c002996:	4047a783          	lw	a5,1028(a5)
1c00299a:	46da                	lw	a3,148(sp)
1c00299c:	40d7d7b3          	sra	a5,a5,a3
1c0029a0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029a4:	c79d                	beqz	a5,1c0029d2 <S6_Conv2d_16x16x1x3_Relu+0x512>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0029a6:	10000593          	li	a1,256
1c0029aa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0029ae:	30061073          	csrw	mstatus,a2
1c0029b2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0029b6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0029ba:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029be:	30047673          	csrrci	a2,mstatus,8
1c0029c2:	40472783          	lw	a5,1028(a4)
1c0029c6:	46da                	lw	a3,148(sp)
1c0029c8:	40d7d7b3          	sra	a5,a5,a3
1c0029cc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029d0:	fff9                	bnez	a5,1c0029ae <S6_Conv2d_16x16x1x3_Relu+0x4ee>
1c0029d2:	4785                	li	a5,1
1c0029d4:	00d796b3          	sll	a3,a5,a3
1c0029d8:	002047b7          	lui	a5,0x204
1c0029dc:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0029e0:	30061073          	csrw	mstatus,a2
1c0029e4:	b309                	j	1c0026e6 <S6_Conv2d_16x16x1x3_Relu+0x226>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029e6:	30047673          	csrrci	a2,mstatus,8
1c0029ea:	40472703          	lw	a4,1028(a4)
1c0029ee:	56d6                	lw	a3,116(sp)
1c0029f0:	40d75733          	sra	a4,a4,a3
1c0029f4:	fc173733          	p.bclr	a4,a4,30,1
1c0029f8:	c71d                	beqz	a4,1c002a26 <S6_Conv2d_16x16x1x3_Relu+0x566>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0029fa:	10000893          	li	a7,256
1c0029fe:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002a02:	30061073          	csrw	mstatus,a2
1c002a06:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a0a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a0e:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a12:	30047673          	csrrci	a2,mstatus,8
1c002a16:	40472783          	lw	a5,1028(a4)
1c002a1a:	56d6                	lw	a3,116(sp)
1c002a1c:	40d7d7b3          	sra	a5,a5,a3
1c002a20:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a24:	fff9                	bnez	a5,1c002a02 <S6_Conv2d_16x16x1x3_Relu+0x542>
1c002a26:	4785                	li	a5,1
1c002a28:	00d796b3          	sll	a3,a5,a3
1c002a2c:	002047b7          	lui	a5,0x204
1c002a30:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002a34:	30061073          	csrw	mstatus,a2
1c002a38:	b9a9                	j	1c002692 <S6_Conv2d_16x16x1x3_Relu+0x1d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a3a:	300478f3          	csrrci	a7,mstatus,8
1c002a3e:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c002a42:	4656                	lw	a2,84(sp)
1c002a44:	40c6d6b3          	sra	a3,a3,a2
1c002a48:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002a4c:	c69d                	beqz	a3,1c002a7a <S6_Conv2d_16x16x1x3_Relu+0x5ba>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a4e:	10000313          	li	t1,256
1c002a52:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c002a56:	30089073          	csrw	mstatus,a7
1c002a5a:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a5e:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a62:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a66:	300478f3          	csrrci	a7,mstatus,8
1c002a6a:	4046a703          	lw	a4,1028(a3)
1c002a6e:	4656                	lw	a2,84(sp)
1c002a70:	40c75733          	sra	a4,a4,a2
1c002a74:	fc173733          	p.bclr	a4,a4,30,1
1c002a78:	ff79                	bnez	a4,1c002a56 <S6_Conv2d_16x16x1x3_Relu+0x596>
1c002a7a:	4705                	li	a4,1
1c002a7c:	00c71633          	sll	a2,a4,a2
1c002a80:	00204737          	lui	a4,0x204
1c002a84:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002a88:	30089073          	csrw	mstatus,a7
1c002a8c:	be45                	j	1c00263c <S6_Conv2d_16x16x1x3_Relu+0x17c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a8e:	30047373          	csrrci	t1,mstatus,8
1c002a92:	4046a683          	lw	a3,1028(a3)
1c002a96:	58d2                	lw	a7,52(sp)
1c002a98:	4116d6b3          	sra	a3,a3,a7
1c002a9c:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002aa0:	c69d                	beqz	a3,1c002ace <S6_Conv2d_16x16x1x3_Relu+0x60e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002aa2:	10000e13          	li	t3,256
1c002aa6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c002aaa:	30031073          	csrw	mstatus,t1
1c002aae:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ab2:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002ab6:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002aba:	30047373          	csrrci	t1,mstatus,8
1c002abe:	4046a603          	lw	a2,1028(a3)
1c002ac2:	58d2                	lw	a7,52(sp)
1c002ac4:	41165633          	sra	a2,a2,a7
1c002ac8:	fc163633          	p.bclr	a2,a2,30,1
1c002acc:	fe79                	bnez	a2,1c002aaa <S6_Conv2d_16x16x1x3_Relu+0x5ea>
1c002ace:	4685                	li	a3,1
1c002ad0:	011698b3          	sll	a7,a3,a7
1c002ad4:	002046b7          	lui	a3,0x204
1c002ad8:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002adc:	30031073          	csrw	mstatus,t1
1c002ae0:	b611                	j	1c0025e4 <S6_Conv2d_16x16x1x3_Relu+0x124>

1c002ae2 <S8_MatAdd_16x1x299>:
		signed char * __restrict__ In1,
		signed char * __restrict__ In2,
		signed char * __restrict__ Out,
		signed char * __restrict__ Infos)

{
1c002ae2:	7131                	addi	sp,sp,-192
1c002ae4:	db26                	sw	s1,180(sp)
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
	KerArg0->Feat = (unsigned short int) (16);
1c002ae6:	1c010337          	lui	t1,0x1c010
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c002aea:	100004b7          	lui	s1,0x10000
{
1c002aee:	d94a                	sw	s2,176(sp)
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c002af0:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
{
1c002af4:	8932                	mv	s2,a2
	KerArg0->Feat = (unsigned short int) (16);
1c002af6:	9fc32603          	lw	a2,-1540(t1) # 1c00f9fc <__clz_tab+0x270>
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c002afa:	0004a803          	lw	a6,0(s1)
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c002afe:	6705                	lui	a4,0x1
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c002b00:	6889                	lui	a7,0x2
	KerArg0->W = (unsigned short int) (1);
	KerArg0->H = (unsigned short int) (299);
	KerArg0->DoScale = (unsigned char) (1);
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c002b02:	6791                	lui	a5,0x4
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c002b04:	2b070713          	addi	a4,a4,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg0->Feat = (unsigned short int) (16);
1c002b08:	ca32                	sw	a2,20(sp)
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c002b0a:	56088893          	addi	a7,a7,1376 # 2560 <__rt_stack_size+0x1d60>
	KerArg0->H = (unsigned short int) (299);
1c002b0e:	12b00613          	li	a2,299
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c002b12:	81078793          	addi	a5,a5,-2032 # 3810 <__rt_stack_size+0x3010>
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c002b16:	00e80e33          	add	t3,a6,a4
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c002b1a:	98c2                	add	a7,a7,a6
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c002b1c:	97c2                	add	a5,a5,a6
	KerArg0->H = (unsigned short int) (299);
1c002b1e:	00c11c23          	sh	a2,24(sp)
	KerArg0->DoScale = (unsigned char) (1);
1c002b22:	4605                	li	a2,1
{
1c002b24:	df06                	sw	ra,188(sp)
1c002b26:	dd22                	sw	s0,184(sp)
1c002b28:	d74e                	sw	s3,172(sp)
	KerArg0->In1 = (signed char *__restrict__) (quant_model_L1_Memory+0);
1c002b2a:	c442                	sw	a6,8(sp)
	KerArg0->In2 = (signed char *__restrict__) (quant_model_L1_Memory+4784);
1c002b2c:	c672                	sw	t3,12(sp)
	KerArg0->Out = (signed char *__restrict__) (quant_model_L1_Memory+9568);
1c002b2e:	c846                	sw	a7,16(sp)
	KerArg0->DoScale = (unsigned char) (1);
1c002b30:	00c10d23          	sb	a2,26(sp)
	KerArg0->Infos = (signed char *__restrict__) (quant_model_L1_Memory+14352);
1c002b34:	ce3e                	sw	a5,28(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b36:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002b3a:	002047b7          	lui	a5,0x204
1c002b3e:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002b42:	002b0337          	lui	t1,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002b46:	00676733          	or	a4,a4,t1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002b4a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002b4e:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002b52:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c002b56:	d046                	sw	a7,32(sp)
        copy->length = 0;
1c002b58:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c002b5a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c002b5e:	5742                	lw	a4,48(sp)
1c002b60:	24070e63          	beqz	a4,1c002dbc <S8_MatAdd_16x1x299+0x2da>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002b64:	5662                	lw	a2,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002b66:	02000713          	li	a4,32
1c002b6a:	ca09                	beqz	a2,1c002b7c <S8_MatAdd_16x1x299+0x9a>
1c002b6c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002b70:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002b74:	00e7a223          	sw	a4,4(a5)
1c002b78:	5662                	lw	a2,56(sp)
1c002b7a:	fa6d                	bnez	a2,1c002b6c <S8_MatAdd_16x1x299+0x8a>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 4784, 0, &DmaR_Evt2);
1c002b7c:	4090                	lw	a2,0(s1)
1c002b7e:	6705                	lui	a4,0x1
1c002b80:	2b070713          	addi	a4,a4,688 # 12b0 <__rt_stack_size+0xab0>
1c002b84:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b86:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002b8a:	002047b7          	lui	a5,0x204
1c002b8e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002b92:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002b96:	01176733          	or	a4,a4,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002b9a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002b9e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002ba2:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c002ba6:	c0c2                	sw	a6,64(sp)
        copy->length = 0;
1c002ba8:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c002baa:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c002bae:	4746                	lw	a4,80(sp)
1c002bb0:	1a070c63          	beqz	a4,1c002d68 <S8_MatAdd_16x1x299+0x286>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002bb4:	4666                	lw	a2,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002bb6:	02000713          	li	a4,32
1c002bba:	ca09                	beqz	a2,1c002bcc <S8_MatAdd_16x1x299+0xea>
1c002bbc:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002bc0:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002bc4:	00e7a223          	sw	a4,4(a5)
1c002bc8:	4666                	lw	a2,88(sp)
1c002bca:	fa6d                	bnez	a2,1c002bbc <S8_MatAdd_16x1x299+0xda>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read In2 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+14352), 9, 0, &DmaR_Evt3);
1c002bcc:	4090                	lw	a2,0(s1)
1c002bce:	6791                	lui	a5,0x4
1c002bd0:	81078793          	addi	a5,a5,-2032 # 3810 <__rt_stack_size+0x3010>
1c002bd4:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002bd6:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002bda:	002047b7          	lui	a5,0x204
1c002bde:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002be2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002be6:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002be8:	c1574733          	p.bset	a4,a4,0,21
1c002bec:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002bf0:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002bf4:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c002bf8:	d0aa                	sw	a0,96(sp)
        copy->length = 0;
1c002bfa:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c002bfc:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c002c00:	5746                	lw	a4,112(sp)
1c002c02:	10070963          	beqz	a4,1c002d14 <S8_MatAdd_16x1x299+0x232>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002c06:	56e6                	lw	a3,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c08:	02000713          	li	a4,32
1c002c0c:	ca89                	beqz	a3,1c002c1e <S8_MatAdd_16x1x299+0x13c>
1c002c0e:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c12:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c16:	00e7a223          	sw	a4,4(a5)
1c002c1a:	56e6                	lw	a3,120(sp)
1c002c1c:	faed                	bnez	a3,1c002c0e <S8_MatAdd_16x1x299+0x12c>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002c1e:	0ff00793          	li	a5,255
1c002c22:	00204437          	lui	s0,0x204
1c002c26:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002c2a:	20040993          	addi	s3,s0,512
1c002c2e:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002c32:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002c36:	1c0097b7          	lui	a5,0x1c009
1c002c3a:	39478793          	addi	a5,a5,916 # 1c009394 <KerParMatAdd_SQ8>
1c002c3e:	08f42023          	sw	a5,128(s0)
1c002c42:	0028                	addi	a0,sp,8
1c002c44:	08a42023          	sw	a0,128(s0)
1c002c48:	74c060ef          	jal	ra,1c009394 <KerParMatAdd_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c4c:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAdd_SQ8, (void *) KerArg0);
			__CALL(KerParMatAdd_SQ8, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+9568), 4784, 1, &DmaW_Evt1);
1c002c50:	6789                	lui	a5,0x2
1c002c52:	4098                	lw	a4,0(s1)
1c002c54:	56078793          	addi	a5,a5,1376 # 2560 <__rt_stack_size+0x1d60>
1c002c58:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002c5a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002c5e:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002c62:	000217b7          	lui	a5,0x21
1c002c66:	2b078793          	addi	a5,a5,688 # 212b0 <__L1Cl+0x112b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002c6a:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002c6e:	c157c7b3          	p.bset	a5,a5,0,21
1c002c72:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002c76:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002c7a:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c002c7e:	c132                	sw	a2,128(sp)
        copy->length = 0;
1c002c80:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c002c82:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c002c86:	47ca                	lw	a5,144(sp)
1c002c88:	c795                	beqz	a5,1c002cb4 <S8_MatAdd_16x1x299+0x1d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002c8a:	46ea                	lw	a3,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c8c:	02000713          	li	a4,32
1c002c90:	002047b7          	lui	a5,0x204
1c002c94:	ca89                	beqz	a3,1c002ca6 <S8_MatAdd_16x1x299+0x1c4>
1c002c96:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c9a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c9e:	00e7a223          	sw	a4,4(a5)
1c002ca2:	46ea                	lw	a3,152(sp)
1c002ca4:	faed                	bnez	a3,1c002c96 <S8_MatAdd_16x1x299+0x1b4>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002ca6:	50fa                	lw	ra,188(sp)
1c002ca8:	546a                	lw	s0,184(sp)
1c002caa:	54da                	lw	s1,180(sp)
1c002cac:	594a                	lw	s2,176(sp)
1c002cae:	59ba                	lw	s3,172(sp)
1c002cb0:	6129                	addi	sp,sp,192
1c002cb2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002cb4:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002cb8:	40442403          	lw	s0,1028(s0)
1c002cbc:	468a                	lw	a3,128(sp)
1c002cbe:	40d45433          	sra	s0,s0,a3
1c002cc2:	fc143433          	p.bclr	s0,s0,30,1
1c002cc6:	c41d                	beqz	s0,1c002cf4 <S8_MatAdd_16x1x299+0x212>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002cc8:	10000593          	li	a1,256
1c002ccc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002cd0:	30061073          	csrw	mstatus,a2
1c002cd4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002cd8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002cdc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ce0:	30047673          	csrrci	a2,mstatus,8
1c002ce4:	40472783          	lw	a5,1028(a4)
1c002ce8:	468a                	lw	a3,128(sp)
1c002cea:	40d7d7b3          	sra	a5,a5,a3
1c002cee:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002cf2:	fff9                	bnez	a5,1c002cd0 <S8_MatAdd_16x1x299+0x1ee>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002cf4:	4785                	li	a5,1
1c002cf6:	00d796b3          	sll	a3,a5,a3
1c002cfa:	002047b7          	lui	a5,0x204
1c002cfe:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002d02:	30061073          	csrw	mstatus,a2
1c002d06:	50fa                	lw	ra,188(sp)
1c002d08:	546a                	lw	s0,184(sp)
1c002d0a:	54da                	lw	s1,180(sp)
1c002d0c:	594a                	lw	s2,176(sp)
1c002d0e:	59ba                	lw	s3,172(sp)
1c002d10:	6129                	addi	sp,sp,192
1c002d12:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d14:	30047673          	csrrci	a2,mstatus,8
1c002d18:	4047a783          	lw	a5,1028(a5)
1c002d1c:	5686                	lw	a3,96(sp)
1c002d1e:	40d7d7b3          	sra	a5,a5,a3
1c002d22:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002d26:	c79d                	beqz	a5,1c002d54 <S8_MatAdd_16x1x299+0x272>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d28:	10000593          	li	a1,256
1c002d2c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002d30:	30061073          	csrw	mstatus,a2
1c002d34:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d38:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d3c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d40:	30047673          	csrrci	a2,mstatus,8
1c002d44:	40472783          	lw	a5,1028(a4)
1c002d48:	5686                	lw	a3,96(sp)
1c002d4a:	40d7d7b3          	sra	a5,a5,a3
1c002d4e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002d52:	fff9                	bnez	a5,1c002d30 <S8_MatAdd_16x1x299+0x24e>
1c002d54:	4785                	li	a5,1
1c002d56:	00d796b3          	sll	a3,a5,a3
1c002d5a:	002047b7          	lui	a5,0x204
1c002d5e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002d62:	30061073          	csrw	mstatus,a2
1c002d66:	bd65                	j	1c002c1e <S8_MatAdd_16x1x299+0x13c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d68:	300475f3          	csrrci	a1,mstatus,8
1c002d6c:	4047a783          	lw	a5,1028(a5)
1c002d70:	4606                	lw	a2,64(sp)
1c002d72:	40c7d7b3          	sra	a5,a5,a2
1c002d76:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002d7a:	c79d                	beqz	a5,1c002da8 <S8_MatAdd_16x1x299+0x2c6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d7c:	10000513          	li	a0,256
1c002d80:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002d84:	30059073          	csrw	mstatus,a1
1c002d88:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d8c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d90:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d94:	300475f3          	csrrci	a1,mstatus,8
1c002d98:	40472783          	lw	a5,1028(a4)
1c002d9c:	4606                	lw	a2,64(sp)
1c002d9e:	40c7d7b3          	sra	a5,a5,a2
1c002da2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002da6:	fff9                	bnez	a5,1c002d84 <S8_MatAdd_16x1x299+0x2a2>
1c002da8:	4785                	li	a5,1
1c002daa:	00c79633          	sll	a2,a5,a2
1c002dae:	002047b7          	lui	a5,0x204
1c002db2:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002db6:	30059073          	csrw	mstatus,a1
1c002dba:	bd09                	j	1c002bcc <S8_MatAdd_16x1x299+0xea>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002dbc:	30047573          	csrrci	a0,mstatus,8
1c002dc0:	4047a783          	lw	a5,1028(a5)
1c002dc4:	5602                	lw	a2,32(sp)
1c002dc6:	40c7d7b3          	sra	a5,a5,a2
1c002dca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dce:	c79d                	beqz	a5,1c002dfc <S8_MatAdd_16x1x299+0x31a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002dd0:	10000813          	li	a6,256
1c002dd4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002dd8:	30051073          	csrw	mstatus,a0
1c002ddc:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002de0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002de4:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002de8:	30047573          	csrrci	a0,mstatus,8
1c002dec:	40472783          	lw	a5,1028(a4)
1c002df0:	5602                	lw	a2,32(sp)
1c002df2:	40c7d7b3          	sra	a5,a5,a2
1c002df6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dfa:	fff9                	bnez	a5,1c002dd8 <S8_MatAdd_16x1x299+0x2f6>
1c002dfc:	4785                	li	a5,1
1c002dfe:	00c79633          	sll	a2,a5,a2
1c002e02:	002047b7          	lui	a5,0x204
1c002e06:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002e0a:	30051073          	csrw	mstatus,a0
1c002e0e:	b3bd                	j	1c002b7c <S8_MatAdd_16x1x299+0x9a>

1c002e10 <S10_Conv2d_16x16x1x3_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c002e10:	710d                	addi	sp,sp,-352
1c002e12:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg0->W = (unsigned short int) (299);
1c002e16:	1c0100b7          	lui	ra,0x1c010
{
1c002e1a:	15212823          	sw	s2,336(sp)
1c002e1e:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c002e20:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c002e24:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c002e28:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c002e2c:	c436                	sw	a3,8(sp)
	KerArg1->W = (unsigned short int) (299);
1c002e2e:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c002e32:	15312623          	sw	s3,332(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (16);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg1->Pad = (v4s) ((v4s){8,0,0,0});
1c002e36:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c002e3a:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c002e3e:	008066d7          	pv.add.sci.h	a3,zero,16
1c002e42:	12d12023          	sw	a3,288(sp)
	KerArg1->Pad = (v4s) ((v4s){8,0,0,0});
1c002e46:	9dc9a683          	lw	a3,-1572(s3) # 1c00f9dc <__clz_tab+0x250>
{
1c002e4a:	14912a23          	sw	s1,340(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e4e:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){8,0,0,0});
1c002e52:	12d12a23          	sw	a3,308(sp)
	KerArg1->N = (unsigned char) (3);
1c002e56:	010406b7          	lui	a3,0x1040
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e5a:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
	KerArg1->N = (unsigned char) (3);
1c002e5e:	10368693          	addi	a3,a3,259 # 1040103 <__L2+0xfc0103>
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e62:	0004a303          	lw	t1,0(s1)
{
1c002e66:	14812c23          	sw	s0,344(sp)
	KerArg1->N = (unsigned char) (3);
1c002e6a:	12d12d23          	sw	a3,314(sp)
	KerArg1->Ny = (unsigned char) (1);
	KerArg1->Sy = (unsigned char) (1);
	KerArg1->Dy = (unsigned char) (4);
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
	KerArg2->Feat = (unsigned short int) (16);
1c002e6e:	1c010437          	lui	s0,0x1c010
	KerArg1->N = (unsigned char) (3);
1c002e72:	40100693          	li	a3,1025
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002e76:	6885                	lui	a7,0x1
	KerArg1->N = (unsigned char) (3);
1c002e78:	12d11f23          	sh	a3,318(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e7c:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c002e7e:	9f842683          	lw	a3,-1544(s0) # 1c00f9f8 <__clz_tab+0x26c>
{
1c002e82:	15612023          	sw	s6,320(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002e86:	2b088e93          	addi	t4,a7,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c002e8a:	31088293          	addi	t0,a7,784
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c002e8e:	61088f93          	addi	t6,a7,1552
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c002e92:	2f088f13          	addi	t5,a7,752
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e96:	8c0e0e13          	addi	t3,t3,-1856 # 28c0 <__rt_stack_size+0x20c0>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002e9a:	6b1d                	lui	s6,0x7
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002e9c:	9e1a                	add	t3,t3,t1
{
1c002e9e:	15512223          	sw	s5,324(sp)
	KerArg1->H = (unsigned short int) (1);
1c002ea2:	4385                	li	t2,1
	KerArg0->Feat = (unsigned short int) (16);
1c002ea4:	4ac1                	li	s5,16
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002ea6:	9e9a                	add	t4,t4,t1
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c002ea8:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c002eaa:	9f9a                	add	t6,t6,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c002eac:	9f1a                	add	t5,t5,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c002eae:	30088893          	addi	a7,a7,768
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002eb2:	380b0b13          	addi	s6,s6,896 # 7380 <__rt_stack_size+0x6b80>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c002eb6:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002eb8:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002eba:	c272                	sw	t3,4(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c002ebc:	01511623          	sh	s5,12(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c002ec0:	c876                	sw	t4,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c002ec2:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c002ec6:	10711e23          	sh	t2,284(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (16);
1c002eca:	13511223          	sh	s5,292(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c002ece:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c002ed2:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
1c002ed6:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c002ed8:	ce7e                	sw	t6,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c002eda:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c002edc:	02711223          	sh	t2,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c002ee0:	d47a                	sw	t5,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c002ee2:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c002ee4:	d85a                	sw	s6,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ee6:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002eea:	002046b7          	lui	a3,0x204
1c002eee:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002ef2:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002ef6:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002efa:	c158c8b3          	p.bset	a7,a7,0,21
1c002efe:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002f02:	41d6a023          	sw	t4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002f06:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c002f0a:	da72                	sw	t3,52(sp)
        copy->length = 0;
1c002f0c:	c282                	sw	zero,68(sp)
  __builtin_pulp_spr_write(reg, val);
1c002f0e:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c002f12:	4616                	lw	a2,68(sp)
1c002f14:	4c060563          	beqz	a2,1c0033de <S10_Conv2d_16x16x1x3_Relu+0x5ce>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002f18:	48b6                	lw	a7,76(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002f1a:	02000613          	li	a2,32
1c002f1e:	00088b63          	beqz	a7,1c002f34 <S10_Conv2d_16x16x1x3_Relu+0x124>
1c002f22:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002f26:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002f2a:	00c6a223          	sw	a2,4(a3)
1c002f2e:	48b6                	lw	a7,76(sp)
1c002f30:	fe0899e3          	bnez	a7,1c002f22 <S10_Conv2d_16x16x1x3_Relu+0x112>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4848), 16, 0, &DmaR_Evt2);
1c002f34:	0004a883          	lw	a7,0(s1)
1c002f38:	6685                	lui	a3,0x1
1c002f3a:	2f068693          	addi	a3,a3,752 # 12f0 <__rt_stack_size+0xaf0>
1c002f3e:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f40:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002f44:	002046b7          	lui	a3,0x204
1c002f48:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002f4c:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002f50:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002f52:	c1564633          	p.bset	a2,a2,0,21
1c002f56:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002f5a:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002f5e:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c002f62:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c002f64:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c002f66:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c002f6a:	5716                	lw	a4,100(sp)
1c002f6c:	40070f63          	beqz	a4,1c00338a <S10_Conv2d_16x16x1x3_Relu+0x57a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002f70:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002f72:	02000693          	li	a3,32
1c002f76:	00204737          	lui	a4,0x204
1c002f7a:	ca09                	beqz	a2,1c002f8c <S10_Conv2d_16x16x1x3_Relu+0x17c>
1c002f7c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002f80:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002f84:	00d72223          	sw	a3,4(a4)
1c002f88:	5636                	lw	a2,108(sp)
1c002f8a:	fa6d                	bnez	a2,1c002f7c <S10_Conv2d_16x16x1x3_Relu+0x16c>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4864), 16, 0, &DmaR_Evt3);
1c002f8c:	4090                	lw	a2,0(s1)
1c002f8e:	6705                	lui	a4,0x1
1c002f90:	30070713          	addi	a4,a4,768 # 1300 <__rt_stack_size+0xb00>
1c002f94:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f96:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002f9a:	00204737          	lui	a4,0x204
1c002f9e:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002fa2:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002fa6:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002fa8:	c156c6b3          	p.bset	a3,a3,0,21
1c002fac:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002fb0:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002fb4:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c002fb8:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c002fba:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c002fbc:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c002fc0:	479a                	lw	a5,132(sp)
1c002fc2:	36078a63          	beqz	a5,1c003336 <S10_Conv2d_16x16x1x3_Relu+0x526>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002fc6:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002fc8:	02000713          	li	a4,32
1c002fcc:	002047b7          	lui	a5,0x204
1c002fd0:	ca89                	beqz	a3,1c002fe2 <S10_Conv2d_16x16x1x3_Relu+0x1d2>
1c002fd2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002fd6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002fda:	00e7a223          	sw	a4,4(a5)
1c002fde:	46ba                	lw	a3,140(sp)
1c002fe0:	faed                	bnez	a3,1c002fd2 <S10_Conv2d_16x16x1x3_Relu+0x1c2>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4880), 768, 0, &DmaR_Evt4);
1c002fe2:	4094                	lw	a3,0(s1)
1c002fe4:	6785                	lui	a5,0x1
1c002fe6:	31078793          	addi	a5,a5,784 # 1310 <__rt_stack_size+0xb10>
1c002fea:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fec:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002ff0:	002047b7          	lui	a5,0x204
1c002ff4:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002ff8:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002ffc:	30070713          	addi	a4,a4,768 # b0300 <__L2+0x30300>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003000:	c1574733          	p.bset	a4,a4,0,21
1c003004:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003008:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00300c:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003010:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c003012:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c003014:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003018:	571a                	lw	a4,164(sp)
1c00301a:	2c070463          	beqz	a4,1c0032e2 <S10_Conv2d_16x16x1x3_Relu+0x4d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00301e:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003020:	02000713          	li	a4,32
1c003024:	ca89                	beqz	a3,1c003036 <S10_Conv2d_16x16x1x3_Relu+0x226>
1c003026:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00302a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00302e:	00e7a223          	sw	a4,4(a5)
1c003032:	56ba                	lw	a3,172(sp)
1c003034:	faed                	bnez	a3,1c003026 <S10_Conv2d_16x16x1x3_Relu+0x216>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt5);
1c003036:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003038:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00303c:	002047b7          	lui	a5,0x204
1c003040:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003044:	00031737          	lui	a4,0x31
1c003048:	2b070713          	addi	a4,a4,688 # 312b0 <__L1Cl+0x212b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00304c:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003050:	c1574733          	p.bset	a4,a4,0,21
1c003054:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003058:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00305c:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c003060:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c003062:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c003064:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003068:	471e                	lw	a4,196(sp)
1c00306a:	22070263          	beqz	a4,1c00328e <S10_Conv2d_16x16x1x3_Relu+0x47e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00306e:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003070:	02000713          	li	a4,32
1c003074:	ca89                	beqz	a3,1c003086 <S10_Conv2d_16x16x1x3_Relu+0x276>
1c003076:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00307a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00307e:	00e7a223          	sw	a4,4(a5)
1c003082:	46be                	lw	a3,204(sp)
1c003084:	faed                	bnez	a3,1c003076 <S10_Conv2d_16x16x1x3_Relu+0x266>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+29568), 9, 0, &DmaR_Evt6);
1c003086:	4094                	lw	a3,0(s1)
1c003088:	679d                	lui	a5,0x7
1c00308a:	38078793          	addi	a5,a5,896 # 7380 <__rt_stack_size+0x6b80>
1c00308e:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003090:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003094:	002047b7          	lui	a5,0x204
1c003098:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00309c:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0030a0:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0030a2:	c1574733          	p.bset	a4,a4,0,21
1c0030a6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0030aa:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0030ae:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c0030b2:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c0030b4:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c0030b6:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0030ba:	571e                	lw	a4,228(sp)
1c0030bc:	16070f63          	beqz	a4,1c00323a <S10_Conv2d_16x16x1x3_Relu+0x42a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0030c0:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030c2:	02000713          	li	a4,32
1c0030c6:	ca89                	beqz	a3,1c0030d8 <S10_Conv2d_16x16x1x3_Relu+0x2c8>
1c0030c8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030cc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030d0:	00e7a223          	sw	a4,4(a5)
1c0030d4:	56be                	lw	a3,236(sp)
1c0030d6:	faed                	bnez	a3,1c0030c8 <S10_Conv2d_16x16x1x3_Relu+0x2b8>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+29568))[5]);
1c0030d8:	409c                	lw	a5,0(s1)
1c0030da:	671d                	lui	a4,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0030dc:	0ff00a13          	li	s4,255
1c0030e0:	97ba                	add	a5,a5,a4
1c0030e2:	3857c783          	lbu	a5,901(a5)
1c0030e6:	00204437          	lui	s0,0x204
1c0030ea:	00f10a23          	sb	a5,20(sp)
1c0030ee:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0030f2:	20040993          	addi	s3,s0,512
1c0030f6:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0030fa:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0030fe:	1c0087b7          	lui	a5,0x1c008
1c003102:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c003106:	08f42023          	sw	a5,128(s0)
1c00310a:	0048                	addi	a0,sp,4
1c00310c:	08a42023          	sw	a0,128(s0)
1c003110:	310050ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003114:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c003118:	4785                	li	a5,1
1c00311a:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00311e:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003122:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003126:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00312a:	1c0097b7          	lui	a5,0x1c009
1c00312e:	10a78793          	addi	a5,a5,266 # 1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
1c003132:	08f42023          	sw	a5,128(s0)
1c003136:	0a48                	addi	a0,sp,276
1c003138:	08a42023          	sw	a0,128(s0)
1c00313c:	7cf050ef          	jal	ra,1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003140:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003144:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003148:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00314c:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003150:	1c0087b7          	lui	a5,0x1c008
1c003154:	38878793          	addi	a5,a5,904 # 1c008388 <KerParReduct_CC_ReLU_SQ8>
1c003158:	08f42023          	sw	a5,128(s0)
1c00315c:	0828                	addi	a0,sp,24
1c00315e:	08a42023          	sw	a0,128(s0)
1c003162:	226050ef          	jal	ra,1c008388 <KerParReduct_CC_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003166:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_ReLU_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_ReLU_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5648), 4784, 1, &DmaW_Evt1);
1c00316a:	6785                	lui	a5,0x1
1c00316c:	4098                	lw	a4,0(s1)
1c00316e:	61078693          	addi	a3,a5,1552 # 1610 <__rt_stack_size+0xe10>
1c003172:	9736                	add	a4,a4,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003174:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003178:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00317c:	002a05b7          	lui	a1,0x2a0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003180:	2b078793          	addi	a5,a5,688
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003184:	8fcd                	or	a5,a5,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003186:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00318a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00318e:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c003192:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c003194:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c003198:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00319c:	10412783          	lw	a5,260(sp)
1c0031a0:	c3b9                	beqz	a5,1c0031e6 <S10_Conv2d_16x16x1x3_Relu+0x3d6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0031a2:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031a6:	02000713          	li	a4,32
1c0031aa:	002047b7          	lui	a5,0x204
1c0031ae:	ca91                	beqz	a3,1c0031c2 <S10_Conv2d_16x16x1x3_Relu+0x3b2>
1c0031b0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031b4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031b8:	00e7a223          	sw	a4,4(a5)
1c0031bc:	10c12683          	lw	a3,268(sp)
1c0031c0:	fae5                	bnez	a3,1c0031b0 <S10_Conv2d_16x16x1x3_Relu+0x3a0>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0031c2:	15c12083          	lw	ra,348(sp)
1c0031c6:	15812403          	lw	s0,344(sp)
1c0031ca:	15412483          	lw	s1,340(sp)
1c0031ce:	15012903          	lw	s2,336(sp)
1c0031d2:	14c12983          	lw	s3,332(sp)
1c0031d6:	14812a03          	lw	s4,328(sp)
1c0031da:	14412a83          	lw	s5,324(sp)
1c0031de:	14012b03          	lw	s6,320(sp)
1c0031e2:	6135                	addi	sp,sp,352
1c0031e4:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031e6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0031ea:	40442403          	lw	s0,1028(s0)
1c0031ee:	56de                	lw	a3,244(sp)
1c0031f0:	40d45433          	sra	s0,s0,a3
1c0031f4:	fc143433          	p.bclr	s0,s0,30,1
1c0031f8:	c41d                	beqz	s0,1c003226 <S10_Conv2d_16x16x1x3_Relu+0x416>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031fa:	10000593          	li	a1,256
1c0031fe:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003202:	30061073          	csrw	mstatus,a2
1c003206:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00320a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00320e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003212:	30047673          	csrrci	a2,mstatus,8
1c003216:	40472783          	lw	a5,1028(a4)
1c00321a:	56de                	lw	a3,244(sp)
1c00321c:	40d7d7b3          	sra	a5,a5,a3
1c003220:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003224:	fff9                	bnez	a5,1c003202 <S10_Conv2d_16x16x1x3_Relu+0x3f2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003226:	4785                	li	a5,1
1c003228:	00d796b3          	sll	a3,a5,a3
1c00322c:	002047b7          	lui	a5,0x204
1c003230:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003234:	30061073          	csrw	mstatus,a2
1c003238:	b769                	j	1c0031c2 <S10_Conv2d_16x16x1x3_Relu+0x3b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00323a:	30047673          	csrrci	a2,mstatus,8
1c00323e:	4047a783          	lw	a5,1028(a5)
1c003242:	46de                	lw	a3,212(sp)
1c003244:	40d7d7b3          	sra	a5,a5,a3
1c003248:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00324c:	c79d                	beqz	a5,1c00327a <S10_Conv2d_16x16x1x3_Relu+0x46a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00324e:	10000593          	li	a1,256
1c003252:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003256:	30061073          	csrw	mstatus,a2
1c00325a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00325e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003262:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003266:	30047673          	csrrci	a2,mstatus,8
1c00326a:	40472783          	lw	a5,1028(a4)
1c00326e:	46de                	lw	a3,212(sp)
1c003270:	40d7d7b3          	sra	a5,a5,a3
1c003274:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003278:	fff9                	bnez	a5,1c003256 <S10_Conv2d_16x16x1x3_Relu+0x446>
1c00327a:	4785                	li	a5,1
1c00327c:	00d796b3          	sll	a3,a5,a3
1c003280:	002047b7          	lui	a5,0x204
1c003284:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003288:	30061073          	csrw	mstatus,a2
1c00328c:	b5b1                	j	1c0030d8 <S10_Conv2d_16x16x1x3_Relu+0x2c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00328e:	30047673          	csrrci	a2,mstatus,8
1c003292:	4047a783          	lw	a5,1028(a5)
1c003296:	56da                	lw	a3,180(sp)
1c003298:	40d7d7b3          	sra	a5,a5,a3
1c00329c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0032a0:	c79d                	beqz	a5,1c0032ce <S10_Conv2d_16x16x1x3_Relu+0x4be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0032a2:	10000593          	li	a1,256
1c0032a6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0032aa:	30061073          	csrw	mstatus,a2
1c0032ae:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0032b2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0032b6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032ba:	30047673          	csrrci	a2,mstatus,8
1c0032be:	40472783          	lw	a5,1028(a4)
1c0032c2:	56da                	lw	a3,180(sp)
1c0032c4:	40d7d7b3          	sra	a5,a5,a3
1c0032c8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0032cc:	fff9                	bnez	a5,1c0032aa <S10_Conv2d_16x16x1x3_Relu+0x49a>
1c0032ce:	4785                	li	a5,1
1c0032d0:	00d796b3          	sll	a3,a5,a3
1c0032d4:	002047b7          	lui	a5,0x204
1c0032d8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0032dc:	30061073          	csrw	mstatus,a2
1c0032e0:	b35d                	j	1c003086 <S10_Conv2d_16x16x1x3_Relu+0x276>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032e2:	30047673          	csrrci	a2,mstatus,8
1c0032e6:	4047a783          	lw	a5,1028(a5)
1c0032ea:	46da                	lw	a3,148(sp)
1c0032ec:	40d7d7b3          	sra	a5,a5,a3
1c0032f0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0032f4:	c79d                	beqz	a5,1c003322 <S10_Conv2d_16x16x1x3_Relu+0x512>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0032f6:	10000593          	li	a1,256
1c0032fa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0032fe:	30061073          	csrw	mstatus,a2
1c003302:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003306:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00330a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00330e:	30047673          	csrrci	a2,mstatus,8
1c003312:	40472783          	lw	a5,1028(a4)
1c003316:	46da                	lw	a3,148(sp)
1c003318:	40d7d7b3          	sra	a5,a5,a3
1c00331c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003320:	fff9                	bnez	a5,1c0032fe <S10_Conv2d_16x16x1x3_Relu+0x4ee>
1c003322:	4785                	li	a5,1
1c003324:	00d796b3          	sll	a3,a5,a3
1c003328:	002047b7          	lui	a5,0x204
1c00332c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003330:	30061073          	csrw	mstatus,a2
1c003334:	b309                	j	1c003036 <S10_Conv2d_16x16x1x3_Relu+0x226>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003336:	30047673          	csrrci	a2,mstatus,8
1c00333a:	40472703          	lw	a4,1028(a4)
1c00333e:	56d6                	lw	a3,116(sp)
1c003340:	40d75733          	sra	a4,a4,a3
1c003344:	fc173733          	p.bclr	a4,a4,30,1
1c003348:	c71d                	beqz	a4,1c003376 <S10_Conv2d_16x16x1x3_Relu+0x566>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00334a:	10000893          	li	a7,256
1c00334e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003352:	30061073          	csrw	mstatus,a2
1c003356:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00335a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00335e:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003362:	30047673          	csrrci	a2,mstatus,8
1c003366:	40472783          	lw	a5,1028(a4)
1c00336a:	56d6                	lw	a3,116(sp)
1c00336c:	40d7d7b3          	sra	a5,a5,a3
1c003370:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003374:	fff9                	bnez	a5,1c003352 <S10_Conv2d_16x16x1x3_Relu+0x542>
1c003376:	4785                	li	a5,1
1c003378:	00d796b3          	sll	a3,a5,a3
1c00337c:	002047b7          	lui	a5,0x204
1c003380:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003384:	30061073          	csrw	mstatus,a2
1c003388:	b9a9                	j	1c002fe2 <S10_Conv2d_16x16x1x3_Relu+0x1d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00338a:	300478f3          	csrrci	a7,mstatus,8
1c00338e:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c003392:	4656                	lw	a2,84(sp)
1c003394:	40c6d6b3          	sra	a3,a3,a2
1c003398:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00339c:	c69d                	beqz	a3,1c0033ca <S10_Conv2d_16x16x1x3_Relu+0x5ba>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00339e:	10000313          	li	t1,256
1c0033a2:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0033a6:	30089073          	csrw	mstatus,a7
1c0033aa:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033ae:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0033b2:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033b6:	300478f3          	csrrci	a7,mstatus,8
1c0033ba:	4046a703          	lw	a4,1028(a3)
1c0033be:	4656                	lw	a2,84(sp)
1c0033c0:	40c75733          	sra	a4,a4,a2
1c0033c4:	fc173733          	p.bclr	a4,a4,30,1
1c0033c8:	ff79                	bnez	a4,1c0033a6 <S10_Conv2d_16x16x1x3_Relu+0x596>
1c0033ca:	4705                	li	a4,1
1c0033cc:	00c71633          	sll	a2,a4,a2
1c0033d0:	00204737          	lui	a4,0x204
1c0033d4:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0033d8:	30089073          	csrw	mstatus,a7
1c0033dc:	be45                	j	1c002f8c <S10_Conv2d_16x16x1x3_Relu+0x17c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033de:	30047373          	csrrci	t1,mstatus,8
1c0033e2:	4046a683          	lw	a3,1028(a3)
1c0033e6:	58d2                	lw	a7,52(sp)
1c0033e8:	4116d6b3          	sra	a3,a3,a7
1c0033ec:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0033f0:	c69d                	beqz	a3,1c00341e <S10_Conv2d_16x16x1x3_Relu+0x60e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033f2:	10000e13          	li	t3,256
1c0033f6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0033fa:	30031073          	csrw	mstatus,t1
1c0033fe:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003402:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003406:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00340a:	30047373          	csrrci	t1,mstatus,8
1c00340e:	4046a603          	lw	a2,1028(a3)
1c003412:	58d2                	lw	a7,52(sp)
1c003414:	41165633          	sra	a2,a2,a7
1c003418:	fc163633          	p.bclr	a2,a2,30,1
1c00341c:	fe79                	bnez	a2,1c0033fa <S10_Conv2d_16x16x1x3_Relu+0x5ea>
1c00341e:	4685                	li	a3,1
1c003420:	011698b3          	sll	a7,a3,a7
1c003424:	002046b7          	lui	a3,0x204
1c003428:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00342c:	30031073          	csrw	mstatus,t1
1c003430:	b611                	j	1c002f34 <S10_Conv2d_16x16x1x3_Relu+0x124>

1c003432 <S14_Conv2d_16x16x1x3_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c003432:	710d                	addi	sp,sp,-352
1c003434:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg0->W = (unsigned short int) (299);
1c003438:	1c0100b7          	lui	ra,0x1c010
{
1c00343c:	15212823          	sw	s2,336(sp)
1c003440:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c003442:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c003446:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c00344a:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c00344e:	c436                	sw	a3,8(sp)
	KerArg1->W = (unsigned short int) (299);
1c003450:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c003454:	15312623          	sw	s3,332(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (16);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg1->Pad = (v4s) ((v4s){16,0,0,0});
1c003458:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c00345c:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c003460:	008066d7          	pv.add.sci.h	a3,zero,16
1c003464:	12d12023          	sw	a3,288(sp)
	KerArg1->Pad = (v4s) ((v4s){16,0,0,0});
1c003468:	9e09a683          	lw	a3,-1568(s3) # 1c00f9e0 <__clz_tab+0x254>
{
1c00346c:	14912a23          	sw	s1,340(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003470:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){16,0,0,0});
1c003474:	12d12a23          	sw	a3,308(sp)
	KerArg1->N = (unsigned char) (3);
1c003478:	010806b7          	lui	a3,0x1080
1c00347c:	10368693          	addi	a3,a3,259 # 1080103 <__L2+0x1000103>
1c003480:	12d12d23          	sw	a3,314(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003484:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
	KerArg1->N = (unsigned char) (3);
1c003488:	6685                	lui	a3,0x1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c00348a:	0004a303          	lw	t1,0(s1)
{
1c00348e:	14812c23          	sw	s0,344(sp)
	KerArg1->N = (unsigned char) (3);
1c003492:	80168693          	addi	a3,a3,-2047 # 801 <__rt_stack_size+0x1>
	KerArg1->Ny = (unsigned char) (1);
	KerArg1->Sy = (unsigned char) (1);
	KerArg1->Dy = (unsigned char) (8);
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
	KerArg2->Feat = (unsigned short int) (16);
1c003496:	1c010437          	lui	s0,0x1c010
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c00349a:	6885                	lui	a7,0x1
	KerArg1->N = (unsigned char) (3);
1c00349c:	12d11f23          	sh	a3,318(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0034a0:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c0034a2:	9f842683          	lw	a3,-1544(s0) # 1c00f9f8 <__clz_tab+0x26c>
{
1c0034a6:	15612023          	sw	s6,320(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c0034aa:	2b088e93          	addi	t4,a7,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c0034ae:	31088293          	addi	t0,a7,784
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c0034b2:	61088f93          	addi	t6,a7,1552
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c0034b6:	2f088f13          	addi	t5,a7,752
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0034ba:	8c0e0e13          	addi	t3,t3,-1856 # 28c0 <__rt_stack_size+0x20c0>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c0034be:	6b1d                	lui	s6,0x7
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0034c0:	9e1a                	add	t3,t3,t1
{
1c0034c2:	15512223          	sw	s5,324(sp)
	KerArg1->H = (unsigned short int) (1);
1c0034c6:	4385                	li	t2,1
	KerArg0->Feat = (unsigned short int) (16);
1c0034c8:	4ac1                	li	s5,16
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c0034ca:	9e9a                	add	t4,t4,t1
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c0034cc:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c0034ce:	9f9a                	add	t6,t6,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c0034d0:	9f1a                	add	t5,t5,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c0034d2:	30088893          	addi	a7,a7,768
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c0034d6:	380b0b13          	addi	s6,s6,896 # 7380 <__rt_stack_size+0x6b80>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c0034da:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c0034dc:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0034de:	c272                	sw	t3,4(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c0034e0:	01511623          	sh	s5,12(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c0034e4:	c876                	sw	t4,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c0034e6:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c0034ea:	10711e23          	sh	t2,284(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (16);
1c0034ee:	13511223          	sh	s5,292(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c0034f2:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c0034f6:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
1c0034fa:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c0034fc:	ce7e                	sw	t6,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c0034fe:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c003500:	02711223          	sh	t2,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c003504:	d47a                	sw	t5,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c003506:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c003508:	d85a                	sw	s6,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00350a:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00350e:	002046b7          	lui	a3,0x204
1c003512:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003516:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00351a:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00351e:	c158c8b3          	p.bset	a7,a7,0,21
1c003522:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003526:	41d6a023          	sw	t4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00352a:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c00352e:	da72                	sw	t3,52(sp)
        copy->length = 0;
1c003530:	c282                	sw	zero,68(sp)
  __builtin_pulp_spr_write(reg, val);
1c003532:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c003536:	4616                	lw	a2,68(sp)
1c003538:	4c060563          	beqz	a2,1c003a02 <S14_Conv2d_16x16x1x3_Relu+0x5d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00353c:	48b6                	lw	a7,76(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00353e:	02000613          	li	a2,32
1c003542:	00088b63          	beqz	a7,1c003558 <S14_Conv2d_16x16x1x3_Relu+0x126>
1c003546:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00354a:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00354e:	00c6a223          	sw	a2,4(a3)
1c003552:	48b6                	lw	a7,76(sp)
1c003554:	fe0899e3          	bnez	a7,1c003546 <S14_Conv2d_16x16x1x3_Relu+0x114>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4848), 16, 0, &DmaR_Evt2);
1c003558:	0004a883          	lw	a7,0(s1)
1c00355c:	6685                	lui	a3,0x1
1c00355e:	2f068693          	addi	a3,a3,752 # 12f0 <__rt_stack_size+0xaf0>
1c003562:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003564:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003568:	002046b7          	lui	a3,0x204
1c00356c:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003570:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003574:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003576:	c1564633          	p.bset	a2,a2,0,21
1c00357a:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00357e:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003582:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c003586:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c003588:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c00358a:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c00358e:	5716                	lw	a4,100(sp)
1c003590:	40070f63          	beqz	a4,1c0039ae <S14_Conv2d_16x16x1x3_Relu+0x57c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003594:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003596:	02000693          	li	a3,32
1c00359a:	00204737          	lui	a4,0x204
1c00359e:	ca09                	beqz	a2,1c0035b0 <S14_Conv2d_16x16x1x3_Relu+0x17e>
1c0035a0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035a4:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035a8:	00d72223          	sw	a3,4(a4)
1c0035ac:	5636                	lw	a2,108(sp)
1c0035ae:	fa6d                	bnez	a2,1c0035a0 <S14_Conv2d_16x16x1x3_Relu+0x16e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4864), 16, 0, &DmaR_Evt3);
1c0035b0:	4090                	lw	a2,0(s1)
1c0035b2:	6705                	lui	a4,0x1
1c0035b4:	30070713          	addi	a4,a4,768 # 1300 <__rt_stack_size+0xb00>
1c0035b8:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035ba:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0035be:	00204737          	lui	a4,0x204
1c0035c2:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0035c6:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0035ca:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0035cc:	c156c6b3          	p.bset	a3,a3,0,21
1c0035d0:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0035d4:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0035d8:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0035dc:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c0035de:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c0035e0:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0035e4:	479a                	lw	a5,132(sp)
1c0035e6:	36078a63          	beqz	a5,1c00395a <S14_Conv2d_16x16x1x3_Relu+0x528>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0035ea:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0035ec:	02000713          	li	a4,32
1c0035f0:	002047b7          	lui	a5,0x204
1c0035f4:	ca89                	beqz	a3,1c003606 <S14_Conv2d_16x16x1x3_Relu+0x1d4>
1c0035f6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035fa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035fe:	00e7a223          	sw	a4,4(a5)
1c003602:	46ba                	lw	a3,140(sp)
1c003604:	faed                	bnez	a3,1c0035f6 <S14_Conv2d_16x16x1x3_Relu+0x1c4>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4880), 768, 0, &DmaR_Evt4);
1c003606:	4094                	lw	a3,0(s1)
1c003608:	6785                	lui	a5,0x1
1c00360a:	31078793          	addi	a5,a5,784 # 1310 <__rt_stack_size+0xb10>
1c00360e:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003610:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003614:	002047b7          	lui	a5,0x204
1c003618:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00361c:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003620:	30070713          	addi	a4,a4,768 # b0300 <__L2+0x30300>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003624:	c1574733          	p.bset	a4,a4,0,21
1c003628:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00362c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003630:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003634:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c003636:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c003638:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00363c:	571a                	lw	a4,164(sp)
1c00363e:	2c070463          	beqz	a4,1c003906 <S14_Conv2d_16x16x1x3_Relu+0x4d4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003642:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003644:	02000713          	li	a4,32
1c003648:	ca89                	beqz	a3,1c00365a <S14_Conv2d_16x16x1x3_Relu+0x228>
1c00364a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00364e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003652:	00e7a223          	sw	a4,4(a5)
1c003656:	56ba                	lw	a3,172(sp)
1c003658:	faed                	bnez	a3,1c00364a <S14_Conv2d_16x16x1x3_Relu+0x218>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt5);
1c00365a:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00365c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003660:	002047b7          	lui	a5,0x204
1c003664:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003668:	00031737          	lui	a4,0x31
1c00366c:	2b070713          	addi	a4,a4,688 # 312b0 <__L1Cl+0x212b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003670:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003674:	c1574733          	p.bset	a4,a4,0,21
1c003678:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00367c:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003680:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c003684:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c003686:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c003688:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00368c:	471e                	lw	a4,196(sp)
1c00368e:	22070263          	beqz	a4,1c0038b2 <S14_Conv2d_16x16x1x3_Relu+0x480>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003692:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003694:	02000713          	li	a4,32
1c003698:	ca89                	beqz	a3,1c0036aa <S14_Conv2d_16x16x1x3_Relu+0x278>
1c00369a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00369e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0036a2:	00e7a223          	sw	a4,4(a5)
1c0036a6:	46be                	lw	a3,204(sp)
1c0036a8:	faed                	bnez	a3,1c00369a <S14_Conv2d_16x16x1x3_Relu+0x268>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+29568), 9, 0, &DmaR_Evt6);
1c0036aa:	4094                	lw	a3,0(s1)
1c0036ac:	679d                	lui	a5,0x7
1c0036ae:	38078793          	addi	a5,a5,896 # 7380 <__rt_stack_size+0x6b80>
1c0036b2:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0036b4:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0036b8:	002047b7          	lui	a5,0x204
1c0036bc:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0036c0:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0036c4:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0036c6:	c1574733          	p.bset	a4,a4,0,21
1c0036ca:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0036ce:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0036d2:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c0036d6:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c0036d8:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c0036da:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0036de:	571e                	lw	a4,228(sp)
1c0036e0:	16070f63          	beqz	a4,1c00385e <S14_Conv2d_16x16x1x3_Relu+0x42c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0036e4:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0036e6:	02000713          	li	a4,32
1c0036ea:	ca89                	beqz	a3,1c0036fc <S14_Conv2d_16x16x1x3_Relu+0x2ca>
1c0036ec:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0036f0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0036f4:	00e7a223          	sw	a4,4(a5)
1c0036f8:	56be                	lw	a3,236(sp)
1c0036fa:	faed                	bnez	a3,1c0036ec <S14_Conv2d_16x16x1x3_Relu+0x2ba>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+29568))[5]);
1c0036fc:	409c                	lw	a5,0(s1)
1c0036fe:	671d                	lui	a4,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003700:	0ff00a13          	li	s4,255
1c003704:	97ba                	add	a5,a5,a4
1c003706:	3857c783          	lbu	a5,901(a5)
1c00370a:	00204437          	lui	s0,0x204
1c00370e:	00f10a23          	sb	a5,20(sp)
1c003712:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003716:	20040993          	addi	s3,s0,512
1c00371a:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00371e:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003722:	1c0087b7          	lui	a5,0x1c008
1c003726:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c00372a:	08f42023          	sw	a5,128(s0)
1c00372e:	0048                	addi	a0,sp,4
1c003730:	08a42023          	sw	a0,128(s0)
1c003734:	4ed040ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003738:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c00373c:	4785                	li	a5,1
1c00373e:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003742:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003746:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00374a:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00374e:	1c0097b7          	lui	a5,0x1c009
1c003752:	10a78793          	addi	a5,a5,266 # 1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
1c003756:	08f42023          	sw	a5,128(s0)
1c00375a:	0a48                	addi	a0,sp,276
1c00375c:	08a42023          	sw	a0,128(s0)
1c003760:	1ab050ef          	jal	ra,1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003764:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003768:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00376c:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003770:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003774:	1c0087b7          	lui	a5,0x1c008
1c003778:	38878793          	addi	a5,a5,904 # 1c008388 <KerParReduct_CC_ReLU_SQ8>
1c00377c:	08f42023          	sw	a5,128(s0)
1c003780:	0828                	addi	a0,sp,24
1c003782:	08a42023          	sw	a0,128(s0)
1c003786:	403040ef          	jal	ra,1c008388 <KerParReduct_CC_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00378a:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_ReLU_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_ReLU_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5648), 4784, 1, &DmaW_Evt1);
1c00378e:	6785                	lui	a5,0x1
1c003790:	4098                	lw	a4,0(s1)
1c003792:	61078693          	addi	a3,a5,1552 # 1610 <__rt_stack_size+0xe10>
1c003796:	9736                	add	a4,a4,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003798:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00379c:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0037a0:	002a05b7          	lui	a1,0x2a0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0037a4:	2b078793          	addi	a5,a5,688
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0037a8:	8fcd                	or	a5,a5,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0037aa:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0037ae:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0037b2:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c0037b6:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c0037b8:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c0037bc:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0037c0:	10412783          	lw	a5,260(sp)
1c0037c4:	c3b9                	beqz	a5,1c00380a <S14_Conv2d_16x16x1x3_Relu+0x3d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0037c6:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0037ca:	02000713          	li	a4,32
1c0037ce:	002047b7          	lui	a5,0x204
1c0037d2:	ca91                	beqz	a3,1c0037e6 <S14_Conv2d_16x16x1x3_Relu+0x3b4>
1c0037d4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0037d8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0037dc:	00e7a223          	sw	a4,4(a5)
1c0037e0:	10c12683          	lw	a3,268(sp)
1c0037e4:	fae5                	bnez	a3,1c0037d4 <S14_Conv2d_16x16x1x3_Relu+0x3a2>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0037e6:	15c12083          	lw	ra,348(sp)
1c0037ea:	15812403          	lw	s0,344(sp)
1c0037ee:	15412483          	lw	s1,340(sp)
1c0037f2:	15012903          	lw	s2,336(sp)
1c0037f6:	14c12983          	lw	s3,332(sp)
1c0037fa:	14812a03          	lw	s4,328(sp)
1c0037fe:	14412a83          	lw	s5,324(sp)
1c003802:	14012b03          	lw	s6,320(sp)
1c003806:	6135                	addi	sp,sp,352
1c003808:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00380a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00380e:	40442403          	lw	s0,1028(s0)
1c003812:	56de                	lw	a3,244(sp)
1c003814:	40d45433          	sra	s0,s0,a3
1c003818:	fc143433          	p.bclr	s0,s0,30,1
1c00381c:	c41d                	beqz	s0,1c00384a <S14_Conv2d_16x16x1x3_Relu+0x418>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00381e:	10000593          	li	a1,256
1c003822:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003826:	30061073          	csrw	mstatus,a2
1c00382a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00382e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003832:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003836:	30047673          	csrrci	a2,mstatus,8
1c00383a:	40472783          	lw	a5,1028(a4)
1c00383e:	56de                	lw	a3,244(sp)
1c003840:	40d7d7b3          	sra	a5,a5,a3
1c003844:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003848:	fff9                	bnez	a5,1c003826 <S14_Conv2d_16x16x1x3_Relu+0x3f4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00384a:	4785                	li	a5,1
1c00384c:	00d796b3          	sll	a3,a5,a3
1c003850:	002047b7          	lui	a5,0x204
1c003854:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003858:	30061073          	csrw	mstatus,a2
1c00385c:	b769                	j	1c0037e6 <S14_Conv2d_16x16x1x3_Relu+0x3b4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00385e:	30047673          	csrrci	a2,mstatus,8
1c003862:	4047a783          	lw	a5,1028(a5)
1c003866:	46de                	lw	a3,212(sp)
1c003868:	40d7d7b3          	sra	a5,a5,a3
1c00386c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003870:	c79d                	beqz	a5,1c00389e <S14_Conv2d_16x16x1x3_Relu+0x46c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003872:	10000593          	li	a1,256
1c003876:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00387a:	30061073          	csrw	mstatus,a2
1c00387e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003882:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003886:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00388a:	30047673          	csrrci	a2,mstatus,8
1c00388e:	40472783          	lw	a5,1028(a4)
1c003892:	46de                	lw	a3,212(sp)
1c003894:	40d7d7b3          	sra	a5,a5,a3
1c003898:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00389c:	fff9                	bnez	a5,1c00387a <S14_Conv2d_16x16x1x3_Relu+0x448>
1c00389e:	4785                	li	a5,1
1c0038a0:	00d796b3          	sll	a3,a5,a3
1c0038a4:	002047b7          	lui	a5,0x204
1c0038a8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0038ac:	30061073          	csrw	mstatus,a2
1c0038b0:	b5b1                	j	1c0036fc <S14_Conv2d_16x16x1x3_Relu+0x2ca>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0038b2:	30047673          	csrrci	a2,mstatus,8
1c0038b6:	4047a783          	lw	a5,1028(a5)
1c0038ba:	56da                	lw	a3,180(sp)
1c0038bc:	40d7d7b3          	sra	a5,a5,a3
1c0038c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0038c4:	c79d                	beqz	a5,1c0038f2 <S14_Conv2d_16x16x1x3_Relu+0x4c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0038c6:	10000593          	li	a1,256
1c0038ca:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0038ce:	30061073          	csrw	mstatus,a2
1c0038d2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0038d6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0038da:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0038de:	30047673          	csrrci	a2,mstatus,8
1c0038e2:	40472783          	lw	a5,1028(a4)
1c0038e6:	56da                	lw	a3,180(sp)
1c0038e8:	40d7d7b3          	sra	a5,a5,a3
1c0038ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0038f0:	fff9                	bnez	a5,1c0038ce <S14_Conv2d_16x16x1x3_Relu+0x49c>
1c0038f2:	4785                	li	a5,1
1c0038f4:	00d796b3          	sll	a3,a5,a3
1c0038f8:	002047b7          	lui	a5,0x204
1c0038fc:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003900:	30061073          	csrw	mstatus,a2
1c003904:	b35d                	j	1c0036aa <S14_Conv2d_16x16x1x3_Relu+0x278>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003906:	30047673          	csrrci	a2,mstatus,8
1c00390a:	4047a783          	lw	a5,1028(a5)
1c00390e:	46da                	lw	a3,148(sp)
1c003910:	40d7d7b3          	sra	a5,a5,a3
1c003914:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003918:	c79d                	beqz	a5,1c003946 <S14_Conv2d_16x16x1x3_Relu+0x514>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00391a:	10000593          	li	a1,256
1c00391e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003922:	30061073          	csrw	mstatus,a2
1c003926:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00392a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00392e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003932:	30047673          	csrrci	a2,mstatus,8
1c003936:	40472783          	lw	a5,1028(a4)
1c00393a:	46da                	lw	a3,148(sp)
1c00393c:	40d7d7b3          	sra	a5,a5,a3
1c003940:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003944:	fff9                	bnez	a5,1c003922 <S14_Conv2d_16x16x1x3_Relu+0x4f0>
1c003946:	4785                	li	a5,1
1c003948:	00d796b3          	sll	a3,a5,a3
1c00394c:	002047b7          	lui	a5,0x204
1c003950:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003954:	30061073          	csrw	mstatus,a2
1c003958:	b309                	j	1c00365a <S14_Conv2d_16x16x1x3_Relu+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00395a:	30047673          	csrrci	a2,mstatus,8
1c00395e:	40472703          	lw	a4,1028(a4)
1c003962:	56d6                	lw	a3,116(sp)
1c003964:	40d75733          	sra	a4,a4,a3
1c003968:	fc173733          	p.bclr	a4,a4,30,1
1c00396c:	c71d                	beqz	a4,1c00399a <S14_Conv2d_16x16x1x3_Relu+0x568>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00396e:	10000893          	li	a7,256
1c003972:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003976:	30061073          	csrw	mstatus,a2
1c00397a:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00397e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003982:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003986:	30047673          	csrrci	a2,mstatus,8
1c00398a:	40472783          	lw	a5,1028(a4)
1c00398e:	56d6                	lw	a3,116(sp)
1c003990:	40d7d7b3          	sra	a5,a5,a3
1c003994:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003998:	fff9                	bnez	a5,1c003976 <S14_Conv2d_16x16x1x3_Relu+0x544>
1c00399a:	4785                	li	a5,1
1c00399c:	00d796b3          	sll	a3,a5,a3
1c0039a0:	002047b7          	lui	a5,0x204
1c0039a4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0039a8:	30061073          	csrw	mstatus,a2
1c0039ac:	b9a9                	j	1c003606 <S14_Conv2d_16x16x1x3_Relu+0x1d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039ae:	300478f3          	csrrci	a7,mstatus,8
1c0039b2:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c0039b6:	4656                	lw	a2,84(sp)
1c0039b8:	40c6d6b3          	sra	a3,a3,a2
1c0039bc:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0039c0:	c69d                	beqz	a3,1c0039ee <S14_Conv2d_16x16x1x3_Relu+0x5bc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0039c2:	10000313          	li	t1,256
1c0039c6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0039ca:	30089073          	csrw	mstatus,a7
1c0039ce:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0039d2:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0039d6:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039da:	300478f3          	csrrci	a7,mstatus,8
1c0039de:	4046a703          	lw	a4,1028(a3)
1c0039e2:	4656                	lw	a2,84(sp)
1c0039e4:	40c75733          	sra	a4,a4,a2
1c0039e8:	fc173733          	p.bclr	a4,a4,30,1
1c0039ec:	ff79                	bnez	a4,1c0039ca <S14_Conv2d_16x16x1x3_Relu+0x598>
1c0039ee:	4705                	li	a4,1
1c0039f0:	00c71633          	sll	a2,a4,a2
1c0039f4:	00204737          	lui	a4,0x204
1c0039f8:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0039fc:	30089073          	csrw	mstatus,a7
1c003a00:	be45                	j	1c0035b0 <S14_Conv2d_16x16x1x3_Relu+0x17e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a02:	30047373          	csrrci	t1,mstatus,8
1c003a06:	4046a683          	lw	a3,1028(a3)
1c003a0a:	58d2                	lw	a7,52(sp)
1c003a0c:	4116d6b3          	sra	a3,a3,a7
1c003a10:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003a14:	c69d                	beqz	a3,1c003a42 <S14_Conv2d_16x16x1x3_Relu+0x610>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a16:	10000e13          	li	t3,256
1c003a1a:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c003a1e:	30031073          	csrw	mstatus,t1
1c003a22:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a26:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a2a:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a2e:	30047373          	csrrci	t1,mstatus,8
1c003a32:	4046a603          	lw	a2,1028(a3)
1c003a36:	58d2                	lw	a7,52(sp)
1c003a38:	41165633          	sra	a2,a2,a7
1c003a3c:	fc163633          	p.bclr	a2,a2,30,1
1c003a40:	fe79                	bnez	a2,1c003a1e <S14_Conv2d_16x16x1x3_Relu+0x5ec>
1c003a42:	4685                	li	a3,1
1c003a44:	011698b3          	sll	a7,a3,a7
1c003a48:	002046b7          	lui	a3,0x204
1c003a4c:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003a50:	30031073          	csrw	mstatus,t1
1c003a54:	b611                	j	1c003558 <S14_Conv2d_16x16x1x3_Relu+0x126>

1c003a56 <S18_Conv2d_16x16x1x3_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		unsigned char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c003a56:	710d                	addi	sp,sp,-352
1c003a58:	14112e23          	sw	ra,348(sp)
		Tile0: [0, 9, 9], Tile1: [0, 0, 0], Tile2; [0, 0, 0]
		T0: [Tile0: 0], T1: [Tile0: 0], T2: [Tile0: 0]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg0->W = (unsigned short int) (299);
1c003a5c:	1c0100b7          	lui	ra,0x1c010
{
1c003a60:	15212823          	sw	s2,336(sp)
1c003a64:	8936                	mv	s2,a3
	KerArg0->W = (unsigned short int) (299);
1c003a66:	9e80a683          	lw	a3,-1560(ra) # 1c00f9e8 <__clz_tab+0x25c>
{
1c003a6a:	15412423          	sw	s4,328(sp)
	KerArg0->H = (unsigned short int) (1);
	KerArg0->Feat = (unsigned short int) (16);
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
	KerArg1->W = (unsigned short int) (299);
1c003a6e:	1c010a37          	lui	s4,0x1c010
	KerArg0->W = (unsigned short int) (299);
1c003a72:	c436                	sw	a3,8(sp)
	KerArg1->W = (unsigned short int) (299);
1c003a74:	9eca2683          	lw	a3,-1556(s4) # 1c00f9ec <__clz_tab+0x260>
{
1c003a78:	15312623          	sw	s3,332(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->TotalInFeatures = (unsigned short int) (16);
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
	KerArg1->Pad = (v4s) ((v4s){32,0,0,0});
1c003a7c:	1c0109b7          	lui	s3,0x1c010
	KerArg1->W = (unsigned short int) (299);
1c003a80:	10d12c23          	sw	a3,280(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c003a84:	008066d7          	pv.add.sci.h	a3,zero,16
1c003a88:	12d12023          	sw	a3,288(sp)
	KerArg1->Pad = (v4s) ((v4s){32,0,0,0});
1c003a8c:	9e49a683          	lw	a3,-1564(s3) # 1c00f9e4 <__clz_tab+0x258>
{
1c003a90:	14912a23          	sw	s1,340(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003a94:	100004b7          	lui	s1,0x10000
	KerArg1->Pad = (v4s) ((v4s){32,0,0,0});
1c003a98:	12d12a23          	sw	a3,308(sp)
	KerArg1->N = (unsigned char) (3);
1c003a9c:	011006b7          	lui	a3,0x1100
1c003aa0:	10368693          	addi	a3,a3,259 # 1100103 <__L2+0x1080103>
1c003aa4:	12d12d23          	sw	a3,314(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003aa8:	01c48493          	addi	s1,s1,28 # 1000001c <quant_model_L1_Memory>
	KerArg1->N = (unsigned char) (3);
1c003aac:	6685                	lui	a3,0x1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003aae:	0004a303          	lw	t1,0(s1)
{
1c003ab2:	14812c23          	sw	s0,344(sp)
	KerArg1->N = (unsigned char) (3);
1c003ab6:	0685                	addi	a3,a3,1
	KerArg1->Ny = (unsigned char) (1);
	KerArg1->Sy = (unsigned char) (1);
	KerArg1->Dy = (unsigned char) (16);
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
	KerArg2->Feat = (unsigned short int) (16);
1c003ab8:	1c010437          	lui	s0,0x1c010
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c003abc:	6885                	lui	a7,0x1
	KerArg1->N = (unsigned char) (3);
1c003abe:	12d11f23          	sh	a3,318(sp)
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003ac2:	6e0d                	lui	t3,0x3
	KerArg2->Feat = (unsigned short int) (16);
1c003ac4:	9f842683          	lw	a3,-1544(s0) # 1c00f9f8 <__clz_tab+0x26c>
{
1c003ac8:	15612023          	sw	s6,320(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c003acc:	2b088e93          	addi	t4,a7,688 # 12b0 <__rt_stack_size+0xab0>
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c003ad0:	31088293          	addi	t0,a7,784
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c003ad4:	61088f93          	addi	t6,a7,1552
	KerArg2->W = (unsigned short int) (299);
	KerArg2->H = (unsigned short int) (1);
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c003ad8:	2f088f13          	addi	t5,a7,752
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003adc:	8c0e0e13          	addi	t3,t3,-1856 # 28c0 <__rt_stack_size+0x20c0>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c003ae0:	6b1d                	lui	s6,0x7
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003ae2:	9e1a                	add	t3,t3,t1
{
1c003ae4:	15512223          	sw	s5,324(sp)
	KerArg1->H = (unsigned short int) (1);
1c003ae8:	4385                	li	t2,1
	KerArg0->Feat = (unsigned short int) (16);
1c003aea:	4ac1                	li	s5,16
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c003aec:	9e9a                	add	t4,t4,t1
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c003aee:	929a                	add	t0,t0,t1
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c003af0:	9f9a                	add	t6,t6,t1
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c003af2:	9f1a                	add	t5,t5,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c003af4:	30088893          	addi	a7,a7,768
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c003af8:	380b0b13          	addi	s6,s6,896 # 7380 <__rt_stack_size+0x6b80>
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c003afc:	989a                	add	a7,a7,t1
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c003afe:	9b1a                	add	s6,s6,t1
	KerArg0->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003b00:	c272                	sw	t3,4(sp)
	KerArg0->Feat = (unsigned short int) (16);
1c003b02:	01511623          	sh	s5,12(sp)
	KerArg0->Bias = (void * __restrict__) (quant_model_L1_Memory+4784);
1c003b06:	c876                	sw	t4,16(sp)
	KerArg1->In = (signed char * __restrict__) (quant_model_L1_Memory+0);
1c003b08:	10612a23          	sw	t1,276(sp)
	KerArg1->H = (unsigned short int) (1);
1c003b0c:	10711e23          	sh	t2,284(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (16);
1c003b10:	13511223          	sh	s5,292(sp)
	KerArg1->Filter = (signed char * __restrict__) (quant_model_L1_Memory+4880);
1c003b14:	12512423          	sw	t0,296(sp)
	KerArg1->Out = (int * __restrict__) (quant_model_L1_Memory+10432);
1c003b18:	13c12823          	sw	t3,304(sp)
	KerArg2->In = (int *__restrict__) (quant_model_L1_Memory+10432);
1c003b1c:	cc72                	sw	t3,24(sp)
	KerArg2->Out = (void *__restrict__) (quant_model_L1_Memory+5648);
1c003b1e:	ce7e                	sw	t6,28(sp)
	KerArg2->Feat = (unsigned short int) (16);
1c003b20:	d036                	sw	a3,32(sp)
	KerArg2->H = (unsigned short int) (1);
1c003b22:	02711223          	sh	t2,36(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (quant_model_L1_Memory+4848);
1c003b26:	d47a                	sw	t5,40(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (quant_model_L1_Memory+4864);
1c003b28:	d646                	sw	a7,44(sp)
	KerArg2->Infos = (signed char *__restrict__) (quant_model_L1_Memory+29568);
1c003b2a:	d85a                	sw	s6,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b2c:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003b30:	002046b7          	lui	a3,0x204
1c003b34:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003b38:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003b3c:	04088893          	addi	a7,a7,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003b40:	c158c8b3          	p.bset	a7,a7,0,21
1c003b44:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003b48:	41d6a023          	sw	t4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003b4c:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c003b50:	da72                	sw	t3,52(sp)
        copy->length = 0;
1c003b52:	c282                	sw	zero,68(sp)
  __builtin_pulp_spr_write(reg, val);
1c003b54:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c003b58:	4616                	lw	a2,68(sp)
1c003b5a:	4c060563          	beqz	a2,1c004024 <S18_Conv2d_16x16x1x3_Relu+0x5ce>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003b5e:	48b6                	lw	a7,76(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003b60:	02000613          	li	a2,32
1c003b64:	00088b63          	beqz	a7,1c003b7a <S18_Conv2d_16x16x1x3_Relu+0x124>
1c003b68:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003b6c:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003b70:	00c6a223          	sw	a2,4(a3)
1c003b74:	48b6                	lw	a7,76(sp)
1c003b76:	fe0899e3          	bnez	a7,1c003b68 <S18_Conv2d_16x16x1x3_Relu+0x112>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4784), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4848), 16, 0, &DmaR_Evt2);
1c003b7a:	0004a883          	lw	a7,0(s1)
1c003b7e:	6685                	lui	a3,0x1
1c003b80:	2f068693          	addi	a3,a3,752 # 12f0 <__rt_stack_size+0xaf0>
1c003b84:	98b6                	add	a7,a7,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b86:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003b8a:	002046b7          	lui	a3,0x204
1c003b8e:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003b92:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003b96:	0641                	addi	a2,a2,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003b98:	c1564633          	p.bset	a2,a2,0,21
1c003b9c:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003ba0:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003ba4:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c003ba8:	caf2                	sw	t3,84(sp)
        copy->length = 0;
1c003baa:	d282                	sw	zero,100(sp)
  __builtin_pulp_spr_write(reg, val);
1c003bac:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c003bb0:	5716                	lw	a4,100(sp)
1c003bb2:	40070f63          	beqz	a4,1c003fd0 <S18_Conv2d_16x16x1x3_Relu+0x57a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003bb6:	5636                	lw	a2,108(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003bb8:	02000693          	li	a3,32
1c003bbc:	00204737          	lui	a4,0x204
1c003bc0:	ca09                	beqz	a2,1c003bd2 <S18_Conv2d_16x16x1x3_Relu+0x17c>
1c003bc2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003bc6:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003bca:	00d72223          	sw	a3,4(a4)
1c003bce:	5636                	lw	a2,108(sp)
1c003bd0:	fa6d                	bnez	a2,1c003bc2 <S18_Conv2d_16x16x1x3_Relu+0x16c>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4864), 16, 0, &DmaR_Evt3);
1c003bd2:	4090                	lw	a2,0(s1)
1c003bd4:	6705                	lui	a4,0x1
1c003bd6:	30070713          	addi	a4,a4,768 # 1300 <__rt_stack_size+0xb00>
1c003bda:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003bdc:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003be0:	00204737          	lui	a4,0x204
1c003be4:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003be8:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003bec:	06c1                	addi	a3,a3,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003bee:	c156c6b3          	p.bset	a3,a3,0,21
1c003bf2:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003bf6:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003bfa:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c003bfe:	da9a                	sw	t1,116(sp)
        copy->length = 0;
1c003c00:	c302                	sw	zero,132(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c02:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c003c06:	479a                	lw	a5,132(sp)
1c003c08:	36078a63          	beqz	a5,1c003f7c <S18_Conv2d_16x16x1x3_Relu+0x526>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c0c:	46ba                	lw	a3,140(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c0e:	02000713          	li	a4,32
1c003c12:	002047b7          	lui	a5,0x204
1c003c16:	ca89                	beqz	a3,1c003c28 <S18_Conv2d_16x16x1x3_Relu+0x1d2>
1c003c18:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c1c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c20:	00e7a223          	sw	a4,4(a5)
1c003c24:	46ba                	lw	a3,140(sp)
1c003c26:	faed                	bnez	a3,1c003c18 <S18_Conv2d_16x16x1x3_Relu+0x1c2>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+4880), 768, 0, &DmaR_Evt4);
1c003c28:	4094                	lw	a3,0(s1)
1c003c2a:	6785                	lui	a5,0x1
1c003c2c:	31078793          	addi	a5,a5,784 # 1310 <__rt_stack_size+0xb10>
1c003c30:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c32:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c36:	002047b7          	lui	a5,0x204
1c003c3a:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c3e:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c42:	30070713          	addi	a4,a4,768 # b0300 <__L2+0x30300>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c46:	c1574733          	p.bset	a4,a4,0,21
1c003c4a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c4e:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003c52:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003c56:	cb46                	sw	a7,148(sp)
        copy->length = 0;
1c003c58:	d302                	sw	zero,164(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c5a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003c5e:	571a                	lw	a4,164(sp)
1c003c60:	2c070463          	beqz	a4,1c003f28 <S18_Conv2d_16x16x1x3_Relu+0x4d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c64:	56ba                	lw	a3,172(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c66:	02000713          	li	a4,32
1c003c6a:	ca89                	beqz	a3,1c003c7c <S18_Conv2d_16x16x1x3_Relu+0x226>
1c003c6c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c70:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c74:	00e7a223          	sw	a4,4(a5)
1c003c78:	56ba                	lw	a3,172(sp)
1c003c7a:	faed                	bnez	a3,1c003c6c <S18_Conv2d_16x16x1x3_Relu+0x216>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+0), 4784, 0, &DmaR_Evt5);
1c003c7c:	408c                	lw	a1,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c7e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c82:	002047b7          	lui	a5,0x204
1c003c86:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c8a:	00031737          	lui	a4,0x31
1c003c8e:	2b070713          	addi	a4,a4,688 # 312b0 <__L1Cl+0x212b0>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c92:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c96:	c1574733          	p.bset	a4,a4,0,21
1c003c9a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c9e:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003ca2:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c003ca6:	db32                	sw	a2,180(sp)
        copy->length = 0;
1c003ca8:	c382                	sw	zero,196(sp)
  __builtin_pulp_spr_write(reg, val);
1c003caa:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003cae:	471e                	lw	a4,196(sp)
1c003cb0:	22070263          	beqz	a4,1c003ed4 <S18_Conv2d_16x16x1x3_Relu+0x47e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003cb4:	46be                	lw	a3,204(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003cb6:	02000713          	li	a4,32
1c003cba:	ca89                	beqz	a3,1c003ccc <S18_Conv2d_16x16x1x3_Relu+0x276>
1c003cbc:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003cc0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003cc4:	00e7a223          	sw	a4,4(a5)
1c003cc8:	46be                	lw	a3,204(sp)
1c003cca:	faed                	bnez	a3,1c003cbc <S18_Conv2d_16x16x1x3_Relu+0x266>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+29568), 9, 0, &DmaR_Evt6);
1c003ccc:	4094                	lw	a3,0(s1)
1c003cce:	679d                	lui	a5,0x7
1c003cd0:	38078793          	addi	a5,a5,896 # 7380 <__rt_stack_size+0x6b80>
1c003cd4:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003cd6:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003cda:	002047b7          	lui	a5,0x204
1c003cde:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003ce2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003ce6:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003ce8:	c1574733          	p.bset	a4,a4,0,21
1c003cec:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003cf0:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003cf4:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c003cf8:	cbae                	sw	a1,212(sp)
        copy->length = 0;
1c003cfa:	d382                	sw	zero,228(sp)
  __builtin_pulp_spr_write(reg, val);
1c003cfc:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003d00:	571e                	lw	a4,228(sp)
1c003d02:	16070f63          	beqz	a4,1c003e80 <S18_Conv2d_16x16x1x3_Relu+0x42a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003d06:	56be                	lw	a3,236(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d08:	02000713          	li	a4,32
1c003d0c:	ca89                	beqz	a3,1c003d1e <S18_Conv2d_16x16x1x3_Relu+0x2c8>
1c003d0e:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d12:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d16:	00e7a223          	sw	a4,4(a5)
1c003d1a:	56be                	lw	a3,236(sp)
1c003d1c:	faed                	bnez	a3,1c003d0e <S18_Conv2d_16x16x1x3_Relu+0x2b8>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(quant_model_L1_Memory+29568))[5]);
1c003d1e:	409c                	lw	a5,0(s1)
1c003d20:	671d                	lui	a4,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003d22:	0ff00a13          	li	s4,255
1c003d26:	97ba                	add	a5,a5,a4
1c003d28:	3857c783          	lbu	a5,901(a5)
1c003d2c:	00204437          	lui	s0,0x204
1c003d30:	00f10a23          	sb	a5,20(sp)
1c003d34:	09442223          	sw	s4,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003d38:	20040993          	addi	s3,s0,512
1c003d3c:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003d40:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003d44:	1c0087b7          	lui	a5,0x1c008
1c003d48:	42078793          	addi	a5,a5,1056 # 1c008420 <KerParSetBiasB32_SQ8>
1c003d4c:	08f42023          	sw	a5,128(s0)
1c003d50:	0048                	addi	a0,sp,4
1c003d52:	08a42023          	sw	a0,128(s0)
1c003d56:	6ca040ef          	jal	ra,1c008420 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d5a:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (1);
1c003d5e:	4785                	li	a5,1
1c003d60:	10f11f23          	sh	a5,286(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003d64:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003d68:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003d6c:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003d70:	1c0097b7          	lui	a5,0x1c009
1c003d74:	10a78793          	addi	a5,a5,266 # 1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
1c003d78:	08f42023          	sw	a5,128(s0)
1c003d7c:	0a48                	addi	a0,sp,276
1c003d7e:	08a42023          	sw	a0,128(s0)
1c003d82:	388050ef          	jal	ra,1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d86:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003d8a:	09442223          	sw	s4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003d8e:	0149a023          	sw	s4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003d92:	0149a623          	sw	s4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003d96:	1c0087b7          	lui	a5,0x1c008
1c003d9a:	38878793          	addi	a5,a5,904 # 1c008388 <KerParReduct_CC_ReLU_SQ8>
1c003d9e:	08f42023          	sw	a5,128(s0)
1c003da2:	0828                	addi	a0,sp,24
1c003da4:	08a42023          	sw	a0,128(s0)
1c003da8:	5e0040ef          	jal	ra,1c008388 <KerParReduct_CC_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003dac:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParReduct_CC_ReLU_SQ8, (void *) KerArg2);
			__CALL(KerParReduct_CC_ReLU_SQ8, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) quant_model_L1_Memory+5648), 4784, 1, &DmaW_Evt1);
1c003db0:	6785                	lui	a5,0x1
1c003db2:	4098                	lw	a4,0(s1)
1c003db4:	61078693          	addi	a3,a5,1552 # 1610 <__rt_stack_size+0xe10>
1c003db8:	9736                	add	a4,a4,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003dba:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003dbe:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003dc2:	002a05b7          	lui	a1,0x2a0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003dc6:	2b078793          	addi	a5,a5,688
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003dca:	8fcd                	or	a5,a5,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003dcc:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003dd0:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003dd4:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c003dd8:	dbb2                	sw	a2,244(sp)
        copy->length = 0;
1c003dda:	10012223          	sw	zero,260(sp)
  __builtin_pulp_spr_write(reg, val);
1c003dde:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003de2:	10412783          	lw	a5,260(sp)
1c003de6:	c3b9                	beqz	a5,1c003e2c <S18_Conv2d_16x16x1x3_Relu+0x3d6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003de8:	10c12683          	lw	a3,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003dec:	02000713          	li	a4,32
1c003df0:	002047b7          	lui	a5,0x204
1c003df4:	ca91                	beqz	a3,1c003e08 <S18_Conv2d_16x16x1x3_Relu+0x3b2>
1c003df6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003dfa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003dfe:	00e7a223          	sw	a4,4(a5)
1c003e02:	10c12683          	lw	a3,268(sp)
1c003e06:	fae5                	bnez	a3,1c003df6 <S18_Conv2d_16x16x1x3_Relu+0x3a0>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003e08:	15c12083          	lw	ra,348(sp)
1c003e0c:	15812403          	lw	s0,344(sp)
1c003e10:	15412483          	lw	s1,340(sp)
1c003e14:	15012903          	lw	s2,336(sp)
1c003e18:	14c12983          	lw	s3,332(sp)
1c003e1c:	14812a03          	lw	s4,328(sp)
1c003e20:	14412a83          	lw	s5,324(sp)
1c003e24:	14012b03          	lw	s6,320(sp)
1c003e28:	6135                	addi	sp,sp,352
1c003e2a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e2c:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003e30:	40442403          	lw	s0,1028(s0)
1c003e34:	56de                	lw	a3,244(sp)
1c003e36:	40d45433          	sra	s0,s0,a3
1c003e3a:	fc143433          	p.bclr	s0,s0,30,1
1c003e3e:	c41d                	beqz	s0,1c003e6c <S18_Conv2d_16x16x1x3_Relu+0x416>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e40:	10000593          	li	a1,256
1c003e44:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003e48:	30061073          	csrw	mstatus,a2
1c003e4c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e50:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e54:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e58:	30047673          	csrrci	a2,mstatus,8
1c003e5c:	40472783          	lw	a5,1028(a4)
1c003e60:	56de                	lw	a3,244(sp)
1c003e62:	40d7d7b3          	sra	a5,a5,a3
1c003e66:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e6a:	fff9                	bnez	a5,1c003e48 <S18_Conv2d_16x16x1x3_Relu+0x3f2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003e6c:	4785                	li	a5,1
1c003e6e:	00d796b3          	sll	a3,a5,a3
1c003e72:	002047b7          	lui	a5,0x204
1c003e76:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003e7a:	30061073          	csrw	mstatus,a2
1c003e7e:	b769                	j	1c003e08 <S18_Conv2d_16x16x1x3_Relu+0x3b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e80:	30047673          	csrrci	a2,mstatus,8
1c003e84:	4047a783          	lw	a5,1028(a5)
1c003e88:	46de                	lw	a3,212(sp)
1c003e8a:	40d7d7b3          	sra	a5,a5,a3
1c003e8e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e92:	c79d                	beqz	a5,1c003ec0 <S18_Conv2d_16x16x1x3_Relu+0x46a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e94:	10000593          	li	a1,256
1c003e98:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003e9c:	30061073          	csrw	mstatus,a2
1c003ea0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ea4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ea8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003eac:	30047673          	csrrci	a2,mstatus,8
1c003eb0:	40472783          	lw	a5,1028(a4)
1c003eb4:	46de                	lw	a3,212(sp)
1c003eb6:	40d7d7b3          	sra	a5,a5,a3
1c003eba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ebe:	fff9                	bnez	a5,1c003e9c <S18_Conv2d_16x16x1x3_Relu+0x446>
1c003ec0:	4785                	li	a5,1
1c003ec2:	00d796b3          	sll	a3,a5,a3
1c003ec6:	002047b7          	lui	a5,0x204
1c003eca:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003ece:	30061073          	csrw	mstatus,a2
1c003ed2:	b5b1                	j	1c003d1e <S18_Conv2d_16x16x1x3_Relu+0x2c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ed4:	30047673          	csrrci	a2,mstatus,8
1c003ed8:	4047a783          	lw	a5,1028(a5)
1c003edc:	56da                	lw	a3,180(sp)
1c003ede:	40d7d7b3          	sra	a5,a5,a3
1c003ee2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ee6:	c79d                	beqz	a5,1c003f14 <S18_Conv2d_16x16x1x3_Relu+0x4be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ee8:	10000593          	li	a1,256
1c003eec:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003ef0:	30061073          	csrw	mstatus,a2
1c003ef4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ef8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003efc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f00:	30047673          	csrrci	a2,mstatus,8
1c003f04:	40472783          	lw	a5,1028(a4)
1c003f08:	56da                	lw	a3,180(sp)
1c003f0a:	40d7d7b3          	sra	a5,a5,a3
1c003f0e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f12:	fff9                	bnez	a5,1c003ef0 <S18_Conv2d_16x16x1x3_Relu+0x49a>
1c003f14:	4785                	li	a5,1
1c003f16:	00d796b3          	sll	a3,a5,a3
1c003f1a:	002047b7          	lui	a5,0x204
1c003f1e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003f22:	30061073          	csrw	mstatus,a2
1c003f26:	b35d                	j	1c003ccc <S18_Conv2d_16x16x1x3_Relu+0x276>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f28:	30047673          	csrrci	a2,mstatus,8
1c003f2c:	4047a783          	lw	a5,1028(a5)
1c003f30:	46da                	lw	a3,148(sp)
1c003f32:	40d7d7b3          	sra	a5,a5,a3
1c003f36:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f3a:	c79d                	beqz	a5,1c003f68 <S18_Conv2d_16x16x1x3_Relu+0x512>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f3c:	10000593          	li	a1,256
1c003f40:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003f44:	30061073          	csrw	mstatus,a2
1c003f48:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f4c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f50:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f54:	30047673          	csrrci	a2,mstatus,8
1c003f58:	40472783          	lw	a5,1028(a4)
1c003f5c:	46da                	lw	a3,148(sp)
1c003f5e:	40d7d7b3          	sra	a5,a5,a3
1c003f62:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f66:	fff9                	bnez	a5,1c003f44 <S18_Conv2d_16x16x1x3_Relu+0x4ee>
1c003f68:	4785                	li	a5,1
1c003f6a:	00d796b3          	sll	a3,a5,a3
1c003f6e:	002047b7          	lui	a5,0x204
1c003f72:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003f76:	30061073          	csrw	mstatus,a2
1c003f7a:	b309                	j	1c003c7c <S18_Conv2d_16x16x1x3_Relu+0x226>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f7c:	30047673          	csrrci	a2,mstatus,8
1c003f80:	40472703          	lw	a4,1028(a4)
1c003f84:	56d6                	lw	a3,116(sp)
1c003f86:	40d75733          	sra	a4,a4,a3
1c003f8a:	fc173733          	p.bclr	a4,a4,30,1
1c003f8e:	c71d                	beqz	a4,1c003fbc <S18_Conv2d_16x16x1x3_Relu+0x566>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f90:	10000893          	li	a7,256
1c003f94:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003f98:	30061073          	csrw	mstatus,a2
1c003f9c:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003fa0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003fa4:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fa8:	30047673          	csrrci	a2,mstatus,8
1c003fac:	40472783          	lw	a5,1028(a4)
1c003fb0:	56d6                	lw	a3,116(sp)
1c003fb2:	40d7d7b3          	sra	a5,a5,a3
1c003fb6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fba:	fff9                	bnez	a5,1c003f98 <S18_Conv2d_16x16x1x3_Relu+0x542>
1c003fbc:	4785                	li	a5,1
1c003fbe:	00d796b3          	sll	a3,a5,a3
1c003fc2:	002047b7          	lui	a5,0x204
1c003fc6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003fca:	30061073          	csrw	mstatus,a2
1c003fce:	b9a9                	j	1c003c28 <S18_Conv2d_16x16x1x3_Relu+0x1d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fd0:	300478f3          	csrrci	a7,mstatus,8
1c003fd4:	4046a683          	lw	a3,1028(a3) # b0404 <__L2+0x30404>
1c003fd8:	4656                	lw	a2,84(sp)
1c003fda:	40c6d6b3          	sra	a3,a3,a2
1c003fde:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003fe2:	c69d                	beqz	a3,1c004010 <S18_Conv2d_16x16x1x3_Relu+0x5ba>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003fe4:	10000313          	li	t1,256
1c003fe8:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c003fec:	30089073          	csrw	mstatus,a7
1c003ff0:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ff4:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ff8:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ffc:	300478f3          	csrrci	a7,mstatus,8
1c004000:	4046a703          	lw	a4,1028(a3)
1c004004:	4656                	lw	a2,84(sp)
1c004006:	40c75733          	sra	a4,a4,a2
1c00400a:	fc173733          	p.bclr	a4,a4,30,1
1c00400e:	ff79                	bnez	a4,1c003fec <S18_Conv2d_16x16x1x3_Relu+0x596>
1c004010:	4705                	li	a4,1
1c004012:	00c71633          	sll	a2,a4,a2
1c004016:	00204737          	lui	a4,0x204
1c00401a:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00401e:	30089073          	csrw	mstatus,a7
1c004022:	be45                	j	1c003bd2 <S18_Conv2d_16x16x1x3_Relu+0x17c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004024:	30047373          	csrrci	t1,mstatus,8
1c004028:	4046a683          	lw	a3,1028(a3)
1c00402c:	58d2                	lw	a7,52(sp)
1c00402e:	4116d6b3          	sra	a3,a3,a7
1c004032:	fc16b6b3          	p.bclr	a3,a3,30,1
1c004036:	c69d                	beqz	a3,1c004064 <S18_Conv2d_16x16x1x3_Relu+0x60e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004038:	10000e13          	li	t3,256
1c00403c:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c004040:	30031073          	csrw	mstatus,t1
1c004044:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004048:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00404c:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004050:	30047373          	csrrci	t1,mstatus,8
1c004054:	4046a603          	lw	a2,1028(a3)
1c004058:	58d2                	lw	a7,52(sp)
1c00405a:	41165633          	sra	a2,a2,a7
1c00405e:	fc163633          	p.bclr	a2,a2,30,1
1c004062:	fe79                	bnez	a2,1c004040 <S18_Conv2d_16x16x1x3_Relu+0x5ea>
1c004064:	4685                	li	a3,1
1c004066:	011698b3          	sll	a7,a3,a7
1c00406a:	002046b7          	lui	a3,0x204
1c00406e:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004072:	30031073          	csrw	mstatus,t1
1c004076:	b611                	j	1c003b7a <S18_Conv2d_16x16x1x3_Relu+0x124>

1c004078 <quant_modelCNN_Construct>:
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
int quant_modelCNN_Construct()

{
1c004078:	7131                	addi	sp,sp,-192
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c00407a:	0068                	addi	a0,sp,12
{
1c00407c:	df06                	sw	ra,188(sp)
1c00407e:	dd22                	sw	s0,184(sp)
1c004080:	db26                	sw	s1,180(sp)
1c004082:	d94a                	sw	s2,176(sp)
1c004084:	d74e                	sw	s3,172(sp)
1c004086:	d552                	sw	s4,168(sp)
1c004088:	d356                	sw	s5,164(sp)

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00408a:	1c01c937          	lui	s2,0x1c01c
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c00408e:	073050ef          	jal	ra,1c009900 <pi_fs_conf_init>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c004092:	1008                	addi	a0,sp,32
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c004094:	34090493          	addi	s1,s2,832 # 1c01c340 <_edata>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c004098:	373060ef          	jal	ra,1c00ac0a <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00409c:	00c48413          	addi	s0,s1,12
1c0040a0:	8522                	mv	a0,s0
1c0040a2:	100c                	addi	a1,sp,32
1c0040a4:	349070ef          	jal	ra,1c00bbec <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c0040a8:	8522                	mv	a0,s0
1c0040aa:	017050ef          	jal	ra,1c0098c0 <pi_flash_open>
1c0040ae:	e115                	bnez	a0,1c0040d2 <quant_modelCNN_Construct+0x5a>
1c0040b0:	8a2a                	mv	s4,a0

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c0040b2:	006c                	addi	a1,sp,12
1c0040b4:	34090513          	addi	a0,s2,832
  conf->flash = &file->hyperflash;
1c0040b8:	c822                	sw	s0,16(sp)
    conf->type = PI_FS_READ_ONLY;
1c0040ba:	c602                	sw	zero,12(sp)
  pi_open_from_conf(&file->fs, conf);
1c0040bc:	331070ef          	jal	ra,1c00bbec <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c0040c0:	34090513          	addi	a0,s2,832
1c0040c4:	04f050ef          	jal	ra,1c009912 <pi_fs_mount>
1c0040c8:	c105                	beqz	a0,1c0040e8 <quant_modelCNN_Construct+0x70>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c0040ca:	44dc                	lw	a5,12(s1)
1c0040cc:	8522                	mv	a0,s0
1c0040ce:	43dc                	lw	a5,4(a5)
1c0040d0:	9782                	jalr	a5
	AT_HYPERFLASH_FS_OPEN(&HyperFlash, &HyperFlashConf, "quant_model_L3_Flash_Const.dat", &Error);
	if (Error) return 1;
1c0040d2:	4a05                	li	s4,1
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving S60_Infos, size 9 from HyperFlash at 27672 to (size 9) L2 at 27672..27680 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27672), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27672), 9, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c0040d4:	50fa                	lw	ra,188(sp)
1c0040d6:	546a                	lw	s0,184(sp)
1c0040d8:	8552                	mv	a0,s4
1c0040da:	54da                	lw	s1,180(sp)
1c0040dc:	594a                	lw	s2,176(sp)
1c0040de:	59ba                	lw	s3,172(sp)
1c0040e0:	5a2a                	lw	s4,168(sp)
1c0040e2:	5a9a                	lw	s5,164(sp)
1c0040e4:	6129                	addi	sp,sp,192
1c0040e6:	8082                	ret
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c0040e8:	1c0105b7          	lui	a1,0x1c010
1c0040ec:	4601                	li	a2,0
1c0040ee:	a0458593          	addi	a1,a1,-1532 # 1c00fa04 <__clz_tab+0x278>
1c0040f2:	34090513          	addi	a0,s2,832
1c0040f6:	051050ef          	jal	ra,1c009946 <pi_fs_open>
1c0040fa:	cc88                	sw	a0,24(s1)
  if (file->file == NULL)
1c0040fc:	e119                	bnez	a0,1c004102 <quant_modelCNN_Construct+0x8a>
1c0040fe:	4340306f          	j	1c007532 <quant_modelCNN_Construct+0x34ba>
	quant_model_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 56385);
1c004102:	6539                	lui	a0,0xe
1c004104:	c4150513          	addi	a0,a0,-959 # dc41 <__rt_stack_size+0xd441>
1c004108:	1c010937          	lui	s2,0x1c010
1c00410c:	404080ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c004110:	5f090913          	addi	s2,s2,1520 # 1c0105f0 <quant_model_L2_Memory>
1c004114:	00a92023          	sw	a0,0(s2)
	if (quant_model_L2_Memory == 0) return 3;
1c004118:	e119                	bnez	a0,1c00411e <quant_modelCNN_Construct+0xa6>
1c00411a:	40c0306f          	j	1c007526 <quant_modelCNN_Construct+0x34ae>
	quant_model_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 30968);
1c00411e:	65a1                	lui	a1,0x8
1c004120:	8f858593          	addi	a1,a1,-1800 # 78f8 <__rt_stack_size+0x70f8>
1c004124:	4501                	li	a0,0
1c004126:	3d8080ef          	jal	ra,1c00c4fe <pi_cl_l1_malloc>
1c00412a:	100007b7          	lui	a5,0x10000
1c00412e:	00a7ae23          	sw	a0,28(a5) # 1000001c <quant_model_L1_Memory>
	if (quant_model_L1_Memory == 0) return 4;
1c004132:	e119                	bnez	a0,1c004138 <quant_modelCNN_Construct+0xc0>
1c004134:	3f80306f          	j	1c00752c <quant_modelCNN_Construct+0x34b4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26976), 9, 0, &UchanHF1);
1c004138:	1c01c9b7          	lui	s3,0x1c01c
1c00413c:	60c9a503          	lw	a0,1548(s3) # 1c01c60c <quant_model_L3_Flash>
1c004140:	00092603          	lw	a2,0(s2)
1c004144:	659d                	lui	a1,0x7
1c004146:	96058593          	addi	a1,a1,-1696 # 6960 <__rt_stack_size+0x6160>
1c00414a:	962e                	add	a2,a2,a1
1c00414c:	95aa                	add	a1,a1,a0
1c00414e:	4c88                	lw	a0,24(s1)

extern void __pi_yield();

static inline struct pi_task *pi_task_block(struct pi_task *task)
{
  task->id = PI_TASK_NONE_ID;
1c004150:	4805                	li	a6,1
1c004152:	101c                	addi	a5,sp,32
1c004154:	4705                	li	a4,1
1c004156:	46a5                	li	a3,9
1c004158:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00415a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00415c:	c4c2                	sw	a6,72(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c00415e:	02010a23          	sb	zero,52(sp)
1c004162:	059050ef          	jal	ra,1c0099ba <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c004166:	03410783          	lb	a5,52(sp)
1c00416a:	ef89                	bnez	a5,1c004184 <quant_modelCNN_Construct+0x10c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00416c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004170:	4585                	li	a1,1
1c004172:	01c00513          	li	a0,28
1c004176:	0f6080ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00417a:	300a9073          	csrw	mstatus,s5
1c00417e:	03410783          	lb	a5,52(sp)
1c004182:	d7ed                	beqz	a5,1c00416c <quant_modelCNN_Construct+0xf4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 0), 960, 0, &UchanHF1);
1c004184:	00092603          	lw	a2,0(s2)
1c004188:	60c9a583          	lw	a1,1548(s3)
1c00418c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00418e:	4805                	li	a6,1
1c004190:	101c                	addi	a5,sp,32
1c004192:	4705                	li	a4,1
1c004194:	3c000693          	li	a3,960
1c004198:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00419a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00419c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00419e:	02010a23          	sb	zero,52(sp)
1c0041a2:	019050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0041a6:	03410783          	lb	a5,52(sp)
1c0041aa:	ef89                	bnez	a5,1c0041c4 <quant_modelCNN_Construct+0x14c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041ac:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0041b0:	4585                	li	a1,1
1c0041b2:	01c00513          	li	a0,28
1c0041b6:	0b6080ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0041ba:	300a9073          	csrw	mstatus,s5
1c0041be:	03410783          	lb	a5,52(sp)
1c0041c2:	d7ed                	beqz	a5,1c0041ac <quant_modelCNN_Construct+0x134>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24000), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24000), 64, 0, &UchanHF1);
1c0041c4:	60c9a503          	lw	a0,1548(s3)
1c0041c8:	00092603          	lw	a2,0(s2)
1c0041cc:	6599                	lui	a1,0x6
1c0041ce:	dc058593          	addi	a1,a1,-576 # 5dc0 <__rt_stack_size+0x55c0>
1c0041d2:	962e                	add	a2,a2,a1
1c0041d4:	95aa                	add	a1,a1,a0
1c0041d6:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0041d8:	4805                	li	a6,1
1c0041da:	101c                	addi	a5,sp,32
1c0041dc:	4705                	li	a4,1
1c0041de:	04000693          	li	a3,64
1c0041e2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0041e4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0041e6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0041e8:	02010a23          	sb	zero,52(sp)
1c0041ec:	7ce050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0041f0:	03410783          	lb	a5,52(sp)
1c0041f4:	ef89                	bnez	a5,1c00420e <quant_modelCNN_Construct+0x196>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041f6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0041fa:	4585                	li	a1,1
1c0041fc:	01c00513          	li	a0,28
1c004200:	06c080ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004204:	300a9073          	csrw	mstatus,s5
1c004208:	03410783          	lb	a5,52(sp)
1c00420c:	d7ed                	beqz	a5,1c0041f6 <quant_modelCNN_Construct+0x17e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25984), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25984), 16, 0, &UchanHF1);
1c00420e:	60c9a503          	lw	a0,1548(s3)
1c004212:	00092603          	lw	a2,0(s2)
1c004216:	6599                	lui	a1,0x6
1c004218:	58058593          	addi	a1,a1,1408 # 6580 <__rt_stack_size+0x5d80>
1c00421c:	962e                	add	a2,a2,a1
1c00421e:	95aa                	add	a1,a1,a0
1c004220:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004222:	4805                	li	a6,1
1c004224:	101c                	addi	a5,sp,32
1c004226:	4705                	li	a4,1
1c004228:	46c1                	li	a3,16
1c00422a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00422c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00422e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004230:	02010a23          	sb	zero,52(sp)
1c004234:	786050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004238:	03410783          	lb	a5,52(sp)
1c00423c:	ef89                	bnez	a5,1c004256 <quant_modelCNN_Construct+0x1de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00423e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004242:	4585                	li	a1,1
1c004244:	01c00513          	li	a0,28
1c004248:	024080ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00424c:	300a9073          	csrw	mstatus,s5
1c004250:	03410783          	lb	a5,52(sp)
1c004254:	d7ed                	beqz	a5,1c00423e <quant_modelCNN_Construct+0x1c6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26000), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26000), 16, 0, &UchanHF1);
1c004256:	60c9a503          	lw	a0,1548(s3)
1c00425a:	00092603          	lw	a2,0(s2)
1c00425e:	6599                	lui	a1,0x6
1c004260:	59058593          	addi	a1,a1,1424 # 6590 <__rt_stack_size+0x5d90>
1c004264:	962e                	add	a2,a2,a1
1c004266:	95aa                	add	a1,a1,a0
1c004268:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00426a:	4805                	li	a6,1
1c00426c:	101c                	addi	a5,sp,32
1c00426e:	4705                	li	a4,1
1c004270:	46c1                	li	a3,16
1c004272:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004274:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004276:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004278:	02010a23          	sb	zero,52(sp)
1c00427c:	73e050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004280:	03410783          	lb	a5,52(sp)
1c004284:	ef89                	bnez	a5,1c00429e <quant_modelCNN_Construct+0x226>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004286:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00428a:	4585                	li	a1,1
1c00428c:	01c00513          	li	a0,28
1c004290:	7dd070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004294:	300a9073          	csrw	mstatus,s5
1c004298:	03410783          	lb	a5,52(sp)
1c00429c:	d7ed                	beqz	a5,1c004286 <quant_modelCNN_Construct+0x20e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26988), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26988), 9, 0, &UchanHF1);
1c00429e:	60c9a503          	lw	a0,1548(s3)
1c0042a2:	00092603          	lw	a2,0(s2)
1c0042a6:	659d                	lui	a1,0x7
1c0042a8:	96c58593          	addi	a1,a1,-1684 # 696c <__rt_stack_size+0x616c>
1c0042ac:	962e                	add	a2,a2,a1
1c0042ae:	95aa                	add	a1,a1,a0
1c0042b0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0042b2:	4805                	li	a6,1
1c0042b4:	101c                	addi	a5,sp,32
1c0042b6:	4705                	li	a4,1
1c0042b8:	46a5                	li	a3,9
1c0042ba:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0042bc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0042be:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0042c0:	02010a23          	sb	zero,52(sp)
1c0042c4:	6f6050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0042c8:	03410783          	lb	a5,52(sp)
1c0042cc:	ef89                	bnez	a5,1c0042e6 <quant_modelCNN_Construct+0x26e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0042ce:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0042d2:	4585                	li	a1,1
1c0042d4:	01c00513          	li	a0,28
1c0042d8:	795070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0042dc:	300a9073          	csrw	mstatus,s5
1c0042e0:	03410783          	lb	a5,52(sp)
1c0042e4:	d7ed                	beqz	a5,1c0042ce <quant_modelCNN_Construct+0x256>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 960), 768, 0, &UchanHF1);
1c0042e6:	60c9a583          	lw	a1,1548(s3)
1c0042ea:	00092603          	lw	a2,0(s2)
1c0042ee:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0042f0:	4805                	li	a6,1
1c0042f2:	101c                	addi	a5,sp,32
1c0042f4:	4705                	li	a4,1
1c0042f6:	30000693          	li	a3,768
1c0042fa:	3c060613          	addi	a2,a2,960 # b03c0 <__L2+0x303c0>
1c0042fe:	3c058593          	addi	a1,a1,960
1c004302:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004304:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004306:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004308:	02010a23          	sb	zero,52(sp)
1c00430c:	6ae050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004310:	03410783          	lb	a5,52(sp)
1c004314:	ef89                	bnez	a5,1c00432e <quant_modelCNN_Construct+0x2b6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004316:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00431a:	4585                	li	a1,1
1c00431c:	01c00513          	li	a0,28
1c004320:	74d070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004324:	300a9073          	csrw	mstatus,s5
1c004328:	03410783          	lb	a5,52(sp)
1c00432c:	d7ed                	beqz	a5,1c004316 <quant_modelCNN_Construct+0x29e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24064), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24064), 64, 0, &UchanHF1);
1c00432e:	60c9a503          	lw	a0,1548(s3)
1c004332:	00092603          	lw	a2,0(s2)
1c004336:	6599                	lui	a1,0x6
1c004338:	e0058593          	addi	a1,a1,-512 # 5e00 <__rt_stack_size+0x5600>
1c00433c:	962e                	add	a2,a2,a1
1c00433e:	95aa                	add	a1,a1,a0
1c004340:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004342:	4805                	li	a6,1
1c004344:	101c                	addi	a5,sp,32
1c004346:	4705                	li	a4,1
1c004348:	04000693          	li	a3,64
1c00434c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00434e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004350:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004352:	02010a23          	sb	zero,52(sp)
1c004356:	664050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00435a:	03410783          	lb	a5,52(sp)
1c00435e:	ef89                	bnez	a5,1c004378 <quant_modelCNN_Construct+0x300>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004360:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004364:	4585                	li	a1,1
1c004366:	01c00513          	li	a0,28
1c00436a:	703070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00436e:	300a9073          	csrw	mstatus,s5
1c004372:	03410783          	lb	a5,52(sp)
1c004376:	d7ed                	beqz	a5,1c004360 <quant_modelCNN_Construct+0x2e8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26016), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26016), 16, 0, &UchanHF1);
1c004378:	60c9a503          	lw	a0,1548(s3)
1c00437c:	00092603          	lw	a2,0(s2)
1c004380:	6599                	lui	a1,0x6
1c004382:	5a058593          	addi	a1,a1,1440 # 65a0 <__rt_stack_size+0x5da0>
1c004386:	962e                	add	a2,a2,a1
1c004388:	95aa                	add	a1,a1,a0
1c00438a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00438c:	4805                	li	a6,1
1c00438e:	101c                	addi	a5,sp,32
1c004390:	4705                	li	a4,1
1c004392:	46c1                	li	a3,16
1c004394:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004396:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004398:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00439a:	02010a23          	sb	zero,52(sp)
1c00439e:	61c050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0043a2:	03410783          	lb	a5,52(sp)
1c0043a6:	ef89                	bnez	a5,1c0043c0 <quant_modelCNN_Construct+0x348>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043a8:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0043ac:	4585                	li	a1,1
1c0043ae:	01c00513          	li	a0,28
1c0043b2:	6bb070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0043b6:	300a9073          	csrw	mstatus,s5
1c0043ba:	03410783          	lb	a5,52(sp)
1c0043be:	d7ed                	beqz	a5,1c0043a8 <quant_modelCNN_Construct+0x330>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26032), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26032), 16, 0, &UchanHF1);
1c0043c0:	60c9a503          	lw	a0,1548(s3)
1c0043c4:	00092603          	lw	a2,0(s2)
1c0043c8:	6599                	lui	a1,0x6
1c0043ca:	5b058593          	addi	a1,a1,1456 # 65b0 <__rt_stack_size+0x5db0>
1c0043ce:	962e                	add	a2,a2,a1
1c0043d0:	95aa                	add	a1,a1,a0
1c0043d2:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0043d4:	4805                	li	a6,1
1c0043d6:	101c                	addi	a5,sp,32
1c0043d8:	4705                	li	a4,1
1c0043da:	46c1                	li	a3,16
1c0043dc:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0043de:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0043e0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0043e2:	02010a23          	sb	zero,52(sp)
1c0043e6:	5d4050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0043ea:	03410783          	lb	a5,52(sp)
1c0043ee:	ef89                	bnez	a5,1c004408 <quant_modelCNN_Construct+0x390>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043f0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0043f4:	4585                	li	a1,1
1c0043f6:	01c00513          	li	a0,28
1c0043fa:	673070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0043fe:	300a9073          	csrw	mstatus,s5
1c004402:	03410783          	lb	a5,52(sp)
1c004406:	d7ed                	beqz	a5,1c0043f0 <quant_modelCNN_Construct+0x378>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27000), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27000), 9, 0, &UchanHF1);
1c004408:	60c9a503          	lw	a0,1548(s3)
1c00440c:	00092603          	lw	a2,0(s2)
1c004410:	659d                	lui	a1,0x7
1c004412:	97858593          	addi	a1,a1,-1672 # 6978 <__rt_stack_size+0x6178>
1c004416:	962e                	add	a2,a2,a1
1c004418:	95aa                	add	a1,a1,a0
1c00441a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00441c:	4805                	li	a6,1
1c00441e:	101c                	addi	a5,sp,32
1c004420:	4705                	li	a4,1
1c004422:	46a5                	li	a3,9
1c004424:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004426:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004428:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00442a:	02010a23          	sb	zero,52(sp)
1c00442e:	58c050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004432:	03410783          	lb	a5,52(sp)
1c004436:	ef89                	bnez	a5,1c004450 <quant_modelCNN_Construct+0x3d8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004438:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00443c:	4585                	li	a1,1
1c00443e:	01c00513          	li	a0,28
1c004442:	62b070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004446:	300a9073          	csrw	mstatus,s5
1c00444a:	03410783          	lb	a5,52(sp)
1c00444e:	d7ed                	beqz	a5,1c004438 <quant_modelCNN_Construct+0x3c0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 1728), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 1728), 768, 0, &UchanHF1);
1c004450:	60c9a583          	lw	a1,1548(s3)
1c004454:	00092603          	lw	a2,0(s2)
1c004458:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00445a:	4805                	li	a6,1
1c00445c:	101c                	addi	a5,sp,32
1c00445e:	4705                	li	a4,1
1c004460:	30000693          	li	a3,768
1c004464:	6c060613          	addi	a2,a2,1728
1c004468:	6c058593          	addi	a1,a1,1728
1c00446c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00446e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004470:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004472:	02010a23          	sb	zero,52(sp)
1c004476:	544050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00447a:	03410783          	lb	a5,52(sp)
1c00447e:	ef89                	bnez	a5,1c004498 <quant_modelCNN_Construct+0x420>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004480:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004484:	4585                	li	a1,1
1c004486:	01c00513          	li	a0,28
1c00448a:	5e3070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00448e:	300a9073          	csrw	mstatus,s5
1c004492:	03410783          	lb	a5,52(sp)
1c004496:	d7ed                	beqz	a5,1c004480 <quant_modelCNN_Construct+0x408>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24128), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24128), 64, 0, &UchanHF1);
1c004498:	60c9a503          	lw	a0,1548(s3)
1c00449c:	00092603          	lw	a2,0(s2)
1c0044a0:	6599                	lui	a1,0x6
1c0044a2:	e4058593          	addi	a1,a1,-448 # 5e40 <__rt_stack_size+0x5640>
1c0044a6:	962e                	add	a2,a2,a1
1c0044a8:	95aa                	add	a1,a1,a0
1c0044aa:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0044ac:	4805                	li	a6,1
1c0044ae:	101c                	addi	a5,sp,32
1c0044b0:	4705                	li	a4,1
1c0044b2:	04000693          	li	a3,64
1c0044b6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0044b8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0044ba:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0044bc:	02010a23          	sb	zero,52(sp)
1c0044c0:	4fa050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0044c4:	03410783          	lb	a5,52(sp)
1c0044c8:	ef89                	bnez	a5,1c0044e2 <quant_modelCNN_Construct+0x46a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0044ca:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0044ce:	4585                	li	a1,1
1c0044d0:	01c00513          	li	a0,28
1c0044d4:	599070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0044d8:	300a9073          	csrw	mstatus,s5
1c0044dc:	03410783          	lb	a5,52(sp)
1c0044e0:	d7ed                	beqz	a5,1c0044ca <quant_modelCNN_Construct+0x452>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26048), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26048), 16, 0, &UchanHF1);
1c0044e2:	60c9a503          	lw	a0,1548(s3)
1c0044e6:	00092603          	lw	a2,0(s2)
1c0044ea:	6599                	lui	a1,0x6
1c0044ec:	5c058593          	addi	a1,a1,1472 # 65c0 <__rt_stack_size+0x5dc0>
1c0044f0:	962e                	add	a2,a2,a1
1c0044f2:	95aa                	add	a1,a1,a0
1c0044f4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0044f6:	4805                	li	a6,1
1c0044f8:	101c                	addi	a5,sp,32
1c0044fa:	4705                	li	a4,1
1c0044fc:	46c1                	li	a3,16
1c0044fe:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004500:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004502:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004504:	02010a23          	sb	zero,52(sp)
1c004508:	4b2050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00450c:	03410783          	lb	a5,52(sp)
1c004510:	ef89                	bnez	a5,1c00452a <quant_modelCNN_Construct+0x4b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004512:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004516:	4585                	li	a1,1
1c004518:	01c00513          	li	a0,28
1c00451c:	551070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004520:	300a9073          	csrw	mstatus,s5
1c004524:	03410783          	lb	a5,52(sp)
1c004528:	d7ed                	beqz	a5,1c004512 <quant_modelCNN_Construct+0x49a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26064), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26064), 16, 0, &UchanHF1);
1c00452a:	60c9a503          	lw	a0,1548(s3)
1c00452e:	00092603          	lw	a2,0(s2)
1c004532:	6599                	lui	a1,0x6
1c004534:	5d058593          	addi	a1,a1,1488 # 65d0 <__rt_stack_size+0x5dd0>
1c004538:	962e                	add	a2,a2,a1
1c00453a:	95aa                	add	a1,a1,a0
1c00453c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00453e:	4805                	li	a6,1
1c004540:	101c                	addi	a5,sp,32
1c004542:	4705                	li	a4,1
1c004544:	46c1                	li	a3,16
1c004546:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004548:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00454a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00454c:	02010a23          	sb	zero,52(sp)
1c004550:	46a050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004554:	03410783          	lb	a5,52(sp)
1c004558:	ef89                	bnez	a5,1c004572 <quant_modelCNN_Construct+0x4fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00455a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00455e:	4585                	li	a1,1
1c004560:	01c00513          	li	a0,28
1c004564:	509070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004568:	300a9073          	csrw	mstatus,s5
1c00456c:	03410783          	lb	a5,52(sp)
1c004570:	d7ed                	beqz	a5,1c00455a <quant_modelCNN_Construct+0x4e2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27012), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27012), 9, 0, &UchanHF1);
1c004572:	60c9a503          	lw	a0,1548(s3)
1c004576:	00092603          	lw	a2,0(s2)
1c00457a:	659d                	lui	a1,0x7
1c00457c:	98458593          	addi	a1,a1,-1660 # 6984 <__rt_stack_size+0x6184>
1c004580:	962e                	add	a2,a2,a1
1c004582:	95aa                	add	a1,a1,a0
1c004584:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004586:	4805                	li	a6,1
1c004588:	101c                	addi	a5,sp,32
1c00458a:	4705                	li	a4,1
1c00458c:	46a5                	li	a3,9
1c00458e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004590:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004592:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004594:	02010a23          	sb	zero,52(sp)
1c004598:	422050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00459c:	03410783          	lb	a5,52(sp)
1c0045a0:	ef89                	bnez	a5,1c0045ba <quant_modelCNN_Construct+0x542>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0045a2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0045a6:	4585                	li	a1,1
1c0045a8:	01c00513          	li	a0,28
1c0045ac:	4c1070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0045b0:	300a9073          	csrw	mstatus,s5
1c0045b4:	03410783          	lb	a5,52(sp)
1c0045b8:	d7ed                	beqz	a5,1c0045a2 <quant_modelCNN_Construct+0x52a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27024), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27024), 9, 0, &UchanHF1);
1c0045ba:	60c9a503          	lw	a0,1548(s3)
1c0045be:	00092603          	lw	a2,0(s2)
1c0045c2:	659d                	lui	a1,0x7
1c0045c4:	99058593          	addi	a1,a1,-1648 # 6990 <__rt_stack_size+0x6190>
1c0045c8:	962e                	add	a2,a2,a1
1c0045ca:	95aa                	add	a1,a1,a0
1c0045cc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0045ce:	4805                	li	a6,1
1c0045d0:	101c                	addi	a5,sp,32
1c0045d2:	4705                	li	a4,1
1c0045d4:	46a5                	li	a3,9
1c0045d6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0045d8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0045da:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0045dc:	02010a23          	sb	zero,52(sp)
1c0045e0:	3da050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0045e4:	03410783          	lb	a5,52(sp)
1c0045e8:	ef89                	bnez	a5,1c004602 <quant_modelCNN_Construct+0x58a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0045ea:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0045ee:	4585                	li	a1,1
1c0045f0:	01c00513          	li	a0,28
1c0045f4:	479070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0045f8:	300a9073          	csrw	mstatus,s5
1c0045fc:	03410783          	lb	a5,52(sp)
1c004600:	d7ed                	beqz	a5,1c0045ea <quant_modelCNN_Construct+0x572>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 2496), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 2496), 768, 0, &UchanHF1);
1c004602:	60c9a503          	lw	a0,1548(s3)
1c004606:	00092603          	lw	a2,0(s2)
1c00460a:	6585                	lui	a1,0x1
1c00460c:	9c058593          	addi	a1,a1,-1600 # 9c0 <__rt_stack_size+0x1c0>
1c004610:	962e                	add	a2,a2,a1
1c004612:	95aa                	add	a1,a1,a0
1c004614:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004616:	4805                	li	a6,1
1c004618:	101c                	addi	a5,sp,32
1c00461a:	4705                	li	a4,1
1c00461c:	30000693          	li	a3,768
1c004620:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004622:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004624:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004626:	02010a23          	sb	zero,52(sp)
1c00462a:	390050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00462e:	03410783          	lb	a5,52(sp)
1c004632:	ef89                	bnez	a5,1c00464c <quant_modelCNN_Construct+0x5d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004634:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004638:	4585                	li	a1,1
1c00463a:	01c00513          	li	a0,28
1c00463e:	42f070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004642:	300a9073          	csrw	mstatus,s5
1c004646:	03410783          	lb	a5,52(sp)
1c00464a:	d7ed                	beqz	a5,1c004634 <quant_modelCNN_Construct+0x5bc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24192), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24192), 64, 0, &UchanHF1);
1c00464c:	60c9a503          	lw	a0,1548(s3)
1c004650:	00092603          	lw	a2,0(s2)
1c004654:	6599                	lui	a1,0x6
1c004656:	e8058593          	addi	a1,a1,-384 # 5e80 <__rt_stack_size+0x5680>
1c00465a:	962e                	add	a2,a2,a1
1c00465c:	95aa                	add	a1,a1,a0
1c00465e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004660:	4805                	li	a6,1
1c004662:	101c                	addi	a5,sp,32
1c004664:	4705                	li	a4,1
1c004666:	04000693          	li	a3,64
1c00466a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00466c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00466e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004670:	02010a23          	sb	zero,52(sp)
1c004674:	346050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004678:	03410783          	lb	a5,52(sp)
1c00467c:	ef89                	bnez	a5,1c004696 <quant_modelCNN_Construct+0x61e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00467e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004682:	4585                	li	a1,1
1c004684:	01c00513          	li	a0,28
1c004688:	3e5070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00468c:	300a9073          	csrw	mstatus,s5
1c004690:	03410783          	lb	a5,52(sp)
1c004694:	d7ed                	beqz	a5,1c00467e <quant_modelCNN_Construct+0x606>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26080), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26080), 16, 0, &UchanHF1);
1c004696:	60c9a503          	lw	a0,1548(s3)
1c00469a:	00092603          	lw	a2,0(s2)
1c00469e:	6599                	lui	a1,0x6
1c0046a0:	5e058593          	addi	a1,a1,1504 # 65e0 <__rt_stack_size+0x5de0>
1c0046a4:	962e                	add	a2,a2,a1
1c0046a6:	95aa                	add	a1,a1,a0
1c0046a8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0046aa:	4805                	li	a6,1
1c0046ac:	101c                	addi	a5,sp,32
1c0046ae:	4705                	li	a4,1
1c0046b0:	46c1                	li	a3,16
1c0046b2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0046b4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0046b6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0046b8:	02010a23          	sb	zero,52(sp)
1c0046bc:	2fe050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0046c0:	03410783          	lb	a5,52(sp)
1c0046c4:	ef89                	bnez	a5,1c0046de <quant_modelCNN_Construct+0x666>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0046c6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0046ca:	4585                	li	a1,1
1c0046cc:	01c00513          	li	a0,28
1c0046d0:	39d070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0046d4:	300a9073          	csrw	mstatus,s5
1c0046d8:	03410783          	lb	a5,52(sp)
1c0046dc:	d7ed                	beqz	a5,1c0046c6 <quant_modelCNN_Construct+0x64e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26096), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26096), 16, 0, &UchanHF1);
1c0046de:	60c9a503          	lw	a0,1548(s3)
1c0046e2:	00092603          	lw	a2,0(s2)
1c0046e6:	6599                	lui	a1,0x6
1c0046e8:	5f058593          	addi	a1,a1,1520 # 65f0 <__rt_stack_size+0x5df0>
1c0046ec:	962e                	add	a2,a2,a1
1c0046ee:	95aa                	add	a1,a1,a0
1c0046f0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0046f2:	4805                	li	a6,1
1c0046f4:	101c                	addi	a5,sp,32
1c0046f6:	4705                	li	a4,1
1c0046f8:	46c1                	li	a3,16
1c0046fa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0046fc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0046fe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004700:	02010a23          	sb	zero,52(sp)
1c004704:	2b6050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004708:	03410783          	lb	a5,52(sp)
1c00470c:	ef89                	bnez	a5,1c004726 <quant_modelCNN_Construct+0x6ae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00470e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004712:	4585                	li	a1,1
1c004714:	01c00513          	li	a0,28
1c004718:	355070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00471c:	300a9073          	csrw	mstatus,s5
1c004720:	03410783          	lb	a5,52(sp)
1c004724:	d7ed                	beqz	a5,1c00470e <quant_modelCNN_Construct+0x696>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27036), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27036), 9, 0, &UchanHF1);
1c004726:	60c9a503          	lw	a0,1548(s3)
1c00472a:	00092603          	lw	a2,0(s2)
1c00472e:	659d                	lui	a1,0x7
1c004730:	99c58593          	addi	a1,a1,-1636 # 699c <__rt_stack_size+0x619c>
1c004734:	962e                	add	a2,a2,a1
1c004736:	95aa                	add	a1,a1,a0
1c004738:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00473a:	4805                	li	a6,1
1c00473c:	101c                	addi	a5,sp,32
1c00473e:	4705                	li	a4,1
1c004740:	46a5                	li	a3,9
1c004742:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004744:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004746:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004748:	02010a23          	sb	zero,52(sp)
1c00474c:	26e050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004750:	03410783          	lb	a5,52(sp)
1c004754:	ef89                	bnez	a5,1c00476e <quant_modelCNN_Construct+0x6f6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004756:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00475a:	4585                	li	a1,1
1c00475c:	01c00513          	li	a0,28
1c004760:	30d070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004764:	300a9073          	csrw	mstatus,s5
1c004768:	03410783          	lb	a5,52(sp)
1c00476c:	d7ed                	beqz	a5,1c004756 <quant_modelCNN_Construct+0x6de>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 3264), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 3264), 768, 0, &UchanHF1);
1c00476e:	60c9a503          	lw	a0,1548(s3)
1c004772:	00092603          	lw	a2,0(s2)
1c004776:	6585                	lui	a1,0x1
1c004778:	cc058593          	addi	a1,a1,-832 # cc0 <__rt_stack_size+0x4c0>
1c00477c:	962e                	add	a2,a2,a1
1c00477e:	95aa                	add	a1,a1,a0
1c004780:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004782:	4805                	li	a6,1
1c004784:	101c                	addi	a5,sp,32
1c004786:	4705                	li	a4,1
1c004788:	30000693          	li	a3,768
1c00478c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00478e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004790:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004792:	02010a23          	sb	zero,52(sp)
1c004796:	224050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00479a:	03410783          	lb	a5,52(sp)
1c00479e:	ef89                	bnez	a5,1c0047b8 <quant_modelCNN_Construct+0x740>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047a0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0047a4:	4585                	li	a1,1
1c0047a6:	01c00513          	li	a0,28
1c0047aa:	2c3070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0047ae:	300a9073          	csrw	mstatus,s5
1c0047b2:	03410783          	lb	a5,52(sp)
1c0047b6:	d7ed                	beqz	a5,1c0047a0 <quant_modelCNN_Construct+0x728>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24256), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24256), 64, 0, &UchanHF1);
1c0047b8:	60c9a503          	lw	a0,1548(s3)
1c0047bc:	00092603          	lw	a2,0(s2)
1c0047c0:	6599                	lui	a1,0x6
1c0047c2:	ec058593          	addi	a1,a1,-320 # 5ec0 <__rt_stack_size+0x56c0>
1c0047c6:	962e                	add	a2,a2,a1
1c0047c8:	95aa                	add	a1,a1,a0
1c0047ca:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0047cc:	4805                	li	a6,1
1c0047ce:	101c                	addi	a5,sp,32
1c0047d0:	4705                	li	a4,1
1c0047d2:	04000693          	li	a3,64
1c0047d6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0047d8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0047da:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0047dc:	02010a23          	sb	zero,52(sp)
1c0047e0:	1da050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0047e4:	03410783          	lb	a5,52(sp)
1c0047e8:	ef89                	bnez	a5,1c004802 <quant_modelCNN_Construct+0x78a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047ea:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0047ee:	4585                	li	a1,1
1c0047f0:	01c00513          	li	a0,28
1c0047f4:	279070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0047f8:	300a9073          	csrw	mstatus,s5
1c0047fc:	03410783          	lb	a5,52(sp)
1c004800:	d7ed                	beqz	a5,1c0047ea <quant_modelCNN_Construct+0x772>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26112), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26112), 16, 0, &UchanHF1);
1c004802:	60c9a503          	lw	a0,1548(s3)
1c004806:	00092603          	lw	a2,0(s2)
1c00480a:	6599                	lui	a1,0x6
1c00480c:	60058593          	addi	a1,a1,1536 # 6600 <__rt_stack_size+0x5e00>
1c004810:	962e                	add	a2,a2,a1
1c004812:	95aa                	add	a1,a1,a0
1c004814:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004816:	4805                	li	a6,1
1c004818:	101c                	addi	a5,sp,32
1c00481a:	4705                	li	a4,1
1c00481c:	46c1                	li	a3,16
1c00481e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004820:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004822:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004824:	02010a23          	sb	zero,52(sp)
1c004828:	192050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00482c:	03410783          	lb	a5,52(sp)
1c004830:	ef89                	bnez	a5,1c00484a <quant_modelCNN_Construct+0x7d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004832:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004836:	4585                	li	a1,1
1c004838:	01c00513          	li	a0,28
1c00483c:	231070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004840:	300a9073          	csrw	mstatus,s5
1c004844:	03410783          	lb	a5,52(sp)
1c004848:	d7ed                	beqz	a5,1c004832 <quant_modelCNN_Construct+0x7ba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26128), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26128), 16, 0, &UchanHF1);
1c00484a:	60c9a503          	lw	a0,1548(s3)
1c00484e:	00092603          	lw	a2,0(s2)
1c004852:	6599                	lui	a1,0x6
1c004854:	61058593          	addi	a1,a1,1552 # 6610 <__rt_stack_size+0x5e10>
1c004858:	962e                	add	a2,a2,a1
1c00485a:	95aa                	add	a1,a1,a0
1c00485c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00485e:	4805                	li	a6,1
1c004860:	101c                	addi	a5,sp,32
1c004862:	4705                	li	a4,1
1c004864:	46c1                	li	a3,16
1c004866:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004868:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00486a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00486c:	02010a23          	sb	zero,52(sp)
1c004870:	14a050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004874:	03410783          	lb	a5,52(sp)
1c004878:	ef89                	bnez	a5,1c004892 <quant_modelCNN_Construct+0x81a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00487a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00487e:	4585                	li	a1,1
1c004880:	01c00513          	li	a0,28
1c004884:	1e9070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004888:	300a9073          	csrw	mstatus,s5
1c00488c:	03410783          	lb	a5,52(sp)
1c004890:	d7ed                	beqz	a5,1c00487a <quant_modelCNN_Construct+0x802>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27048), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27048), 9, 0, &UchanHF1);
1c004892:	60c9a503          	lw	a0,1548(s3)
1c004896:	00092603          	lw	a2,0(s2)
1c00489a:	659d                	lui	a1,0x7
1c00489c:	9a858593          	addi	a1,a1,-1624 # 69a8 <__rt_stack_size+0x61a8>
1c0048a0:	962e                	add	a2,a2,a1
1c0048a2:	95aa                	add	a1,a1,a0
1c0048a4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0048a6:	4805                	li	a6,1
1c0048a8:	101c                	addi	a5,sp,32
1c0048aa:	4705                	li	a4,1
1c0048ac:	46a5                	li	a3,9
1c0048ae:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0048b0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0048b2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0048b4:	02010a23          	sb	zero,52(sp)
1c0048b8:	102050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0048bc:	03410783          	lb	a5,52(sp)
1c0048c0:	ef89                	bnez	a5,1c0048da <quant_modelCNN_Construct+0x862>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0048c2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0048c6:	4585                	li	a1,1
1c0048c8:	01c00513          	li	a0,28
1c0048cc:	1a1070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0048d0:	300a9073          	csrw	mstatus,s5
1c0048d4:	03410783          	lb	a5,52(sp)
1c0048d8:	d7ed                	beqz	a5,1c0048c2 <quant_modelCNN_Construct+0x84a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27060), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27060), 9, 0, &UchanHF1);
1c0048da:	60c9a503          	lw	a0,1548(s3)
1c0048de:	00092603          	lw	a2,0(s2)
1c0048e2:	659d                	lui	a1,0x7
1c0048e4:	9b458593          	addi	a1,a1,-1612 # 69b4 <__rt_stack_size+0x61b4>
1c0048e8:	962e                	add	a2,a2,a1
1c0048ea:	95aa                	add	a1,a1,a0
1c0048ec:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0048ee:	4805                	li	a6,1
1c0048f0:	101c                	addi	a5,sp,32
1c0048f2:	4705                	li	a4,1
1c0048f4:	46a5                	li	a3,9
1c0048f6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0048f8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0048fa:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0048fc:	02010a23          	sb	zero,52(sp)
1c004900:	0ba050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004904:	03410783          	lb	a5,52(sp)
1c004908:	ef89                	bnez	a5,1c004922 <quant_modelCNN_Construct+0x8aa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00490a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00490e:	4585                	li	a1,1
1c004910:	01c00513          	li	a0,28
1c004914:	159070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004918:	300a9073          	csrw	mstatus,s5
1c00491c:	03410783          	lb	a5,52(sp)
1c004920:	d7ed                	beqz	a5,1c00490a <quant_modelCNN_Construct+0x892>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27072), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27072), 9, 0, &UchanHF1);
1c004922:	60c9a503          	lw	a0,1548(s3)
1c004926:	00092603          	lw	a2,0(s2)
1c00492a:	659d                	lui	a1,0x7
1c00492c:	9c058593          	addi	a1,a1,-1600 # 69c0 <__rt_stack_size+0x61c0>
1c004930:	962e                	add	a2,a2,a1
1c004932:	95aa                	add	a1,a1,a0
1c004934:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004936:	4805                	li	a6,1
1c004938:	101c                	addi	a5,sp,32
1c00493a:	4705                	li	a4,1
1c00493c:	46a5                	li	a3,9
1c00493e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004940:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004942:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004944:	02010a23          	sb	zero,52(sp)
1c004948:	072050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00494c:	03410783          	lb	a5,52(sp)
1c004950:	ef89                	bnez	a5,1c00496a <quant_modelCNN_Construct+0x8f2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004952:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004956:	4585                	li	a1,1
1c004958:	01c00513          	li	a0,28
1c00495c:	111070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004960:	300a9073          	csrw	mstatus,s5
1c004964:	03410783          	lb	a5,52(sp)
1c004968:	d7ed                	beqz	a5,1c004952 <quant_modelCNN_Construct+0x8da>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 4032), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 4032), 768, 0, &UchanHF1);
1c00496a:	60c9a503          	lw	a0,1548(s3)
1c00496e:	00092603          	lw	a2,0(s2)
1c004972:	6585                	lui	a1,0x1
1c004974:	fc058593          	addi	a1,a1,-64 # fc0 <__rt_stack_size+0x7c0>
1c004978:	962e                	add	a2,a2,a1
1c00497a:	95aa                	add	a1,a1,a0
1c00497c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00497e:	4805                	li	a6,1
1c004980:	101c                	addi	a5,sp,32
1c004982:	4705                	li	a4,1
1c004984:	30000693          	li	a3,768
1c004988:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00498a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00498c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00498e:	02010a23          	sb	zero,52(sp)
1c004992:	028050ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004996:	03410783          	lb	a5,52(sp)
1c00499a:	ef89                	bnez	a5,1c0049b4 <quant_modelCNN_Construct+0x93c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00499c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0049a0:	4585                	li	a1,1
1c0049a2:	01c00513          	li	a0,28
1c0049a6:	0c7070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0049aa:	300a9073          	csrw	mstatus,s5
1c0049ae:	03410783          	lb	a5,52(sp)
1c0049b2:	d7ed                	beqz	a5,1c00499c <quant_modelCNN_Construct+0x924>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24320), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24320), 64, 0, &UchanHF1);
1c0049b4:	60c9a503          	lw	a0,1548(s3)
1c0049b8:	00092603          	lw	a2,0(s2)
1c0049bc:	6599                	lui	a1,0x6
1c0049be:	f0058593          	addi	a1,a1,-256 # 5f00 <__rt_stack_size+0x5700>
1c0049c2:	962e                	add	a2,a2,a1
1c0049c4:	95aa                	add	a1,a1,a0
1c0049c6:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0049c8:	4805                	li	a6,1
1c0049ca:	101c                	addi	a5,sp,32
1c0049cc:	4705                	li	a4,1
1c0049ce:	04000693          	li	a3,64
1c0049d2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0049d4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0049d6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0049d8:	02010a23          	sb	zero,52(sp)
1c0049dc:	7df040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0049e0:	03410783          	lb	a5,52(sp)
1c0049e4:	ef89                	bnez	a5,1c0049fe <quant_modelCNN_Construct+0x986>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0049e6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0049ea:	4585                	li	a1,1
1c0049ec:	01c00513          	li	a0,28
1c0049f0:	07d070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0049f4:	300a9073          	csrw	mstatus,s5
1c0049f8:	03410783          	lb	a5,52(sp)
1c0049fc:	d7ed                	beqz	a5,1c0049e6 <quant_modelCNN_Construct+0x96e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26144), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26144), 16, 0, &UchanHF1);
1c0049fe:	60c9a503          	lw	a0,1548(s3)
1c004a02:	00092603          	lw	a2,0(s2)
1c004a06:	6599                	lui	a1,0x6
1c004a08:	62058593          	addi	a1,a1,1568 # 6620 <__rt_stack_size+0x5e20>
1c004a0c:	962e                	add	a2,a2,a1
1c004a0e:	95aa                	add	a1,a1,a0
1c004a10:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004a12:	4805                	li	a6,1
1c004a14:	101c                	addi	a5,sp,32
1c004a16:	4705                	li	a4,1
1c004a18:	46c1                	li	a3,16
1c004a1a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004a1c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004a1e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004a20:	02010a23          	sb	zero,52(sp)
1c004a24:	797040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004a28:	03410783          	lb	a5,52(sp)
1c004a2c:	ef89                	bnez	a5,1c004a46 <quant_modelCNN_Construct+0x9ce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a2e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004a32:	4585                	li	a1,1
1c004a34:	01c00513          	li	a0,28
1c004a38:	035070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004a3c:	300a9073          	csrw	mstatus,s5
1c004a40:	03410783          	lb	a5,52(sp)
1c004a44:	d7ed                	beqz	a5,1c004a2e <quant_modelCNN_Construct+0x9b6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26160), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26160), 16, 0, &UchanHF1);
1c004a46:	60c9a503          	lw	a0,1548(s3)
1c004a4a:	00092603          	lw	a2,0(s2)
1c004a4e:	6599                	lui	a1,0x6
1c004a50:	63058593          	addi	a1,a1,1584 # 6630 <__rt_stack_size+0x5e30>
1c004a54:	962e                	add	a2,a2,a1
1c004a56:	95aa                	add	a1,a1,a0
1c004a58:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004a5a:	4805                	li	a6,1
1c004a5c:	101c                	addi	a5,sp,32
1c004a5e:	4705                	li	a4,1
1c004a60:	46c1                	li	a3,16
1c004a62:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004a64:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004a66:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004a68:	02010a23          	sb	zero,52(sp)
1c004a6c:	74f040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004a70:	03410783          	lb	a5,52(sp)
1c004a74:	ef89                	bnez	a5,1c004a8e <quant_modelCNN_Construct+0xa16>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a76:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004a7a:	4585                	li	a1,1
1c004a7c:	01c00513          	li	a0,28
1c004a80:	7ec070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004a84:	300a9073          	csrw	mstatus,s5
1c004a88:	03410783          	lb	a5,52(sp)
1c004a8c:	d7ed                	beqz	a5,1c004a76 <quant_modelCNN_Construct+0x9fe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27084), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27084), 9, 0, &UchanHF1);
1c004a8e:	60c9a503          	lw	a0,1548(s3)
1c004a92:	00092603          	lw	a2,0(s2)
1c004a96:	659d                	lui	a1,0x7
1c004a98:	9cc58593          	addi	a1,a1,-1588 # 69cc <__rt_stack_size+0x61cc>
1c004a9c:	962e                	add	a2,a2,a1
1c004a9e:	95aa                	add	a1,a1,a0
1c004aa0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004aa2:	4805                	li	a6,1
1c004aa4:	101c                	addi	a5,sp,32
1c004aa6:	4705                	li	a4,1
1c004aa8:	46a5                	li	a3,9
1c004aaa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004aac:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004aae:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004ab0:	02010a23          	sb	zero,52(sp)
1c004ab4:	707040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004ab8:	03410783          	lb	a5,52(sp)
1c004abc:	ef89                	bnez	a5,1c004ad6 <quant_modelCNN_Construct+0xa5e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004abe:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004ac2:	4585                	li	a1,1
1c004ac4:	01c00513          	li	a0,28
1c004ac8:	7a4070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004acc:	300a9073          	csrw	mstatus,s5
1c004ad0:	03410783          	lb	a5,52(sp)
1c004ad4:	d7ed                	beqz	a5,1c004abe <quant_modelCNN_Construct+0xa46>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 4800), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 4800), 768, 0, &UchanHF1);
1c004ad6:	60c9a503          	lw	a0,1548(s3)
1c004ada:	00092603          	lw	a2,0(s2)
1c004ade:	6585                	lui	a1,0x1
1c004ae0:	2c058593          	addi	a1,a1,704 # 12c0 <__rt_stack_size+0xac0>
1c004ae4:	962e                	add	a2,a2,a1
1c004ae6:	95aa                	add	a1,a1,a0
1c004ae8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004aea:	4805                	li	a6,1
1c004aec:	101c                	addi	a5,sp,32
1c004aee:	4705                	li	a4,1
1c004af0:	30000693          	li	a3,768
1c004af4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004af6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004af8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004afa:	02010a23          	sb	zero,52(sp)
1c004afe:	6bd040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004b02:	03410783          	lb	a5,52(sp)
1c004b06:	ef89                	bnez	a5,1c004b20 <quant_modelCNN_Construct+0xaa8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b08:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004b0c:	4585                	li	a1,1
1c004b0e:	01c00513          	li	a0,28
1c004b12:	75a070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004b16:	300a9073          	csrw	mstatus,s5
1c004b1a:	03410783          	lb	a5,52(sp)
1c004b1e:	d7ed                	beqz	a5,1c004b08 <quant_modelCNN_Construct+0xa90>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24384), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24384), 64, 0, &UchanHF1);
1c004b20:	60c9a503          	lw	a0,1548(s3)
1c004b24:	00092603          	lw	a2,0(s2)
1c004b28:	6599                	lui	a1,0x6
1c004b2a:	f4058593          	addi	a1,a1,-192 # 5f40 <__rt_stack_size+0x5740>
1c004b2e:	962e                	add	a2,a2,a1
1c004b30:	95aa                	add	a1,a1,a0
1c004b32:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004b34:	4805                	li	a6,1
1c004b36:	101c                	addi	a5,sp,32
1c004b38:	4705                	li	a4,1
1c004b3a:	04000693          	li	a3,64
1c004b3e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004b40:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004b42:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004b44:	02010a23          	sb	zero,52(sp)
1c004b48:	673040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004b4c:	03410783          	lb	a5,52(sp)
1c004b50:	ef89                	bnez	a5,1c004b6a <quant_modelCNN_Construct+0xaf2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b52:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004b56:	4585                	li	a1,1
1c004b58:	01c00513          	li	a0,28
1c004b5c:	710070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004b60:	300a9073          	csrw	mstatus,s5
1c004b64:	03410783          	lb	a5,52(sp)
1c004b68:	d7ed                	beqz	a5,1c004b52 <quant_modelCNN_Construct+0xada>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26176), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26176), 16, 0, &UchanHF1);
1c004b6a:	60c9a503          	lw	a0,1548(s3)
1c004b6e:	00092603          	lw	a2,0(s2)
1c004b72:	6599                	lui	a1,0x6
1c004b74:	64058593          	addi	a1,a1,1600 # 6640 <__rt_stack_size+0x5e40>
1c004b78:	962e                	add	a2,a2,a1
1c004b7a:	95aa                	add	a1,a1,a0
1c004b7c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004b7e:	4805                	li	a6,1
1c004b80:	101c                	addi	a5,sp,32
1c004b82:	4705                	li	a4,1
1c004b84:	46c1                	li	a3,16
1c004b86:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004b88:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004b8a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004b8c:	02010a23          	sb	zero,52(sp)
1c004b90:	62b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004b94:	03410783          	lb	a5,52(sp)
1c004b98:	ef89                	bnez	a5,1c004bb2 <quant_modelCNN_Construct+0xb3a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b9a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004b9e:	4585                	li	a1,1
1c004ba0:	01c00513          	li	a0,28
1c004ba4:	6c8070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004ba8:	300a9073          	csrw	mstatus,s5
1c004bac:	03410783          	lb	a5,52(sp)
1c004bb0:	d7ed                	beqz	a5,1c004b9a <quant_modelCNN_Construct+0xb22>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26192), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26192), 16, 0, &UchanHF1);
1c004bb2:	60c9a503          	lw	a0,1548(s3)
1c004bb6:	00092603          	lw	a2,0(s2)
1c004bba:	6599                	lui	a1,0x6
1c004bbc:	65058593          	addi	a1,a1,1616 # 6650 <__rt_stack_size+0x5e50>
1c004bc0:	962e                	add	a2,a2,a1
1c004bc2:	95aa                	add	a1,a1,a0
1c004bc4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004bc6:	4805                	li	a6,1
1c004bc8:	101c                	addi	a5,sp,32
1c004bca:	4705                	li	a4,1
1c004bcc:	46c1                	li	a3,16
1c004bce:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004bd0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004bd2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004bd4:	02010a23          	sb	zero,52(sp)
1c004bd8:	5e3040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004bdc:	03410783          	lb	a5,52(sp)
1c004be0:	ef89                	bnez	a5,1c004bfa <quant_modelCNN_Construct+0xb82>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004be2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004be6:	4585                	li	a1,1
1c004be8:	01c00513          	li	a0,28
1c004bec:	680070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004bf0:	300a9073          	csrw	mstatus,s5
1c004bf4:	03410783          	lb	a5,52(sp)
1c004bf8:	d7ed                	beqz	a5,1c004be2 <quant_modelCNN_Construct+0xb6a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27096), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27096), 9, 0, &UchanHF1);
1c004bfa:	60c9a503          	lw	a0,1548(s3)
1c004bfe:	00092603          	lw	a2,0(s2)
1c004c02:	659d                	lui	a1,0x7
1c004c04:	9d858593          	addi	a1,a1,-1576 # 69d8 <__rt_stack_size+0x61d8>
1c004c08:	962e                	add	a2,a2,a1
1c004c0a:	95aa                	add	a1,a1,a0
1c004c0c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004c0e:	4805                	li	a6,1
1c004c10:	101c                	addi	a5,sp,32
1c004c12:	4705                	li	a4,1
1c004c14:	46a5                	li	a3,9
1c004c16:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004c18:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004c1a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004c1c:	02010a23          	sb	zero,52(sp)
1c004c20:	59b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004c24:	03410783          	lb	a5,52(sp)
1c004c28:	ef89                	bnez	a5,1c004c42 <quant_modelCNN_Construct+0xbca>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004c2a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004c2e:	4585                	li	a1,1
1c004c30:	01c00513          	li	a0,28
1c004c34:	638070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004c38:	300a9073          	csrw	mstatus,s5
1c004c3c:	03410783          	lb	a5,52(sp)
1c004c40:	d7ed                	beqz	a5,1c004c2a <quant_modelCNN_Construct+0xbb2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27108), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27108), 9, 0, &UchanHF1);
1c004c42:	60c9a503          	lw	a0,1548(s3)
1c004c46:	00092603          	lw	a2,0(s2)
1c004c4a:	659d                	lui	a1,0x7
1c004c4c:	9e458593          	addi	a1,a1,-1564 # 69e4 <__rt_stack_size+0x61e4>
1c004c50:	962e                	add	a2,a2,a1
1c004c52:	95aa                	add	a1,a1,a0
1c004c54:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004c56:	4805                	li	a6,1
1c004c58:	101c                	addi	a5,sp,32
1c004c5a:	4705                	li	a4,1
1c004c5c:	46a5                	li	a3,9
1c004c5e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004c60:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004c62:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004c64:	02010a23          	sb	zero,52(sp)
1c004c68:	553040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004c6c:	03410783          	lb	a5,52(sp)
1c004c70:	ef89                	bnez	a5,1c004c8a <quant_modelCNN_Construct+0xc12>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004c72:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004c76:	4585                	li	a1,1
1c004c78:	01c00513          	li	a0,28
1c004c7c:	5f0070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004c80:	300a9073          	csrw	mstatus,s5
1c004c84:	03410783          	lb	a5,52(sp)
1c004c88:	d7ed                	beqz	a5,1c004c72 <quant_modelCNN_Construct+0xbfa>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27120), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27120), 9, 0, &UchanHF1);
1c004c8a:	60c9a503          	lw	a0,1548(s3)
1c004c8e:	00092603          	lw	a2,0(s2)
1c004c92:	659d                	lui	a1,0x7
1c004c94:	9f058593          	addi	a1,a1,-1552 # 69f0 <__rt_stack_size+0x61f0>
1c004c98:	962e                	add	a2,a2,a1
1c004c9a:	95aa                	add	a1,a1,a0
1c004c9c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004c9e:	4805                	li	a6,1
1c004ca0:	101c                	addi	a5,sp,32
1c004ca2:	4705                	li	a4,1
1c004ca4:	46a5                	li	a3,9
1c004ca6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004ca8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004caa:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004cac:	02010a23          	sb	zero,52(sp)
1c004cb0:	50b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004cb4:	03410783          	lb	a5,52(sp)
1c004cb8:	ef89                	bnez	a5,1c004cd2 <quant_modelCNN_Construct+0xc5a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004cba:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004cbe:	4585                	li	a1,1
1c004cc0:	01c00513          	li	a0,28
1c004cc4:	5a8070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004cc8:	300a9073          	csrw	mstatus,s5
1c004ccc:	03410783          	lb	a5,52(sp)
1c004cd0:	d7ed                	beqz	a5,1c004cba <quant_modelCNN_Construct+0xc42>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 5568), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 5568), 768, 0, &UchanHF1);
1c004cd2:	60c9a503          	lw	a0,1548(s3)
1c004cd6:	00092603          	lw	a2,0(s2)
1c004cda:	6585                	lui	a1,0x1
1c004cdc:	5c058593          	addi	a1,a1,1472 # 15c0 <__rt_stack_size+0xdc0>
1c004ce0:	962e                	add	a2,a2,a1
1c004ce2:	95aa                	add	a1,a1,a0
1c004ce4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004ce6:	4805                	li	a6,1
1c004ce8:	101c                	addi	a5,sp,32
1c004cea:	4705                	li	a4,1
1c004cec:	30000693          	li	a3,768
1c004cf0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004cf2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004cf4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004cf6:	02010a23          	sb	zero,52(sp)
1c004cfa:	4c1040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004cfe:	03410783          	lb	a5,52(sp)
1c004d02:	ef89                	bnez	a5,1c004d1c <quant_modelCNN_Construct+0xca4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d04:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004d08:	4585                	li	a1,1
1c004d0a:	01c00513          	li	a0,28
1c004d0e:	55e070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004d12:	300a9073          	csrw	mstatus,s5
1c004d16:	03410783          	lb	a5,52(sp)
1c004d1a:	d7ed                	beqz	a5,1c004d04 <quant_modelCNN_Construct+0xc8c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24448), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24448), 64, 0, &UchanHF1);
1c004d1c:	60c9a503          	lw	a0,1548(s3)
1c004d20:	00092603          	lw	a2,0(s2)
1c004d24:	6599                	lui	a1,0x6
1c004d26:	f8058593          	addi	a1,a1,-128 # 5f80 <__rt_stack_size+0x5780>
1c004d2a:	962e                	add	a2,a2,a1
1c004d2c:	95aa                	add	a1,a1,a0
1c004d2e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004d30:	4805                	li	a6,1
1c004d32:	101c                	addi	a5,sp,32
1c004d34:	4705                	li	a4,1
1c004d36:	04000693          	li	a3,64
1c004d3a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004d3c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004d3e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004d40:	02010a23          	sb	zero,52(sp)
1c004d44:	477040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004d48:	03410783          	lb	a5,52(sp)
1c004d4c:	ef89                	bnez	a5,1c004d66 <quant_modelCNN_Construct+0xcee>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d4e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004d52:	4585                	li	a1,1
1c004d54:	01c00513          	li	a0,28
1c004d58:	514070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004d5c:	300a9073          	csrw	mstatus,s5
1c004d60:	03410783          	lb	a5,52(sp)
1c004d64:	d7ed                	beqz	a5,1c004d4e <quant_modelCNN_Construct+0xcd6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26208), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26208), 16, 0, &UchanHF1);
1c004d66:	60c9a503          	lw	a0,1548(s3)
1c004d6a:	00092603          	lw	a2,0(s2)
1c004d6e:	6599                	lui	a1,0x6
1c004d70:	66058593          	addi	a1,a1,1632 # 6660 <__rt_stack_size+0x5e60>
1c004d74:	962e                	add	a2,a2,a1
1c004d76:	95aa                	add	a1,a1,a0
1c004d78:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004d7a:	4805                	li	a6,1
1c004d7c:	101c                	addi	a5,sp,32
1c004d7e:	4705                	li	a4,1
1c004d80:	46c1                	li	a3,16
1c004d82:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004d84:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004d86:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004d88:	02010a23          	sb	zero,52(sp)
1c004d8c:	42f040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004d90:	03410783          	lb	a5,52(sp)
1c004d94:	ef89                	bnez	a5,1c004dae <quant_modelCNN_Construct+0xd36>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d96:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004d9a:	4585                	li	a1,1
1c004d9c:	01c00513          	li	a0,28
1c004da0:	4cc070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004da4:	300a9073          	csrw	mstatus,s5
1c004da8:	03410783          	lb	a5,52(sp)
1c004dac:	d7ed                	beqz	a5,1c004d96 <quant_modelCNN_Construct+0xd1e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26224), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26224), 16, 0, &UchanHF1);
1c004dae:	60c9a503          	lw	a0,1548(s3)
1c004db2:	00092603          	lw	a2,0(s2)
1c004db6:	6599                	lui	a1,0x6
1c004db8:	67058593          	addi	a1,a1,1648 # 6670 <__rt_stack_size+0x5e70>
1c004dbc:	962e                	add	a2,a2,a1
1c004dbe:	95aa                	add	a1,a1,a0
1c004dc0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004dc2:	4805                	li	a6,1
1c004dc4:	101c                	addi	a5,sp,32
1c004dc6:	4705                	li	a4,1
1c004dc8:	46c1                	li	a3,16
1c004dca:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004dcc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004dce:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004dd0:	02010a23          	sb	zero,52(sp)
1c004dd4:	3e7040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004dd8:	03410783          	lb	a5,52(sp)
1c004ddc:	ef89                	bnez	a5,1c004df6 <quant_modelCNN_Construct+0xd7e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004dde:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004de2:	4585                	li	a1,1
1c004de4:	01c00513          	li	a0,28
1c004de8:	484070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004dec:	300a9073          	csrw	mstatus,s5
1c004df0:	03410783          	lb	a5,52(sp)
1c004df4:	d7ed                	beqz	a5,1c004dde <quant_modelCNN_Construct+0xd66>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27132), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27132), 9, 0, &UchanHF1);
1c004df6:	60c9a503          	lw	a0,1548(s3)
1c004dfa:	00092603          	lw	a2,0(s2)
1c004dfe:	659d                	lui	a1,0x7
1c004e00:	9fc58593          	addi	a1,a1,-1540 # 69fc <__rt_stack_size+0x61fc>
1c004e04:	962e                	add	a2,a2,a1
1c004e06:	95aa                	add	a1,a1,a0
1c004e08:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004e0a:	4805                	li	a6,1
1c004e0c:	101c                	addi	a5,sp,32
1c004e0e:	4705                	li	a4,1
1c004e10:	46a5                	li	a3,9
1c004e12:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004e14:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004e16:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004e18:	02010a23          	sb	zero,52(sp)
1c004e1c:	39f040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004e20:	03410783          	lb	a5,52(sp)
1c004e24:	ef89                	bnez	a5,1c004e3e <quant_modelCNN_Construct+0xdc6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004e26:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004e2a:	4585                	li	a1,1
1c004e2c:	01c00513          	li	a0,28
1c004e30:	43c070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004e34:	300a9073          	csrw	mstatus,s5
1c004e38:	03410783          	lb	a5,52(sp)
1c004e3c:	d7ed                	beqz	a5,1c004e26 <quant_modelCNN_Construct+0xdae>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 6336), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 6336), 768, 0, &UchanHF1);
1c004e3e:	60c9a503          	lw	a0,1548(s3)
1c004e42:	00092603          	lw	a2,0(s2)
1c004e46:	6589                	lui	a1,0x2
1c004e48:	8c058593          	addi	a1,a1,-1856 # 18c0 <__rt_stack_size+0x10c0>
1c004e4c:	962e                	add	a2,a2,a1
1c004e4e:	95aa                	add	a1,a1,a0
1c004e50:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004e52:	4805                	li	a6,1
1c004e54:	101c                	addi	a5,sp,32
1c004e56:	4705                	li	a4,1
1c004e58:	30000693          	li	a3,768
1c004e5c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004e5e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004e60:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004e62:	02010a23          	sb	zero,52(sp)
1c004e66:	355040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004e6a:	03410783          	lb	a5,52(sp)
1c004e6e:	ef89                	bnez	a5,1c004e88 <quant_modelCNN_Construct+0xe10>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004e70:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004e74:	4585                	li	a1,1
1c004e76:	01c00513          	li	a0,28
1c004e7a:	3f2070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004e7e:	300a9073          	csrw	mstatus,s5
1c004e82:	03410783          	lb	a5,52(sp)
1c004e86:	d7ed                	beqz	a5,1c004e70 <quant_modelCNN_Construct+0xdf8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24512), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24512), 64, 0, &UchanHF1);
1c004e88:	60c9a503          	lw	a0,1548(s3)
1c004e8c:	00092603          	lw	a2,0(s2)
1c004e90:	6599                	lui	a1,0x6
1c004e92:	fc058593          	addi	a1,a1,-64 # 5fc0 <__rt_stack_size+0x57c0>
1c004e96:	962e                	add	a2,a2,a1
1c004e98:	95aa                	add	a1,a1,a0
1c004e9a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004e9c:	4805                	li	a6,1
1c004e9e:	101c                	addi	a5,sp,32
1c004ea0:	4705                	li	a4,1
1c004ea2:	04000693          	li	a3,64
1c004ea6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004ea8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004eaa:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004eac:	02010a23          	sb	zero,52(sp)
1c004eb0:	30b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004eb4:	03410783          	lb	a5,52(sp)
1c004eb8:	ef89                	bnez	a5,1c004ed2 <quant_modelCNN_Construct+0xe5a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004eba:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004ebe:	4585                	li	a1,1
1c004ec0:	01c00513          	li	a0,28
1c004ec4:	3a8070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004ec8:	300a9073          	csrw	mstatus,s5
1c004ecc:	03410783          	lb	a5,52(sp)
1c004ed0:	d7ed                	beqz	a5,1c004eba <quant_modelCNN_Construct+0xe42>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26240), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26240), 16, 0, &UchanHF1);
1c004ed2:	60c9a503          	lw	a0,1548(s3)
1c004ed6:	00092603          	lw	a2,0(s2)
1c004eda:	6599                	lui	a1,0x6
1c004edc:	68058593          	addi	a1,a1,1664 # 6680 <__rt_stack_size+0x5e80>
1c004ee0:	962e                	add	a2,a2,a1
1c004ee2:	95aa                	add	a1,a1,a0
1c004ee4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004ee6:	4805                	li	a6,1
1c004ee8:	101c                	addi	a5,sp,32
1c004eea:	4705                	li	a4,1
1c004eec:	46c1                	li	a3,16
1c004eee:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004ef0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004ef2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004ef4:	02010a23          	sb	zero,52(sp)
1c004ef8:	2c3040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004efc:	03410783          	lb	a5,52(sp)
1c004f00:	ef89                	bnez	a5,1c004f1a <quant_modelCNN_Construct+0xea2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f02:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004f06:	4585                	li	a1,1
1c004f08:	01c00513          	li	a0,28
1c004f0c:	360070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004f10:	300a9073          	csrw	mstatus,s5
1c004f14:	03410783          	lb	a5,52(sp)
1c004f18:	d7ed                	beqz	a5,1c004f02 <quant_modelCNN_Construct+0xe8a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26256), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26256), 16, 0, &UchanHF1);
1c004f1a:	60c9a503          	lw	a0,1548(s3)
1c004f1e:	00092603          	lw	a2,0(s2)
1c004f22:	6599                	lui	a1,0x6
1c004f24:	69058593          	addi	a1,a1,1680 # 6690 <__rt_stack_size+0x5e90>
1c004f28:	962e                	add	a2,a2,a1
1c004f2a:	95aa                	add	a1,a1,a0
1c004f2c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004f2e:	4805                	li	a6,1
1c004f30:	101c                	addi	a5,sp,32
1c004f32:	4705                	li	a4,1
1c004f34:	46c1                	li	a3,16
1c004f36:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004f38:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004f3a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004f3c:	02010a23          	sb	zero,52(sp)
1c004f40:	27b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004f44:	03410783          	lb	a5,52(sp)
1c004f48:	ef89                	bnez	a5,1c004f62 <quant_modelCNN_Construct+0xeea>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f4a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004f4e:	4585                	li	a1,1
1c004f50:	01c00513          	li	a0,28
1c004f54:	318070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004f58:	300a9073          	csrw	mstatus,s5
1c004f5c:	03410783          	lb	a5,52(sp)
1c004f60:	d7ed                	beqz	a5,1c004f4a <quant_modelCNN_Construct+0xed2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27144), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27144), 9, 0, &UchanHF1);
1c004f62:	60c9a503          	lw	a0,1548(s3)
1c004f66:	00092603          	lw	a2,0(s2)
1c004f6a:	659d                	lui	a1,0x7
1c004f6c:	a0858593          	addi	a1,a1,-1528 # 6a08 <__rt_stack_size+0x6208>
1c004f70:	962e                	add	a2,a2,a1
1c004f72:	95aa                	add	a1,a1,a0
1c004f74:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004f76:	4805                	li	a6,1
1c004f78:	101c                	addi	a5,sp,32
1c004f7a:	4705                	li	a4,1
1c004f7c:	46a5                	li	a3,9
1c004f7e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004f80:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004f82:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004f84:	02010a23          	sb	zero,52(sp)
1c004f88:	233040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004f8c:	03410783          	lb	a5,52(sp)
1c004f90:	ef89                	bnez	a5,1c004faa <quant_modelCNN_Construct+0xf32>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f92:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004f96:	4585                	li	a1,1
1c004f98:	01c00513          	li	a0,28
1c004f9c:	2d0070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004fa0:	300a9073          	csrw	mstatus,s5
1c004fa4:	03410783          	lb	a5,52(sp)
1c004fa8:	d7ed                	beqz	a5,1c004f92 <quant_modelCNN_Construct+0xf1a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27156), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27156), 9, 0, &UchanHF1);
1c004faa:	60c9a503          	lw	a0,1548(s3)
1c004fae:	00092603          	lw	a2,0(s2)
1c004fb2:	659d                	lui	a1,0x7
1c004fb4:	a1458593          	addi	a1,a1,-1516 # 6a14 <__rt_stack_size+0x6214>
1c004fb8:	962e                	add	a2,a2,a1
1c004fba:	95aa                	add	a1,a1,a0
1c004fbc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c004fbe:	4805                	li	a6,1
1c004fc0:	101c                	addi	a5,sp,32
1c004fc2:	4705                	li	a4,1
1c004fc4:	46a5                	li	a3,9
1c004fc6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c004fc8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c004fca:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c004fcc:	02010a23          	sb	zero,52(sp)
1c004fd0:	1eb040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c004fd4:	03410783          	lb	a5,52(sp)
1c004fd8:	ef89                	bnez	a5,1c004ff2 <quant_modelCNN_Construct+0xf7a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004fda:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c004fde:	4585                	li	a1,1
1c004fe0:	01c00513          	li	a0,28
1c004fe4:	288070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c004fe8:	300a9073          	csrw	mstatus,s5
1c004fec:	03410783          	lb	a5,52(sp)
1c004ff0:	d7ed                	beqz	a5,1c004fda <quant_modelCNN_Construct+0xf62>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27168), 9, 0, &UchanHF1);
1c004ff2:	60c9a503          	lw	a0,1548(s3)
1c004ff6:	00092603          	lw	a2,0(s2)
1c004ffa:	659d                	lui	a1,0x7
1c004ffc:	a2058593          	addi	a1,a1,-1504 # 6a20 <__rt_stack_size+0x6220>
1c005000:	962e                	add	a2,a2,a1
1c005002:	95aa                	add	a1,a1,a0
1c005004:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005006:	4805                	li	a6,1
1c005008:	101c                	addi	a5,sp,32
1c00500a:	4705                	li	a4,1
1c00500c:	46a5                	li	a3,9
1c00500e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005010:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005012:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005014:	02010a23          	sb	zero,52(sp)
1c005018:	1a3040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00501c:	03410783          	lb	a5,52(sp)
1c005020:	ef89                	bnez	a5,1c00503a <quant_modelCNN_Construct+0xfc2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005022:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005026:	4585                	li	a1,1
1c005028:	01c00513          	li	a0,28
1c00502c:	240070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005030:	300a9073          	csrw	mstatus,s5
1c005034:	03410783          	lb	a5,52(sp)
1c005038:	d7ed                	beqz	a5,1c005022 <quant_modelCNN_Construct+0xfaa>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 7104), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 7104), 768, 0, &UchanHF1);
1c00503a:	60c9a503          	lw	a0,1548(s3)
1c00503e:	00092603          	lw	a2,0(s2)
1c005042:	6589                	lui	a1,0x2
1c005044:	bc058593          	addi	a1,a1,-1088 # 1bc0 <__rt_stack_size+0x13c0>
1c005048:	962e                	add	a2,a2,a1
1c00504a:	95aa                	add	a1,a1,a0
1c00504c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00504e:	4805                	li	a6,1
1c005050:	101c                	addi	a5,sp,32
1c005052:	4705                	li	a4,1
1c005054:	30000693          	li	a3,768
1c005058:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00505a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00505c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00505e:	02010a23          	sb	zero,52(sp)
1c005062:	159040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005066:	03410783          	lb	a5,52(sp)
1c00506a:	ef89                	bnez	a5,1c005084 <quant_modelCNN_Construct+0x100c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00506c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005070:	4585                	li	a1,1
1c005072:	01c00513          	li	a0,28
1c005076:	1f6070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00507a:	300a9073          	csrw	mstatus,s5
1c00507e:	03410783          	lb	a5,52(sp)
1c005082:	d7ed                	beqz	a5,1c00506c <quant_modelCNN_Construct+0xff4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24576), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24576), 64, 0, &UchanHF1);
1c005084:	60c9a503          	lw	a0,1548(s3)
1c005088:	00092603          	lw	a2,0(s2)
1c00508c:	6599                	lui	a1,0x6
  task->id = PI_TASK_NONE_ID;
1c00508e:	4805                	li	a6,1
1c005090:	962e                	add	a2,a2,a1
1c005092:	95aa                	add	a1,a1,a0
1c005094:	4c88                	lw	a0,24(s1)
1c005096:	101c                	addi	a5,sp,32
1c005098:	4705                	li	a4,1
1c00509a:	04000693          	li	a3,64
1c00509e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0050a0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0050a2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0050a4:	02010a23          	sb	zero,52(sp)
1c0050a8:	113040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0050ac:	03410783          	lb	a5,52(sp)
1c0050b0:	ef89                	bnez	a5,1c0050ca <quant_modelCNN_Construct+0x1052>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0050b2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0050b6:	4585                	li	a1,1
1c0050b8:	01c00513          	li	a0,28
1c0050bc:	1b0070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0050c0:	300a9073          	csrw	mstatus,s5
1c0050c4:	03410783          	lb	a5,52(sp)
1c0050c8:	d7ed                	beqz	a5,1c0050b2 <quant_modelCNN_Construct+0x103a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26272), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26272), 16, 0, &UchanHF1);
1c0050ca:	60c9a503          	lw	a0,1548(s3)
1c0050ce:	00092603          	lw	a2,0(s2)
1c0050d2:	6599                	lui	a1,0x6
1c0050d4:	6a058593          	addi	a1,a1,1696 # 66a0 <__rt_stack_size+0x5ea0>
1c0050d8:	962e                	add	a2,a2,a1
1c0050da:	95aa                	add	a1,a1,a0
1c0050dc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0050de:	4805                	li	a6,1
1c0050e0:	101c                	addi	a5,sp,32
1c0050e2:	4705                	li	a4,1
1c0050e4:	46c1                	li	a3,16
1c0050e6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0050e8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0050ea:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0050ec:	02010a23          	sb	zero,52(sp)
1c0050f0:	0cb040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0050f4:	03410783          	lb	a5,52(sp)
1c0050f8:	ef89                	bnez	a5,1c005112 <quant_modelCNN_Construct+0x109a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0050fa:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0050fe:	4585                	li	a1,1
1c005100:	01c00513          	li	a0,28
1c005104:	168070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005108:	300a9073          	csrw	mstatus,s5
1c00510c:	03410783          	lb	a5,52(sp)
1c005110:	d7ed                	beqz	a5,1c0050fa <quant_modelCNN_Construct+0x1082>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26288), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26288), 16, 0, &UchanHF1);
1c005112:	60c9a503          	lw	a0,1548(s3)
1c005116:	00092603          	lw	a2,0(s2)
1c00511a:	6599                	lui	a1,0x6
1c00511c:	6b058593          	addi	a1,a1,1712 # 66b0 <__rt_stack_size+0x5eb0>
1c005120:	962e                	add	a2,a2,a1
1c005122:	95aa                	add	a1,a1,a0
1c005124:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005126:	4805                	li	a6,1
1c005128:	101c                	addi	a5,sp,32
1c00512a:	4705                	li	a4,1
1c00512c:	46c1                	li	a3,16
1c00512e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005130:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005132:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005134:	02010a23          	sb	zero,52(sp)
1c005138:	083040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00513c:	03410783          	lb	a5,52(sp)
1c005140:	ef89                	bnez	a5,1c00515a <quant_modelCNN_Construct+0x10e2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005142:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005146:	4585                	li	a1,1
1c005148:	01c00513          	li	a0,28
1c00514c:	120070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005150:	300a9073          	csrw	mstatus,s5
1c005154:	03410783          	lb	a5,52(sp)
1c005158:	d7ed                	beqz	a5,1c005142 <quant_modelCNN_Construct+0x10ca>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27180), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27180), 9, 0, &UchanHF1);
1c00515a:	60c9a503          	lw	a0,1548(s3)
1c00515e:	00092603          	lw	a2,0(s2)
1c005162:	659d                	lui	a1,0x7
1c005164:	a2c58593          	addi	a1,a1,-1492 # 6a2c <__rt_stack_size+0x622c>
1c005168:	962e                	add	a2,a2,a1
1c00516a:	95aa                	add	a1,a1,a0
1c00516c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00516e:	4805                	li	a6,1
1c005170:	101c                	addi	a5,sp,32
1c005172:	4705                	li	a4,1
1c005174:	46a5                	li	a3,9
1c005176:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005178:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00517a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00517c:	02010a23          	sb	zero,52(sp)
1c005180:	03b040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005184:	03410783          	lb	a5,52(sp)
1c005188:	ef89                	bnez	a5,1c0051a2 <quant_modelCNN_Construct+0x112a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00518a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00518e:	4585                	li	a1,1
1c005190:	01c00513          	li	a0,28
1c005194:	0d8070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005198:	300a9073          	csrw	mstatus,s5
1c00519c:	03410783          	lb	a5,52(sp)
1c0051a0:	d7ed                	beqz	a5,1c00518a <quant_modelCNN_Construct+0x1112>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 7872), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 7872), 768, 0, &UchanHF1);
1c0051a2:	60c9a503          	lw	a0,1548(s3)
1c0051a6:	00092603          	lw	a2,0(s2)
1c0051aa:	6589                	lui	a1,0x2
1c0051ac:	ec058593          	addi	a1,a1,-320 # 1ec0 <__rt_stack_size+0x16c0>
1c0051b0:	962e                	add	a2,a2,a1
1c0051b2:	95aa                	add	a1,a1,a0
1c0051b4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0051b6:	4805                	li	a6,1
1c0051b8:	101c                	addi	a5,sp,32
1c0051ba:	4705                	li	a4,1
1c0051bc:	30000693          	li	a3,768
1c0051c0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0051c2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0051c4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0051c6:	02010a23          	sb	zero,52(sp)
1c0051ca:	7f0040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0051ce:	03410783          	lb	a5,52(sp)
1c0051d2:	ef89                	bnez	a5,1c0051ec <quant_modelCNN_Construct+0x1174>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0051d4:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0051d8:	4585                	li	a1,1
1c0051da:	01c00513          	li	a0,28
1c0051de:	08e070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0051e2:	300a9073          	csrw	mstatus,s5
1c0051e6:	03410783          	lb	a5,52(sp)
1c0051ea:	d7ed                	beqz	a5,1c0051d4 <quant_modelCNN_Construct+0x115c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24640), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24640), 64, 0, &UchanHF1);
1c0051ec:	60c9a503          	lw	a0,1548(s3)
1c0051f0:	00092603          	lw	a2,0(s2)
1c0051f4:	6599                	lui	a1,0x6
1c0051f6:	04058593          	addi	a1,a1,64 # 6040 <__rt_stack_size+0x5840>
1c0051fa:	962e                	add	a2,a2,a1
1c0051fc:	95aa                	add	a1,a1,a0
1c0051fe:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005200:	4805                	li	a6,1
1c005202:	101c                	addi	a5,sp,32
1c005204:	4705                	li	a4,1
1c005206:	04000693          	li	a3,64
1c00520a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00520c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00520e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005210:	02010a23          	sb	zero,52(sp)
1c005214:	7a6040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005218:	03410783          	lb	a5,52(sp)
1c00521c:	ef89                	bnez	a5,1c005236 <quant_modelCNN_Construct+0x11be>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00521e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005222:	4585                	li	a1,1
1c005224:	01c00513          	li	a0,28
1c005228:	044070ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00522c:	300a9073          	csrw	mstatus,s5
1c005230:	03410783          	lb	a5,52(sp)
1c005234:	d7ed                	beqz	a5,1c00521e <quant_modelCNN_Construct+0x11a6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26304), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26304), 16, 0, &UchanHF1);
1c005236:	60c9a503          	lw	a0,1548(s3)
1c00523a:	00092603          	lw	a2,0(s2)
1c00523e:	6599                	lui	a1,0x6
1c005240:	6c058593          	addi	a1,a1,1728 # 66c0 <__rt_stack_size+0x5ec0>
1c005244:	962e                	add	a2,a2,a1
1c005246:	95aa                	add	a1,a1,a0
1c005248:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00524a:	4805                	li	a6,1
1c00524c:	101c                	addi	a5,sp,32
1c00524e:	4705                	li	a4,1
1c005250:	46c1                	li	a3,16
1c005252:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005254:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005256:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005258:	02010a23          	sb	zero,52(sp)
1c00525c:	75e040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005260:	03410783          	lb	a5,52(sp)
1c005264:	ef89                	bnez	a5,1c00527e <quant_modelCNN_Construct+0x1206>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005266:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00526a:	4585                	li	a1,1
1c00526c:	01c00513          	li	a0,28
1c005270:	7fd060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005274:	300a9073          	csrw	mstatus,s5
1c005278:	03410783          	lb	a5,52(sp)
1c00527c:	d7ed                	beqz	a5,1c005266 <quant_modelCNN_Construct+0x11ee>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26320), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26320), 16, 0, &UchanHF1);
1c00527e:	60c9a503          	lw	a0,1548(s3)
1c005282:	00092603          	lw	a2,0(s2)
1c005286:	6599                	lui	a1,0x6
1c005288:	6d058593          	addi	a1,a1,1744 # 66d0 <__rt_stack_size+0x5ed0>
1c00528c:	962e                	add	a2,a2,a1
1c00528e:	95aa                	add	a1,a1,a0
1c005290:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005292:	4805                	li	a6,1
1c005294:	101c                	addi	a5,sp,32
1c005296:	4705                	li	a4,1
1c005298:	46c1                	li	a3,16
1c00529a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00529c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00529e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0052a0:	02010a23          	sb	zero,52(sp)
1c0052a4:	716040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0052a8:	03410783          	lb	a5,52(sp)
1c0052ac:	ef89                	bnez	a5,1c0052c6 <quant_modelCNN_Construct+0x124e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0052ae:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0052b2:	4585                	li	a1,1
1c0052b4:	01c00513          	li	a0,28
1c0052b8:	7b5060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0052bc:	300a9073          	csrw	mstatus,s5
1c0052c0:	03410783          	lb	a5,52(sp)
1c0052c4:	d7ed                	beqz	a5,1c0052ae <quant_modelCNN_Construct+0x1236>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27192), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27192), 9, 0, &UchanHF1);
1c0052c6:	60c9a503          	lw	a0,1548(s3)
1c0052ca:	00092603          	lw	a2,0(s2)
1c0052ce:	659d                	lui	a1,0x7
1c0052d0:	a3858593          	addi	a1,a1,-1480 # 6a38 <__rt_stack_size+0x6238>
1c0052d4:	962e                	add	a2,a2,a1
1c0052d6:	95aa                	add	a1,a1,a0
1c0052d8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0052da:	4805                	li	a6,1
1c0052dc:	101c                	addi	a5,sp,32
1c0052de:	4705                	li	a4,1
1c0052e0:	46a5                	li	a3,9
1c0052e2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0052e4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0052e6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0052e8:	02010a23          	sb	zero,52(sp)
1c0052ec:	6ce040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0052f0:	03410783          	lb	a5,52(sp)
1c0052f4:	ef89                	bnez	a5,1c00530e <quant_modelCNN_Construct+0x1296>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0052f6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0052fa:	4585                	li	a1,1
1c0052fc:	01c00513          	li	a0,28
1c005300:	76d060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005304:	300a9073          	csrw	mstatus,s5
1c005308:	03410783          	lb	a5,52(sp)
1c00530c:	d7ed                	beqz	a5,1c0052f6 <quant_modelCNN_Construct+0x127e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27204), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27204), 9, 0, &UchanHF1);
1c00530e:	60c9a503          	lw	a0,1548(s3)
1c005312:	00092603          	lw	a2,0(s2)
1c005316:	659d                	lui	a1,0x7
1c005318:	a4458593          	addi	a1,a1,-1468 # 6a44 <__rt_stack_size+0x6244>
1c00531c:	962e                	add	a2,a2,a1
1c00531e:	95aa                	add	a1,a1,a0
1c005320:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005322:	4805                	li	a6,1
1c005324:	101c                	addi	a5,sp,32
1c005326:	4705                	li	a4,1
1c005328:	46a5                	li	a3,9
1c00532a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00532c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00532e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005330:	02010a23          	sb	zero,52(sp)
1c005334:	686040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005338:	03410783          	lb	a5,52(sp)
1c00533c:	ef89                	bnez	a5,1c005356 <quant_modelCNN_Construct+0x12de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00533e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005342:	4585                	li	a1,1
1c005344:	01c00513          	li	a0,28
1c005348:	725060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00534c:	300a9073          	csrw	mstatus,s5
1c005350:	03410783          	lb	a5,52(sp)
1c005354:	d7ed                	beqz	a5,1c00533e <quant_modelCNN_Construct+0x12c6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27216), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27216), 9, 0, &UchanHF1);
1c005356:	60c9a503          	lw	a0,1548(s3)
1c00535a:	00092603          	lw	a2,0(s2)
1c00535e:	659d                	lui	a1,0x7
1c005360:	a5058593          	addi	a1,a1,-1456 # 6a50 <__rt_stack_size+0x6250>
1c005364:	962e                	add	a2,a2,a1
1c005366:	95aa                	add	a1,a1,a0
1c005368:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00536a:	4805                	li	a6,1
1c00536c:	101c                	addi	a5,sp,32
1c00536e:	4705                	li	a4,1
1c005370:	46a5                	li	a3,9
1c005372:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005374:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005376:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005378:	02010a23          	sb	zero,52(sp)
1c00537c:	63e040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005380:	03410783          	lb	a5,52(sp)
1c005384:	ef89                	bnez	a5,1c00539e <quant_modelCNN_Construct+0x1326>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005386:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00538a:	4585                	li	a1,1
1c00538c:	01c00513          	li	a0,28
1c005390:	6dd060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005394:	300a9073          	csrw	mstatus,s5
1c005398:	03410783          	lb	a5,52(sp)
1c00539c:	d7ed                	beqz	a5,1c005386 <quant_modelCNN_Construct+0x130e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 8640), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 8640), 768, 0, &UchanHF1);
1c00539e:	60c9a503          	lw	a0,1548(s3)
1c0053a2:	00092603          	lw	a2,0(s2)
1c0053a6:	6589                	lui	a1,0x2
1c0053a8:	1c058593          	addi	a1,a1,448 # 21c0 <__rt_stack_size+0x19c0>
1c0053ac:	962e                	add	a2,a2,a1
1c0053ae:	95aa                	add	a1,a1,a0
1c0053b0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0053b2:	4805                	li	a6,1
1c0053b4:	101c                	addi	a5,sp,32
1c0053b6:	4705                	li	a4,1
1c0053b8:	30000693          	li	a3,768
1c0053bc:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0053be:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0053c0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0053c2:	02010a23          	sb	zero,52(sp)
1c0053c6:	5f4040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0053ca:	03410783          	lb	a5,52(sp)
1c0053ce:	ef89                	bnez	a5,1c0053e8 <quant_modelCNN_Construct+0x1370>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0053d0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0053d4:	4585                	li	a1,1
1c0053d6:	01c00513          	li	a0,28
1c0053da:	693060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0053de:	300a9073          	csrw	mstatus,s5
1c0053e2:	03410783          	lb	a5,52(sp)
1c0053e6:	d7ed                	beqz	a5,1c0053d0 <quant_modelCNN_Construct+0x1358>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24704), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24704), 64, 0, &UchanHF1);
1c0053e8:	60c9a503          	lw	a0,1548(s3)
1c0053ec:	00092603          	lw	a2,0(s2)
1c0053f0:	6599                	lui	a1,0x6
1c0053f2:	08058593          	addi	a1,a1,128 # 6080 <__rt_stack_size+0x5880>
1c0053f6:	962e                	add	a2,a2,a1
1c0053f8:	95aa                	add	a1,a1,a0
1c0053fa:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0053fc:	4805                	li	a6,1
1c0053fe:	101c                	addi	a5,sp,32
1c005400:	4705                	li	a4,1
1c005402:	04000693          	li	a3,64
1c005406:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005408:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00540a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00540c:	02010a23          	sb	zero,52(sp)
1c005410:	5aa040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005414:	03410783          	lb	a5,52(sp)
1c005418:	ef89                	bnez	a5,1c005432 <quant_modelCNN_Construct+0x13ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00541a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00541e:	4585                	li	a1,1
1c005420:	01c00513          	li	a0,28
1c005424:	649060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005428:	300a9073          	csrw	mstatus,s5
1c00542c:	03410783          	lb	a5,52(sp)
1c005430:	d7ed                	beqz	a5,1c00541a <quant_modelCNN_Construct+0x13a2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26336), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26336), 16, 0, &UchanHF1);
1c005432:	60c9a503          	lw	a0,1548(s3)
1c005436:	00092603          	lw	a2,0(s2)
1c00543a:	6599                	lui	a1,0x6
1c00543c:	6e058593          	addi	a1,a1,1760 # 66e0 <__rt_stack_size+0x5ee0>
1c005440:	962e                	add	a2,a2,a1
1c005442:	95aa                	add	a1,a1,a0
1c005444:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005446:	4805                	li	a6,1
1c005448:	101c                	addi	a5,sp,32
1c00544a:	4705                	li	a4,1
1c00544c:	46c1                	li	a3,16
1c00544e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005450:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005452:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005454:	02010a23          	sb	zero,52(sp)
1c005458:	562040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00545c:	03410783          	lb	a5,52(sp)
1c005460:	ef89                	bnez	a5,1c00547a <quant_modelCNN_Construct+0x1402>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005462:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005466:	4585                	li	a1,1
1c005468:	01c00513          	li	a0,28
1c00546c:	601060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005470:	300a9073          	csrw	mstatus,s5
1c005474:	03410783          	lb	a5,52(sp)
1c005478:	d7ed                	beqz	a5,1c005462 <quant_modelCNN_Construct+0x13ea>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26352), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26352), 16, 0, &UchanHF1);
1c00547a:	60c9a503          	lw	a0,1548(s3)
1c00547e:	00092603          	lw	a2,0(s2)
1c005482:	6599                	lui	a1,0x6
1c005484:	6f058593          	addi	a1,a1,1776 # 66f0 <__rt_stack_size+0x5ef0>
1c005488:	962e                	add	a2,a2,a1
1c00548a:	95aa                	add	a1,a1,a0
1c00548c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00548e:	4805                	li	a6,1
1c005490:	101c                	addi	a5,sp,32
1c005492:	4705                	li	a4,1
1c005494:	46c1                	li	a3,16
1c005496:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005498:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00549a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00549c:	02010a23          	sb	zero,52(sp)
1c0054a0:	51a040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0054a4:	03410783          	lb	a5,52(sp)
1c0054a8:	ef89                	bnez	a5,1c0054c2 <quant_modelCNN_Construct+0x144a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0054aa:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0054ae:	4585                	li	a1,1
1c0054b0:	01c00513          	li	a0,28
1c0054b4:	5b9060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0054b8:	300a9073          	csrw	mstatus,s5
1c0054bc:	03410783          	lb	a5,52(sp)
1c0054c0:	d7ed                	beqz	a5,1c0054aa <quant_modelCNN_Construct+0x1432>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27228), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27228), 9, 0, &UchanHF1);
1c0054c2:	60c9a503          	lw	a0,1548(s3)
1c0054c6:	00092603          	lw	a2,0(s2)
1c0054ca:	659d                	lui	a1,0x7
1c0054cc:	a5c58593          	addi	a1,a1,-1444 # 6a5c <__rt_stack_size+0x625c>
1c0054d0:	962e                	add	a2,a2,a1
1c0054d2:	95aa                	add	a1,a1,a0
1c0054d4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0054d6:	4805                	li	a6,1
1c0054d8:	101c                	addi	a5,sp,32
1c0054da:	4705                	li	a4,1
1c0054dc:	46a5                	li	a3,9
1c0054de:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0054e0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0054e2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0054e4:	02010a23          	sb	zero,52(sp)
1c0054e8:	4d2040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0054ec:	03410783          	lb	a5,52(sp)
1c0054f0:	ef89                	bnez	a5,1c00550a <quant_modelCNN_Construct+0x1492>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0054f2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0054f6:	4585                	li	a1,1
1c0054f8:	01c00513          	li	a0,28
1c0054fc:	571060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005500:	300a9073          	csrw	mstatus,s5
1c005504:	03410783          	lb	a5,52(sp)
1c005508:	d7ed                	beqz	a5,1c0054f2 <quant_modelCNN_Construct+0x147a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 9408), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 9408), 768, 0, &UchanHF1);
1c00550a:	60c9a503          	lw	a0,1548(s3)
1c00550e:	00092603          	lw	a2,0(s2)
1c005512:	6589                	lui	a1,0x2
1c005514:	4c058593          	addi	a1,a1,1216 # 24c0 <__rt_stack_size+0x1cc0>
1c005518:	962e                	add	a2,a2,a1
1c00551a:	95aa                	add	a1,a1,a0
1c00551c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00551e:	4805                	li	a6,1
1c005520:	101c                	addi	a5,sp,32
1c005522:	4705                	li	a4,1
1c005524:	30000693          	li	a3,768
1c005528:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00552a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00552c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00552e:	02010a23          	sb	zero,52(sp)
1c005532:	488040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005536:	03410783          	lb	a5,52(sp)
1c00553a:	ef89                	bnez	a5,1c005554 <quant_modelCNN_Construct+0x14dc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00553c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005540:	4585                	li	a1,1
1c005542:	01c00513          	li	a0,28
1c005546:	527060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00554a:	300a9073          	csrw	mstatus,s5
1c00554e:	03410783          	lb	a5,52(sp)
1c005552:	d7ed                	beqz	a5,1c00553c <quant_modelCNN_Construct+0x14c4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24768), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24768), 64, 0, &UchanHF1);
1c005554:	60c9a503          	lw	a0,1548(s3)
1c005558:	00092603          	lw	a2,0(s2)
1c00555c:	6599                	lui	a1,0x6
1c00555e:	0c058593          	addi	a1,a1,192 # 60c0 <__rt_stack_size+0x58c0>
1c005562:	962e                	add	a2,a2,a1
1c005564:	95aa                	add	a1,a1,a0
1c005566:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005568:	4805                	li	a6,1
1c00556a:	101c                	addi	a5,sp,32
1c00556c:	4705                	li	a4,1
1c00556e:	04000693          	li	a3,64
1c005572:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005574:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005576:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005578:	02010a23          	sb	zero,52(sp)
1c00557c:	43e040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005580:	03410783          	lb	a5,52(sp)
1c005584:	ef89                	bnez	a5,1c00559e <quant_modelCNN_Construct+0x1526>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005586:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00558a:	4585                	li	a1,1
1c00558c:	01c00513          	li	a0,28
1c005590:	4dd060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005594:	300a9073          	csrw	mstatus,s5
1c005598:	03410783          	lb	a5,52(sp)
1c00559c:	d7ed                	beqz	a5,1c005586 <quant_modelCNN_Construct+0x150e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26368), 16, 0, &UchanHF1);
1c00559e:	60c9a503          	lw	a0,1548(s3)
1c0055a2:	00092603          	lw	a2,0(s2)
1c0055a6:	6599                	lui	a1,0x6
1c0055a8:	70058593          	addi	a1,a1,1792 # 6700 <__rt_stack_size+0x5f00>
1c0055ac:	962e                	add	a2,a2,a1
1c0055ae:	95aa                	add	a1,a1,a0
1c0055b0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0055b2:	4805                	li	a6,1
1c0055b4:	101c                	addi	a5,sp,32
1c0055b6:	4705                	li	a4,1
1c0055b8:	46c1                	li	a3,16
1c0055ba:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0055bc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0055be:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0055c0:	02010a23          	sb	zero,52(sp)
1c0055c4:	3f6040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0055c8:	03410783          	lb	a5,52(sp)
1c0055cc:	ef89                	bnez	a5,1c0055e6 <quant_modelCNN_Construct+0x156e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0055ce:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0055d2:	4585                	li	a1,1
1c0055d4:	01c00513          	li	a0,28
1c0055d8:	495060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0055dc:	300a9073          	csrw	mstatus,s5
1c0055e0:	03410783          	lb	a5,52(sp)
1c0055e4:	d7ed                	beqz	a5,1c0055ce <quant_modelCNN_Construct+0x1556>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26384), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26384), 16, 0, &UchanHF1);
1c0055e6:	60c9a503          	lw	a0,1548(s3)
1c0055ea:	00092603          	lw	a2,0(s2)
1c0055ee:	6599                	lui	a1,0x6
1c0055f0:	71058593          	addi	a1,a1,1808 # 6710 <__rt_stack_size+0x5f10>
1c0055f4:	962e                	add	a2,a2,a1
1c0055f6:	95aa                	add	a1,a1,a0
1c0055f8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0055fa:	4805                	li	a6,1
1c0055fc:	101c                	addi	a5,sp,32
1c0055fe:	4705                	li	a4,1
1c005600:	46c1                	li	a3,16
1c005602:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005604:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005606:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005608:	02010a23          	sb	zero,52(sp)
1c00560c:	3ae040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005610:	03410783          	lb	a5,52(sp)
1c005614:	ef89                	bnez	a5,1c00562e <quant_modelCNN_Construct+0x15b6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005616:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00561a:	4585                	li	a1,1
1c00561c:	01c00513          	li	a0,28
1c005620:	44d060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005624:	300a9073          	csrw	mstatus,s5
1c005628:	03410783          	lb	a5,52(sp)
1c00562c:	d7ed                	beqz	a5,1c005616 <quant_modelCNN_Construct+0x159e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27240), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27240), 9, 0, &UchanHF1);
1c00562e:	60c9a503          	lw	a0,1548(s3)
1c005632:	00092603          	lw	a2,0(s2)
1c005636:	659d                	lui	a1,0x7
1c005638:	a6858593          	addi	a1,a1,-1432 # 6a68 <__rt_stack_size+0x6268>
1c00563c:	962e                	add	a2,a2,a1
1c00563e:	95aa                	add	a1,a1,a0
1c005640:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005642:	4805                	li	a6,1
1c005644:	101c                	addi	a5,sp,32
1c005646:	4705                	li	a4,1
1c005648:	46a5                	li	a3,9
1c00564a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00564c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00564e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005650:	02010a23          	sb	zero,52(sp)
1c005654:	366040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005658:	03410783          	lb	a5,52(sp)
1c00565c:	ef89                	bnez	a5,1c005676 <quant_modelCNN_Construct+0x15fe>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00565e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005662:	4585                	li	a1,1
1c005664:	01c00513          	li	a0,28
1c005668:	405060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00566c:	300a9073          	csrw	mstatus,s5
1c005670:	03410783          	lb	a5,52(sp)
1c005674:	d7ed                	beqz	a5,1c00565e <quant_modelCNN_Construct+0x15e6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27252), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27252), 9, 0, &UchanHF1);
1c005676:	60c9a503          	lw	a0,1548(s3)
1c00567a:	00092603          	lw	a2,0(s2)
1c00567e:	659d                	lui	a1,0x7
1c005680:	a7458593          	addi	a1,a1,-1420 # 6a74 <__rt_stack_size+0x6274>
1c005684:	962e                	add	a2,a2,a1
1c005686:	95aa                	add	a1,a1,a0
1c005688:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00568a:	4805                	li	a6,1
1c00568c:	101c                	addi	a5,sp,32
1c00568e:	4705                	li	a4,1
1c005690:	46a5                	li	a3,9
1c005692:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005694:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005696:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005698:	02010a23          	sb	zero,52(sp)
1c00569c:	31e040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0056a0:	03410783          	lb	a5,52(sp)
1c0056a4:	ef89                	bnez	a5,1c0056be <quant_modelCNN_Construct+0x1646>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0056a6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0056aa:	4585                	li	a1,1
1c0056ac:	01c00513          	li	a0,28
1c0056b0:	3bd060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0056b4:	300a9073          	csrw	mstatus,s5
1c0056b8:	03410783          	lb	a5,52(sp)
1c0056bc:	d7ed                	beqz	a5,1c0056a6 <quant_modelCNN_Construct+0x162e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27264), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27264), 9, 0, &UchanHF1);
1c0056be:	60c9a503          	lw	a0,1548(s3)
1c0056c2:	00092603          	lw	a2,0(s2)
1c0056c6:	659d                	lui	a1,0x7
1c0056c8:	a8058593          	addi	a1,a1,-1408 # 6a80 <__rt_stack_size+0x6280>
1c0056cc:	962e                	add	a2,a2,a1
1c0056ce:	95aa                	add	a1,a1,a0
1c0056d0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0056d2:	4805                	li	a6,1
1c0056d4:	101c                	addi	a5,sp,32
1c0056d6:	4705                	li	a4,1
1c0056d8:	46a5                	li	a3,9
1c0056da:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0056dc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0056de:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0056e0:	02010a23          	sb	zero,52(sp)
1c0056e4:	2d6040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0056e8:	03410783          	lb	a5,52(sp)
1c0056ec:	ef89                	bnez	a5,1c005706 <quant_modelCNN_Construct+0x168e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0056ee:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0056f2:	4585                	li	a1,1
1c0056f4:	01c00513          	li	a0,28
1c0056f8:	375060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0056fc:	300a9073          	csrw	mstatus,s5
1c005700:	03410783          	lb	a5,52(sp)
1c005704:	d7ed                	beqz	a5,1c0056ee <quant_modelCNN_Construct+0x1676>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 10176), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 10176), 768, 0, &UchanHF1);
1c005706:	60c9a503          	lw	a0,1548(s3)
1c00570a:	00092603          	lw	a2,0(s2)
1c00570e:	6589                	lui	a1,0x2
1c005710:	7c058593          	addi	a1,a1,1984 # 27c0 <__rt_stack_size+0x1fc0>
1c005714:	962e                	add	a2,a2,a1
1c005716:	95aa                	add	a1,a1,a0
1c005718:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00571a:	4805                	li	a6,1
1c00571c:	101c                	addi	a5,sp,32
1c00571e:	4705                	li	a4,1
1c005720:	30000693          	li	a3,768
1c005724:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005726:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005728:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00572a:	02010a23          	sb	zero,52(sp)
1c00572e:	28c040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005732:	03410783          	lb	a5,52(sp)
1c005736:	ef89                	bnez	a5,1c005750 <quant_modelCNN_Construct+0x16d8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005738:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00573c:	4585                	li	a1,1
1c00573e:	01c00513          	li	a0,28
1c005742:	32b060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005746:	300a9073          	csrw	mstatus,s5
1c00574a:	03410783          	lb	a5,52(sp)
1c00574e:	d7ed                	beqz	a5,1c005738 <quant_modelCNN_Construct+0x16c0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24832), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24832), 64, 0, &UchanHF1);
1c005750:	60c9a503          	lw	a0,1548(s3)
1c005754:	00092603          	lw	a2,0(s2)
1c005758:	6599                	lui	a1,0x6
1c00575a:	10058593          	addi	a1,a1,256 # 6100 <__rt_stack_size+0x5900>
1c00575e:	962e                	add	a2,a2,a1
1c005760:	95aa                	add	a1,a1,a0
1c005762:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005764:	4805                	li	a6,1
1c005766:	101c                	addi	a5,sp,32
1c005768:	4705                	li	a4,1
1c00576a:	04000693          	li	a3,64
1c00576e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005770:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005772:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005774:	02010a23          	sb	zero,52(sp)
1c005778:	242040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00577c:	03410783          	lb	a5,52(sp)
1c005780:	ef89                	bnez	a5,1c00579a <quant_modelCNN_Construct+0x1722>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005782:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005786:	4585                	li	a1,1
1c005788:	01c00513          	li	a0,28
1c00578c:	2e1060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005790:	300a9073          	csrw	mstatus,s5
1c005794:	03410783          	lb	a5,52(sp)
1c005798:	d7ed                	beqz	a5,1c005782 <quant_modelCNN_Construct+0x170a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26400), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26400), 16, 0, &UchanHF1);
1c00579a:	60c9a503          	lw	a0,1548(s3)
1c00579e:	00092603          	lw	a2,0(s2)
1c0057a2:	6599                	lui	a1,0x6
1c0057a4:	72058593          	addi	a1,a1,1824 # 6720 <__rt_stack_size+0x5f20>
1c0057a8:	962e                	add	a2,a2,a1
1c0057aa:	95aa                	add	a1,a1,a0
1c0057ac:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0057ae:	4805                	li	a6,1
1c0057b0:	101c                	addi	a5,sp,32
1c0057b2:	4705                	li	a4,1
1c0057b4:	46c1                	li	a3,16
1c0057b6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0057b8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0057ba:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0057bc:	02010a23          	sb	zero,52(sp)
1c0057c0:	1fa040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0057c4:	03410783          	lb	a5,52(sp)
1c0057c8:	ef89                	bnez	a5,1c0057e2 <quant_modelCNN_Construct+0x176a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0057ca:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0057ce:	4585                	li	a1,1
1c0057d0:	01c00513          	li	a0,28
1c0057d4:	299060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0057d8:	300a9073          	csrw	mstatus,s5
1c0057dc:	03410783          	lb	a5,52(sp)
1c0057e0:	d7ed                	beqz	a5,1c0057ca <quant_modelCNN_Construct+0x1752>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26416), 16, 0, &UchanHF1);
1c0057e2:	60c9a503          	lw	a0,1548(s3)
1c0057e6:	00092603          	lw	a2,0(s2)
1c0057ea:	6599                	lui	a1,0x6
1c0057ec:	73058593          	addi	a1,a1,1840 # 6730 <__rt_stack_size+0x5f30>
1c0057f0:	962e                	add	a2,a2,a1
1c0057f2:	95aa                	add	a1,a1,a0
1c0057f4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0057f6:	4805                	li	a6,1
1c0057f8:	101c                	addi	a5,sp,32
1c0057fa:	4705                	li	a4,1
1c0057fc:	46c1                	li	a3,16
1c0057fe:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005800:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005802:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005804:	02010a23          	sb	zero,52(sp)
1c005808:	1b2040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00580c:	03410783          	lb	a5,52(sp)
1c005810:	ef89                	bnez	a5,1c00582a <quant_modelCNN_Construct+0x17b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005812:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005816:	4585                	li	a1,1
1c005818:	01c00513          	li	a0,28
1c00581c:	251060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005820:	300a9073          	csrw	mstatus,s5
1c005824:	03410783          	lb	a5,52(sp)
1c005828:	d7ed                	beqz	a5,1c005812 <quant_modelCNN_Construct+0x179a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27276), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27276), 9, 0, &UchanHF1);
1c00582a:	60c9a503          	lw	a0,1548(s3)
1c00582e:	00092603          	lw	a2,0(s2)
1c005832:	659d                	lui	a1,0x7
1c005834:	a8c58593          	addi	a1,a1,-1396 # 6a8c <__rt_stack_size+0x628c>
1c005838:	962e                	add	a2,a2,a1
1c00583a:	95aa                	add	a1,a1,a0
1c00583c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00583e:	4805                	li	a6,1
1c005840:	101c                	addi	a5,sp,32
1c005842:	4705                	li	a4,1
1c005844:	46a5                	li	a3,9
1c005846:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005848:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00584a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00584c:	02010a23          	sb	zero,52(sp)
1c005850:	16a040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005854:	03410783          	lb	a5,52(sp)
1c005858:	ef89                	bnez	a5,1c005872 <quant_modelCNN_Construct+0x17fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00585a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00585e:	4585                	li	a1,1
1c005860:	01c00513          	li	a0,28
1c005864:	209060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005868:	300a9073          	csrw	mstatus,s5
1c00586c:	03410783          	lb	a5,52(sp)
1c005870:	d7ed                	beqz	a5,1c00585a <quant_modelCNN_Construct+0x17e2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 10944), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 10944), 768, 0, &UchanHF1);
1c005872:	60c9a503          	lw	a0,1548(s3)
1c005876:	00092603          	lw	a2,0(s2)
1c00587a:	658d                	lui	a1,0x3
1c00587c:	ac058593          	addi	a1,a1,-1344 # 2ac0 <__rt_stack_size+0x22c0>
1c005880:	962e                	add	a2,a2,a1
1c005882:	95aa                	add	a1,a1,a0
1c005884:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005886:	4805                	li	a6,1
1c005888:	101c                	addi	a5,sp,32
1c00588a:	4705                	li	a4,1
1c00588c:	30000693          	li	a3,768
1c005890:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005892:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005894:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005896:	02010a23          	sb	zero,52(sp)
1c00589a:	120040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00589e:	03410783          	lb	a5,52(sp)
1c0058a2:	ef89                	bnez	a5,1c0058bc <quant_modelCNN_Construct+0x1844>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058a4:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0058a8:	4585                	li	a1,1
1c0058aa:	01c00513          	li	a0,28
1c0058ae:	1bf060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0058b2:	300a9073          	csrw	mstatus,s5
1c0058b6:	03410783          	lb	a5,52(sp)
1c0058ba:	d7ed                	beqz	a5,1c0058a4 <quant_modelCNN_Construct+0x182c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24896), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24896), 64, 0, &UchanHF1);
1c0058bc:	60c9a503          	lw	a0,1548(s3)
1c0058c0:	00092603          	lw	a2,0(s2)
1c0058c4:	6599                	lui	a1,0x6
1c0058c6:	14058593          	addi	a1,a1,320 # 6140 <__rt_stack_size+0x5940>
1c0058ca:	962e                	add	a2,a2,a1
1c0058cc:	95aa                	add	a1,a1,a0
1c0058ce:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0058d0:	4805                	li	a6,1
1c0058d2:	101c                	addi	a5,sp,32
1c0058d4:	4705                	li	a4,1
1c0058d6:	04000693          	li	a3,64
1c0058da:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0058dc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0058de:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0058e0:	02010a23          	sb	zero,52(sp)
1c0058e4:	0d6040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0058e8:	03410783          	lb	a5,52(sp)
1c0058ec:	ef89                	bnez	a5,1c005906 <quant_modelCNN_Construct+0x188e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058ee:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0058f2:	4585                	li	a1,1
1c0058f4:	01c00513          	li	a0,28
1c0058f8:	175060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0058fc:	300a9073          	csrw	mstatus,s5
1c005900:	03410783          	lb	a5,52(sp)
1c005904:	d7ed                	beqz	a5,1c0058ee <quant_modelCNN_Construct+0x1876>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26432), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26432), 16, 0, &UchanHF1);
1c005906:	60c9a503          	lw	a0,1548(s3)
1c00590a:	00092603          	lw	a2,0(s2)
1c00590e:	6599                	lui	a1,0x6
1c005910:	74058593          	addi	a1,a1,1856 # 6740 <__rt_stack_size+0x5f40>
1c005914:	962e                	add	a2,a2,a1
1c005916:	95aa                	add	a1,a1,a0
1c005918:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00591a:	4805                	li	a6,1
1c00591c:	101c                	addi	a5,sp,32
1c00591e:	4705                	li	a4,1
1c005920:	46c1                	li	a3,16
1c005922:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005924:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005926:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005928:	02010a23          	sb	zero,52(sp)
1c00592c:	08e040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005930:	03410783          	lb	a5,52(sp)
1c005934:	ef89                	bnez	a5,1c00594e <quant_modelCNN_Construct+0x18d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005936:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00593a:	4585                	li	a1,1
1c00593c:	01c00513          	li	a0,28
1c005940:	12d060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005944:	300a9073          	csrw	mstatus,s5
1c005948:	03410783          	lb	a5,52(sp)
1c00594c:	d7ed                	beqz	a5,1c005936 <quant_modelCNN_Construct+0x18be>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26448), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26448), 16, 0, &UchanHF1);
1c00594e:	60c9a503          	lw	a0,1548(s3)
1c005952:	00092603          	lw	a2,0(s2)
1c005956:	6599                	lui	a1,0x6
1c005958:	75058593          	addi	a1,a1,1872 # 6750 <__rt_stack_size+0x5f50>
1c00595c:	962e                	add	a2,a2,a1
1c00595e:	95aa                	add	a1,a1,a0
1c005960:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005962:	4805                	li	a6,1
1c005964:	101c                	addi	a5,sp,32
1c005966:	4705                	li	a4,1
1c005968:	46c1                	li	a3,16
1c00596a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00596c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00596e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005970:	02010a23          	sb	zero,52(sp)
1c005974:	046040ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005978:	03410783          	lb	a5,52(sp)
1c00597c:	ef89                	bnez	a5,1c005996 <quant_modelCNN_Construct+0x191e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00597e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005982:	4585                	li	a1,1
1c005984:	01c00513          	li	a0,28
1c005988:	0e5060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00598c:	300a9073          	csrw	mstatus,s5
1c005990:	03410783          	lb	a5,52(sp)
1c005994:	d7ed                	beqz	a5,1c00597e <quant_modelCNN_Construct+0x1906>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27288), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27288), 9, 0, &UchanHF1);
1c005996:	60c9a503          	lw	a0,1548(s3)
1c00599a:	00092603          	lw	a2,0(s2)
1c00599e:	659d                	lui	a1,0x7
1c0059a0:	a9858593          	addi	a1,a1,-1384 # 6a98 <__rt_stack_size+0x6298>
1c0059a4:	962e                	add	a2,a2,a1
1c0059a6:	95aa                	add	a1,a1,a0
1c0059a8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0059aa:	4805                	li	a6,1
1c0059ac:	101c                	addi	a5,sp,32
1c0059ae:	4705                	li	a4,1
1c0059b0:	46a5                	li	a3,9
1c0059b2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0059b4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0059b6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0059b8:	02010a23          	sb	zero,52(sp)
1c0059bc:	7ff030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0059c0:	03410783          	lb	a5,52(sp)
1c0059c4:	ef89                	bnez	a5,1c0059de <quant_modelCNN_Construct+0x1966>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0059c6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0059ca:	4585                	li	a1,1
1c0059cc:	01c00513          	li	a0,28
1c0059d0:	09d060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0059d4:	300a9073          	csrw	mstatus,s5
1c0059d8:	03410783          	lb	a5,52(sp)
1c0059dc:	d7ed                	beqz	a5,1c0059c6 <quant_modelCNN_Construct+0x194e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27300), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27300), 9, 0, &UchanHF1);
1c0059de:	60c9a503          	lw	a0,1548(s3)
1c0059e2:	00092603          	lw	a2,0(s2)
1c0059e6:	659d                	lui	a1,0x7
1c0059e8:	aa458593          	addi	a1,a1,-1372 # 6aa4 <__rt_stack_size+0x62a4>
1c0059ec:	962e                	add	a2,a2,a1
1c0059ee:	95aa                	add	a1,a1,a0
1c0059f0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0059f2:	4805                	li	a6,1
1c0059f4:	101c                	addi	a5,sp,32
1c0059f6:	4705                	li	a4,1
1c0059f8:	46a5                	li	a3,9
1c0059fa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0059fc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0059fe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005a00:	02010a23          	sb	zero,52(sp)
1c005a04:	7b7030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005a08:	03410783          	lb	a5,52(sp)
1c005a0c:	ef89                	bnez	a5,1c005a26 <quant_modelCNN_Construct+0x19ae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005a0e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005a12:	4585                	li	a1,1
1c005a14:	01c00513          	li	a0,28
1c005a18:	055060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005a1c:	300a9073          	csrw	mstatus,s5
1c005a20:	03410783          	lb	a5,52(sp)
1c005a24:	d7ed                	beqz	a5,1c005a0e <quant_modelCNN_Construct+0x1996>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27312), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27312), 9, 0, &UchanHF1);
1c005a26:	60c9a503          	lw	a0,1548(s3)
1c005a2a:	00092603          	lw	a2,0(s2)
1c005a2e:	659d                	lui	a1,0x7
1c005a30:	ab058593          	addi	a1,a1,-1360 # 6ab0 <__rt_stack_size+0x62b0>
1c005a34:	962e                	add	a2,a2,a1
1c005a36:	95aa                	add	a1,a1,a0
1c005a38:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005a3a:	4805                	li	a6,1
1c005a3c:	101c                	addi	a5,sp,32
1c005a3e:	4705                	li	a4,1
1c005a40:	46a5                	li	a3,9
1c005a42:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005a44:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005a46:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005a48:	02010a23          	sb	zero,52(sp)
1c005a4c:	76f030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005a50:	03410783          	lb	a5,52(sp)
1c005a54:	ef89                	bnez	a5,1c005a6e <quant_modelCNN_Construct+0x19f6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005a56:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005a5a:	4585                	li	a1,1
1c005a5c:	01c00513          	li	a0,28
1c005a60:	00d060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005a64:	300a9073          	csrw	mstatus,s5
1c005a68:	03410783          	lb	a5,52(sp)
1c005a6c:	d7ed                	beqz	a5,1c005a56 <quant_modelCNN_Construct+0x19de>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 11712), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 11712), 768, 0, &UchanHF1);
1c005a6e:	60c9a503          	lw	a0,1548(s3)
1c005a72:	00092603          	lw	a2,0(s2)
1c005a76:	658d                	lui	a1,0x3
1c005a78:	dc058593          	addi	a1,a1,-576 # 2dc0 <__rt_stack_size+0x25c0>
1c005a7c:	962e                	add	a2,a2,a1
1c005a7e:	95aa                	add	a1,a1,a0
1c005a80:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005a82:	4805                	li	a6,1
1c005a84:	101c                	addi	a5,sp,32
1c005a86:	4705                	li	a4,1
1c005a88:	30000693          	li	a3,768
1c005a8c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005a8e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005a90:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005a92:	02010a23          	sb	zero,52(sp)
1c005a96:	725030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005a9a:	03410783          	lb	a5,52(sp)
1c005a9e:	ef89                	bnez	a5,1c005ab8 <quant_modelCNN_Construct+0x1a40>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005aa0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005aa4:	4585                	li	a1,1
1c005aa6:	01c00513          	li	a0,28
1c005aaa:	7c2060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005aae:	300a9073          	csrw	mstatus,s5
1c005ab2:	03410783          	lb	a5,52(sp)
1c005ab6:	d7ed                	beqz	a5,1c005aa0 <quant_modelCNN_Construct+0x1a28>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 24960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 24960), 64, 0, &UchanHF1);
1c005ab8:	60c9a503          	lw	a0,1548(s3)
1c005abc:	00092603          	lw	a2,0(s2)
1c005ac0:	6599                	lui	a1,0x6
1c005ac2:	18058593          	addi	a1,a1,384 # 6180 <__rt_stack_size+0x5980>
1c005ac6:	962e                	add	a2,a2,a1
1c005ac8:	95aa                	add	a1,a1,a0
1c005aca:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005acc:	4805                	li	a6,1
1c005ace:	101c                	addi	a5,sp,32
1c005ad0:	4705                	li	a4,1
1c005ad2:	04000693          	li	a3,64
1c005ad6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005ad8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005ada:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005adc:	02010a23          	sb	zero,52(sp)
1c005ae0:	6db030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005ae4:	03410783          	lb	a5,52(sp)
1c005ae8:	ef89                	bnez	a5,1c005b02 <quant_modelCNN_Construct+0x1a8a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005aea:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005aee:	4585                	li	a1,1
1c005af0:	01c00513          	li	a0,28
1c005af4:	778060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005af8:	300a9073          	csrw	mstatus,s5
1c005afc:	03410783          	lb	a5,52(sp)
1c005b00:	d7ed                	beqz	a5,1c005aea <quant_modelCNN_Construct+0x1a72>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26464), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26464), 16, 0, &UchanHF1);
1c005b02:	60c9a503          	lw	a0,1548(s3)
1c005b06:	00092603          	lw	a2,0(s2)
1c005b0a:	6599                	lui	a1,0x6
1c005b0c:	76058593          	addi	a1,a1,1888 # 6760 <__rt_stack_size+0x5f60>
1c005b10:	962e                	add	a2,a2,a1
1c005b12:	95aa                	add	a1,a1,a0
1c005b14:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005b16:	4805                	li	a6,1
1c005b18:	101c                	addi	a5,sp,32
1c005b1a:	4705                	li	a4,1
1c005b1c:	46c1                	li	a3,16
1c005b1e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005b20:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005b22:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005b24:	02010a23          	sb	zero,52(sp)
1c005b28:	693030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005b2c:	03410783          	lb	a5,52(sp)
1c005b30:	ef89                	bnez	a5,1c005b4a <quant_modelCNN_Construct+0x1ad2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b32:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005b36:	4585                	li	a1,1
1c005b38:	01c00513          	li	a0,28
1c005b3c:	730060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005b40:	300a9073          	csrw	mstatus,s5
1c005b44:	03410783          	lb	a5,52(sp)
1c005b48:	d7ed                	beqz	a5,1c005b32 <quant_modelCNN_Construct+0x1aba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26480), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26480), 16, 0, &UchanHF1);
1c005b4a:	60c9a503          	lw	a0,1548(s3)
1c005b4e:	00092603          	lw	a2,0(s2)
1c005b52:	6599                	lui	a1,0x6
1c005b54:	77058593          	addi	a1,a1,1904 # 6770 <__rt_stack_size+0x5f70>
1c005b58:	962e                	add	a2,a2,a1
1c005b5a:	95aa                	add	a1,a1,a0
1c005b5c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005b5e:	4805                	li	a6,1
1c005b60:	101c                	addi	a5,sp,32
1c005b62:	4705                	li	a4,1
1c005b64:	46c1                	li	a3,16
1c005b66:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005b68:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005b6a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005b6c:	02010a23          	sb	zero,52(sp)
1c005b70:	64b030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005b74:	03410783          	lb	a5,52(sp)
1c005b78:	ef89                	bnez	a5,1c005b92 <quant_modelCNN_Construct+0x1b1a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b7a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005b7e:	4585                	li	a1,1
1c005b80:	01c00513          	li	a0,28
1c005b84:	6e8060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005b88:	300a9073          	csrw	mstatus,s5
1c005b8c:	03410783          	lb	a5,52(sp)
1c005b90:	d7ed                	beqz	a5,1c005b7a <quant_modelCNN_Construct+0x1b02>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27324), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27324), 9, 0, &UchanHF1);
1c005b92:	60c9a503          	lw	a0,1548(s3)
1c005b96:	00092603          	lw	a2,0(s2)
1c005b9a:	659d                	lui	a1,0x7
1c005b9c:	abc58593          	addi	a1,a1,-1348 # 6abc <__rt_stack_size+0x62bc>
1c005ba0:	962e                	add	a2,a2,a1
1c005ba2:	95aa                	add	a1,a1,a0
1c005ba4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005ba6:	4805                	li	a6,1
1c005ba8:	101c                	addi	a5,sp,32
1c005baa:	4705                	li	a4,1
1c005bac:	46a5                	li	a3,9
1c005bae:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005bb0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005bb2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005bb4:	02010a23          	sb	zero,52(sp)
1c005bb8:	603030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005bbc:	03410783          	lb	a5,52(sp)
1c005bc0:	ef89                	bnez	a5,1c005bda <quant_modelCNN_Construct+0x1b62>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005bc2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005bc6:	4585                	li	a1,1
1c005bc8:	01c00513          	li	a0,28
1c005bcc:	6a0060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005bd0:	300a9073          	csrw	mstatus,s5
1c005bd4:	03410783          	lb	a5,52(sp)
1c005bd8:	d7ed                	beqz	a5,1c005bc2 <quant_modelCNN_Construct+0x1b4a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 12480), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 12480), 768, 0, &UchanHF1);
1c005bda:	60c9a503          	lw	a0,1548(s3)
1c005bde:	00092603          	lw	a2,0(s2)
1c005be2:	658d                	lui	a1,0x3
1c005be4:	0c058593          	addi	a1,a1,192 # 30c0 <__rt_stack_size+0x28c0>
1c005be8:	962e                	add	a2,a2,a1
1c005bea:	95aa                	add	a1,a1,a0
1c005bec:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005bee:	4805                	li	a6,1
1c005bf0:	101c                	addi	a5,sp,32
1c005bf2:	4705                	li	a4,1
1c005bf4:	30000693          	li	a3,768
1c005bf8:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005bfa:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005bfc:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005bfe:	02010a23          	sb	zero,52(sp)
1c005c02:	5b9030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005c06:	03410783          	lb	a5,52(sp)
1c005c0a:	ef89                	bnez	a5,1c005c24 <quant_modelCNN_Construct+0x1bac>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c0c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005c10:	4585                	li	a1,1
1c005c12:	01c00513          	li	a0,28
1c005c16:	656060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005c1a:	300a9073          	csrw	mstatus,s5
1c005c1e:	03410783          	lb	a5,52(sp)
1c005c22:	d7ed                	beqz	a5,1c005c0c <quant_modelCNN_Construct+0x1b94>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25024), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25024), 64, 0, &UchanHF1);
1c005c24:	60c9a503          	lw	a0,1548(s3)
1c005c28:	00092603          	lw	a2,0(s2)
1c005c2c:	6599                	lui	a1,0x6
1c005c2e:	1c058593          	addi	a1,a1,448 # 61c0 <__rt_stack_size+0x59c0>
1c005c32:	962e                	add	a2,a2,a1
1c005c34:	95aa                	add	a1,a1,a0
1c005c36:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005c38:	4805                	li	a6,1
1c005c3a:	101c                	addi	a5,sp,32
1c005c3c:	4705                	li	a4,1
1c005c3e:	04000693          	li	a3,64
1c005c42:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005c44:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005c46:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005c48:	02010a23          	sb	zero,52(sp)
1c005c4c:	56f030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005c50:	03410783          	lb	a5,52(sp)
1c005c54:	ef89                	bnez	a5,1c005c6e <quant_modelCNN_Construct+0x1bf6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c56:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005c5a:	4585                	li	a1,1
1c005c5c:	01c00513          	li	a0,28
1c005c60:	60c060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005c64:	300a9073          	csrw	mstatus,s5
1c005c68:	03410783          	lb	a5,52(sp)
1c005c6c:	d7ed                	beqz	a5,1c005c56 <quant_modelCNN_Construct+0x1bde>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26496), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26496), 16, 0, &UchanHF1);
1c005c6e:	60c9a503          	lw	a0,1548(s3)
1c005c72:	00092603          	lw	a2,0(s2)
1c005c76:	6599                	lui	a1,0x6
1c005c78:	78058593          	addi	a1,a1,1920 # 6780 <__rt_stack_size+0x5f80>
1c005c7c:	962e                	add	a2,a2,a1
1c005c7e:	95aa                	add	a1,a1,a0
1c005c80:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005c82:	4805                	li	a6,1
1c005c84:	101c                	addi	a5,sp,32
1c005c86:	4705                	li	a4,1
1c005c88:	46c1                	li	a3,16
1c005c8a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005c8c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005c8e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005c90:	02010a23          	sb	zero,52(sp)
1c005c94:	527030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005c98:	03410783          	lb	a5,52(sp)
1c005c9c:	ef89                	bnez	a5,1c005cb6 <quant_modelCNN_Construct+0x1c3e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c9e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005ca2:	4585                	li	a1,1
1c005ca4:	01c00513          	li	a0,28
1c005ca8:	5c4060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005cac:	300a9073          	csrw	mstatus,s5
1c005cb0:	03410783          	lb	a5,52(sp)
1c005cb4:	d7ed                	beqz	a5,1c005c9e <quant_modelCNN_Construct+0x1c26>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26512), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26512), 16, 0, &UchanHF1);
1c005cb6:	60c9a503          	lw	a0,1548(s3)
1c005cba:	00092603          	lw	a2,0(s2)
1c005cbe:	6599                	lui	a1,0x6
1c005cc0:	79058593          	addi	a1,a1,1936 # 6790 <__rt_stack_size+0x5f90>
1c005cc4:	962e                	add	a2,a2,a1
1c005cc6:	95aa                	add	a1,a1,a0
1c005cc8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005cca:	4805                	li	a6,1
1c005ccc:	101c                	addi	a5,sp,32
1c005cce:	4705                	li	a4,1
1c005cd0:	46c1                	li	a3,16
1c005cd2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005cd4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005cd6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005cd8:	02010a23          	sb	zero,52(sp)
1c005cdc:	4df030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005ce0:	03410783          	lb	a5,52(sp)
1c005ce4:	ef89                	bnez	a5,1c005cfe <quant_modelCNN_Construct+0x1c86>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ce6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005cea:	4585                	li	a1,1
1c005cec:	01c00513          	li	a0,28
1c005cf0:	57c060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005cf4:	300a9073          	csrw	mstatus,s5
1c005cf8:	03410783          	lb	a5,52(sp)
1c005cfc:	d7ed                	beqz	a5,1c005ce6 <quant_modelCNN_Construct+0x1c6e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27336), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27336), 9, 0, &UchanHF1);
1c005cfe:	60c9a503          	lw	a0,1548(s3)
1c005d02:	00092603          	lw	a2,0(s2)
1c005d06:	659d                	lui	a1,0x7
1c005d08:	ac858593          	addi	a1,a1,-1336 # 6ac8 <__rt_stack_size+0x62c8>
1c005d0c:	962e                	add	a2,a2,a1
1c005d0e:	95aa                	add	a1,a1,a0
1c005d10:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005d12:	4805                	li	a6,1
1c005d14:	101c                	addi	a5,sp,32
1c005d16:	4705                	li	a4,1
1c005d18:	46a5                	li	a3,9
1c005d1a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005d1c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005d1e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005d20:	02010a23          	sb	zero,52(sp)
1c005d24:	497030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005d28:	03410783          	lb	a5,52(sp)
1c005d2c:	ef89                	bnez	a5,1c005d46 <quant_modelCNN_Construct+0x1cce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d2e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005d32:	4585                	li	a1,1
1c005d34:	01c00513          	li	a0,28
1c005d38:	534060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005d3c:	300a9073          	csrw	mstatus,s5
1c005d40:	03410783          	lb	a5,52(sp)
1c005d44:	d7ed                	beqz	a5,1c005d2e <quant_modelCNN_Construct+0x1cb6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27348), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27348), 9, 0, &UchanHF1);
1c005d46:	60c9a503          	lw	a0,1548(s3)
1c005d4a:	00092603          	lw	a2,0(s2)
1c005d4e:	659d                	lui	a1,0x7
1c005d50:	ad458593          	addi	a1,a1,-1324 # 6ad4 <__rt_stack_size+0x62d4>
1c005d54:	962e                	add	a2,a2,a1
1c005d56:	95aa                	add	a1,a1,a0
1c005d58:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005d5a:	4805                	li	a6,1
1c005d5c:	101c                	addi	a5,sp,32
1c005d5e:	4705                	li	a4,1
1c005d60:	46a5                	li	a3,9
1c005d62:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005d64:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005d66:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005d68:	02010a23          	sb	zero,52(sp)
1c005d6c:	44f030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005d70:	03410783          	lb	a5,52(sp)
1c005d74:	ef89                	bnez	a5,1c005d8e <quant_modelCNN_Construct+0x1d16>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d76:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005d7a:	4585                	li	a1,1
1c005d7c:	01c00513          	li	a0,28
1c005d80:	4ec060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005d84:	300a9073          	csrw	mstatus,s5
1c005d88:	03410783          	lb	a5,52(sp)
1c005d8c:	d7ed                	beqz	a5,1c005d76 <quant_modelCNN_Construct+0x1cfe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27360), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27360), 9, 0, &UchanHF1);
1c005d8e:	60c9a503          	lw	a0,1548(s3)
1c005d92:	00092603          	lw	a2,0(s2)
1c005d96:	659d                	lui	a1,0x7
1c005d98:	ae058593          	addi	a1,a1,-1312 # 6ae0 <__rt_stack_size+0x62e0>
1c005d9c:	962e                	add	a2,a2,a1
1c005d9e:	95aa                	add	a1,a1,a0
1c005da0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005da2:	4805                	li	a6,1
1c005da4:	101c                	addi	a5,sp,32
1c005da6:	4705                	li	a4,1
1c005da8:	46a5                	li	a3,9
1c005daa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005dac:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005dae:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005db0:	02010a23          	sb	zero,52(sp)
1c005db4:	407030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005db8:	03410783          	lb	a5,52(sp)
1c005dbc:	ef89                	bnez	a5,1c005dd6 <quant_modelCNN_Construct+0x1d5e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005dbe:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005dc2:	4585                	li	a1,1
1c005dc4:	01c00513          	li	a0,28
1c005dc8:	4a4060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005dcc:	300a9073          	csrw	mstatus,s5
1c005dd0:	03410783          	lb	a5,52(sp)
1c005dd4:	d7ed                	beqz	a5,1c005dbe <quant_modelCNN_Construct+0x1d46>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 13248), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 13248), 768, 0, &UchanHF1);
1c005dd6:	60c9a503          	lw	a0,1548(s3)
1c005dda:	00092603          	lw	a2,0(s2)
1c005dde:	658d                	lui	a1,0x3
1c005de0:	3c058593          	addi	a1,a1,960 # 33c0 <__rt_stack_size+0x2bc0>
1c005de4:	962e                	add	a2,a2,a1
1c005de6:	95aa                	add	a1,a1,a0
1c005de8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005dea:	4805                	li	a6,1
1c005dec:	101c                	addi	a5,sp,32
1c005dee:	4705                	li	a4,1
1c005df0:	30000693          	li	a3,768
1c005df4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005df6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005df8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005dfa:	02010a23          	sb	zero,52(sp)
1c005dfe:	3bd030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005e02:	03410783          	lb	a5,52(sp)
1c005e06:	ef89                	bnez	a5,1c005e20 <quant_modelCNN_Construct+0x1da8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e08:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005e0c:	4585                	li	a1,1
1c005e0e:	01c00513          	li	a0,28
1c005e12:	45a060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005e16:	300a9073          	csrw	mstatus,s5
1c005e1a:	03410783          	lb	a5,52(sp)
1c005e1e:	d7ed                	beqz	a5,1c005e08 <quant_modelCNN_Construct+0x1d90>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25088), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25088), 64, 0, &UchanHF1);
1c005e20:	60c9a503          	lw	a0,1548(s3)
1c005e24:	00092603          	lw	a2,0(s2)
1c005e28:	6599                	lui	a1,0x6
1c005e2a:	20058593          	addi	a1,a1,512 # 6200 <__rt_stack_size+0x5a00>
1c005e2e:	962e                	add	a2,a2,a1
1c005e30:	95aa                	add	a1,a1,a0
1c005e32:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005e34:	4805                	li	a6,1
1c005e36:	101c                	addi	a5,sp,32
1c005e38:	4705                	li	a4,1
1c005e3a:	04000693          	li	a3,64
1c005e3e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005e40:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005e42:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005e44:	02010a23          	sb	zero,52(sp)
1c005e48:	373030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005e4c:	03410783          	lb	a5,52(sp)
1c005e50:	ef89                	bnez	a5,1c005e6a <quant_modelCNN_Construct+0x1df2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e52:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005e56:	4585                	li	a1,1
1c005e58:	01c00513          	li	a0,28
1c005e5c:	410060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005e60:	300a9073          	csrw	mstatus,s5
1c005e64:	03410783          	lb	a5,52(sp)
1c005e68:	d7ed                	beqz	a5,1c005e52 <quant_modelCNN_Construct+0x1dda>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26528), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26528), 16, 0, &UchanHF1);
1c005e6a:	60c9a503          	lw	a0,1548(s3)
1c005e6e:	00092603          	lw	a2,0(s2)
1c005e72:	6599                	lui	a1,0x6
1c005e74:	7a058593          	addi	a1,a1,1952 # 67a0 <__rt_stack_size+0x5fa0>
1c005e78:	962e                	add	a2,a2,a1
1c005e7a:	95aa                	add	a1,a1,a0
1c005e7c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005e7e:	4805                	li	a6,1
1c005e80:	101c                	addi	a5,sp,32
1c005e82:	4705                	li	a4,1
1c005e84:	46c1                	li	a3,16
1c005e86:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005e88:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005e8a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005e8c:	02010a23          	sb	zero,52(sp)
1c005e90:	32b030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005e94:	03410783          	lb	a5,52(sp)
1c005e98:	ef89                	bnez	a5,1c005eb2 <quant_modelCNN_Construct+0x1e3a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e9a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005e9e:	4585                	li	a1,1
1c005ea0:	01c00513          	li	a0,28
1c005ea4:	3c8060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005ea8:	300a9073          	csrw	mstatus,s5
1c005eac:	03410783          	lb	a5,52(sp)
1c005eb0:	d7ed                	beqz	a5,1c005e9a <quant_modelCNN_Construct+0x1e22>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26544), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26544), 16, 0, &UchanHF1);
1c005eb2:	60c9a503          	lw	a0,1548(s3)
1c005eb6:	00092603          	lw	a2,0(s2)
1c005eba:	6599                	lui	a1,0x6
1c005ebc:	7b058593          	addi	a1,a1,1968 # 67b0 <__rt_stack_size+0x5fb0>
1c005ec0:	962e                	add	a2,a2,a1
1c005ec2:	95aa                	add	a1,a1,a0
1c005ec4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005ec6:	4805                	li	a6,1
1c005ec8:	101c                	addi	a5,sp,32
1c005eca:	4705                	li	a4,1
1c005ecc:	46c1                	li	a3,16
1c005ece:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005ed0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005ed2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005ed4:	02010a23          	sb	zero,52(sp)
1c005ed8:	2e3030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005edc:	03410783          	lb	a5,52(sp)
1c005ee0:	ef89                	bnez	a5,1c005efa <quant_modelCNN_Construct+0x1e82>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ee2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005ee6:	4585                	li	a1,1
1c005ee8:	01c00513          	li	a0,28
1c005eec:	380060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005ef0:	300a9073          	csrw	mstatus,s5
1c005ef4:	03410783          	lb	a5,52(sp)
1c005ef8:	d7ed                	beqz	a5,1c005ee2 <quant_modelCNN_Construct+0x1e6a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27372), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27372), 9, 0, &UchanHF1);
1c005efa:	60c9a503          	lw	a0,1548(s3)
1c005efe:	00092603          	lw	a2,0(s2)
1c005f02:	659d                	lui	a1,0x7
1c005f04:	aec58593          	addi	a1,a1,-1300 # 6aec <__rt_stack_size+0x62ec>
1c005f08:	962e                	add	a2,a2,a1
1c005f0a:	95aa                	add	a1,a1,a0
1c005f0c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005f0e:	4805                	li	a6,1
1c005f10:	101c                	addi	a5,sp,32
1c005f12:	4705                	li	a4,1
1c005f14:	46a5                	li	a3,9
1c005f16:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005f18:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005f1a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005f1c:	02010a23          	sb	zero,52(sp)
1c005f20:	29b030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005f24:	03410783          	lb	a5,52(sp)
1c005f28:	ef89                	bnez	a5,1c005f42 <quant_modelCNN_Construct+0x1eca>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f2a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005f2e:	4585                	li	a1,1
1c005f30:	01c00513          	li	a0,28
1c005f34:	338060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005f38:	300a9073          	csrw	mstatus,s5
1c005f3c:	03410783          	lb	a5,52(sp)
1c005f40:	d7ed                	beqz	a5,1c005f2a <quant_modelCNN_Construct+0x1eb2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 14016), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 14016), 768, 0, &UchanHF1);
1c005f42:	60c9a503          	lw	a0,1548(s3)
1c005f46:	00092603          	lw	a2,0(s2)
1c005f4a:	658d                	lui	a1,0x3
1c005f4c:	6c058593          	addi	a1,a1,1728 # 36c0 <__rt_stack_size+0x2ec0>
1c005f50:	962e                	add	a2,a2,a1
1c005f52:	95aa                	add	a1,a1,a0
1c005f54:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005f56:	4805                	li	a6,1
1c005f58:	101c                	addi	a5,sp,32
1c005f5a:	4705                	li	a4,1
1c005f5c:	30000693          	li	a3,768
1c005f60:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005f62:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005f64:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005f66:	02010a23          	sb	zero,52(sp)
1c005f6a:	251030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005f6e:	03410783          	lb	a5,52(sp)
1c005f72:	ef89                	bnez	a5,1c005f8c <quant_modelCNN_Construct+0x1f14>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f74:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005f78:	4585                	li	a1,1
1c005f7a:	01c00513          	li	a0,28
1c005f7e:	2ee060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005f82:	300a9073          	csrw	mstatus,s5
1c005f86:	03410783          	lb	a5,52(sp)
1c005f8a:	d7ed                	beqz	a5,1c005f74 <quant_modelCNN_Construct+0x1efc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25152), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25152), 64, 0, &UchanHF1);
1c005f8c:	60c9a503          	lw	a0,1548(s3)
1c005f90:	00092603          	lw	a2,0(s2)
1c005f94:	6599                	lui	a1,0x6
1c005f96:	24058593          	addi	a1,a1,576 # 6240 <__rt_stack_size+0x5a40>
1c005f9a:	962e                	add	a2,a2,a1
1c005f9c:	95aa                	add	a1,a1,a0
1c005f9e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005fa0:	4805                	li	a6,1
1c005fa2:	101c                	addi	a5,sp,32
1c005fa4:	4705                	li	a4,1
1c005fa6:	04000693          	li	a3,64
1c005faa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005fac:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005fae:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005fb0:	02010a23          	sb	zero,52(sp)
1c005fb4:	207030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c005fb8:	03410783          	lb	a5,52(sp)
1c005fbc:	ef89                	bnez	a5,1c005fd6 <quant_modelCNN_Construct+0x1f5e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005fbe:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c005fc2:	4585                	li	a1,1
1c005fc4:	01c00513          	li	a0,28
1c005fc8:	2a4060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c005fcc:	300a9073          	csrw	mstatus,s5
1c005fd0:	03410783          	lb	a5,52(sp)
1c005fd4:	d7ed                	beqz	a5,1c005fbe <quant_modelCNN_Construct+0x1f46>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26560), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26560), 16, 0, &UchanHF1);
1c005fd6:	60c9a503          	lw	a0,1548(s3)
1c005fda:	00092603          	lw	a2,0(s2)
1c005fde:	6599                	lui	a1,0x6
1c005fe0:	7c058593          	addi	a1,a1,1984 # 67c0 <__rt_stack_size+0x5fc0>
1c005fe4:	962e                	add	a2,a2,a1
1c005fe6:	95aa                	add	a1,a1,a0
1c005fe8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c005fea:	4805                	li	a6,1
1c005fec:	101c                	addi	a5,sp,32
1c005fee:	4705                	li	a4,1
1c005ff0:	46c1                	li	a3,16
1c005ff2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c005ff4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c005ff6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c005ff8:	02010a23          	sb	zero,52(sp)
1c005ffc:	1bf030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006000:	03410783          	lb	a5,52(sp)
1c006004:	ef89                	bnez	a5,1c00601e <quant_modelCNN_Construct+0x1fa6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006006:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00600a:	4585                	li	a1,1
1c00600c:	01c00513          	li	a0,28
1c006010:	25c060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006014:	300a9073          	csrw	mstatus,s5
1c006018:	03410783          	lb	a5,52(sp)
1c00601c:	d7ed                	beqz	a5,1c006006 <quant_modelCNN_Construct+0x1f8e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26576), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26576), 16, 0, &UchanHF1);
1c00601e:	60c9a503          	lw	a0,1548(s3)
1c006022:	00092603          	lw	a2,0(s2)
1c006026:	6599                	lui	a1,0x6
1c006028:	7d058593          	addi	a1,a1,2000 # 67d0 <__rt_stack_size+0x5fd0>
1c00602c:	962e                	add	a2,a2,a1
1c00602e:	95aa                	add	a1,a1,a0
1c006030:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006032:	4805                	li	a6,1
1c006034:	101c                	addi	a5,sp,32
1c006036:	4705                	li	a4,1
1c006038:	46c1                	li	a3,16
1c00603a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00603c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00603e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006040:	02010a23          	sb	zero,52(sp)
1c006044:	177030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006048:	03410783          	lb	a5,52(sp)
1c00604c:	ef89                	bnez	a5,1c006066 <quant_modelCNN_Construct+0x1fee>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00604e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006052:	4585                	li	a1,1
1c006054:	01c00513          	li	a0,28
1c006058:	214060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00605c:	300a9073          	csrw	mstatus,s5
1c006060:	03410783          	lb	a5,52(sp)
1c006064:	d7ed                	beqz	a5,1c00604e <quant_modelCNN_Construct+0x1fd6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27384), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27384), 9, 0, &UchanHF1);
1c006066:	60c9a503          	lw	a0,1548(s3)
1c00606a:	00092603          	lw	a2,0(s2)
1c00606e:	659d                	lui	a1,0x7
1c006070:	af858593          	addi	a1,a1,-1288 # 6af8 <__rt_stack_size+0x62f8>
1c006074:	962e                	add	a2,a2,a1
1c006076:	95aa                	add	a1,a1,a0
1c006078:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00607a:	4805                	li	a6,1
1c00607c:	101c                	addi	a5,sp,32
1c00607e:	4705                	li	a4,1
1c006080:	46a5                	li	a3,9
1c006082:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006084:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006086:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006088:	02010a23          	sb	zero,52(sp)
1c00608c:	12f030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006090:	03410783          	lb	a5,52(sp)
1c006094:	ef89                	bnez	a5,1c0060ae <quant_modelCNN_Construct+0x2036>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006096:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00609a:	4585                	li	a1,1
1c00609c:	01c00513          	li	a0,28
1c0060a0:	1cc060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0060a4:	300a9073          	csrw	mstatus,s5
1c0060a8:	03410783          	lb	a5,52(sp)
1c0060ac:	d7ed                	beqz	a5,1c006096 <quant_modelCNN_Construct+0x201e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27396), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27396), 9, 0, &UchanHF1);
1c0060ae:	60c9a503          	lw	a0,1548(s3)
1c0060b2:	00092603          	lw	a2,0(s2)
1c0060b6:	659d                	lui	a1,0x7
1c0060b8:	b0458593          	addi	a1,a1,-1276 # 6b04 <__rt_stack_size+0x6304>
1c0060bc:	962e                	add	a2,a2,a1
1c0060be:	95aa                	add	a1,a1,a0
1c0060c0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0060c2:	4805                	li	a6,1
1c0060c4:	101c                	addi	a5,sp,32
1c0060c6:	4705                	li	a4,1
1c0060c8:	46a5                	li	a3,9
1c0060ca:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0060cc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0060ce:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0060d0:	02010a23          	sb	zero,52(sp)
1c0060d4:	0e7030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0060d8:	03410783          	lb	a5,52(sp)
1c0060dc:	ef89                	bnez	a5,1c0060f6 <quant_modelCNN_Construct+0x207e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0060de:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0060e2:	4585                	li	a1,1
1c0060e4:	01c00513          	li	a0,28
1c0060e8:	184060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0060ec:	300a9073          	csrw	mstatus,s5
1c0060f0:	03410783          	lb	a5,52(sp)
1c0060f4:	d7ed                	beqz	a5,1c0060de <quant_modelCNN_Construct+0x2066>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27408), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27408), 9, 0, &UchanHF1);
1c0060f6:	60c9a503          	lw	a0,1548(s3)
1c0060fa:	00092603          	lw	a2,0(s2)
1c0060fe:	659d                	lui	a1,0x7
1c006100:	b1058593          	addi	a1,a1,-1264 # 6b10 <__rt_stack_size+0x6310>
1c006104:	962e                	add	a2,a2,a1
1c006106:	95aa                	add	a1,a1,a0
1c006108:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00610a:	4805                	li	a6,1
1c00610c:	101c                	addi	a5,sp,32
1c00610e:	4705                	li	a4,1
1c006110:	46a5                	li	a3,9
1c006112:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006114:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006116:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006118:	02010a23          	sb	zero,52(sp)
1c00611c:	09f030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006120:	03410783          	lb	a5,52(sp)
1c006124:	ef89                	bnez	a5,1c00613e <quant_modelCNN_Construct+0x20c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006126:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00612a:	4585                	li	a1,1
1c00612c:	01c00513          	li	a0,28
1c006130:	13c060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006134:	300a9073          	csrw	mstatus,s5
1c006138:	03410783          	lb	a5,52(sp)
1c00613c:	d7ed                	beqz	a5,1c006126 <quant_modelCNN_Construct+0x20ae>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 14784), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 14784), 768, 0, &UchanHF1);
1c00613e:	60c9a503          	lw	a0,1548(s3)
1c006142:	00092603          	lw	a2,0(s2)
1c006146:	6591                	lui	a1,0x4
1c006148:	9c058593          	addi	a1,a1,-1600 # 39c0 <__rt_stack_size+0x31c0>
1c00614c:	962e                	add	a2,a2,a1
1c00614e:	95aa                	add	a1,a1,a0
1c006150:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006152:	4805                	li	a6,1
1c006154:	101c                	addi	a5,sp,32
1c006156:	4705                	li	a4,1
1c006158:	30000693          	li	a3,768
1c00615c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00615e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006160:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006162:	02010a23          	sb	zero,52(sp)
1c006166:	055030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00616a:	03410783          	lb	a5,52(sp)
1c00616e:	ef89                	bnez	a5,1c006188 <quant_modelCNN_Construct+0x2110>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006170:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006174:	4585                	li	a1,1
1c006176:	01c00513          	li	a0,28
1c00617a:	0f2060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00617e:	300a9073          	csrw	mstatus,s5
1c006182:	03410783          	lb	a5,52(sp)
1c006186:	d7ed                	beqz	a5,1c006170 <quant_modelCNN_Construct+0x20f8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25216), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25216), 64, 0, &UchanHF1);
1c006188:	60c9a503          	lw	a0,1548(s3)
1c00618c:	00092603          	lw	a2,0(s2)
1c006190:	6599                	lui	a1,0x6
1c006192:	28058593          	addi	a1,a1,640 # 6280 <__rt_stack_size+0x5a80>
1c006196:	962e                	add	a2,a2,a1
1c006198:	95aa                	add	a1,a1,a0
1c00619a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00619c:	4805                	li	a6,1
1c00619e:	101c                	addi	a5,sp,32
1c0061a0:	4705                	li	a4,1
1c0061a2:	04000693          	li	a3,64
1c0061a6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0061a8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0061aa:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0061ac:	02010a23          	sb	zero,52(sp)
1c0061b0:	00b030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0061b4:	03410783          	lb	a5,52(sp)
1c0061b8:	ef89                	bnez	a5,1c0061d2 <quant_modelCNN_Construct+0x215a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0061ba:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0061be:	4585                	li	a1,1
1c0061c0:	01c00513          	li	a0,28
1c0061c4:	0a8060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0061c8:	300a9073          	csrw	mstatus,s5
1c0061cc:	03410783          	lb	a5,52(sp)
1c0061d0:	d7ed                	beqz	a5,1c0061ba <quant_modelCNN_Construct+0x2142>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26592), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26592), 16, 0, &UchanHF1);
1c0061d2:	60c9a503          	lw	a0,1548(s3)
1c0061d6:	00092603          	lw	a2,0(s2)
1c0061da:	6599                	lui	a1,0x6
1c0061dc:	7e058593          	addi	a1,a1,2016 # 67e0 <__rt_stack_size+0x5fe0>
1c0061e0:	962e                	add	a2,a2,a1
1c0061e2:	95aa                	add	a1,a1,a0
1c0061e4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0061e6:	4805                	li	a6,1
1c0061e8:	101c                	addi	a5,sp,32
1c0061ea:	4705                	li	a4,1
1c0061ec:	46c1                	li	a3,16
1c0061ee:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0061f0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0061f2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0061f4:	02010a23          	sb	zero,52(sp)
1c0061f8:	7c2030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0061fc:	03410783          	lb	a5,52(sp)
1c006200:	ef89                	bnez	a5,1c00621a <quant_modelCNN_Construct+0x21a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006202:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006206:	4585                	li	a1,1
1c006208:	01c00513          	li	a0,28
1c00620c:	060060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006210:	300a9073          	csrw	mstatus,s5
1c006214:	03410783          	lb	a5,52(sp)
1c006218:	d7ed                	beqz	a5,1c006202 <quant_modelCNN_Construct+0x218a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26608), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26608), 16, 0, &UchanHF1);
1c00621a:	60c9a503          	lw	a0,1548(s3)
1c00621e:	00092603          	lw	a2,0(s2)
1c006222:	6599                	lui	a1,0x6
1c006224:	7f058593          	addi	a1,a1,2032 # 67f0 <__rt_stack_size+0x5ff0>
1c006228:	962e                	add	a2,a2,a1
1c00622a:	95aa                	add	a1,a1,a0
1c00622c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00622e:	4805                	li	a6,1
1c006230:	101c                	addi	a5,sp,32
1c006232:	4705                	li	a4,1
1c006234:	46c1                	li	a3,16
1c006236:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006238:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00623a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00623c:	02010a23          	sb	zero,52(sp)
1c006240:	77a030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006244:	03410783          	lb	a5,52(sp)
1c006248:	ef89                	bnez	a5,1c006262 <quant_modelCNN_Construct+0x21ea>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00624a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00624e:	4585                	li	a1,1
1c006250:	01c00513          	li	a0,28
1c006254:	018060ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006258:	300a9073          	csrw	mstatus,s5
1c00625c:	03410783          	lb	a5,52(sp)
1c006260:	d7ed                	beqz	a5,1c00624a <quant_modelCNN_Construct+0x21d2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27420), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27420), 9, 0, &UchanHF1);
1c006262:	60c9a503          	lw	a0,1548(s3)
1c006266:	00092603          	lw	a2,0(s2)
1c00626a:	659d                	lui	a1,0x7
1c00626c:	b1c58593          	addi	a1,a1,-1252 # 6b1c <__rt_stack_size+0x631c>
1c006270:	962e                	add	a2,a2,a1
1c006272:	95aa                	add	a1,a1,a0
1c006274:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006276:	4805                	li	a6,1
1c006278:	101c                	addi	a5,sp,32
1c00627a:	4705                	li	a4,1
1c00627c:	46a5                	li	a3,9
1c00627e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006280:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006282:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006284:	02010a23          	sb	zero,52(sp)
1c006288:	732030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00628c:	03410783          	lb	a5,52(sp)
1c006290:	ef89                	bnez	a5,1c0062aa <quant_modelCNN_Construct+0x2232>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006292:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006296:	4585                	li	a1,1
1c006298:	01c00513          	li	a0,28
1c00629c:	7d1050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0062a0:	300a9073          	csrw	mstatus,s5
1c0062a4:	03410783          	lb	a5,52(sp)
1c0062a8:	d7ed                	beqz	a5,1c006292 <quant_modelCNN_Construct+0x221a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 15552), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 15552), 768, 0, &UchanHF1);
1c0062aa:	60c9a503          	lw	a0,1548(s3)
1c0062ae:	00092603          	lw	a2,0(s2)
1c0062b2:	6591                	lui	a1,0x4
1c0062b4:	cc058593          	addi	a1,a1,-832 # 3cc0 <__rt_stack_size+0x34c0>
1c0062b8:	962e                	add	a2,a2,a1
1c0062ba:	95aa                	add	a1,a1,a0
1c0062bc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0062be:	4805                	li	a6,1
1c0062c0:	101c                	addi	a5,sp,32
1c0062c2:	4705                	li	a4,1
1c0062c4:	30000693          	li	a3,768
1c0062c8:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0062ca:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0062cc:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0062ce:	02010a23          	sb	zero,52(sp)
1c0062d2:	6e8030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0062d6:	03410783          	lb	a5,52(sp)
1c0062da:	ef89                	bnez	a5,1c0062f4 <quant_modelCNN_Construct+0x227c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0062dc:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0062e0:	4585                	li	a1,1
1c0062e2:	01c00513          	li	a0,28
1c0062e6:	787050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0062ea:	300a9073          	csrw	mstatus,s5
1c0062ee:	03410783          	lb	a5,52(sp)
1c0062f2:	d7ed                	beqz	a5,1c0062dc <quant_modelCNN_Construct+0x2264>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25280), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25280), 64, 0, &UchanHF1);
1c0062f4:	60c9a503          	lw	a0,1548(s3)
1c0062f8:	00092603          	lw	a2,0(s2)
1c0062fc:	6599                	lui	a1,0x6
1c0062fe:	2c058593          	addi	a1,a1,704 # 62c0 <__rt_stack_size+0x5ac0>
1c006302:	962e                	add	a2,a2,a1
1c006304:	95aa                	add	a1,a1,a0
1c006306:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006308:	4805                	li	a6,1
1c00630a:	101c                	addi	a5,sp,32
1c00630c:	4705                	li	a4,1
1c00630e:	04000693          	li	a3,64
1c006312:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006314:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006316:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006318:	02010a23          	sb	zero,52(sp)
1c00631c:	69e030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006320:	03410783          	lb	a5,52(sp)
1c006324:	ef89                	bnez	a5,1c00633e <quant_modelCNN_Construct+0x22c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006326:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00632a:	4585                	li	a1,1
1c00632c:	01c00513          	li	a0,28
1c006330:	73d050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006334:	300a9073          	csrw	mstatus,s5
1c006338:	03410783          	lb	a5,52(sp)
1c00633c:	d7ed                	beqz	a5,1c006326 <quant_modelCNN_Construct+0x22ae>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26624), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26624), 16, 0, &UchanHF1);
1c00633e:	60c9a503          	lw	a0,1548(s3)
1c006342:	00092603          	lw	a2,0(s2)
1c006346:	659d                	lui	a1,0x7
1c006348:	80058593          	addi	a1,a1,-2048 # 6800 <__rt_stack_size+0x6000>
1c00634c:	962e                	add	a2,a2,a1
1c00634e:	95aa                	add	a1,a1,a0
1c006350:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006352:	4805                	li	a6,1
1c006354:	101c                	addi	a5,sp,32
1c006356:	4705                	li	a4,1
1c006358:	46c1                	li	a3,16
1c00635a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00635c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00635e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006360:	02010a23          	sb	zero,52(sp)
1c006364:	656030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006368:	03410783          	lb	a5,52(sp)
1c00636c:	ef89                	bnez	a5,1c006386 <quant_modelCNN_Construct+0x230e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00636e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006372:	4585                	li	a1,1
1c006374:	01c00513          	li	a0,28
1c006378:	6f5050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00637c:	300a9073          	csrw	mstatus,s5
1c006380:	03410783          	lb	a5,52(sp)
1c006384:	d7ed                	beqz	a5,1c00636e <quant_modelCNN_Construct+0x22f6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26640), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26640), 16, 0, &UchanHF1);
1c006386:	60c9a503          	lw	a0,1548(s3)
1c00638a:	00092603          	lw	a2,0(s2)
1c00638e:	659d                	lui	a1,0x7
1c006390:	81058593          	addi	a1,a1,-2032 # 6810 <__rt_stack_size+0x6010>
1c006394:	962e                	add	a2,a2,a1
1c006396:	95aa                	add	a1,a1,a0
1c006398:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00639a:	4805                	li	a6,1
1c00639c:	101c                	addi	a5,sp,32
1c00639e:	4705                	li	a4,1
1c0063a0:	46c1                	li	a3,16
1c0063a2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0063a4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0063a6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0063a8:	02010a23          	sb	zero,52(sp)
1c0063ac:	60e030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0063b0:	03410783          	lb	a5,52(sp)
1c0063b4:	ef89                	bnez	a5,1c0063ce <quant_modelCNN_Construct+0x2356>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0063b6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0063ba:	4585                	li	a1,1
1c0063bc:	01c00513          	li	a0,28
1c0063c0:	6ad050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0063c4:	300a9073          	csrw	mstatus,s5
1c0063c8:	03410783          	lb	a5,52(sp)
1c0063cc:	d7ed                	beqz	a5,1c0063b6 <quant_modelCNN_Construct+0x233e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27432), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27432), 9, 0, &UchanHF1);
1c0063ce:	60c9a503          	lw	a0,1548(s3)
1c0063d2:	00092603          	lw	a2,0(s2)
1c0063d6:	659d                	lui	a1,0x7
1c0063d8:	b2858593          	addi	a1,a1,-1240 # 6b28 <__rt_stack_size+0x6328>
1c0063dc:	962e                	add	a2,a2,a1
1c0063de:	95aa                	add	a1,a1,a0
1c0063e0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0063e2:	4805                	li	a6,1
1c0063e4:	101c                	addi	a5,sp,32
1c0063e6:	4705                	li	a4,1
1c0063e8:	46a5                	li	a3,9
1c0063ea:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0063ec:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0063ee:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0063f0:	02010a23          	sb	zero,52(sp)
1c0063f4:	5c6030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0063f8:	03410783          	lb	a5,52(sp)
1c0063fc:	ef89                	bnez	a5,1c006416 <quant_modelCNN_Construct+0x239e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0063fe:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006402:	4585                	li	a1,1
1c006404:	01c00513          	li	a0,28
1c006408:	665050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00640c:	300a9073          	csrw	mstatus,s5
1c006410:	03410783          	lb	a5,52(sp)
1c006414:	d7ed                	beqz	a5,1c0063fe <quant_modelCNN_Construct+0x2386>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27444), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27444), 9, 0, &UchanHF1);
1c006416:	60c9a503          	lw	a0,1548(s3)
1c00641a:	00092603          	lw	a2,0(s2)
1c00641e:	659d                	lui	a1,0x7
1c006420:	b3458593          	addi	a1,a1,-1228 # 6b34 <__rt_stack_size+0x6334>
1c006424:	962e                	add	a2,a2,a1
1c006426:	95aa                	add	a1,a1,a0
1c006428:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00642a:	4805                	li	a6,1
1c00642c:	101c                	addi	a5,sp,32
1c00642e:	4705                	li	a4,1
1c006430:	46a5                	li	a3,9
1c006432:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006434:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006436:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006438:	02010a23          	sb	zero,52(sp)
1c00643c:	57e030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006440:	03410783          	lb	a5,52(sp)
1c006444:	ef89                	bnez	a5,1c00645e <quant_modelCNN_Construct+0x23e6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006446:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00644a:	4585                	li	a1,1
1c00644c:	01c00513          	li	a0,28
1c006450:	61d050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006454:	300a9073          	csrw	mstatus,s5
1c006458:	03410783          	lb	a5,52(sp)
1c00645c:	d7ed                	beqz	a5,1c006446 <quant_modelCNN_Construct+0x23ce>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27456), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27456), 9, 0, &UchanHF1);
1c00645e:	60c9a503          	lw	a0,1548(s3)
1c006462:	00092603          	lw	a2,0(s2)
1c006466:	659d                	lui	a1,0x7
1c006468:	b4058593          	addi	a1,a1,-1216 # 6b40 <__rt_stack_size+0x6340>
1c00646c:	962e                	add	a2,a2,a1
1c00646e:	95aa                	add	a1,a1,a0
1c006470:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006472:	4805                	li	a6,1
1c006474:	101c                	addi	a5,sp,32
1c006476:	4705                	li	a4,1
1c006478:	46a5                	li	a3,9
1c00647a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00647c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00647e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006480:	02010a23          	sb	zero,52(sp)
1c006484:	536030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006488:	03410783          	lb	a5,52(sp)
1c00648c:	ef89                	bnez	a5,1c0064a6 <quant_modelCNN_Construct+0x242e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00648e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006492:	4585                	li	a1,1
1c006494:	01c00513          	li	a0,28
1c006498:	5d5050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00649c:	300a9073          	csrw	mstatus,s5
1c0064a0:	03410783          	lb	a5,52(sp)
1c0064a4:	d7ed                	beqz	a5,1c00648e <quant_modelCNN_Construct+0x2416>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 16320), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 16320), 768, 0, &UchanHF1);
1c0064a6:	60c9a503          	lw	a0,1548(s3)
1c0064aa:	00092603          	lw	a2,0(s2)
1c0064ae:	6591                	lui	a1,0x4
1c0064b0:	fc058593          	addi	a1,a1,-64 # 3fc0 <__rt_stack_size+0x37c0>
1c0064b4:	962e                	add	a2,a2,a1
1c0064b6:	95aa                	add	a1,a1,a0
1c0064b8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0064ba:	4805                	li	a6,1
1c0064bc:	101c                	addi	a5,sp,32
1c0064be:	4705                	li	a4,1
1c0064c0:	30000693          	li	a3,768
1c0064c4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0064c6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0064c8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0064ca:	02010a23          	sb	zero,52(sp)
1c0064ce:	4ec030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0064d2:	03410783          	lb	a5,52(sp)
1c0064d6:	ef89                	bnez	a5,1c0064f0 <quant_modelCNN_Construct+0x2478>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0064d8:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0064dc:	4585                	li	a1,1
1c0064de:	01c00513          	li	a0,28
1c0064e2:	58b050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0064e6:	300a9073          	csrw	mstatus,s5
1c0064ea:	03410783          	lb	a5,52(sp)
1c0064ee:	d7ed                	beqz	a5,1c0064d8 <quant_modelCNN_Construct+0x2460>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25344), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25344), 64, 0, &UchanHF1);
1c0064f0:	60c9a503          	lw	a0,1548(s3)
1c0064f4:	00092603          	lw	a2,0(s2)
1c0064f8:	6599                	lui	a1,0x6
1c0064fa:	30058593          	addi	a1,a1,768 # 6300 <__rt_stack_size+0x5b00>
1c0064fe:	962e                	add	a2,a2,a1
1c006500:	95aa                	add	a1,a1,a0
1c006502:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006504:	4805                	li	a6,1
1c006506:	101c                	addi	a5,sp,32
1c006508:	4705                	li	a4,1
1c00650a:	04000693          	li	a3,64
1c00650e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006510:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006512:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006514:	02010a23          	sb	zero,52(sp)
1c006518:	4a2030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00651c:	03410783          	lb	a5,52(sp)
1c006520:	ef89                	bnez	a5,1c00653a <quant_modelCNN_Construct+0x24c2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006522:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006526:	4585                	li	a1,1
1c006528:	01c00513          	li	a0,28
1c00652c:	541050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006530:	300a9073          	csrw	mstatus,s5
1c006534:	03410783          	lb	a5,52(sp)
1c006538:	d7ed                	beqz	a5,1c006522 <quant_modelCNN_Construct+0x24aa>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26656), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26656), 16, 0, &UchanHF1);
1c00653a:	60c9a503          	lw	a0,1548(s3)
1c00653e:	00092603          	lw	a2,0(s2)
1c006542:	659d                	lui	a1,0x7
1c006544:	82058593          	addi	a1,a1,-2016 # 6820 <__rt_stack_size+0x6020>
1c006548:	962e                	add	a2,a2,a1
1c00654a:	95aa                	add	a1,a1,a0
1c00654c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00654e:	4805                	li	a6,1
1c006550:	101c                	addi	a5,sp,32
1c006552:	4705                	li	a4,1
1c006554:	46c1                	li	a3,16
1c006556:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006558:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00655a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00655c:	02010a23          	sb	zero,52(sp)
1c006560:	45a030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006564:	03410783          	lb	a5,52(sp)
1c006568:	ef89                	bnez	a5,1c006582 <quant_modelCNN_Construct+0x250a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00656a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00656e:	4585                	li	a1,1
1c006570:	01c00513          	li	a0,28
1c006574:	4f9050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006578:	300a9073          	csrw	mstatus,s5
1c00657c:	03410783          	lb	a5,52(sp)
1c006580:	d7ed                	beqz	a5,1c00656a <quant_modelCNN_Construct+0x24f2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26672), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26672), 16, 0, &UchanHF1);
1c006582:	60c9a503          	lw	a0,1548(s3)
1c006586:	00092603          	lw	a2,0(s2)
1c00658a:	659d                	lui	a1,0x7
1c00658c:	83058593          	addi	a1,a1,-2000 # 6830 <__rt_stack_size+0x6030>
1c006590:	962e                	add	a2,a2,a1
1c006592:	95aa                	add	a1,a1,a0
1c006594:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006596:	4805                	li	a6,1
1c006598:	101c                	addi	a5,sp,32
1c00659a:	4705                	li	a4,1
1c00659c:	46c1                	li	a3,16
1c00659e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0065a0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0065a2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0065a4:	02010a23          	sb	zero,52(sp)
1c0065a8:	412030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0065ac:	03410783          	lb	a5,52(sp)
1c0065b0:	ef89                	bnez	a5,1c0065ca <quant_modelCNN_Construct+0x2552>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0065b2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0065b6:	4585                	li	a1,1
1c0065b8:	01c00513          	li	a0,28
1c0065bc:	4b1050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0065c0:	300a9073          	csrw	mstatus,s5
1c0065c4:	03410783          	lb	a5,52(sp)
1c0065c8:	d7ed                	beqz	a5,1c0065b2 <quant_modelCNN_Construct+0x253a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27468), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27468), 9, 0, &UchanHF1);
1c0065ca:	60c9a503          	lw	a0,1548(s3)
1c0065ce:	00092603          	lw	a2,0(s2)
1c0065d2:	659d                	lui	a1,0x7
1c0065d4:	b4c58593          	addi	a1,a1,-1204 # 6b4c <__rt_stack_size+0x634c>
1c0065d8:	962e                	add	a2,a2,a1
1c0065da:	95aa                	add	a1,a1,a0
1c0065dc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0065de:	4805                	li	a6,1
1c0065e0:	101c                	addi	a5,sp,32
1c0065e2:	4705                	li	a4,1
1c0065e4:	46a5                	li	a3,9
1c0065e6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0065e8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0065ea:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0065ec:	02010a23          	sb	zero,52(sp)
1c0065f0:	3ca030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0065f4:	03410783          	lb	a5,52(sp)
1c0065f8:	ef89                	bnez	a5,1c006612 <quant_modelCNN_Construct+0x259a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0065fa:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0065fe:	4585                	li	a1,1
1c006600:	01c00513          	li	a0,28
1c006604:	469050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006608:	300a9073          	csrw	mstatus,s5
1c00660c:	03410783          	lb	a5,52(sp)
1c006610:	d7ed                	beqz	a5,1c0065fa <quant_modelCNN_Construct+0x2582>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 17088), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 17088), 768, 0, &UchanHF1);
1c006612:	60c9a503          	lw	a0,1548(s3)
1c006616:	00092603          	lw	a2,0(s2)
1c00661a:	6591                	lui	a1,0x4
1c00661c:	2c058593          	addi	a1,a1,704 # 42c0 <__rt_stack_size+0x3ac0>
1c006620:	962e                	add	a2,a2,a1
1c006622:	95aa                	add	a1,a1,a0
1c006624:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006626:	4805                	li	a6,1
1c006628:	101c                	addi	a5,sp,32
1c00662a:	4705                	li	a4,1
1c00662c:	30000693          	li	a3,768
1c006630:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006632:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006634:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006636:	02010a23          	sb	zero,52(sp)
1c00663a:	380030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00663e:	03410783          	lb	a5,52(sp)
1c006642:	ef89                	bnez	a5,1c00665c <quant_modelCNN_Construct+0x25e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006644:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006648:	4585                	li	a1,1
1c00664a:	01c00513          	li	a0,28
1c00664e:	41f050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006652:	300a9073          	csrw	mstatus,s5
1c006656:	03410783          	lb	a5,52(sp)
1c00665a:	d7ed                	beqz	a5,1c006644 <quant_modelCNN_Construct+0x25cc>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25408), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25408), 64, 0, &UchanHF1);
1c00665c:	60c9a503          	lw	a0,1548(s3)
1c006660:	00092603          	lw	a2,0(s2)
1c006664:	6599                	lui	a1,0x6
1c006666:	34058593          	addi	a1,a1,832 # 6340 <__rt_stack_size+0x5b40>
1c00666a:	962e                	add	a2,a2,a1
1c00666c:	95aa                	add	a1,a1,a0
1c00666e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006670:	4805                	li	a6,1
1c006672:	101c                	addi	a5,sp,32
1c006674:	4705                	li	a4,1
1c006676:	04000693          	li	a3,64
1c00667a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00667c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00667e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006680:	02010a23          	sb	zero,52(sp)
1c006684:	336030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006688:	03410783          	lb	a5,52(sp)
1c00668c:	ef89                	bnez	a5,1c0066a6 <quant_modelCNN_Construct+0x262e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00668e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006692:	4585                	li	a1,1
1c006694:	01c00513          	li	a0,28
1c006698:	3d5050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00669c:	300a9073          	csrw	mstatus,s5
1c0066a0:	03410783          	lb	a5,52(sp)
1c0066a4:	d7ed                	beqz	a5,1c00668e <quant_modelCNN_Construct+0x2616>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26688), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26688), 16, 0, &UchanHF1);
1c0066a6:	60c9a503          	lw	a0,1548(s3)
1c0066aa:	00092603          	lw	a2,0(s2)
1c0066ae:	659d                	lui	a1,0x7
1c0066b0:	84058593          	addi	a1,a1,-1984 # 6840 <__rt_stack_size+0x6040>
1c0066b4:	962e                	add	a2,a2,a1
1c0066b6:	95aa                	add	a1,a1,a0
1c0066b8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0066ba:	4805                	li	a6,1
1c0066bc:	101c                	addi	a5,sp,32
1c0066be:	4705                	li	a4,1
1c0066c0:	46c1                	li	a3,16
1c0066c2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0066c4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0066c6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0066c8:	02010a23          	sb	zero,52(sp)
1c0066cc:	2ee030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0066d0:	03410783          	lb	a5,52(sp)
1c0066d4:	ef89                	bnez	a5,1c0066ee <quant_modelCNN_Construct+0x2676>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0066d6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0066da:	4585                	li	a1,1
1c0066dc:	01c00513          	li	a0,28
1c0066e0:	38d050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0066e4:	300a9073          	csrw	mstatus,s5
1c0066e8:	03410783          	lb	a5,52(sp)
1c0066ec:	d7ed                	beqz	a5,1c0066d6 <quant_modelCNN_Construct+0x265e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26704), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26704), 16, 0, &UchanHF1);
1c0066ee:	60c9a503          	lw	a0,1548(s3)
1c0066f2:	00092603          	lw	a2,0(s2)
1c0066f6:	659d                	lui	a1,0x7
1c0066f8:	85058593          	addi	a1,a1,-1968 # 6850 <__rt_stack_size+0x6050>
1c0066fc:	962e                	add	a2,a2,a1
1c0066fe:	95aa                	add	a1,a1,a0
1c006700:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006702:	4805                	li	a6,1
1c006704:	101c                	addi	a5,sp,32
1c006706:	4705                	li	a4,1
1c006708:	46c1                	li	a3,16
1c00670a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00670c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00670e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006710:	02010a23          	sb	zero,52(sp)
1c006714:	2a6030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006718:	03410783          	lb	a5,52(sp)
1c00671c:	ef89                	bnez	a5,1c006736 <quant_modelCNN_Construct+0x26be>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00671e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006722:	4585                	li	a1,1
1c006724:	01c00513          	li	a0,28
1c006728:	345050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00672c:	300a9073          	csrw	mstatus,s5
1c006730:	03410783          	lb	a5,52(sp)
1c006734:	d7ed                	beqz	a5,1c00671e <quant_modelCNN_Construct+0x26a6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27480), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27480), 9, 0, &UchanHF1);
1c006736:	60c9a503          	lw	a0,1548(s3)
1c00673a:	00092603          	lw	a2,0(s2)
1c00673e:	659d                	lui	a1,0x7
1c006740:	b5858593          	addi	a1,a1,-1192 # 6b58 <__rt_stack_size+0x6358>
1c006744:	962e                	add	a2,a2,a1
1c006746:	95aa                	add	a1,a1,a0
1c006748:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00674a:	4805                	li	a6,1
1c00674c:	101c                	addi	a5,sp,32
1c00674e:	4705                	li	a4,1
1c006750:	46a5                	li	a3,9
1c006752:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006754:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006756:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006758:	02010a23          	sb	zero,52(sp)
1c00675c:	25e030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006760:	03410783          	lb	a5,52(sp)
1c006764:	ef89                	bnez	a5,1c00677e <quant_modelCNN_Construct+0x2706>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006766:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00676a:	4585                	li	a1,1
1c00676c:	01c00513          	li	a0,28
1c006770:	2fd050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006774:	300a9073          	csrw	mstatus,s5
1c006778:	03410783          	lb	a5,52(sp)
1c00677c:	d7ed                	beqz	a5,1c006766 <quant_modelCNN_Construct+0x26ee>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27492), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27492), 9, 0, &UchanHF1);
1c00677e:	60c9a503          	lw	a0,1548(s3)
1c006782:	00092603          	lw	a2,0(s2)
1c006786:	659d                	lui	a1,0x7
1c006788:	b6458593          	addi	a1,a1,-1180 # 6b64 <__rt_stack_size+0x6364>
1c00678c:	962e                	add	a2,a2,a1
1c00678e:	95aa                	add	a1,a1,a0
1c006790:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006792:	4805                	li	a6,1
1c006794:	101c                	addi	a5,sp,32
1c006796:	4705                	li	a4,1
1c006798:	46a5                	li	a3,9
1c00679a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00679c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00679e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0067a0:	02010a23          	sb	zero,52(sp)
1c0067a4:	216030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0067a8:	03410783          	lb	a5,52(sp)
1c0067ac:	ef89                	bnez	a5,1c0067c6 <quant_modelCNN_Construct+0x274e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0067ae:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0067b2:	4585                	li	a1,1
1c0067b4:	01c00513          	li	a0,28
1c0067b8:	2b5050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0067bc:	300a9073          	csrw	mstatus,s5
1c0067c0:	03410783          	lb	a5,52(sp)
1c0067c4:	d7ed                	beqz	a5,1c0067ae <quant_modelCNN_Construct+0x2736>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27504), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27504), 9, 0, &UchanHF1);
1c0067c6:	60c9a503          	lw	a0,1548(s3)
1c0067ca:	00092603          	lw	a2,0(s2)
1c0067ce:	659d                	lui	a1,0x7
1c0067d0:	b7058593          	addi	a1,a1,-1168 # 6b70 <__rt_stack_size+0x6370>
1c0067d4:	962e                	add	a2,a2,a1
1c0067d6:	95aa                	add	a1,a1,a0
1c0067d8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0067da:	4805                	li	a6,1
1c0067dc:	101c                	addi	a5,sp,32
1c0067de:	4705                	li	a4,1
1c0067e0:	46a5                	li	a3,9
1c0067e2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0067e4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0067e6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0067e8:	02010a23          	sb	zero,52(sp)
1c0067ec:	1ce030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0067f0:	03410783          	lb	a5,52(sp)
1c0067f4:	ef89                	bnez	a5,1c00680e <quant_modelCNN_Construct+0x2796>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0067f6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0067fa:	4585                	li	a1,1
1c0067fc:	01c00513          	li	a0,28
1c006800:	26d050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006804:	300a9073          	csrw	mstatus,s5
1c006808:	03410783          	lb	a5,52(sp)
1c00680c:	d7ed                	beqz	a5,1c0067f6 <quant_modelCNN_Construct+0x277e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 17856), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 17856), 768, 0, &UchanHF1);
1c00680e:	60c9a503          	lw	a0,1548(s3)
1c006812:	00092603          	lw	a2,0(s2)
1c006816:	6591                	lui	a1,0x4
1c006818:	5c058593          	addi	a1,a1,1472 # 45c0 <__rt_stack_size+0x3dc0>
1c00681c:	962e                	add	a2,a2,a1
1c00681e:	95aa                	add	a1,a1,a0
1c006820:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006822:	4805                	li	a6,1
1c006824:	101c                	addi	a5,sp,32
1c006826:	4705                	li	a4,1
1c006828:	30000693          	li	a3,768
1c00682c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00682e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006830:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006832:	02010a23          	sb	zero,52(sp)
1c006836:	184030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00683a:	03410783          	lb	a5,52(sp)
1c00683e:	ef89                	bnez	a5,1c006858 <quant_modelCNN_Construct+0x27e0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006840:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006844:	4585                	li	a1,1
1c006846:	01c00513          	li	a0,28
1c00684a:	223050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00684e:	300a9073          	csrw	mstatus,s5
1c006852:	03410783          	lb	a5,52(sp)
1c006856:	d7ed                	beqz	a5,1c006840 <quant_modelCNN_Construct+0x27c8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25472), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25472), 64, 0, &UchanHF1);
1c006858:	60c9a503          	lw	a0,1548(s3)
1c00685c:	00092603          	lw	a2,0(s2)
1c006860:	6599                	lui	a1,0x6
1c006862:	38058593          	addi	a1,a1,896 # 6380 <__rt_stack_size+0x5b80>
1c006866:	962e                	add	a2,a2,a1
1c006868:	95aa                	add	a1,a1,a0
1c00686a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00686c:	4805                	li	a6,1
1c00686e:	101c                	addi	a5,sp,32
1c006870:	4705                	li	a4,1
1c006872:	04000693          	li	a3,64
1c006876:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006878:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00687a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00687c:	02010a23          	sb	zero,52(sp)
1c006880:	13a030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006884:	03410783          	lb	a5,52(sp)
1c006888:	ef89                	bnez	a5,1c0068a2 <quant_modelCNN_Construct+0x282a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00688a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00688e:	4585                	li	a1,1
1c006890:	01c00513          	li	a0,28
1c006894:	1d9050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006898:	300a9073          	csrw	mstatus,s5
1c00689c:	03410783          	lb	a5,52(sp)
1c0068a0:	d7ed                	beqz	a5,1c00688a <quant_modelCNN_Construct+0x2812>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26720), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26720), 16, 0, &UchanHF1);
1c0068a2:	60c9a503          	lw	a0,1548(s3)
1c0068a6:	00092603          	lw	a2,0(s2)
1c0068aa:	659d                	lui	a1,0x7
1c0068ac:	86058593          	addi	a1,a1,-1952 # 6860 <__rt_stack_size+0x6060>
1c0068b0:	962e                	add	a2,a2,a1
1c0068b2:	95aa                	add	a1,a1,a0
1c0068b4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0068b6:	4805                	li	a6,1
1c0068b8:	101c                	addi	a5,sp,32
1c0068ba:	4705                	li	a4,1
1c0068bc:	46c1                	li	a3,16
1c0068be:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0068c0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0068c2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0068c4:	02010a23          	sb	zero,52(sp)
1c0068c8:	0f2030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0068cc:	03410783          	lb	a5,52(sp)
1c0068d0:	ef89                	bnez	a5,1c0068ea <quant_modelCNN_Construct+0x2872>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0068d2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0068d6:	4585                	li	a1,1
1c0068d8:	01c00513          	li	a0,28
1c0068dc:	191050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0068e0:	300a9073          	csrw	mstatus,s5
1c0068e4:	03410783          	lb	a5,52(sp)
1c0068e8:	d7ed                	beqz	a5,1c0068d2 <quant_modelCNN_Construct+0x285a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26736), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26736), 16, 0, &UchanHF1);
1c0068ea:	60c9a503          	lw	a0,1548(s3)
1c0068ee:	00092603          	lw	a2,0(s2)
1c0068f2:	659d                	lui	a1,0x7
1c0068f4:	87058593          	addi	a1,a1,-1936 # 6870 <__rt_stack_size+0x6070>
1c0068f8:	962e                	add	a2,a2,a1
1c0068fa:	95aa                	add	a1,a1,a0
1c0068fc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0068fe:	4805                	li	a6,1
1c006900:	101c                	addi	a5,sp,32
1c006902:	4705                	li	a4,1
1c006904:	46c1                	li	a3,16
1c006906:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006908:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00690a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00690c:	02010a23          	sb	zero,52(sp)
1c006910:	0aa030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006914:	03410783          	lb	a5,52(sp)
1c006918:	ef89                	bnez	a5,1c006932 <quant_modelCNN_Construct+0x28ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00691a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00691e:	4585                	li	a1,1
1c006920:	01c00513          	li	a0,28
1c006924:	149050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006928:	300a9073          	csrw	mstatus,s5
1c00692c:	03410783          	lb	a5,52(sp)
1c006930:	d7ed                	beqz	a5,1c00691a <quant_modelCNN_Construct+0x28a2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27516), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27516), 9, 0, &UchanHF1);
1c006932:	60c9a503          	lw	a0,1548(s3)
1c006936:	00092603          	lw	a2,0(s2)
1c00693a:	659d                	lui	a1,0x7
1c00693c:	b7c58593          	addi	a1,a1,-1156 # 6b7c <__rt_stack_size+0x637c>
1c006940:	962e                	add	a2,a2,a1
1c006942:	95aa                	add	a1,a1,a0
1c006944:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006946:	4805                	li	a6,1
1c006948:	101c                	addi	a5,sp,32
1c00694a:	4705                	li	a4,1
1c00694c:	46a5                	li	a3,9
1c00694e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006950:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006952:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006954:	02010a23          	sb	zero,52(sp)
1c006958:	062030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00695c:	03410783          	lb	a5,52(sp)
1c006960:	ef89                	bnez	a5,1c00697a <quant_modelCNN_Construct+0x2902>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006962:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006966:	4585                	li	a1,1
1c006968:	01c00513          	li	a0,28
1c00696c:	101050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006970:	300a9073          	csrw	mstatus,s5
1c006974:	03410783          	lb	a5,52(sp)
1c006978:	d7ed                	beqz	a5,1c006962 <quant_modelCNN_Construct+0x28ea>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 18624), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 18624), 768, 0, &UchanHF1);
1c00697a:	60c9a503          	lw	a0,1548(s3)
1c00697e:	00092603          	lw	a2,0(s2)
1c006982:	6595                	lui	a1,0x5
1c006984:	8c058593          	addi	a1,a1,-1856 # 48c0 <__rt_stack_size+0x40c0>
1c006988:	962e                	add	a2,a2,a1
1c00698a:	95aa                	add	a1,a1,a0
1c00698c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00698e:	4805                	li	a6,1
1c006990:	101c                	addi	a5,sp,32
1c006992:	4705                	li	a4,1
1c006994:	30000693          	li	a3,768
1c006998:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00699a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00699c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00699e:	02010a23          	sb	zero,52(sp)
1c0069a2:	018030ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0069a6:	03410783          	lb	a5,52(sp)
1c0069aa:	ef89                	bnez	a5,1c0069c4 <quant_modelCNN_Construct+0x294c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0069ac:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0069b0:	4585                	li	a1,1
1c0069b2:	01c00513          	li	a0,28
1c0069b6:	0b7050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0069ba:	300a9073          	csrw	mstatus,s5
1c0069be:	03410783          	lb	a5,52(sp)
1c0069c2:	d7ed                	beqz	a5,1c0069ac <quant_modelCNN_Construct+0x2934>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25536), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25536), 64, 0, &UchanHF1);
1c0069c4:	60c9a503          	lw	a0,1548(s3)
1c0069c8:	00092603          	lw	a2,0(s2)
1c0069cc:	6599                	lui	a1,0x6
1c0069ce:	3c058593          	addi	a1,a1,960 # 63c0 <__rt_stack_size+0x5bc0>
1c0069d2:	962e                	add	a2,a2,a1
1c0069d4:	95aa                	add	a1,a1,a0
1c0069d6:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0069d8:	4805                	li	a6,1
1c0069da:	101c                	addi	a5,sp,32
1c0069dc:	4705                	li	a4,1
1c0069de:	04000693          	li	a3,64
1c0069e2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0069e4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0069e6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0069e8:	02010a23          	sb	zero,52(sp)
1c0069ec:	7cf020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0069f0:	03410783          	lb	a5,52(sp)
1c0069f4:	ef89                	bnez	a5,1c006a0e <quant_modelCNN_Construct+0x2996>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0069f6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0069fa:	4585                	li	a1,1
1c0069fc:	01c00513          	li	a0,28
1c006a00:	06d050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006a04:	300a9073          	csrw	mstatus,s5
1c006a08:	03410783          	lb	a5,52(sp)
1c006a0c:	d7ed                	beqz	a5,1c0069f6 <quant_modelCNN_Construct+0x297e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26752), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26752), 16, 0, &UchanHF1);
1c006a0e:	60c9a503          	lw	a0,1548(s3)
1c006a12:	00092603          	lw	a2,0(s2)
1c006a16:	659d                	lui	a1,0x7
1c006a18:	88058593          	addi	a1,a1,-1920 # 6880 <__rt_stack_size+0x6080>
1c006a1c:	962e                	add	a2,a2,a1
1c006a1e:	95aa                	add	a1,a1,a0
1c006a20:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006a22:	4805                	li	a6,1
1c006a24:	101c                	addi	a5,sp,32
1c006a26:	4705                	li	a4,1
1c006a28:	46c1                	li	a3,16
1c006a2a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006a2c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006a2e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006a30:	02010a23          	sb	zero,52(sp)
1c006a34:	787020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006a38:	03410783          	lb	a5,52(sp)
1c006a3c:	ef89                	bnez	a5,1c006a56 <quant_modelCNN_Construct+0x29de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a3e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006a42:	4585                	li	a1,1
1c006a44:	01c00513          	li	a0,28
1c006a48:	025050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006a4c:	300a9073          	csrw	mstatus,s5
1c006a50:	03410783          	lb	a5,52(sp)
1c006a54:	d7ed                	beqz	a5,1c006a3e <quant_modelCNN_Construct+0x29c6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26768), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26768), 16, 0, &UchanHF1);
1c006a56:	60c9a503          	lw	a0,1548(s3)
1c006a5a:	00092603          	lw	a2,0(s2)
1c006a5e:	659d                	lui	a1,0x7
1c006a60:	89058593          	addi	a1,a1,-1904 # 6890 <__rt_stack_size+0x6090>
1c006a64:	962e                	add	a2,a2,a1
1c006a66:	95aa                	add	a1,a1,a0
1c006a68:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006a6a:	4805                	li	a6,1
1c006a6c:	101c                	addi	a5,sp,32
1c006a6e:	4705                	li	a4,1
1c006a70:	46c1                	li	a3,16
1c006a72:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006a74:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006a76:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006a78:	02010a23          	sb	zero,52(sp)
1c006a7c:	73f020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006a80:	03410783          	lb	a5,52(sp)
1c006a84:	ef89                	bnez	a5,1c006a9e <quant_modelCNN_Construct+0x2a26>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a86:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006a8a:	4585                	li	a1,1
1c006a8c:	01c00513          	li	a0,28
1c006a90:	7dc050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006a94:	300a9073          	csrw	mstatus,s5
1c006a98:	03410783          	lb	a5,52(sp)
1c006a9c:	d7ed                	beqz	a5,1c006a86 <quant_modelCNN_Construct+0x2a0e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27528), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27528), 9, 0, &UchanHF1);
1c006a9e:	60c9a503          	lw	a0,1548(s3)
1c006aa2:	00092603          	lw	a2,0(s2)
1c006aa6:	659d                	lui	a1,0x7
1c006aa8:	b8858593          	addi	a1,a1,-1144 # 6b88 <__rt_stack_size+0x6388>
1c006aac:	962e                	add	a2,a2,a1
1c006aae:	95aa                	add	a1,a1,a0
1c006ab0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006ab2:	4805                	li	a6,1
1c006ab4:	101c                	addi	a5,sp,32
1c006ab6:	4705                	li	a4,1
1c006ab8:	46a5                	li	a3,9
1c006aba:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006abc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006abe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006ac0:	02010a23          	sb	zero,52(sp)
1c006ac4:	6f7020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006ac8:	03410783          	lb	a5,52(sp)
1c006acc:	ef89                	bnez	a5,1c006ae6 <quant_modelCNN_Construct+0x2a6e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ace:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006ad2:	4585                	li	a1,1
1c006ad4:	01c00513          	li	a0,28
1c006ad8:	794050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006adc:	300a9073          	csrw	mstatus,s5
1c006ae0:	03410783          	lb	a5,52(sp)
1c006ae4:	d7ed                	beqz	a5,1c006ace <quant_modelCNN_Construct+0x2a56>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27540), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27540), 9, 0, &UchanHF1);
1c006ae6:	60c9a503          	lw	a0,1548(s3)
1c006aea:	00092603          	lw	a2,0(s2)
1c006aee:	659d                	lui	a1,0x7
1c006af0:	b9458593          	addi	a1,a1,-1132 # 6b94 <__rt_stack_size+0x6394>
1c006af4:	962e                	add	a2,a2,a1
1c006af6:	95aa                	add	a1,a1,a0
1c006af8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006afa:	4805                	li	a6,1
1c006afc:	101c                	addi	a5,sp,32
1c006afe:	4705                	li	a4,1
1c006b00:	46a5                	li	a3,9
1c006b02:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006b04:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006b06:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006b08:	02010a23          	sb	zero,52(sp)
1c006b0c:	6af020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006b10:	03410783          	lb	a5,52(sp)
1c006b14:	ef89                	bnez	a5,1c006b2e <quant_modelCNN_Construct+0x2ab6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b16:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006b1a:	4585                	li	a1,1
1c006b1c:	01c00513          	li	a0,28
1c006b20:	74c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006b24:	300a9073          	csrw	mstatus,s5
1c006b28:	03410783          	lb	a5,52(sp)
1c006b2c:	d7ed                	beqz	a5,1c006b16 <quant_modelCNN_Construct+0x2a9e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27552), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27552), 9, 0, &UchanHF1);
1c006b2e:	60c9a503          	lw	a0,1548(s3)
1c006b32:	00092603          	lw	a2,0(s2)
1c006b36:	659d                	lui	a1,0x7
1c006b38:	ba058593          	addi	a1,a1,-1120 # 6ba0 <__rt_stack_size+0x63a0>
1c006b3c:	962e                	add	a2,a2,a1
1c006b3e:	95aa                	add	a1,a1,a0
1c006b40:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006b42:	4805                	li	a6,1
1c006b44:	101c                	addi	a5,sp,32
1c006b46:	4705                	li	a4,1
1c006b48:	46a5                	li	a3,9
1c006b4a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006b4c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006b4e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006b50:	02010a23          	sb	zero,52(sp)
1c006b54:	667020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006b58:	03410783          	lb	a5,52(sp)
1c006b5c:	ef89                	bnez	a5,1c006b76 <quant_modelCNN_Construct+0x2afe>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b5e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006b62:	4585                	li	a1,1
1c006b64:	01c00513          	li	a0,28
1c006b68:	704050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006b6c:	300a9073          	csrw	mstatus,s5
1c006b70:	03410783          	lb	a5,52(sp)
1c006b74:	d7ed                	beqz	a5,1c006b5e <quant_modelCNN_Construct+0x2ae6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 19392), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 19392), 768, 0, &UchanHF1);
1c006b76:	60c9a503          	lw	a0,1548(s3)
1c006b7a:	00092603          	lw	a2,0(s2)
1c006b7e:	6595                	lui	a1,0x5
1c006b80:	bc058593          	addi	a1,a1,-1088 # 4bc0 <__rt_stack_size+0x43c0>
1c006b84:	962e                	add	a2,a2,a1
1c006b86:	95aa                	add	a1,a1,a0
1c006b88:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006b8a:	4805                	li	a6,1
1c006b8c:	101c                	addi	a5,sp,32
1c006b8e:	4705                	li	a4,1
1c006b90:	30000693          	li	a3,768
1c006b94:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006b96:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006b98:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006b9a:	02010a23          	sb	zero,52(sp)
1c006b9e:	61d020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006ba2:	03410783          	lb	a5,52(sp)
1c006ba6:	ef89                	bnez	a5,1c006bc0 <quant_modelCNN_Construct+0x2b48>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ba8:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006bac:	4585                	li	a1,1
1c006bae:	01c00513          	li	a0,28
1c006bb2:	6ba050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006bb6:	300a9073          	csrw	mstatus,s5
1c006bba:	03410783          	lb	a5,52(sp)
1c006bbe:	d7ed                	beqz	a5,1c006ba8 <quant_modelCNN_Construct+0x2b30>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25600), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25600), 64, 0, &UchanHF1);
1c006bc0:	60c9a503          	lw	a0,1548(s3)
1c006bc4:	00092603          	lw	a2,0(s2)
1c006bc8:	6599                	lui	a1,0x6
1c006bca:	40058593          	addi	a1,a1,1024 # 6400 <__rt_stack_size+0x5c00>
1c006bce:	962e                	add	a2,a2,a1
1c006bd0:	95aa                	add	a1,a1,a0
1c006bd2:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006bd4:	4805                	li	a6,1
1c006bd6:	101c                	addi	a5,sp,32
1c006bd8:	4705                	li	a4,1
1c006bda:	04000693          	li	a3,64
1c006bde:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006be0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006be2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006be4:	02010a23          	sb	zero,52(sp)
1c006be8:	5d3020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006bec:	03410783          	lb	a5,52(sp)
1c006bf0:	ef89                	bnez	a5,1c006c0a <quant_modelCNN_Construct+0x2b92>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006bf2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006bf6:	4585                	li	a1,1
1c006bf8:	01c00513          	li	a0,28
1c006bfc:	670050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006c00:	300a9073          	csrw	mstatus,s5
1c006c04:	03410783          	lb	a5,52(sp)
1c006c08:	d7ed                	beqz	a5,1c006bf2 <quant_modelCNN_Construct+0x2b7a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26784), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26784), 16, 0, &UchanHF1);
1c006c0a:	60c9a503          	lw	a0,1548(s3)
1c006c0e:	00092603          	lw	a2,0(s2)
1c006c12:	659d                	lui	a1,0x7
1c006c14:	8a058593          	addi	a1,a1,-1888 # 68a0 <__rt_stack_size+0x60a0>
1c006c18:	962e                	add	a2,a2,a1
1c006c1a:	95aa                	add	a1,a1,a0
1c006c1c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006c1e:	4805                	li	a6,1
1c006c20:	101c                	addi	a5,sp,32
1c006c22:	4705                	li	a4,1
1c006c24:	46c1                	li	a3,16
1c006c26:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006c28:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006c2a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006c2c:	02010a23          	sb	zero,52(sp)
1c006c30:	58b020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006c34:	03410783          	lb	a5,52(sp)
1c006c38:	ef89                	bnez	a5,1c006c52 <quant_modelCNN_Construct+0x2bda>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c3a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006c3e:	4585                	li	a1,1
1c006c40:	01c00513          	li	a0,28
1c006c44:	628050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006c48:	300a9073          	csrw	mstatus,s5
1c006c4c:	03410783          	lb	a5,52(sp)
1c006c50:	d7ed                	beqz	a5,1c006c3a <quant_modelCNN_Construct+0x2bc2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26800), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26800), 16, 0, &UchanHF1);
1c006c52:	60c9a503          	lw	a0,1548(s3)
1c006c56:	00092603          	lw	a2,0(s2)
1c006c5a:	659d                	lui	a1,0x7
1c006c5c:	8b058593          	addi	a1,a1,-1872 # 68b0 <__rt_stack_size+0x60b0>
1c006c60:	962e                	add	a2,a2,a1
1c006c62:	95aa                	add	a1,a1,a0
1c006c64:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006c66:	4805                	li	a6,1
1c006c68:	101c                	addi	a5,sp,32
1c006c6a:	4705                	li	a4,1
1c006c6c:	46c1                	li	a3,16
1c006c6e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006c70:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006c72:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006c74:	02010a23          	sb	zero,52(sp)
1c006c78:	543020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006c7c:	03410783          	lb	a5,52(sp)
1c006c80:	ef89                	bnez	a5,1c006c9a <quant_modelCNN_Construct+0x2c22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c82:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006c86:	4585                	li	a1,1
1c006c88:	01c00513          	li	a0,28
1c006c8c:	5e0050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006c90:	300a9073          	csrw	mstatus,s5
1c006c94:	03410783          	lb	a5,52(sp)
1c006c98:	d7ed                	beqz	a5,1c006c82 <quant_modelCNN_Construct+0x2c0a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27564), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27564), 9, 0, &UchanHF1);
1c006c9a:	60c9a503          	lw	a0,1548(s3)
1c006c9e:	00092603          	lw	a2,0(s2)
1c006ca2:	659d                	lui	a1,0x7
1c006ca4:	bac58593          	addi	a1,a1,-1108 # 6bac <__rt_stack_size+0x63ac>
1c006ca8:	962e                	add	a2,a2,a1
1c006caa:	95aa                	add	a1,a1,a0
1c006cac:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006cae:	4805                	li	a6,1
1c006cb0:	101c                	addi	a5,sp,32
1c006cb2:	4705                	li	a4,1
1c006cb4:	46a5                	li	a3,9
1c006cb6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006cb8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006cba:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006cbc:	02010a23          	sb	zero,52(sp)
1c006cc0:	4fb020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006cc4:	03410783          	lb	a5,52(sp)
1c006cc8:	ef89                	bnez	a5,1c006ce2 <quant_modelCNN_Construct+0x2c6a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006cca:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006cce:	4585                	li	a1,1
1c006cd0:	01c00513          	li	a0,28
1c006cd4:	598050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006cd8:	300a9073          	csrw	mstatus,s5
1c006cdc:	03410783          	lb	a5,52(sp)
1c006ce0:	d7ed                	beqz	a5,1c006cca <quant_modelCNN_Construct+0x2c52>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 20160), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 20160), 768, 0, &UchanHF1);
1c006ce2:	60c9a503          	lw	a0,1548(s3)
1c006ce6:	00092603          	lw	a2,0(s2)
1c006cea:	6595                	lui	a1,0x5
1c006cec:	ec058593          	addi	a1,a1,-320 # 4ec0 <__rt_stack_size+0x46c0>
1c006cf0:	962e                	add	a2,a2,a1
1c006cf2:	95aa                	add	a1,a1,a0
1c006cf4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006cf6:	4805                	li	a6,1
1c006cf8:	101c                	addi	a5,sp,32
1c006cfa:	4705                	li	a4,1
1c006cfc:	30000693          	li	a3,768
1c006d00:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006d02:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006d04:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006d06:	02010a23          	sb	zero,52(sp)
1c006d0a:	4b1020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006d0e:	03410783          	lb	a5,52(sp)
1c006d12:	ef89                	bnez	a5,1c006d2c <quant_modelCNN_Construct+0x2cb4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d14:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006d18:	4585                	li	a1,1
1c006d1a:	01c00513          	li	a0,28
1c006d1e:	54e050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006d22:	300a9073          	csrw	mstatus,s5
1c006d26:	03410783          	lb	a5,52(sp)
1c006d2a:	d7ed                	beqz	a5,1c006d14 <quant_modelCNN_Construct+0x2c9c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25664), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25664), 64, 0, &UchanHF1);
1c006d2c:	60c9a503          	lw	a0,1548(s3)
1c006d30:	00092603          	lw	a2,0(s2)
1c006d34:	6599                	lui	a1,0x6
1c006d36:	44058593          	addi	a1,a1,1088 # 6440 <__rt_stack_size+0x5c40>
1c006d3a:	962e                	add	a2,a2,a1
1c006d3c:	95aa                	add	a1,a1,a0
1c006d3e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006d40:	4805                	li	a6,1
1c006d42:	101c                	addi	a5,sp,32
1c006d44:	4705                	li	a4,1
1c006d46:	04000693          	li	a3,64
1c006d4a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006d4c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006d4e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006d50:	02010a23          	sb	zero,52(sp)
1c006d54:	467020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006d58:	03410783          	lb	a5,52(sp)
1c006d5c:	ef89                	bnez	a5,1c006d76 <quant_modelCNN_Construct+0x2cfe>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d5e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006d62:	4585                	li	a1,1
1c006d64:	01c00513          	li	a0,28
1c006d68:	504050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006d6c:	300a9073          	csrw	mstatus,s5
1c006d70:	03410783          	lb	a5,52(sp)
1c006d74:	d7ed                	beqz	a5,1c006d5e <quant_modelCNN_Construct+0x2ce6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26816), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26816), 16, 0, &UchanHF1);
1c006d76:	60c9a503          	lw	a0,1548(s3)
1c006d7a:	00092603          	lw	a2,0(s2)
1c006d7e:	659d                	lui	a1,0x7
1c006d80:	8c058593          	addi	a1,a1,-1856 # 68c0 <__rt_stack_size+0x60c0>
1c006d84:	962e                	add	a2,a2,a1
1c006d86:	95aa                	add	a1,a1,a0
1c006d88:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006d8a:	4805                	li	a6,1
1c006d8c:	101c                	addi	a5,sp,32
1c006d8e:	4705                	li	a4,1
1c006d90:	46c1                	li	a3,16
1c006d92:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006d94:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006d96:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006d98:	02010a23          	sb	zero,52(sp)
1c006d9c:	41f020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006da0:	03410783          	lb	a5,52(sp)
1c006da4:	ef89                	bnez	a5,1c006dbe <quant_modelCNN_Construct+0x2d46>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006da6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006daa:	4585                	li	a1,1
1c006dac:	01c00513          	li	a0,28
1c006db0:	4bc050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006db4:	300a9073          	csrw	mstatus,s5
1c006db8:	03410783          	lb	a5,52(sp)
1c006dbc:	d7ed                	beqz	a5,1c006da6 <quant_modelCNN_Construct+0x2d2e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26832), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26832), 16, 0, &UchanHF1);
1c006dbe:	60c9a503          	lw	a0,1548(s3)
1c006dc2:	00092603          	lw	a2,0(s2)
1c006dc6:	659d                	lui	a1,0x7
1c006dc8:	8d058593          	addi	a1,a1,-1840 # 68d0 <__rt_stack_size+0x60d0>
1c006dcc:	962e                	add	a2,a2,a1
1c006dce:	95aa                	add	a1,a1,a0
1c006dd0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006dd2:	4805                	li	a6,1
1c006dd4:	101c                	addi	a5,sp,32
1c006dd6:	4705                	li	a4,1
1c006dd8:	46c1                	li	a3,16
1c006dda:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006ddc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006dde:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006de0:	02010a23          	sb	zero,52(sp)
1c006de4:	3d7020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006de8:	03410783          	lb	a5,52(sp)
1c006dec:	ef89                	bnez	a5,1c006e06 <quant_modelCNN_Construct+0x2d8e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006dee:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006df2:	4585                	li	a1,1
1c006df4:	01c00513          	li	a0,28
1c006df8:	474050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006dfc:	300a9073          	csrw	mstatus,s5
1c006e00:	03410783          	lb	a5,52(sp)
1c006e04:	d7ed                	beqz	a5,1c006dee <quant_modelCNN_Construct+0x2d76>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27576), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27576), 9, 0, &UchanHF1);
1c006e06:	60c9a503          	lw	a0,1548(s3)
1c006e0a:	00092603          	lw	a2,0(s2)
1c006e0e:	659d                	lui	a1,0x7
1c006e10:	bb858593          	addi	a1,a1,-1096 # 6bb8 <__rt_stack_size+0x63b8>
1c006e14:	962e                	add	a2,a2,a1
1c006e16:	95aa                	add	a1,a1,a0
1c006e18:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006e1a:	4805                	li	a6,1
1c006e1c:	101c                	addi	a5,sp,32
1c006e1e:	4705                	li	a4,1
1c006e20:	46a5                	li	a3,9
1c006e22:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006e24:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006e26:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006e28:	02010a23          	sb	zero,52(sp)
1c006e2c:	38f020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006e30:	03410783          	lb	a5,52(sp)
1c006e34:	ef89                	bnez	a5,1c006e4e <quant_modelCNN_Construct+0x2dd6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006e36:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006e3a:	4585                	li	a1,1
1c006e3c:	01c00513          	li	a0,28
1c006e40:	42c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006e44:	300a9073          	csrw	mstatus,s5
1c006e48:	03410783          	lb	a5,52(sp)
1c006e4c:	d7ed                	beqz	a5,1c006e36 <quant_modelCNN_Construct+0x2dbe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27588), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27588), 9, 0, &UchanHF1);
1c006e4e:	60c9a503          	lw	a0,1548(s3)
1c006e52:	00092603          	lw	a2,0(s2)
1c006e56:	659d                	lui	a1,0x7
1c006e58:	bc458593          	addi	a1,a1,-1084 # 6bc4 <__rt_stack_size+0x63c4>
1c006e5c:	962e                	add	a2,a2,a1
1c006e5e:	95aa                	add	a1,a1,a0
1c006e60:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006e62:	4805                	li	a6,1
1c006e64:	101c                	addi	a5,sp,32
1c006e66:	4705                	li	a4,1
1c006e68:	46a5                	li	a3,9
1c006e6a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006e6c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006e6e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006e70:	02010a23          	sb	zero,52(sp)
1c006e74:	347020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006e78:	03410783          	lb	a5,52(sp)
1c006e7c:	ef89                	bnez	a5,1c006e96 <quant_modelCNN_Construct+0x2e1e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006e7e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006e82:	4585                	li	a1,1
1c006e84:	01c00513          	li	a0,28
1c006e88:	3e4050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006e8c:	300a9073          	csrw	mstatus,s5
1c006e90:	03410783          	lb	a5,52(sp)
1c006e94:	d7ed                	beqz	a5,1c006e7e <quant_modelCNN_Construct+0x2e06>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27600), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27600), 9, 0, &UchanHF1);
1c006e96:	60c9a503          	lw	a0,1548(s3)
1c006e9a:	00092603          	lw	a2,0(s2)
1c006e9e:	659d                	lui	a1,0x7
1c006ea0:	bd058593          	addi	a1,a1,-1072 # 6bd0 <__rt_stack_size+0x63d0>
1c006ea4:	962e                	add	a2,a2,a1
1c006ea6:	95aa                	add	a1,a1,a0
1c006ea8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006eaa:	4805                	li	a6,1
1c006eac:	101c                	addi	a5,sp,32
1c006eae:	4705                	li	a4,1
1c006eb0:	46a5                	li	a3,9
1c006eb2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006eb4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006eb6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006eb8:	02010a23          	sb	zero,52(sp)
1c006ebc:	2ff020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006ec0:	03410783          	lb	a5,52(sp)
1c006ec4:	ef89                	bnez	a5,1c006ede <quant_modelCNN_Construct+0x2e66>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ec6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006eca:	4585                	li	a1,1
1c006ecc:	01c00513          	li	a0,28
1c006ed0:	39c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006ed4:	300a9073          	csrw	mstatus,s5
1c006ed8:	03410783          	lb	a5,52(sp)
1c006edc:	d7ed                	beqz	a5,1c006ec6 <quant_modelCNN_Construct+0x2e4e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 20928), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 20928), 768, 0, &UchanHF1);
1c006ede:	60c9a503          	lw	a0,1548(s3)
1c006ee2:	00092603          	lw	a2,0(s2)
1c006ee6:	6595                	lui	a1,0x5
1c006ee8:	1c058593          	addi	a1,a1,448 # 51c0 <__rt_stack_size+0x49c0>
1c006eec:	962e                	add	a2,a2,a1
1c006eee:	95aa                	add	a1,a1,a0
1c006ef0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006ef2:	4805                	li	a6,1
1c006ef4:	101c                	addi	a5,sp,32
1c006ef6:	4705                	li	a4,1
1c006ef8:	30000693          	li	a3,768
1c006efc:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006efe:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006f00:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006f02:	02010a23          	sb	zero,52(sp)
1c006f06:	2b5020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006f0a:	03410783          	lb	a5,52(sp)
1c006f0e:	ef89                	bnez	a5,1c006f28 <quant_modelCNN_Construct+0x2eb0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006f10:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006f14:	4585                	li	a1,1
1c006f16:	01c00513          	li	a0,28
1c006f1a:	352050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006f1e:	300a9073          	csrw	mstatus,s5
1c006f22:	03410783          	lb	a5,52(sp)
1c006f26:	d7ed                	beqz	a5,1c006f10 <quant_modelCNN_Construct+0x2e98>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25728), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25728), 64, 0, &UchanHF1);
1c006f28:	60c9a503          	lw	a0,1548(s3)
1c006f2c:	00092603          	lw	a2,0(s2)
1c006f30:	6599                	lui	a1,0x6
1c006f32:	48058593          	addi	a1,a1,1152 # 6480 <__rt_stack_size+0x5c80>
1c006f36:	962e                	add	a2,a2,a1
1c006f38:	95aa                	add	a1,a1,a0
1c006f3a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006f3c:	4805                	li	a6,1
1c006f3e:	101c                	addi	a5,sp,32
1c006f40:	4705                	li	a4,1
1c006f42:	04000693          	li	a3,64
1c006f46:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006f48:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006f4a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006f4c:	02010a23          	sb	zero,52(sp)
1c006f50:	26b020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006f54:	03410783          	lb	a5,52(sp)
1c006f58:	ef89                	bnez	a5,1c006f72 <quant_modelCNN_Construct+0x2efa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006f5a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006f5e:	4585                	li	a1,1
1c006f60:	01c00513          	li	a0,28
1c006f64:	308050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006f68:	300a9073          	csrw	mstatus,s5
1c006f6c:	03410783          	lb	a5,52(sp)
1c006f70:	d7ed                	beqz	a5,1c006f5a <quant_modelCNN_Construct+0x2ee2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26848), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26848), 16, 0, &UchanHF1);
1c006f72:	60c9a503          	lw	a0,1548(s3)
1c006f76:	00092603          	lw	a2,0(s2)
1c006f7a:	659d                	lui	a1,0x7
1c006f7c:	8e058593          	addi	a1,a1,-1824 # 68e0 <__rt_stack_size+0x60e0>
1c006f80:	962e                	add	a2,a2,a1
1c006f82:	95aa                	add	a1,a1,a0
1c006f84:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006f86:	4805                	li	a6,1
1c006f88:	101c                	addi	a5,sp,32
1c006f8a:	4705                	li	a4,1
1c006f8c:	46c1                	li	a3,16
1c006f8e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006f90:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006f92:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006f94:	02010a23          	sb	zero,52(sp)
1c006f98:	223020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006f9c:	03410783          	lb	a5,52(sp)
1c006fa0:	ef89                	bnez	a5,1c006fba <quant_modelCNN_Construct+0x2f42>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006fa2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006fa6:	4585                	li	a1,1
1c006fa8:	01c00513          	li	a0,28
1c006fac:	2c0050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006fb0:	300a9073          	csrw	mstatus,s5
1c006fb4:	03410783          	lb	a5,52(sp)
1c006fb8:	d7ed                	beqz	a5,1c006fa2 <quant_modelCNN_Construct+0x2f2a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26864), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26864), 16, 0, &UchanHF1);
1c006fba:	60c9a503          	lw	a0,1548(s3)
1c006fbe:	00092603          	lw	a2,0(s2)
1c006fc2:	659d                	lui	a1,0x7
1c006fc4:	8f058593          	addi	a1,a1,-1808 # 68f0 <__rt_stack_size+0x60f0>
1c006fc8:	962e                	add	a2,a2,a1
1c006fca:	95aa                	add	a1,a1,a0
1c006fcc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c006fce:	4805                	li	a6,1
1c006fd0:	101c                	addi	a5,sp,32
1c006fd2:	4705                	li	a4,1
1c006fd4:	46c1                	li	a3,16
1c006fd6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c006fd8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c006fda:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c006fdc:	02010a23          	sb	zero,52(sp)
1c006fe0:	1db020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c006fe4:	03410783          	lb	a5,52(sp)
1c006fe8:	ef89                	bnez	a5,1c007002 <quant_modelCNN_Construct+0x2f8a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006fea:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006fee:	4585                	li	a1,1
1c006ff0:	01c00513          	li	a0,28
1c006ff4:	278050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c006ff8:	300a9073          	csrw	mstatus,s5
1c006ffc:	03410783          	lb	a5,52(sp)
1c007000:	d7ed                	beqz	a5,1c006fea <quant_modelCNN_Construct+0x2f72>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27612), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27612), 9, 0, &UchanHF1);
1c007002:	60c9a503          	lw	a0,1548(s3)
1c007006:	00092603          	lw	a2,0(s2)
1c00700a:	659d                	lui	a1,0x7
1c00700c:	bdc58593          	addi	a1,a1,-1060 # 6bdc <__rt_stack_size+0x63dc>
1c007010:	962e                	add	a2,a2,a1
1c007012:	95aa                	add	a1,a1,a0
1c007014:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c007016:	4805                	li	a6,1
1c007018:	101c                	addi	a5,sp,32
1c00701a:	4705                	li	a4,1
1c00701c:	46a5                	li	a3,9
1c00701e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007020:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c007022:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007024:	02010a23          	sb	zero,52(sp)
1c007028:	193020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00702c:	03410783          	lb	a5,52(sp)
1c007030:	ef89                	bnez	a5,1c00704a <quant_modelCNN_Construct+0x2fd2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007032:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007036:	4585                	li	a1,1
1c007038:	01c00513          	li	a0,28
1c00703c:	230050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007040:	300a9073          	csrw	mstatus,s5
1c007044:	03410783          	lb	a5,52(sp)
1c007048:	d7ed                	beqz	a5,1c007032 <quant_modelCNN_Construct+0x2fba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 21696), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 21696), 768, 0, &UchanHF1);
1c00704a:	60c9a503          	lw	a0,1548(s3)
1c00704e:	00092603          	lw	a2,0(s2)
1c007052:	6595                	lui	a1,0x5
1c007054:	4c058593          	addi	a1,a1,1216 # 54c0 <__rt_stack_size+0x4cc0>
1c007058:	962e                	add	a2,a2,a1
1c00705a:	95aa                	add	a1,a1,a0
1c00705c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00705e:	4805                	li	a6,1
1c007060:	101c                	addi	a5,sp,32
1c007062:	4705                	li	a4,1
1c007064:	30000693          	li	a3,768
1c007068:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00706a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00706c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00706e:	02010a23          	sb	zero,52(sp)
1c007072:	149020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007076:	03410783          	lb	a5,52(sp)
1c00707a:	ef89                	bnez	a5,1c007094 <quant_modelCNN_Construct+0x301c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00707c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007080:	4585                	li	a1,1
1c007082:	01c00513          	li	a0,28
1c007086:	1e6050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00708a:	300a9073          	csrw	mstatus,s5
1c00708e:	03410783          	lb	a5,52(sp)
1c007092:	d7ed                	beqz	a5,1c00707c <quant_modelCNN_Construct+0x3004>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25792), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25792), 64, 0, &UchanHF1);
1c007094:	60c9a503          	lw	a0,1548(s3)
1c007098:	00092603          	lw	a2,0(s2)
1c00709c:	6599                	lui	a1,0x6
1c00709e:	4c058593          	addi	a1,a1,1216 # 64c0 <__rt_stack_size+0x5cc0>
1c0070a2:	962e                	add	a2,a2,a1
1c0070a4:	95aa                	add	a1,a1,a0
1c0070a6:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0070a8:	4805                	li	a6,1
1c0070aa:	101c                	addi	a5,sp,32
1c0070ac:	4705                	li	a4,1
1c0070ae:	04000693          	li	a3,64
1c0070b2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0070b4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0070b6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0070b8:	02010a23          	sb	zero,52(sp)
1c0070bc:	0ff020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0070c0:	03410783          	lb	a5,52(sp)
1c0070c4:	ef89                	bnez	a5,1c0070de <quant_modelCNN_Construct+0x3066>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070c6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0070ca:	4585                	li	a1,1
1c0070cc:	01c00513          	li	a0,28
1c0070d0:	19c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0070d4:	300a9073          	csrw	mstatus,s5
1c0070d8:	03410783          	lb	a5,52(sp)
1c0070dc:	d7ed                	beqz	a5,1c0070c6 <quant_modelCNN_Construct+0x304e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26880), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26880), 16, 0, &UchanHF1);
1c0070de:	60c9a503          	lw	a0,1548(s3)
1c0070e2:	00092603          	lw	a2,0(s2)
1c0070e6:	659d                	lui	a1,0x7
1c0070e8:	90058593          	addi	a1,a1,-1792 # 6900 <__rt_stack_size+0x6100>
1c0070ec:	962e                	add	a2,a2,a1
1c0070ee:	95aa                	add	a1,a1,a0
1c0070f0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0070f2:	4805                	li	a6,1
1c0070f4:	101c                	addi	a5,sp,32
1c0070f6:	4705                	li	a4,1
1c0070f8:	46c1                	li	a3,16
1c0070fa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0070fc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0070fe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007100:	02010a23          	sb	zero,52(sp)
1c007104:	0b7020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007108:	03410783          	lb	a5,52(sp)
1c00710c:	ef89                	bnez	a5,1c007126 <quant_modelCNN_Construct+0x30ae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00710e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007112:	4585                	li	a1,1
1c007114:	01c00513          	li	a0,28
1c007118:	154050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00711c:	300a9073          	csrw	mstatus,s5
1c007120:	03410783          	lb	a5,52(sp)
1c007124:	d7ed                	beqz	a5,1c00710e <quant_modelCNN_Construct+0x3096>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26896), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26896), 16, 0, &UchanHF1);
1c007126:	60c9a503          	lw	a0,1548(s3)
1c00712a:	00092603          	lw	a2,0(s2)
1c00712e:	659d                	lui	a1,0x7
1c007130:	91058593          	addi	a1,a1,-1776 # 6910 <__rt_stack_size+0x6110>
1c007134:	962e                	add	a2,a2,a1
1c007136:	95aa                	add	a1,a1,a0
1c007138:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00713a:	4805                	li	a6,1
1c00713c:	101c                	addi	a5,sp,32
1c00713e:	4705                	li	a4,1
1c007140:	46c1                	li	a3,16
1c007142:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007144:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c007146:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007148:	02010a23          	sb	zero,52(sp)
1c00714c:	06f020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007150:	03410783          	lb	a5,52(sp)
1c007154:	ef89                	bnez	a5,1c00716e <quant_modelCNN_Construct+0x30f6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007156:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00715a:	4585                	li	a1,1
1c00715c:	01c00513          	li	a0,28
1c007160:	10c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007164:	300a9073          	csrw	mstatus,s5
1c007168:	03410783          	lb	a5,52(sp)
1c00716c:	d7ed                	beqz	a5,1c007156 <quant_modelCNN_Construct+0x30de>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27624), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27624), 9, 0, &UchanHF1);
1c00716e:	60c9a503          	lw	a0,1548(s3)
1c007172:	00092603          	lw	a2,0(s2)
1c007176:	659d                	lui	a1,0x7
1c007178:	be858593          	addi	a1,a1,-1048 # 6be8 <__rt_stack_size+0x63e8>
1c00717c:	962e                	add	a2,a2,a1
1c00717e:	95aa                	add	a1,a1,a0
1c007180:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c007182:	4805                	li	a6,1
1c007184:	101c                	addi	a5,sp,32
1c007186:	4705                	li	a4,1
1c007188:	46a5                	li	a3,9
1c00718a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00718c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00718e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007190:	02010a23          	sb	zero,52(sp)
1c007194:	027020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007198:	03410783          	lb	a5,52(sp)
1c00719c:	ef89                	bnez	a5,1c0071b6 <quant_modelCNN_Construct+0x313e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00719e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0071a2:	4585                	li	a1,1
1c0071a4:	01c00513          	li	a0,28
1c0071a8:	0c4050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0071ac:	300a9073          	csrw	mstatus,s5
1c0071b0:	03410783          	lb	a5,52(sp)
1c0071b4:	d7ed                	beqz	a5,1c00719e <quant_modelCNN_Construct+0x3126>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27636), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27636), 9, 0, &UchanHF1);
1c0071b6:	60c9a503          	lw	a0,1548(s3)
1c0071ba:	00092603          	lw	a2,0(s2)
1c0071be:	659d                	lui	a1,0x7
1c0071c0:	bf458593          	addi	a1,a1,-1036 # 6bf4 <__rt_stack_size+0x63f4>
1c0071c4:	962e                	add	a2,a2,a1
1c0071c6:	95aa                	add	a1,a1,a0
1c0071c8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0071ca:	4805                	li	a6,1
1c0071cc:	101c                	addi	a5,sp,32
1c0071ce:	4705                	li	a4,1
1c0071d0:	46a5                	li	a3,9
1c0071d2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0071d4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0071d6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0071d8:	02010a23          	sb	zero,52(sp)
1c0071dc:	7de020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0071e0:	03410783          	lb	a5,52(sp)
1c0071e4:	ef89                	bnez	a5,1c0071fe <quant_modelCNN_Construct+0x3186>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0071e6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0071ea:	4585                	li	a1,1
1c0071ec:	01c00513          	li	a0,28
1c0071f0:	07c050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0071f4:	300a9073          	csrw	mstatus,s5
1c0071f8:	03410783          	lb	a5,52(sp)
1c0071fc:	d7ed                	beqz	a5,1c0071e6 <quant_modelCNN_Construct+0x316e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27648), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27648), 9, 0, &UchanHF1);
1c0071fe:	60c9a503          	lw	a0,1548(s3)
1c007202:	00092603          	lw	a2,0(s2)
1c007206:	659d                	lui	a1,0x7
1c007208:	c0058593          	addi	a1,a1,-1024 # 6c00 <__rt_stack_size+0x6400>
1c00720c:	962e                	add	a2,a2,a1
1c00720e:	95aa                	add	a1,a1,a0
1c007210:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c007212:	4805                	li	a6,1
1c007214:	101c                	addi	a5,sp,32
1c007216:	4705                	li	a4,1
1c007218:	46a5                	li	a3,9
1c00721a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00721c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00721e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007220:	02010a23          	sb	zero,52(sp)
1c007224:	796020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007228:	03410783          	lb	a5,52(sp)
1c00722c:	ef89                	bnez	a5,1c007246 <quant_modelCNN_Construct+0x31ce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00722e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007232:	4585                	li	a1,1
1c007234:	01c00513          	li	a0,28
1c007238:	034050ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00723c:	300a9073          	csrw	mstatus,s5
1c007240:	03410783          	lb	a5,52(sp)
1c007244:	d7ed                	beqz	a5,1c00722e <quant_modelCNN_Construct+0x31b6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 22464), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 22464), 768, 0, &UchanHF1);
1c007246:	60c9a503          	lw	a0,1548(s3)
1c00724a:	00092603          	lw	a2,0(s2)
1c00724e:	6595                	lui	a1,0x5
1c007250:	7c058593          	addi	a1,a1,1984 # 57c0 <__rt_stack_size+0x4fc0>
1c007254:	962e                	add	a2,a2,a1
1c007256:	95aa                	add	a1,a1,a0
1c007258:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00725a:	4805                	li	a6,1
1c00725c:	101c                	addi	a5,sp,32
1c00725e:	4705                	li	a4,1
1c007260:	30000693          	li	a3,768
1c007264:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007266:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c007268:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00726a:	02010a23          	sb	zero,52(sp)
1c00726e:	74c020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007272:	03410783          	lb	a5,52(sp)
1c007276:	ef89                	bnez	a5,1c007290 <quant_modelCNN_Construct+0x3218>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007278:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00727c:	4585                	li	a1,1
1c00727e:	01c00513          	li	a0,28
1c007282:	7eb040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007286:	300a9073          	csrw	mstatus,s5
1c00728a:	03410783          	lb	a5,52(sp)
1c00728e:	d7ed                	beqz	a5,1c007278 <quant_modelCNN_Construct+0x3200>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25856), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25856), 64, 0, &UchanHF1);
1c007290:	60c9a503          	lw	a0,1548(s3)
1c007294:	00092603          	lw	a2,0(s2)
1c007298:	6599                	lui	a1,0x6
1c00729a:	50058593          	addi	a1,a1,1280 # 6500 <__rt_stack_size+0x5d00>
1c00729e:	962e                	add	a2,a2,a1
1c0072a0:	95aa                	add	a1,a1,a0
1c0072a2:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0072a4:	4805                	li	a6,1
1c0072a6:	101c                	addi	a5,sp,32
1c0072a8:	4705                	li	a4,1
1c0072aa:	04000693          	li	a3,64
1c0072ae:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0072b0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0072b2:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0072b4:	02010a23          	sb	zero,52(sp)
1c0072b8:	702020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0072bc:	03410783          	lb	a5,52(sp)
1c0072c0:	ef89                	bnez	a5,1c0072da <quant_modelCNN_Construct+0x3262>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0072c2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0072c6:	4585                	li	a1,1
1c0072c8:	01c00513          	li	a0,28
1c0072cc:	7a1040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0072d0:	300a9073          	csrw	mstatus,s5
1c0072d4:	03410783          	lb	a5,52(sp)
1c0072d8:	d7ed                	beqz	a5,1c0072c2 <quant_modelCNN_Construct+0x324a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26912), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26912), 16, 0, &UchanHF1);
1c0072da:	60c9a503          	lw	a0,1548(s3)
1c0072de:	00092603          	lw	a2,0(s2)
1c0072e2:	659d                	lui	a1,0x7
1c0072e4:	92058593          	addi	a1,a1,-1760 # 6920 <__rt_stack_size+0x6120>
1c0072e8:	962e                	add	a2,a2,a1
1c0072ea:	95aa                	add	a1,a1,a0
1c0072ec:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0072ee:	4805                	li	a6,1
1c0072f0:	101c                	addi	a5,sp,32
1c0072f2:	4705                	li	a4,1
1c0072f4:	46c1                	li	a3,16
1c0072f6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0072f8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0072fa:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0072fc:	02010a23          	sb	zero,52(sp)
1c007300:	6ba020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007304:	03410783          	lb	a5,52(sp)
1c007308:	ef89                	bnez	a5,1c007322 <quant_modelCNN_Construct+0x32aa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00730a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00730e:	4585                	li	a1,1
1c007310:	01c00513          	li	a0,28
1c007314:	759040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007318:	300a9073          	csrw	mstatus,s5
1c00731c:	03410783          	lb	a5,52(sp)
1c007320:	d7ed                	beqz	a5,1c00730a <quant_modelCNN_Construct+0x3292>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26928), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26928), 16, 0, &UchanHF1);
1c007322:	60c9a503          	lw	a0,1548(s3)
1c007326:	00092603          	lw	a2,0(s2)
1c00732a:	659d                	lui	a1,0x7
1c00732c:	93058593          	addi	a1,a1,-1744 # 6930 <__rt_stack_size+0x6130>
1c007330:	962e                	add	a2,a2,a1
1c007332:	95aa                	add	a1,a1,a0
1c007334:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c007336:	4805                	li	a6,1
1c007338:	101c                	addi	a5,sp,32
1c00733a:	4705                	li	a4,1
1c00733c:	46c1                	li	a3,16
1c00733e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007340:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c007342:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007344:	02010a23          	sb	zero,52(sp)
1c007348:	672020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c00734c:	03410783          	lb	a5,52(sp)
1c007350:	ef89                	bnez	a5,1c00736a <quant_modelCNN_Construct+0x32f2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007352:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007356:	4585                	li	a1,1
1c007358:	01c00513          	li	a0,28
1c00735c:	711040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007360:	300a9073          	csrw	mstatus,s5
1c007364:	03410783          	lb	a5,52(sp)
1c007368:	d7ed                	beqz	a5,1c007352 <quant_modelCNN_Construct+0x32da>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27660), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27660), 9, 0, &UchanHF1);
1c00736a:	60c9a503          	lw	a0,1548(s3)
1c00736e:	00092603          	lw	a2,0(s2)
1c007372:	659d                	lui	a1,0x7
1c007374:	c0c58593          	addi	a1,a1,-1012 # 6c0c <__rt_stack_size+0x640c>
1c007378:	962e                	add	a2,a2,a1
1c00737a:	95aa                	add	a1,a1,a0
1c00737c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00737e:	4805                	li	a6,1
1c007380:	101c                	addi	a5,sp,32
1c007382:	4705                	li	a4,1
1c007384:	46a5                	li	a3,9
1c007386:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007388:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00738a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00738c:	02010a23          	sb	zero,52(sp)
1c007390:	62a020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007394:	03410783          	lb	a5,52(sp)
1c007398:	ef89                	bnez	a5,1c0073b2 <quant_modelCNN_Construct+0x333a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00739a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00739e:	4585                	li	a1,1
1c0073a0:	01c00513          	li	a0,28
1c0073a4:	6c9040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0073a8:	300a9073          	csrw	mstatus,s5
1c0073ac:	03410783          	lb	a5,52(sp)
1c0073b0:	d7ed                	beqz	a5,1c00739a <quant_modelCNN_Construct+0x3322>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 23232), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 23232), 768, 0, &UchanHF1);
1c0073b2:	60c9a503          	lw	a0,1548(s3)
1c0073b6:	00092603          	lw	a2,0(s2)
1c0073ba:	6599                	lui	a1,0x6
1c0073bc:	ac058593          	addi	a1,a1,-1344 # 5ac0 <__rt_stack_size+0x52c0>
1c0073c0:	962e                	add	a2,a2,a1
1c0073c2:	95aa                	add	a1,a1,a0
1c0073c4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0073c6:	4805                	li	a6,1
1c0073c8:	101c                	addi	a5,sp,32
1c0073ca:	4705                	li	a4,1
1c0073cc:	30000693          	li	a3,768
1c0073d0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0073d2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0073d4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0073d6:	02010a23          	sb	zero,52(sp)
1c0073da:	5e0020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0073de:	03410783          	lb	a5,52(sp)
1c0073e2:	ef89                	bnez	a5,1c0073fc <quant_modelCNN_Construct+0x3384>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0073e4:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0073e8:	4585                	li	a1,1
1c0073ea:	01c00513          	li	a0,28
1c0073ee:	67f040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0073f2:	300a9073          	csrw	mstatus,s5
1c0073f6:	03410783          	lb	a5,52(sp)
1c0073fa:	d7ed                	beqz	a5,1c0073e4 <quant_modelCNN_Construct+0x336c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 25920), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 25920), 64, 0, &UchanHF1);
1c0073fc:	60c9a503          	lw	a0,1548(s3)
1c007400:	00092603          	lw	a2,0(s2)
1c007404:	6599                	lui	a1,0x6
1c007406:	54058593          	addi	a1,a1,1344 # 6540 <__rt_stack_size+0x5d40>
1c00740a:	962e                	add	a2,a2,a1
1c00740c:	95aa                	add	a1,a1,a0
1c00740e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c007410:	4805                	li	a6,1
1c007412:	101c                	addi	a5,sp,32
1c007414:	4705                	li	a4,1
1c007416:	04000693          	li	a3,64
1c00741a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00741c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00741e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007420:	02010a23          	sb	zero,52(sp)
1c007424:	596020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007428:	03410783          	lb	a5,52(sp)
1c00742c:	ef89                	bnez	a5,1c007446 <quant_modelCNN_Construct+0x33ce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00742e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007432:	4585                	li	a1,1
1c007434:	01c00513          	li	a0,28
1c007438:	635040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00743c:	300a9073          	csrw	mstatus,s5
1c007440:	03410783          	lb	a5,52(sp)
1c007444:	d7ed                	beqz	a5,1c00742e <quant_modelCNN_Construct+0x33b6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26944), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26944), 16, 0, &UchanHF1);
1c007446:	60c9a503          	lw	a0,1548(s3)
1c00744a:	00092603          	lw	a2,0(s2)
1c00744e:	659d                	lui	a1,0x7
1c007450:	94058593          	addi	a1,a1,-1728 # 6940 <__rt_stack_size+0x6140>
1c007454:	962e                	add	a2,a2,a1
1c007456:	95aa                	add	a1,a1,a0
1c007458:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00745a:	4805                	li	a6,1
1c00745c:	101c                	addi	a5,sp,32
1c00745e:	4705                	li	a4,1
1c007460:	46c1                	li	a3,16
1c007462:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c007464:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c007466:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c007468:	02010a23          	sb	zero,52(sp)
1c00746c:	54e020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007470:	03410783          	lb	a5,52(sp)
1c007474:	ef89                	bnez	a5,1c00748e <quant_modelCNN_Construct+0x3416>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007476:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00747a:	4585                	li	a1,1
1c00747c:	01c00513          	li	a0,28
1c007480:	5ed040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007484:	300a9073          	csrw	mstatus,s5
1c007488:	03410783          	lb	a5,52(sp)
1c00748c:	d7ed                	beqz	a5,1c007476 <quant_modelCNN_Construct+0x33fe>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 26960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 26960), 16, 0, &UchanHF1);
1c00748e:	60c9a503          	lw	a0,1548(s3)
1c007492:	00092603          	lw	a2,0(s2)
1c007496:	659d                	lui	a1,0x7
1c007498:	95058593          	addi	a1,a1,-1712 # 6950 <__rt_stack_size+0x6150>
1c00749c:	962e                	add	a2,a2,a1
1c00749e:	95aa                	add	a1,a1,a0
1c0074a0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0074a2:	4805                	li	a6,1
1c0074a4:	101c                	addi	a5,sp,32
1c0074a6:	4705                	li	a4,1
1c0074a8:	46c1                	li	a3,16
1c0074aa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0074ac:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0074ae:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0074b0:	02010a23          	sb	zero,52(sp)
1c0074b4:	506020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c0074b8:	03410783          	lb	a5,52(sp)
1c0074bc:	ef89                	bnez	a5,1c0074d6 <quant_modelCNN_Construct+0x345e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0074be:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0074c2:	4585                	li	a1,1
1c0074c4:	01c00513          	li	a0,28
1c0074c8:	5a5040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0074cc:	300a9073          	csrw	mstatus,s5
1c0074d0:	03410783          	lb	a5,52(sp)
1c0074d4:	d7ed                	beqz	a5,1c0074be <quant_modelCNN_Construct+0x3446>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) quant_model_L3_Flash + 27672), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) quant_model_L2_Memory + 27672), 9, 0, &UchanHF1);
1c0074d6:	60c9a883          	lw	a7,1548(s3)
1c0074da:	00092603          	lw	a2,0(s2)
1c0074de:	4c88                	lw	a0,24(s1)
1c0074e0:	659d                	lui	a1,0x7
1c0074e2:	c1858593          	addi	a1,a1,-1000 # 6c18 <__rt_stack_size+0x6418>
  task->id = PI_TASK_NONE_ID;
1c0074e6:	4805                	li	a6,1
1c0074e8:	101c                	addi	a5,sp,32
1c0074ea:	962e                	add	a2,a2,a1
1c0074ec:	4705                	li	a4,1
1c0074ee:	46a5                	li	a3,9
1c0074f0:	95c6                	add	a1,a1,a7
1c0074f2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0074f4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0074f6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0074f8:	02010a23          	sb	zero,52(sp)
1c0074fc:	4be020ef          	jal	ra,1c0099ba <pi_fs_copy_async>
1c007500:	03410783          	lb	a5,52(sp)
1c007504:	c399                	beqz	a5,1c00750a <quant_modelCNN_Construct+0x3492>
1c007506:	bcffc06f          	j	1c0040d4 <quant_modelCNN_Construct+0x5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00750a:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00750e:	4585                	li	a1,1
1c007510:	01c00513          	li	a0,28
1c007514:	559040ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007518:	30049073          	csrw	mstatus,s1
1c00751c:	03410783          	lb	a5,52(sp)
1c007520:	d7ed                	beqz	a5,1c00750a <quant_modelCNN_Construct+0x3492>
1c007522:	bb3fc06f          	j	1c0040d4 <quant_modelCNN_Construct+0x5c>
	if (quant_model_L2_Memory == 0) return 3;
1c007526:	4a0d                	li	s4,3
1c007528:	badfc06f          	j	1c0040d4 <quant_modelCNN_Construct+0x5c>
	if (quant_model_L1_Memory == 0) return 4;
1c00752c:	4a11                	li	s4,4
1c00752e:	ba7fc06f          	j	1c0040d4 <quant_modelCNN_Construct+0x5c>
  {
    pi_fs_unmount(&file->fs);
1c007532:	34090513          	addi	a0,s2,832
1c007536:	408020ef          	jal	ra,1c00993e <pi_fs_unmount>
1c00753a:	b91fc06f          	j	1c0040ca <quant_modelCNN_Construct+0x52>

1c00753e <quant_modelCNN_Destruct>:
int quant_modelCNN_Destruct()

{
	AT_L2_FREE(0, quant_model_L2_Memory, 56385);
1c00753e:	1c0107b7          	lui	a5,0x1c010
1c007542:	5f07a503          	lw	a0,1520(a5) # 1c0105f0 <quant_model_L2_Memory>
1c007546:	65b9                	lui	a1,0xe
{
1c007548:	1141                	addi	sp,sp,-16
	AT_L2_FREE(0, quant_model_L2_Memory, 56385);
1c00754a:	c4158593          	addi	a1,a1,-959 # dc41 <__rt_stack_size+0xd441>
{
1c00754e:	c606                	sw	ra,12(sp)
1c007550:	c422                	sw	s0,8(sp)
1c007552:	c226                	sw	s1,4(sp)
	AT_L2_FREE(0, quant_model_L2_Memory, 56385);
1c007554:	7cb040ef          	jal	ra,1c00c51e <pi_l2_free>
	AT_L1_FREE(0, quant_model_L1_Memory, 30968);
1c007558:	100007b7          	lui	a5,0x10000
1c00755c:	01c7a583          	lw	a1,28(a5) # 1000001c <quant_model_L1_Memory>
1c007560:	6621                	lui	a2,0x8
1c007562:	8f860613          	addi	a2,a2,-1800 # 78f8 <__rt_stack_size+0x70f8>
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c007566:	1c01c4b7          	lui	s1,0x1c01c
1c00756a:	4501                	li	a0,0
1c00756c:	799040ef          	jal	ra,1c00c504 <pi_cl_l1_free>
1c007570:	34048413          	addi	s0,s1,832 # 1c01c340 <_edata>
1c007574:	4c08                	lw	a0,24(s0)
1c007576:	3d8020ef          	jal	ra,1c00994e <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c00757a:	34048513          	addi	a0,s1,832
1c00757e:	3c0020ef          	jal	ra,1c00993e <pi_fs_unmount>
1c007582:	445c                	lw	a5,12(s0)
1c007584:	00c40513          	addi	a0,s0,12
1c007588:	43dc                	lw	a5,4(a5)
1c00758a:	9782                	jalr	a5
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c00758c:	40b2                	lw	ra,12(sp)
1c00758e:	4422                	lw	s0,8(sp)
1c007590:	4492                	lw	s1,4(sp)
1c007592:	4501                	li	a0,0
1c007594:	0141                	addi	sp,sp,16
1c007596:	8082                	ret

1c007598 <quant_modelCNN>:
};
int quant_modelCNN(
		signed char * __restrict__ Input_1,
		signed char * __restrict__ Output_1)

{
1c007598:	715d                	addi	sp,sp,-80
1c00759a:	c2a6                	sw	s1,68(sp)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00759c:	102004b7          	lui	s1,0x10200
1c0075a0:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003dc>
1c0075a4:	8f2e                	mv	t5,a1
1c0075a6:	c686                	sw	ra,76(sp)
1c0075a8:	c4a2                	sw	s0,72(sp)
1c0075aa:	c0ca                	sw	s2,64(sp)
1c0075ac:	de4e                	sw	s3,60(sp)
1c0075ae:	dc52                	sw	s4,56(sp)
1c0075b0:	da56                	sw	s5,52(sp)
1c0075b2:	d85a                	sw	s6,48(sp)
1c0075b4:	d65e                	sw	s7,44(sp)
1c0075b6:	d462                	sw	s8,40(sp)
1c0075b8:	d266                	sw	s9,36(sp)
1c0075ba:	d06a                	sw	s10,32(sp)
1c0075bc:	ce6e                	sw	s11,28(sp)
1c0075be:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[0] = gap_cl_readhwtimer();
	S2_Conv2d_16x20x1x3(
1c0075c2:	1c010e37          	lui	t3,0x1c010
1c0075c6:	5f0e0a13          	addi	s4,t3,1520 # 1c0105f0 <quant_model_L2_Memory>
1c0075ca:	000a2583          	lw	a1,0(s4)
		((signed char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24000)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+25984)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26000)), /* ScaleN */
1c0075ce:	6919                	lui	s2,0x6
		((signed char * __restrict__) (quant_model_L2_Memory+26976)) /* Infos */
1c0075d0:	699d                	lui	s3,0x7
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
1c0075d2:	6aa1                	lui	s5,0x8
1c0075d4:	ed4a8a93          	addi	s5,s5,-300 # 7ed4 <__rt_stack_size+0x76d4>
		((signed char * __restrict__) (quant_model_L2_Memory+26976)) /* Infos */
1c0075d8:	96098813          	addi	a6,s3,-1696 # 6960 <__rt_stack_size+0x6160>
		((signed char * __restrict__) (quant_model_L2_Memory+26000)), /* ScaleN */
1c0075dc:	59090793          	addi	a5,s2,1424 # 6590 <__rt_stack_size+0x5d90>
		((unsigned char * __restrict__) (quant_model_L2_Memory+25984)), /* Scale */
1c0075e0:	58090713          	addi	a4,s2,1408
		((signed int * __restrict__) (quant_model_L2_Memory+24000)), /* Bias */
1c0075e4:	dc090613          	addi	a2,s2,-576
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c0075e8:	1c01cdb7          	lui	s11,0x1c01c
	S2_Conv2d_16x20x1x3(
1c0075ec:	982e                	add	a6,a6,a1
1c0075ee:	97ae                	add	a5,a5,a1
1c0075f0:	972e                	add	a4,a4,a1
1c0075f2:	015586b3          	add	a3,a1,s5
1c0075f6:	962e                	add	a2,a2,a1
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c0075f8:	646da423          	sw	t1,1608(s11) # 1c01c648 <AT_GraphPerf>
	S2_Conv2d_16x20x1x3(
1c0075fc:	c272                	sw	t3,4(sp)
1c0075fe:	c07a                	sw	t5,0(sp)
1c007600:	f6bf90ef          	jal	ra,1c00156a <S2_Conv2d_16x20x1x3>
1c007604:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c007608:	648da703          	lw	a4,1608(s11)
1c00760c:	8f99                	sub	a5,a5,a4
1c00760e:	64fda423          	sw	a5,1608(s11)
1c007612:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
	S3_Conv2d_16x16x1x3_Relu(
1c007616:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+960)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24064)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26016)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26032)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+26988)) /* Infos */
1c00761a:	96c98813          	addi	a6,s3,-1684
		((signed char * __restrict__) (quant_model_L2_Memory+26032)), /* ScaleN */
1c00761e:	5b090793          	addi	a5,s2,1456
		((unsigned char * __restrict__) (quant_model_L2_Memory+26016)), /* Scale */
1c007622:	5a090713          	addi	a4,s2,1440
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
1c007626:	c2498b93          	addi	s7,s3,-988
		((signed int * __restrict__) (quant_model_L2_Memory+24064)), /* Bias */
1c00762a:	e0090613          	addi	a2,s2,-512
	S3_Conv2d_16x16x1x3_Relu(
1c00762e:	982a                	add	a6,a6,a0
1c007630:	97aa                	add	a5,a5,a0
1c007632:	972a                	add	a4,a4,a0
1c007634:	017506b3          	add	a3,a0,s7
1c007638:	962a                	add	a2,a2,a0
1c00763a:	3c050593          	addi	a1,a0,960
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c00763e:	648d8413          	addi	s0,s11,1608
	S3_Conv2d_16x16x1x3_Relu(
1c007642:	9556                	add	a0,a0,s5
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c007644:	00642223          	sw	t1,4(s0)
	S3_Conv2d_16x16x1x3_Relu(
1c007648:	d3efa0ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c00764c:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c007650:	4058                	lw	a4,4(s0)
1c007652:	8f99                	sub	a5,a5,a4
1c007654:	c05c                	sw	a5,4(s0)
1c007656:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
	S4_Conv2d_16x16x1x3_Relu(
1c00765a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+1728)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24128)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
1c00765e:	6cad                	lui	s9,0xb
1c007660:	6e4c8c93          	addi	s9,s9,1764 # b6e4 <__rt_stack_size+0xaee4>
		((unsigned char * __restrict__) (quant_model_L2_Memory+26048)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26064)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27000)) /* Infos */
1c007664:	97898813          	addi	a6,s3,-1672
		((signed char * __restrict__) (quant_model_L2_Memory+26064)), /* ScaleN */
1c007668:	5d090793          	addi	a5,s2,1488
		((unsigned char * __restrict__) (quant_model_L2_Memory+26048)), /* Scale */
1c00766c:	5c090713          	addi	a4,s2,1472
		((signed int * __restrict__) (quant_model_L2_Memory+24128)), /* Bias */
1c007670:	e4090613          	addi	a2,s2,-448
	S4_Conv2d_16x16x1x3_Relu(
1c007674:	982a                	add	a6,a6,a0
1c007676:	97aa                	add	a5,a5,a0
1c007678:	972a                	add	a4,a4,a0
1c00767a:	019506b3          	add	a3,a0,s9
1c00767e:	962a                	add	a2,a2,a0
1c007680:	6c050593          	addi	a1,a0,1728
1c007684:	955e                	add	a0,a0,s7
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c007686:	00642423          	sw	t1,8(s0)
	S4_Conv2d_16x16x1x3_Relu(
1c00768a:	cfcfa0ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c00768e:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c007692:	4418                	lw	a4,8(s0)
1c007694:	8f99                	sub	a5,a5,a4
1c007696:	c41c                	sw	a5,8(s0)
1c007698:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[3] = gap_cl_readhwtimer();
	S5_MatAdd_16x1x299_Relu(
1c00769c:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27012)) /* Infos */
1c0076a0:	98498693          	addi	a3,s3,-1660
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c0076a4:	c45c                	sw	a5,12(s0)
	S5_MatAdd_16x1x299_Relu(
1c0076a6:	96aa                	add	a3,a3,a0
1c0076a8:	01750633          	add	a2,a0,s7
1c0076ac:	019505b3          	add	a1,a0,s9
1c0076b0:	9556                	add	a0,a0,s5
1c0076b2:	ae3fa0ef          	jal	ra,1c002194 <S5_MatAdd_16x1x299_Relu>
1c0076b6:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c0076ba:	4458                	lw	a4,12(s0)
1c0076bc:	8f99                	sub	a5,a5,a4
1c0076be:	c45c                	sw	a5,12(s0)
1c0076c0:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
	S6_Conv2d_16x16x1x3_Relu(
1c0076c4:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+2496)), /* Filter */
1c0076c8:	6d05                	lui	s10,0x1
		((signed int * __restrict__) (quant_model_L2_Memory+24192)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26080)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26096)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27024)) /* Infos */
1c0076ca:	99098813          	addi	a6,s3,-1648
		((signed char * __restrict__) (quant_model_L2_Memory+26096)), /* ScaleN */
1c0076ce:	5f090793          	addi	a5,s2,1520
		((unsigned char * __restrict__) (quant_model_L2_Memory+26080)), /* Scale */
1c0076d2:	5e090713          	addi	a4,s2,1504
		((signed int * __restrict__) (quant_model_L2_Memory+24192)), /* Bias */
1c0076d6:	e8090613          	addi	a2,s2,-384
		((signed char * __restrict__) (quant_model_L2_Memory+2496)), /* Filter */
1c0076da:	9c0d0593          	addi	a1,s10,-1600 # 9c0 <__rt_stack_size+0x1c0>
	S6_Conv2d_16x16x1x3_Relu(
1c0076de:	982a                	add	a6,a6,a0
1c0076e0:	97aa                	add	a5,a5,a0
1c0076e2:	972a                	add	a4,a4,a0
1c0076e4:	015506b3          	add	a3,a0,s5
1c0076e8:	962a                	add	a2,a2,a0
1c0076ea:	95aa                	add	a1,a1,a0
1c0076ec:	955e                	add	a0,a0,s7
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c0076ee:	00642823          	sw	t1,16(s0)
	S6_Conv2d_16x16x1x3_Relu(
1c0076f2:	dcffa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c0076f6:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c0076fa:	4818                	lw	a4,16(s0)
1c0076fc:	8f99                	sub	a5,a5,a4
1c0076fe:	c81c                	sw	a5,16(s0)
1c007700:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[5] = gap_cl_readhwtimer();
	S7_Conv2d_16x16x1x3_Relu(
1c007704:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+3264)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24256)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
1c007708:	6b25                	lui	s6,0x9
1c00770a:	184b0b13          	addi	s6,s6,388 # 9184 <__rt_stack_size+0x8984>
		((unsigned char * __restrict__) (quant_model_L2_Memory+26112)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26128)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27036)) /* Infos */
1c00770e:	99c98813          	addi	a6,s3,-1636
		((signed char * __restrict__) (quant_model_L2_Memory+26128)), /* ScaleN */
1c007712:	61090793          	addi	a5,s2,1552
		((unsigned char * __restrict__) (quant_model_L2_Memory+26112)), /* Scale */
1c007716:	60090713          	addi	a4,s2,1536
		((signed int * __restrict__) (quant_model_L2_Memory+24256)), /* Bias */
1c00771a:	ec090613          	addi	a2,s2,-320
		((signed char * __restrict__) (quant_model_L2_Memory+3264)), /* Filter */
1c00771e:	cc0d0593          	addi	a1,s10,-832
	S7_Conv2d_16x16x1x3_Relu(
1c007722:	982a                	add	a6,a6,a0
1c007724:	97aa                	add	a5,a5,a0
1c007726:	972a                	add	a4,a4,a0
1c007728:	016506b3          	add	a3,a0,s6
1c00772c:	962a                	add	a2,a2,a0
1c00772e:	95aa                	add	a1,a1,a0
1c007730:	9556                	add	a0,a0,s5
	AT_GraphPerf[5] = gap_cl_readhwtimer();
1c007732:	00642a23          	sw	t1,20(s0)
	S7_Conv2d_16x16x1x3_Relu(
1c007736:	d8bfa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c00773a:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[5] = gap_cl_readhwtimer() - AT_GraphPerf[5];
1c00773e:	4858                	lw	a4,20(s0)
1c007740:	8f99                	sub	a5,a5,a4
1c007742:	c85c                	sw	a5,20(s0)
1c007744:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[6] = gap_cl_readhwtimer();
	S8_MatAdd_16x1x299(
1c007748:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
1c00774c:	6c29                	lui	s8,0xa
1c00774e:	434c0c13          	addi	s8,s8,1076 # a434 <__rt_stack_size+0x9c34>
		((signed char * __restrict__) (quant_model_L2_Memory+27048)) /* Infos */
1c007752:	9a898693          	addi	a3,s3,-1624
	S8_MatAdd_16x1x299(
1c007756:	96aa                	add	a3,a3,a0
1c007758:	01850633          	add	a2,a0,s8
1c00775c:	019505b3          	add	a1,a0,s9
1c007760:	955a                	add	a0,a0,s6
	AT_GraphPerf[6] = gap_cl_readhwtimer();
1c007762:	cc1c                	sw	a5,24(s0)
	S8_MatAdd_16x1x299(
1c007764:	b7efb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007768:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[6] = gap_cl_readhwtimer() - AT_GraphPerf[6];
1c00776c:	4c18                	lw	a4,24(s0)
1c00776e:	8f99                	sub	a5,a5,a4
1c007770:	cc1c                	sw	a5,24(s0)
1c007772:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[7] = gap_cl_readhwtimer();
	S9_MatAdd_16x1x299(
1c007776:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27060)) /* Infos */
1c00777a:	9b498693          	addi	a3,s3,-1612
	AT_GraphPerf[7] = gap_cl_readhwtimer();
1c00777e:	cc5c                	sw	a5,28(s0)
	S9_MatAdd_16x1x299(
1c007780:	96aa                	add	a3,a3,a0
1c007782:	01550633          	add	a2,a0,s5
1c007786:	016505b3          	add	a1,a0,s6
1c00778a:	955e                	add	a0,a0,s7
1c00778c:	b56fb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007790:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[7] = gap_cl_readhwtimer() - AT_GraphPerf[7];
1c007794:	4c58                	lw	a4,28(s0)
1c007796:	8f99                	sub	a5,a5,a4
1c007798:	cc5c                	sw	a5,28(s0)
1c00779a:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[8] = gap_cl_readhwtimer();
	S10_Conv2d_16x16x1x3_Relu(
1c00779e:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+4032)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24320)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26144)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26160)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27072)) /* Infos */
1c0077a2:	9c098813          	addi	a6,s3,-1600
		((signed char * __restrict__) (quant_model_L2_Memory+26160)), /* ScaleN */
1c0077a6:	63090793          	addi	a5,s2,1584
		((unsigned char * __restrict__) (quant_model_L2_Memory+26144)), /* Scale */
1c0077aa:	62090713          	addi	a4,s2,1568
		((signed int * __restrict__) (quant_model_L2_Memory+24320)), /* Bias */
1c0077ae:	f0090613          	addi	a2,s2,-256
		((signed char * __restrict__) (quant_model_L2_Memory+4032)), /* Filter */
1c0077b2:	fc0d0593          	addi	a1,s10,-64
	S10_Conv2d_16x16x1x3_Relu(
1c0077b6:	982a                	add	a6,a6,a0
1c0077b8:	97aa                	add	a5,a5,a0
1c0077ba:	972a                	add	a4,a4,a0
1c0077bc:	017506b3          	add	a3,a0,s7
1c0077c0:	962a                	add	a2,a2,a0
1c0077c2:	95aa                	add	a1,a1,a0
1c0077c4:	9556                	add	a0,a0,s5
	AT_GraphPerf[8] = gap_cl_readhwtimer();
1c0077c6:	02642023          	sw	t1,32(s0)
	S10_Conv2d_16x16x1x3_Relu(
1c0077ca:	e46fb0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c0077ce:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[8] = gap_cl_readhwtimer() - AT_GraphPerf[8];
1c0077d2:	5018                	lw	a4,32(s0)
1c0077d4:	8f99                	sub	a5,a5,a4
1c0077d6:	d01c                	sw	a5,32(s0)
1c0077d8:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[9] = gap_cl_readhwtimer();
	S11_Conv2d_16x16x1x3_Relu(
1c0077dc:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+4800)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24384)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26176)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26192)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27084)) /* Infos */
1c0077e0:	9cc98813          	addi	a6,s3,-1588
		((signed char * __restrict__) (quant_model_L2_Memory+26192)), /* ScaleN */
1c0077e4:	65090793          	addi	a5,s2,1616
		((unsigned char * __restrict__) (quant_model_L2_Memory+26176)), /* Scale */
1c0077e8:	64090713          	addi	a4,s2,1600
		((signed int * __restrict__) (quant_model_L2_Memory+24384)), /* Bias */
1c0077ec:	f4090613          	addi	a2,s2,-192
		((signed char * __restrict__) (quant_model_L2_Memory+4800)), /* Filter */
1c0077f0:	2c0d0593          	addi	a1,s10,704
	S11_Conv2d_16x16x1x3_Relu(
1c0077f4:	982a                	add	a6,a6,a0
1c0077f6:	97aa                	add	a5,a5,a0
1c0077f8:	972a                	add	a4,a4,a0
1c0077fa:	016506b3          	add	a3,a0,s6
1c0077fe:	962a                	add	a2,a2,a0
1c007800:	95aa                	add	a1,a1,a0
1c007802:	955e                	add	a0,a0,s7
	AT_GraphPerf[9] = gap_cl_readhwtimer();
1c007804:	02642223          	sw	t1,36(s0)
	S11_Conv2d_16x16x1x3_Relu(
1c007808:	e08fb0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c00780c:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[9] = gap_cl_readhwtimer() - AT_GraphPerf[9];
1c007810:	5058                	lw	a4,36(s0)
1c007812:	8f99                	sub	a5,a5,a4
1c007814:	d05c                	sw	a5,36(s0)
1c007816:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[10] = gap_cl_readhwtimer();
	S12_MatAdd_16x1x299(
1c00781a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27096)) /* Infos */
1c00781e:	9d898693          	addi	a3,s3,-1576
	AT_GraphPerf[10] = gap_cl_readhwtimer();
1c007822:	d41c                	sw	a5,40(s0)
	S12_MatAdd_16x1x299(
1c007824:	96aa                	add	a3,a3,a0
1c007826:	01950633          	add	a2,a0,s9
1c00782a:	018505b3          	add	a1,a0,s8
1c00782e:	955a                	add	a0,a0,s6
1c007830:	ab2fb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007834:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[10] = gap_cl_readhwtimer() - AT_GraphPerf[10];
1c007838:	5418                	lw	a4,40(s0)
1c00783a:	8f99                	sub	a5,a5,a4
1c00783c:	d41c                	sw	a5,40(s0)
1c00783e:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[11] = gap_cl_readhwtimer();
	S13_MatAdd_16x1x299(
1c007842:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27108)) /* Infos */
1c007846:	9e498693          	addi	a3,s3,-1564
	AT_GraphPerf[11] = gap_cl_readhwtimer();
1c00784a:	d45c                	sw	a5,44(s0)
	S13_MatAdd_16x1x299(
1c00784c:	96aa                	add	a3,a3,a0
1c00784e:	01750633          	add	a2,a0,s7
1c007852:	016505b3          	add	a1,a0,s6
1c007856:	9556                	add	a0,a0,s5
1c007858:	a8afb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c00785c:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[11] = gap_cl_readhwtimer() - AT_GraphPerf[11];
1c007860:	5458                	lw	a4,44(s0)
1c007862:	8f99                	sub	a5,a5,a4
1c007864:	d45c                	sw	a5,44(s0)
1c007866:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[12] = gap_cl_readhwtimer();
	S14_Conv2d_16x16x1x3_Relu(
1c00786a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+5568)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24448)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26208)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26224)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27120)) /* Infos */
1c00786e:	9f098813          	addi	a6,s3,-1552
		((signed char * __restrict__) (quant_model_L2_Memory+26224)), /* ScaleN */
1c007872:	67090793          	addi	a5,s2,1648
		((unsigned char * __restrict__) (quant_model_L2_Memory+26208)), /* Scale */
1c007876:	66090713          	addi	a4,s2,1632
		((signed int * __restrict__) (quant_model_L2_Memory+24448)), /* Bias */
1c00787a:	f8090613          	addi	a2,s2,-128
		((signed char * __restrict__) (quant_model_L2_Memory+5568)), /* Filter */
1c00787e:	5c0d0593          	addi	a1,s10,1472
	S14_Conv2d_16x16x1x3_Relu(
1c007882:	982a                	add	a6,a6,a0
1c007884:	97aa                	add	a5,a5,a0
1c007886:	972a                	add	a4,a4,a0
1c007888:	015506b3          	add	a3,a0,s5
1c00788c:	962a                	add	a2,a2,a0
1c00788e:	95aa                	add	a1,a1,a0
1c007890:	955e                	add	a0,a0,s7
	AT_GraphPerf[12] = gap_cl_readhwtimer();
1c007892:	02642823          	sw	t1,48(s0)
	S14_Conv2d_16x16x1x3_Relu(
1c007896:	b9dfb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c00789a:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[12] = gap_cl_readhwtimer() - AT_GraphPerf[12];
1c00789e:	5818                	lw	a4,48(s0)
1c0078a0:	8f99                	sub	a5,a5,a4
1c0078a2:	d81c                	sw	a5,48(s0)
1c0078a4:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[13] = gap_cl_readhwtimer();
	S15_Conv2d_16x16x1x3_Relu(
1c0078a8:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+6336)), /* Filter */
1c0078ac:	6d09                	lui	s10,0x2
		((signed int * __restrict__) (quant_model_L2_Memory+24512)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26240)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26256)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27132)) /* Infos */
1c0078ae:	9fc98813          	addi	a6,s3,-1540
		((signed char * __restrict__) (quant_model_L2_Memory+26256)), /* ScaleN */
1c0078b2:	69090793          	addi	a5,s2,1680
		((unsigned char * __restrict__) (quant_model_L2_Memory+26240)), /* Scale */
1c0078b6:	68090713          	addi	a4,s2,1664
		((signed int * __restrict__) (quant_model_L2_Memory+24512)), /* Bias */
1c0078ba:	fc090613          	addi	a2,s2,-64
		((signed char * __restrict__) (quant_model_L2_Memory+6336)), /* Filter */
1c0078be:	8c0d0593          	addi	a1,s10,-1856 # 18c0 <__rt_stack_size+0x10c0>
	S15_Conv2d_16x16x1x3_Relu(
1c0078c2:	982a                	add	a6,a6,a0
1c0078c4:	97aa                	add	a5,a5,a0
1c0078c6:	972a                	add	a4,a4,a0
1c0078c8:	016506b3          	add	a3,a0,s6
1c0078cc:	962a                	add	a2,a2,a0
1c0078ce:	95aa                	add	a1,a1,a0
1c0078d0:	9556                	add	a0,a0,s5
	AT_GraphPerf[13] = gap_cl_readhwtimer();
1c0078d2:	02642a23          	sw	t1,52(s0)
	S15_Conv2d_16x16x1x3_Relu(
1c0078d6:	b5dfb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c0078da:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[13] = gap_cl_readhwtimer() - AT_GraphPerf[13];
1c0078de:	5858                	lw	a4,52(s0)
1c0078e0:	8f99                	sub	a5,a5,a4
1c0078e2:	d85c                	sw	a5,52(s0)
1c0078e4:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[14] = gap_cl_readhwtimer();
	S16_MatAdd_16x1x299(
1c0078e8:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27144)) /* Infos */
1c0078ec:	a0898693          	addi	a3,s3,-1528
	AT_GraphPerf[14] = gap_cl_readhwtimer();
1c0078f0:	dc1c                	sw	a5,56(s0)
	S16_MatAdd_16x1x299(
1c0078f2:	96aa                	add	a3,a3,a0
1c0078f4:	01850633          	add	a2,a0,s8
1c0078f8:	016505b3          	add	a1,a0,s6
1c0078fc:	9566                	add	a0,a0,s9
1c0078fe:	9e4fb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007902:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[14] = gap_cl_readhwtimer() - AT_GraphPerf[14];
1c007906:	5c18                	lw	a4,56(s0)
1c007908:	8f99                	sub	a5,a5,a4
1c00790a:	dc1c                	sw	a5,56(s0)
1c00790c:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[15] = gap_cl_readhwtimer();
	S17_MatAdd_16x1x299(
1c007910:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27156)) /* Infos */
1c007914:	a1498693          	addi	a3,s3,-1516
	AT_GraphPerf[15] = gap_cl_readhwtimer();
1c007918:	dc5c                	sw	a5,60(s0)
	S17_MatAdd_16x1x299(
1c00791a:	96aa                	add	a3,a3,a0
1c00791c:	01550633          	add	a2,a0,s5
1c007920:	016505b3          	add	a1,a0,s6
1c007924:	955e                	add	a0,a0,s7
1c007926:	9bcfb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c00792a:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[15] = gap_cl_readhwtimer() - AT_GraphPerf[15];
1c00792e:	5c58                	lw	a4,60(s0)
1c007930:	8f99                	sub	a5,a5,a4
1c007932:	dc5c                	sw	a5,60(s0)
1c007934:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[16] = gap_cl_readhwtimer();
	S18_Conv2d_16x16x1x3_Relu(
1c007938:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+7104)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24576)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26272)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26288)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27168)) /* Infos */
1c00793c:	a2098813          	addi	a6,s3,-1504
		((signed char * __restrict__) (quant_model_L2_Memory+26288)), /* ScaleN */
1c007940:	6b090793          	addi	a5,s2,1712
		((unsigned char * __restrict__) (quant_model_L2_Memory+26272)), /* Scale */
1c007944:	6a090713          	addi	a4,s2,1696
		((signed char * __restrict__) (quant_model_L2_Memory+7104)), /* Filter */
1c007948:	bc0d0593          	addi	a1,s10,-1088
	S18_Conv2d_16x16x1x3_Relu(
1c00794c:	982a                	add	a6,a6,a0
1c00794e:	97aa                	add	a5,a5,a0
1c007950:	972a                	add	a4,a4,a0
1c007952:	017506b3          	add	a3,a0,s7
1c007956:	01250633          	add	a2,a0,s2
1c00795a:	95aa                	add	a1,a1,a0
1c00795c:	9556                	add	a0,a0,s5
	AT_GraphPerf[16] = gap_cl_readhwtimer();
1c00795e:	04642023          	sw	t1,64(s0)
	S18_Conv2d_16x16x1x3_Relu(
1c007962:	8f4fc0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c007966:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[16] = gap_cl_readhwtimer() - AT_GraphPerf[16];
1c00796a:	4038                	lw	a4,64(s0)
1c00796c:	8f99                	sub	a5,a5,a4
1c00796e:	c03c                	sw	a5,64(s0)
1c007970:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[17] = gap_cl_readhwtimer();
	S19_Conv2d_16x16x1x3_Relu(
1c007974:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+7872)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24640)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26304)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26320)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27180)) /* Infos */
1c007978:	a2c98813          	addi	a6,s3,-1492
		((signed char * __restrict__) (quant_model_L2_Memory+26320)), /* ScaleN */
1c00797c:	6d090793          	addi	a5,s2,1744
		((unsigned char * __restrict__) (quant_model_L2_Memory+26304)), /* Scale */
1c007980:	6c090713          	addi	a4,s2,1728
		((signed int * __restrict__) (quant_model_L2_Memory+24640)), /* Bias */
1c007984:	04090613          	addi	a2,s2,64
		((signed char * __restrict__) (quant_model_L2_Memory+7872)), /* Filter */
1c007988:	ec0d0593          	addi	a1,s10,-320
	S19_Conv2d_16x16x1x3_Relu(
1c00798c:	982a                	add	a6,a6,a0
1c00798e:	97aa                	add	a5,a5,a0
1c007990:	972a                	add	a4,a4,a0
1c007992:	016506b3          	add	a3,a0,s6
1c007996:	962a                	add	a2,a2,a0
1c007998:	95aa                	add	a1,a1,a0
1c00799a:	955e                	add	a0,a0,s7
	AT_GraphPerf[17] = gap_cl_readhwtimer();
1c00799c:	04642223          	sw	t1,68(s0)
	S19_Conv2d_16x16x1x3_Relu(
1c0079a0:	8b6fc0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c0079a4:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[17] = gap_cl_readhwtimer() - AT_GraphPerf[17];
1c0079a8:	4078                	lw	a4,68(s0)
1c0079aa:	8f99                	sub	a5,a5,a4
1c0079ac:	c07c                	sw	a5,68(s0)
1c0079ae:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[18] = gap_cl_readhwtimer();
	S20_MatAdd_16x1x299(
1c0079b2:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27192)) /* Infos */
1c0079b6:	a3898693          	addi	a3,s3,-1480
	AT_GraphPerf[18] = gap_cl_readhwtimer();
1c0079ba:	c43c                	sw	a5,72(s0)
	S20_MatAdd_16x1x299(
1c0079bc:	96aa                	add	a3,a3,a0
1c0079be:	01950633          	add	a2,a0,s9
1c0079c2:	016505b3          	add	a1,a0,s6
1c0079c6:	9562                	add	a0,a0,s8
1c0079c8:	91afb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c0079cc:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[18] = gap_cl_readhwtimer() - AT_GraphPerf[18];
1c0079d0:	4438                	lw	a4,72(s0)
1c0079d2:	8f99                	sub	a5,a5,a4
1c0079d4:	c43c                	sw	a5,72(s0)
1c0079d6:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[19] = gap_cl_readhwtimer();
	S21_MatAdd_16x1x299(
1c0079da:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27204)) /* Infos */
1c0079de:	a4498693          	addi	a3,s3,-1468
	AT_GraphPerf[19] = gap_cl_readhwtimer();
1c0079e2:	c47c                	sw	a5,76(s0)
	S21_MatAdd_16x1x299(
1c0079e4:	96aa                	add	a3,a3,a0
1c0079e6:	01750633          	add	a2,a0,s7
1c0079ea:	016505b3          	add	a1,a0,s6
1c0079ee:	9556                	add	a0,a0,s5
1c0079f0:	8f2fb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c0079f4:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[19] = gap_cl_readhwtimer() - AT_GraphPerf[19];
1c0079f8:	4478                	lw	a4,76(s0)
1c0079fa:	8f99                	sub	a5,a5,a4
1c0079fc:	c47c                	sw	a5,76(s0)
1c0079fe:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[20] = gap_cl_readhwtimer();
	S22_Conv2d_16x16x1x3_Relu(
1c007a02:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+8640)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24704)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26336)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26352)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27216)) /* Infos */
1c007a06:	a5098813          	addi	a6,s3,-1456
		((signed char * __restrict__) (quant_model_L2_Memory+26352)), /* ScaleN */
1c007a0a:	6f090793          	addi	a5,s2,1776
		((unsigned char * __restrict__) (quant_model_L2_Memory+26336)), /* Scale */
1c007a0e:	6e090713          	addi	a4,s2,1760
		((signed int * __restrict__) (quant_model_L2_Memory+24704)), /* Bias */
1c007a12:	08090613          	addi	a2,s2,128
		((signed char * __restrict__) (quant_model_L2_Memory+8640)), /* Filter */
1c007a16:	1c0d0593          	addi	a1,s10,448
	S22_Conv2d_16x16x1x3_Relu(
1c007a1a:	982a                	add	a6,a6,a0
1c007a1c:	97aa                	add	a5,a5,a0
1c007a1e:	972a                	add	a4,a4,a0
1c007a20:	015506b3          	add	a3,a0,s5
1c007a24:	962a                	add	a2,a2,a0
1c007a26:	95aa                	add	a1,a1,a0
1c007a28:	955e                	add	a0,a0,s7
	AT_GraphPerf[20] = gap_cl_readhwtimer();
1c007a2a:	04642823          	sw	t1,80(s0)
	S22_Conv2d_16x16x1x3_Relu(
1c007a2e:	958fa0ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c007a32:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[20] = gap_cl_readhwtimer() - AT_GraphPerf[20];
1c007a36:	4838                	lw	a4,80(s0)
1c007a38:	8f99                	sub	a5,a5,a4
1c007a3a:	c83c                	sw	a5,80(s0)
1c007a3c:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[21] = gap_cl_readhwtimer();
	S23_Conv2d_16x16x1x3_Relu(
1c007a40:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+9408)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24768)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26368)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26384)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27228)) /* Infos */
1c007a44:	a5c98813          	addi	a6,s3,-1444
		((signed char * __restrict__) (quant_model_L2_Memory+26384)), /* ScaleN */
1c007a48:	71090793          	addi	a5,s2,1808
		((unsigned char * __restrict__) (quant_model_L2_Memory+26368)), /* Scale */
1c007a4c:	70090713          	addi	a4,s2,1792
		((signed int * __restrict__) (quant_model_L2_Memory+24768)), /* Bias */
1c007a50:	0c090613          	addi	a2,s2,192
		((signed char * __restrict__) (quant_model_L2_Memory+9408)), /* Filter */
1c007a54:	4c0d0593          	addi	a1,s10,1216
	S23_Conv2d_16x16x1x3_Relu(
1c007a58:	982a                	add	a6,a6,a0
1c007a5a:	97aa                	add	a5,a5,a0
1c007a5c:	972a                	add	a4,a4,a0
1c007a5e:	016506b3          	add	a3,a0,s6
1c007a62:	962a                	add	a2,a2,a0
1c007a64:	95aa                	add	a1,a1,a0
1c007a66:	9556                	add	a0,a0,s5
	AT_GraphPerf[21] = gap_cl_readhwtimer();
1c007a68:	04642a23          	sw	t1,84(s0)
	S23_Conv2d_16x16x1x3_Relu(
1c007a6c:	91afa0ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c007a70:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[21] = gap_cl_readhwtimer() - AT_GraphPerf[21];
1c007a74:	4878                	lw	a4,84(s0)
1c007a76:	8f99                	sub	a5,a5,a4
1c007a78:	c87c                	sw	a5,84(s0)
1c007a7a:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[22] = gap_cl_readhwtimer();
	S24_MatAdd_16x1x299(
1c007a7e:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+51604)), /* Out */
1c007a82:	6eb5                	lui	t4,0xd
1c007a84:	994e8e93          	addi	t4,t4,-1644 # c994 <__rt_stack_size+0xc194>
		((signed char * __restrict__) (quant_model_L2_Memory+27240)) /* Infos */
1c007a88:	a6898693          	addi	a3,s3,-1432
	S24_MatAdd_16x1x299(
1c007a8c:	96aa                	add	a3,a3,a0
1c007a8e:	01d50633          	add	a2,a0,t4
1c007a92:	016505b3          	add	a1,a0,s6
	AT_GraphPerf[22] = gap_cl_readhwtimer();
1c007a96:	cc3c                	sw	a5,88(s0)
	S24_MatAdd_16x1x299(
1c007a98:	9566                	add	a0,a0,s9
1c007a9a:	c476                	sw	t4,8(sp)
1c007a9c:	846fb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007aa0:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[22] = gap_cl_readhwtimer() - AT_GraphPerf[22];
1c007aa4:	4c38                	lw	a4,88(s0)
1c007aa6:	8f99                	sub	a5,a5,a4
1c007aa8:	cc3c                	sw	a5,88(s0)
1c007aaa:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[23] = gap_cl_readhwtimer();
	S25_MatAdd_16x1x299(
1c007aae:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27252)) /* Infos */
1c007ab2:	a7498693          	addi	a3,s3,-1420
	AT_GraphPerf[23] = gap_cl_readhwtimer();
1c007ab6:	cc7c                	sw	a5,92(s0)
	S25_MatAdd_16x1x299(
1c007ab8:	96aa                	add	a3,a3,a0
1c007aba:	01550633          	add	a2,a0,s5
1c007abe:	016505b3          	add	a1,a0,s6
1c007ac2:	955e                	add	a0,a0,s7
1c007ac4:	81efb0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007ac8:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[23] = gap_cl_readhwtimer() - AT_GraphPerf[23];
1c007acc:	4c78                	lw	a4,92(s0)
1c007ace:	648d8893          	addi	a7,s11,1608
1c007ad2:	8f99                	sub	a5,a5,a4
1c007ad4:	cc7c                	sw	a5,92(s0)
1c007ad6:	0084a303          	lw	t1,8(s1)
	AT_GraphPerf[24] = gap_cl_readhwtimer();
	S26_Conv2d_16x16x1x3_Relu(
1c007ada:	000a2503          	lw	a0,0(s4)
1c007ade:	4e12                	lw	t3,4(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+10176)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24832)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26400)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26416)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27264)) /* Infos */
1c007ae0:	a8098813          	addi	a6,s3,-1408
		((signed char * __restrict__) (quant_model_L2_Memory+26416)), /* ScaleN */
1c007ae4:	73090793          	addi	a5,s2,1840
		((unsigned char * __restrict__) (quant_model_L2_Memory+26400)), /* Scale */
1c007ae8:	72090713          	addi	a4,s2,1824
		((signed int * __restrict__) (quant_model_L2_Memory+24832)), /* Bias */
1c007aec:	10090613          	addi	a2,s2,256
		((signed char * __restrict__) (quant_model_L2_Memory+10176)), /* Filter */
1c007af0:	7c0d0593          	addi	a1,s10,1984
	AT_GraphPerf[24] = gap_cl_readhwtimer();
1c007af4:	06642023          	sw	t1,96(s0)
	S26_Conv2d_16x16x1x3_Relu(
1c007af8:	982a                	add	a6,a6,a0
1c007afa:	97aa                	add	a5,a5,a0
1c007afc:	972a                	add	a4,a4,a0
1c007afe:	017506b3          	add	a3,a0,s7
1c007b02:	962a                	add	a2,a2,a0
1c007b04:	95aa                	add	a1,a1,a0
1c007b06:	5f0e0e13          	addi	t3,t3,1520
1c007b0a:	9556                	add	a0,a0,s5
1c007b0c:	c646                	sw	a7,12(sp)
1c007b0e:	c272                	sw	t3,4(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+27264)) /* Infos */
1c007b10:	6d1d                	lui	s10,0x7
	S26_Conv2d_16x16x1x3_Relu(
1c007b12:	9affa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c007b16:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[24] = gap_cl_readhwtimer() - AT_GraphPerf[24];
1c007b1a:	5038                	lw	a4,96(s0)
1c007b1c:	8f99                	sub	a5,a5,a4
1c007b1e:	d03c                	sw	a5,96(s0)
1c007b20:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[25] = gap_cl_readhwtimer();
	S27_Conv2d_16x16x1x3_Relu(
1c007b24:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+10944)), /* Filter */
1c007b28:	6d8d                	lui	s11,0x3
		((signed int * __restrict__) (quant_model_L2_Memory+24896)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26432)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26448)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27276)) /* Infos */
1c007b2a:	a8c98813          	addi	a6,s3,-1396
		((signed char * __restrict__) (quant_model_L2_Memory+26448)), /* ScaleN */
1c007b2e:	75090793          	addi	a5,s2,1872
		((unsigned char * __restrict__) (quant_model_L2_Memory+26432)), /* Scale */
1c007b32:	74090713          	addi	a4,s2,1856
		((signed int * __restrict__) (quant_model_L2_Memory+24896)), /* Bias */
1c007b36:	14090613          	addi	a2,s2,320
		((signed char * __restrict__) (quant_model_L2_Memory+10944)), /* Filter */
1c007b3a:	ac0d8593          	addi	a1,s11,-1344 # 2ac0 <__rt_stack_size+0x22c0>
	S27_Conv2d_16x16x1x3_Relu(
1c007b3e:	982a                	add	a6,a6,a0
1c007b40:	97aa                	add	a5,a5,a0
1c007b42:	972a                	add	a4,a4,a0
1c007b44:	018506b3          	add	a3,a0,s8
1c007b48:	962a                	add	a2,a2,a0
1c007b4a:	95aa                	add	a1,a1,a0
1c007b4c:	955e                	add	a0,a0,s7
	AT_GraphPerf[25] = gap_cl_readhwtimer();
1c007b4e:	07f42223          	sw	t6,100(s0)
	S27_Conv2d_16x16x1x3_Relu(
1c007b52:	96ffa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c007b56:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[25] = gap_cl_readhwtimer() - AT_GraphPerf[25];
1c007b5a:	5078                	lw	a4,100(s0)
1c007b5c:	8f99                	sub	a5,a5,a4
1c007b5e:	d07c                	sw	a5,100(s0)
1c007b60:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[26] = gap_cl_readhwtimer();
	S28_MatAdd_16x1x299(
1c007b64:	000a2503          	lw	a0,0(s4)
1c007b68:	4ea2                	lw	t4,8(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+51604)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27288)) /* Infos */
1c007b6a:	a9898693          	addi	a3,s3,-1384
	S28_MatAdd_16x1x299(
1c007b6e:	96aa                	add	a3,a3,a0
1c007b70:	01950633          	add	a2,a0,s9
1c007b74:	018505b3          	add	a1,a0,s8
1c007b78:	9576                	add	a0,a0,t4
	AT_GraphPerf[26] = gap_cl_readhwtimer();
1c007b7a:	d43c                	sw	a5,104(s0)
	S28_MatAdd_16x1x299(
1c007b7c:	f67fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
		((signed char * __restrict__) (quant_model_L2_Memory+51604)), /* In1 */
1c007b80:	4ea2                	lw	t4,8(sp)
1c007b82:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[26] = gap_cl_readhwtimer() - AT_GraphPerf[26];
1c007b86:	5438                	lw	a4,104(s0)
1c007b88:	8f99                	sub	a5,a5,a4
1c007b8a:	d43c                	sw	a5,104(s0)
1c007b8c:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[27] = gap_cl_readhwtimer();
	S29_MatAdd_16x1x299(
1c007b90:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27300)) /* Infos */
1c007b94:	aa498693          	addi	a3,s3,-1372
	AT_GraphPerf[27] = gap_cl_readhwtimer();
1c007b98:	d47c                	sw	a5,108(s0)
	S29_MatAdd_16x1x299(
1c007b9a:	96aa                	add	a3,a3,a0
1c007b9c:	01650633          	add	a2,a0,s6
1c007ba0:	018505b3          	add	a1,a0,s8
1c007ba4:	9556                	add	a0,a0,s5
1c007ba6:	c476                	sw	t4,8(sp)
1c007ba8:	f3bfa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007bac:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[27] = gap_cl_readhwtimer() - AT_GraphPerf[27];
1c007bb0:	5478                	lw	a4,108(s0)
1c007bb2:	8f99                	sub	a5,a5,a4
1c007bb4:	d47c                	sw	a5,108(s0)
1c007bb6:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[28] = gap_cl_readhwtimer();
	S30_Conv2d_16x16x1x3_Relu(
1c007bba:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+11712)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+24960)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26464)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26480)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27312)) /* Infos */
1c007bbe:	ab098813          	addi	a6,s3,-1360
		((signed char * __restrict__) (quant_model_L2_Memory+26480)), /* ScaleN */
1c007bc2:	77090793          	addi	a5,s2,1904
		((unsigned char * __restrict__) (quant_model_L2_Memory+26464)), /* Scale */
1c007bc6:	76090713          	addi	a4,s2,1888
		((signed int * __restrict__) (quant_model_L2_Memory+24960)), /* Bias */
1c007bca:	18090613          	addi	a2,s2,384
		((signed char * __restrict__) (quant_model_L2_Memory+11712)), /* Filter */
1c007bce:	dc0d8593          	addi	a1,s11,-576
	S30_Conv2d_16x16x1x3_Relu(
1c007bd2:	982a                	add	a6,a6,a0
1c007bd4:	97aa                	add	a5,a5,a0
1c007bd6:	972a                	add	a4,a4,a0
1c007bd8:	017506b3          	add	a3,a0,s7
1c007bdc:	962a                	add	a2,a2,a0
1c007bde:	95aa                	add	a1,a1,a0
1c007be0:	955a                	add	a0,a0,s6
	AT_GraphPerf[28] = gap_cl_readhwtimer();
1c007be2:	07f42823          	sw	t6,112(s0)
	S30_Conv2d_16x16x1x3_Relu(
1c007be6:	a2afb0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c007bea:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[28] = gap_cl_readhwtimer() - AT_GraphPerf[28];
1c007bee:	5838                	lw	a4,112(s0)
1c007bf0:	8f99                	sub	a5,a5,a4
1c007bf2:	d83c                	sw	a5,112(s0)
1c007bf4:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[29] = gap_cl_readhwtimer();
	S31_Conv2d_16x16x1x3_Relu(
1c007bf8:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+12480)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25024)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26496)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26512)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27324)) /* Infos */
1c007bfc:	abc98813          	addi	a6,s3,-1348
		((signed char * __restrict__) (quant_model_L2_Memory+26512)), /* ScaleN */
1c007c00:	79090793          	addi	a5,s2,1936
		((unsigned char * __restrict__) (quant_model_L2_Memory+26496)), /* Scale */
1c007c04:	78090713          	addi	a4,s2,1920
		((signed int * __restrict__) (quant_model_L2_Memory+25024)), /* Bias */
1c007c08:	1c090613          	addi	a2,s2,448
		((signed char * __restrict__) (quant_model_L2_Memory+12480)), /* Filter */
1c007c0c:	0c0d8593          	addi	a1,s11,192
	S31_Conv2d_16x16x1x3_Relu(
1c007c10:	982a                	add	a6,a6,a0
1c007c12:	97aa                	add	a5,a5,a0
1c007c14:	972a                	add	a4,a4,a0
1c007c16:	015506b3          	add	a3,a0,s5
1c007c1a:	962a                	add	a2,a2,a0
1c007c1c:	95aa                	add	a1,a1,a0
1c007c1e:	955e                	add	a0,a0,s7
	AT_GraphPerf[29] = gap_cl_readhwtimer();
1c007c20:	07f42a23          	sw	t6,116(s0)
	S31_Conv2d_16x16x1x3_Relu(
1c007c24:	9ecfb0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c007c28:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[29] = gap_cl_readhwtimer() - AT_GraphPerf[29];
1c007c2c:	5878                	lw	a4,116(s0)
1c007c2e:	8f99                	sub	a5,a5,a4
1c007c30:	d87c                	sw	a5,116(s0)
1c007c32:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[30] = gap_cl_readhwtimer();
	S32_MatAdd_16x1x299(
1c007c36:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27336)) /* Infos */
1c007c3a:	ac898693          	addi	a3,s3,-1336
	AT_GraphPerf[30] = gap_cl_readhwtimer();
1c007c3e:	dc3c                	sw	a5,120(s0)
	S32_MatAdd_16x1x299(
1c007c40:	96aa                	add	a3,a3,a0
1c007c42:	01850633          	add	a2,a0,s8
1c007c46:	015505b3          	add	a1,a0,s5
1c007c4a:	9566                	add	a0,a0,s9
1c007c4c:	e97fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007c50:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[30] = gap_cl_readhwtimer() - AT_GraphPerf[30];
1c007c54:	5c38                	lw	a4,120(s0)
1c007c56:	8f99                	sub	a5,a5,a4
1c007c58:	dc3c                	sw	a5,120(s0)
1c007c5a:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[31] = gap_cl_readhwtimer();
	S33_MatAdd_16x1x299(
1c007c5e:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27348)) /* Infos */
1c007c62:	ad498693          	addi	a3,s3,-1324
	AT_GraphPerf[31] = gap_cl_readhwtimer();
1c007c66:	dc7c                	sw	a5,124(s0)
	S33_MatAdd_16x1x299(
1c007c68:	96aa                	add	a3,a3,a0
1c007c6a:	01750633          	add	a2,a0,s7
1c007c6e:	015505b3          	add	a1,a0,s5
1c007c72:	955a                	add	a0,a0,s6
1c007c74:	e6ffa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007c78:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[31] = gap_cl_readhwtimer() - AT_GraphPerf[31];
1c007c7c:	5c78                	lw	a4,124(s0)
1c007c7e:	8f99                	sub	a5,a5,a4
1c007c80:	dc7c                	sw	a5,124(s0)
1c007c82:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[32] = gap_cl_readhwtimer();
	S34_Conv2d_16x16x1x3_Relu(
1c007c86:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+13248)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25088)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26528)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26544)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27360)) /* Infos */
1c007c8a:	ae098813          	addi	a6,s3,-1312
		((signed char * __restrict__) (quant_model_L2_Memory+26544)), /* ScaleN */
1c007c8e:	7b090793          	addi	a5,s2,1968
		((unsigned char * __restrict__) (quant_model_L2_Memory+26528)), /* Scale */
1c007c92:	7a090713          	addi	a4,s2,1952
		((signed int * __restrict__) (quant_model_L2_Memory+25088)), /* Bias */
1c007c96:	20090613          	addi	a2,s2,512
		((signed char * __restrict__) (quant_model_L2_Memory+13248)), /* Filter */
1c007c9a:	3c0d8593          	addi	a1,s11,960
	S34_Conv2d_16x16x1x3_Relu(
1c007c9e:	982a                	add	a6,a6,a0
1c007ca0:	97aa                	add	a5,a5,a0
1c007ca2:	972a                	add	a4,a4,a0
1c007ca4:	015506b3          	add	a3,a0,s5
1c007ca8:	962a                	add	a2,a2,a0
1c007caa:	95aa                	add	a1,a1,a0
1c007cac:	955e                	add	a0,a0,s7
	AT_GraphPerf[32] = gap_cl_readhwtimer();
1c007cae:	09f42023          	sw	t6,128(s0)
	S34_Conv2d_16x16x1x3_Relu(
1c007cb2:	f80fb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c007cb6:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[32] = gap_cl_readhwtimer() - AT_GraphPerf[32];
1c007cba:	08042703          	lw	a4,128(s0)
1c007cbe:	8f99                	sub	a5,a5,a4
1c007cc0:	08f42023          	sw	a5,128(s0)
1c007cc4:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[33] = gap_cl_readhwtimer();
	S35_Conv2d_16x16x1x3_Relu(
1c007cc8:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+14016)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25152)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26560)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26576)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27372)) /* Infos */
1c007ccc:	aec98813          	addi	a6,s3,-1300
		((signed char * __restrict__) (quant_model_L2_Memory+26576)), /* ScaleN */
1c007cd0:	7d090793          	addi	a5,s2,2000
		((unsigned char * __restrict__) (quant_model_L2_Memory+26560)), /* Scale */
1c007cd4:	7c090713          	addi	a4,s2,1984
		((signed int * __restrict__) (quant_model_L2_Memory+25152)), /* Bias */
1c007cd8:	24090613          	addi	a2,s2,576
		((signed char * __restrict__) (quant_model_L2_Memory+14016)), /* Filter */
1c007cdc:	6c0d8593          	addi	a1,s11,1728
	S35_Conv2d_16x16x1x3_Relu(
1c007ce0:	982a                	add	a6,a6,a0
1c007ce2:	97aa                	add	a5,a5,a0
1c007ce4:	972a                	add	a4,a4,a0
1c007ce6:	016506b3          	add	a3,a0,s6
1c007cea:	962a                	add	a2,a2,a0
1c007cec:	95aa                	add	a1,a1,a0
1c007cee:	9556                	add	a0,a0,s5
	AT_GraphPerf[33] = gap_cl_readhwtimer();
1c007cf0:	09f42223          	sw	t6,132(s0)
	S35_Conv2d_16x16x1x3_Relu(
1c007cf4:	f3efb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c007cf8:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[33] = gap_cl_readhwtimer() - AT_GraphPerf[33];
1c007cfc:	08442703          	lw	a4,132(s0)
1c007d00:	8f99                	sub	a5,a5,a4
1c007d02:	08f42223          	sw	a5,132(s0)
1c007d06:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[34] = gap_cl_readhwtimer();
	S36_MatAdd_16x1x299(
1c007d0a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27384)) /* Infos */
1c007d0e:	af898693          	addi	a3,s3,-1288
	AT_GraphPerf[34] = gap_cl_readhwtimer();
1c007d12:	08f42423          	sw	a5,136(s0)
	S36_MatAdd_16x1x299(
1c007d16:	96aa                	add	a3,a3,a0
1c007d18:	01950633          	add	a2,a0,s9
1c007d1c:	016505b3          	add	a1,a0,s6
1c007d20:	9562                	add	a0,a0,s8
1c007d22:	dc1fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007d26:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[34] = gap_cl_readhwtimer() - AT_GraphPerf[34];
1c007d2a:	08842703          	lw	a4,136(s0)
1c007d2e:	8f99                	sub	a5,a5,a4
1c007d30:	08f42423          	sw	a5,136(s0)
1c007d34:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[35] = gap_cl_readhwtimer();
	S37_MatAdd_16x1x299(
1c007d38:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27396)) /* Infos */
1c007d3c:	b0498693          	addi	a3,s3,-1276
	AT_GraphPerf[35] = gap_cl_readhwtimer();
1c007d40:	08f42623          	sw	a5,140(s0)
	S37_MatAdd_16x1x299(
1c007d44:	96aa                	add	a3,a3,a0
1c007d46:	01550633          	add	a2,a0,s5
1c007d4a:	016505b3          	add	a1,a0,s6
1c007d4e:	955e                	add	a0,a0,s7
1c007d50:	d93fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007d54:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[35] = gap_cl_readhwtimer() - AT_GraphPerf[35];
1c007d58:	08c42703          	lw	a4,140(s0)
1c007d5c:	8f99                	sub	a5,a5,a4
1c007d5e:	08f42623          	sw	a5,140(s0)
1c007d62:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[36] = gap_cl_readhwtimer();
	S38_Conv2d_16x16x1x3_Relu(
1c007d66:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+14784)), /* Filter */
1c007d6a:	6d91                	lui	s11,0x4
		((signed int * __restrict__) (quant_model_L2_Memory+25216)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26592)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26608)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27408)) /* Infos */
1c007d6c:	b1098813          	addi	a6,s3,-1264
		((signed char * __restrict__) (quant_model_L2_Memory+26608)), /* ScaleN */
1c007d70:	7f090793          	addi	a5,s2,2032
		((unsigned char * __restrict__) (quant_model_L2_Memory+26592)), /* Scale */
1c007d74:	7e090713          	addi	a4,s2,2016
		((signed int * __restrict__) (quant_model_L2_Memory+25216)), /* Bias */
1c007d78:	28090613          	addi	a2,s2,640
		((signed char * __restrict__) (quant_model_L2_Memory+14784)), /* Filter */
1c007d7c:	9c0d8593          	addi	a1,s11,-1600 # 39c0 <__rt_stack_size+0x31c0>
	S38_Conv2d_16x16x1x3_Relu(
1c007d80:	982a                	add	a6,a6,a0
1c007d82:	97aa                	add	a5,a5,a0
1c007d84:	972a                	add	a4,a4,a0
1c007d86:	017506b3          	add	a3,a0,s7
1c007d8a:	962a                	add	a2,a2,a0
1c007d8c:	95aa                	add	a1,a1,a0
1c007d8e:	9556                	add	a0,a0,s5
	AT_GraphPerf[36] = gap_cl_readhwtimer();
1c007d90:	09f42823          	sw	t6,144(s0)
	S38_Conv2d_16x16x1x3_Relu(
1c007d94:	cc3fb0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c007d98:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[36] = gap_cl_readhwtimer() - AT_GraphPerf[36];
1c007d9c:	09042703          	lw	a4,144(s0)
1c007da0:	8f99                	sub	a5,a5,a4
1c007da2:	08f42823          	sw	a5,144(s0)
1c007da6:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[37] = gap_cl_readhwtimer();
	S39_Conv2d_16x16x1x3_Relu(
1c007daa:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+15552)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25280)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26624)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26640)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27420)) /* Infos */
1c007dae:	b1c98813          	addi	a6,s3,-1252
		((signed char * __restrict__) (quant_model_L2_Memory+26640)), /* ScaleN */
1c007db2:	81098793          	addi	a5,s3,-2032
		((unsigned char * __restrict__) (quant_model_L2_Memory+26624)), /* Scale */
1c007db6:	80098713          	addi	a4,s3,-2048
		((signed int * __restrict__) (quant_model_L2_Memory+25280)), /* Bias */
1c007dba:	2c090613          	addi	a2,s2,704
		((signed char * __restrict__) (quant_model_L2_Memory+15552)), /* Filter */
1c007dbe:	cc0d8593          	addi	a1,s11,-832
	S39_Conv2d_16x16x1x3_Relu(
1c007dc2:	982a                	add	a6,a6,a0
1c007dc4:	97aa                	add	a5,a5,a0
1c007dc6:	972a                	add	a4,a4,a0
1c007dc8:	016506b3          	add	a3,a0,s6
1c007dcc:	962a                	add	a2,a2,a0
1c007dce:	95aa                	add	a1,a1,a0
1c007dd0:	955e                	add	a0,a0,s7
	AT_GraphPerf[37] = gap_cl_readhwtimer();
1c007dd2:	09f42a23          	sw	t6,148(s0)
	S39_Conv2d_16x16x1x3_Relu(
1c007dd6:	c81fb0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c007dda:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[37] = gap_cl_readhwtimer() - AT_GraphPerf[37];
1c007dde:	09442703          	lw	a4,148(s0)
1c007de2:	8f99                	sub	a5,a5,a4
1c007de4:	08f42a23          	sw	a5,148(s0)
1c007de8:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[38] = gap_cl_readhwtimer();
	S40_MatAdd_16x1x299(
1c007dec:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27432)) /* Infos */
1c007df0:	b2898693          	addi	a3,s3,-1240
	AT_GraphPerf[38] = gap_cl_readhwtimer();
1c007df4:	08f42c23          	sw	a5,152(s0)
	S40_MatAdd_16x1x299(
1c007df8:	96aa                	add	a3,a3,a0
1c007dfa:	01850633          	add	a2,a0,s8
1c007dfe:	016505b3          	add	a1,a0,s6
1c007e02:	9566                	add	a0,a0,s9
1c007e04:	cdffa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007e08:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[38] = gap_cl_readhwtimer() - AT_GraphPerf[38];
1c007e0c:	09842703          	lw	a4,152(s0)
1c007e10:	8f99                	sub	a5,a5,a4
1c007e12:	08f42c23          	sw	a5,152(s0)
1c007e16:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[39] = gap_cl_readhwtimer();
	S41_MatAdd_16x1x299(
1c007e1a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27444)) /* Infos */
1c007e1e:	b3498693          	addi	a3,s3,-1228
	AT_GraphPerf[39] = gap_cl_readhwtimer();
1c007e22:	08f42e23          	sw	a5,156(s0)
	S41_MatAdd_16x1x299(
1c007e26:	96aa                	add	a3,a3,a0
1c007e28:	01750633          	add	a2,a0,s7
1c007e2c:	016505b3          	add	a1,a0,s6
1c007e30:	9556                	add	a0,a0,s5
1c007e32:	cb1fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007e36:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[39] = gap_cl_readhwtimer() - AT_GraphPerf[39];
1c007e3a:	09c42703          	lw	a4,156(s0)
1c007e3e:	8f99                	sub	a5,a5,a4
1c007e40:	08f42e23          	sw	a5,156(s0)
1c007e44:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[40] = gap_cl_readhwtimer();
	S42_Conv2d_16x16x1x3_Relu(
1c007e48:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+16320)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25344)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26656)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26672)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27456)) /* Infos */
1c007e4c:	b4098813          	addi	a6,s3,-1216
		((signed char * __restrict__) (quant_model_L2_Memory+26672)), /* ScaleN */
1c007e50:	83098793          	addi	a5,s3,-2000
		((unsigned char * __restrict__) (quant_model_L2_Memory+26656)), /* Scale */
1c007e54:	82098713          	addi	a4,s3,-2016
		((signed int * __restrict__) (quant_model_L2_Memory+25344)), /* Bias */
1c007e58:	30090613          	addi	a2,s2,768
		((signed char * __restrict__) (quant_model_L2_Memory+16320)), /* Filter */
1c007e5c:	fc0d8593          	addi	a1,s11,-64
	S42_Conv2d_16x16x1x3_Relu(
1c007e60:	982a                	add	a6,a6,a0
1c007e62:	97aa                	add	a5,a5,a0
1c007e64:	972a                	add	a4,a4,a0
1c007e66:	015506b3          	add	a3,a0,s5
1c007e6a:	962a                	add	a2,a2,a0
1c007e6c:	95aa                	add	a1,a1,a0
1c007e6e:	955e                	add	a0,a0,s7
	AT_GraphPerf[40] = gap_cl_readhwtimer();
1c007e70:	0bf42023          	sw	t6,160(s0)
	S42_Conv2d_16x16x1x3_Relu(
1c007e74:	d13f90ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c007e78:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[40] = gap_cl_readhwtimer() - AT_GraphPerf[40];
1c007e7c:	0a042703          	lw	a4,160(s0)
1c007e80:	8f99                	sub	a5,a5,a4
1c007e82:	0af42023          	sw	a5,160(s0)
1c007e86:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[41] = gap_cl_readhwtimer();
	S43_Conv2d_16x16x1x3_Relu(
1c007e8a:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+17088)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25408)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26688)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26704)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27468)) /* Infos */
1c007e8e:	b4c98813          	addi	a6,s3,-1204
		((signed char * __restrict__) (quant_model_L2_Memory+26704)), /* ScaleN */
1c007e92:	85098793          	addi	a5,s3,-1968
		((unsigned char * __restrict__) (quant_model_L2_Memory+26688)), /* Scale */
1c007e96:	84098713          	addi	a4,s3,-1984
		((signed int * __restrict__) (quant_model_L2_Memory+25408)), /* Bias */
1c007e9a:	34090613          	addi	a2,s2,832
		((signed char * __restrict__) (quant_model_L2_Memory+17088)), /* Filter */
1c007e9e:	2c0d8593          	addi	a1,s11,704
	S43_Conv2d_16x16x1x3_Relu(
1c007ea2:	982a                	add	a6,a6,a0
1c007ea4:	97aa                	add	a5,a5,a0
1c007ea6:	972a                	add	a4,a4,a0
1c007ea8:	016506b3          	add	a3,a0,s6
1c007eac:	962a                	add	a2,a2,a0
1c007eae:	95aa                	add	a1,a1,a0
1c007eb0:	9556                	add	a0,a0,s5
	AT_GraphPerf[41] = gap_cl_readhwtimer();
1c007eb2:	0bf42223          	sw	t6,164(s0)
	S43_Conv2d_16x16x1x3_Relu(
1c007eb6:	cd1f90ef          	jal	ra,1c001b86 <S3_Conv2d_16x16x1x3_Relu>
1c007eba:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[41] = gap_cl_readhwtimer() - AT_GraphPerf[41];
1c007ebe:	0a442703          	lw	a4,164(s0)
1c007ec2:	8f99                	sub	a5,a5,a4
1c007ec4:	0af42223          	sw	a5,164(s0)
1c007ec8:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[42] = gap_cl_readhwtimer();
	S44_MatAdd_16x1x299(
1c007ecc:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27480)) /* Infos */
1c007ed0:	b5898693          	addi	a3,s3,-1192
	AT_GraphPerf[42] = gap_cl_readhwtimer();
1c007ed4:	0af42423          	sw	a5,168(s0)
	S44_MatAdd_16x1x299(
1c007ed8:	96aa                	add	a3,a3,a0
1c007eda:	01950633          	add	a2,a0,s9
1c007ede:	016505b3          	add	a1,a0,s6
1c007ee2:	9562                	add	a0,a0,s8
1c007ee4:	bfffa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007ee8:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[42] = gap_cl_readhwtimer() - AT_GraphPerf[42];
1c007eec:	0a842703          	lw	a4,168(s0)
1c007ef0:	8f99                	sub	a5,a5,a4
1c007ef2:	0af42423          	sw	a5,168(s0)
1c007ef6:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[43] = gap_cl_readhwtimer();
	S45_MatAdd_16x1x299(
1c007efa:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27492)) /* Infos */
1c007efe:	b64d0693          	addi	a3,s10,-1180 # 6b64 <__rt_stack_size+0x6364>
	AT_GraphPerf[43] = gap_cl_readhwtimer();
1c007f02:	0af42623          	sw	a5,172(s0)
	S45_MatAdd_16x1x299(
1c007f06:	96aa                	add	a3,a3,a0
1c007f08:	01550633          	add	a2,a0,s5
1c007f0c:	016505b3          	add	a1,a0,s6
1c007f10:	955e                	add	a0,a0,s7
1c007f12:	bd1fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007f16:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[43] = gap_cl_readhwtimer() - AT_GraphPerf[43];
1c007f1a:	48b2                	lw	a7,12(sp)
1c007f1c:	0ac8a703          	lw	a4,172(a7)
1c007f20:	8f99                	sub	a5,a5,a4
1c007f22:	0af8a623          	sw	a5,172(a7)
1c007f26:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[44] = gap_cl_readhwtimer();
	S46_Conv2d_16x16x1x3_Relu(
1c007f2a:	4e12                	lw	t3,4(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+17856)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25472)), /* Bias */
1c007f2c:	6699                	lui	a3,0x6
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26720)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26736)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27504)) /* Infos */
1c007f2e:	b70d0813          	addi	a6,s10,-1168
	S46_Conv2d_16x16x1x3_Relu(
1c007f32:	000e2503          	lw	a0,0(t3)
		((signed char * __restrict__) (quant_model_L2_Memory+26736)), /* ScaleN */
1c007f36:	870d0793          	addi	a5,s10,-1936
		((unsigned char * __restrict__) (quant_model_L2_Memory+26720)), /* Scale */
1c007f3a:	860d0713          	addi	a4,s10,-1952
		((signed int * __restrict__) (quant_model_L2_Memory+25472)), /* Bias */
1c007f3e:	38068613          	addi	a2,a3,896 # 6380 <__rt_stack_size+0x5b80>
		((signed char * __restrict__) (quant_model_L2_Memory+17856)), /* Filter */
1c007f42:	5c0d8593          	addi	a1,s11,1472
	AT_GraphPerf[44] = gap_cl_readhwtimer();
1c007f46:	0bf8a823          	sw	t6,176(a7)
	S46_Conv2d_16x16x1x3_Relu(
1c007f4a:	982a                	add	a6,a6,a0
1c007f4c:	97aa                	add	a5,a5,a0
1c007f4e:	972a                	add	a4,a4,a0
1c007f50:	017506b3          	add	a3,a0,s7
1c007f54:	962a                	add	a2,a2,a0
1c007f56:	95aa                	add	a1,a1,a0
1c007f58:	9556                	add	a0,a0,s5
1c007f5a:	c646                	sw	a7,12(sp)
1c007f5c:	c272                	sw	t3,4(sp)
1c007f5e:	d62fa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c007f62:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[44] = gap_cl_readhwtimer() - AT_GraphPerf[44];
1c007f66:	48b2                	lw	a7,12(sp)
1c007f68:	0b08a703          	lw	a4,176(a7)
1c007f6c:	8f99                	sub	a5,a5,a4
1c007f6e:	0af8a823          	sw	a5,176(a7)
1c007f72:	0084af83          	lw	t6,8(s1)
	AT_GraphPerf[45] = gap_cl_readhwtimer();
	S47_Conv2d_16x16x1x3_Relu(
1c007f76:	4e12                	lw	t3,4(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+18624)), /* Filter */
1c007f78:	6415                	lui	s0,0x5
		((signed int * __restrict__) (quant_model_L2_Memory+25536)), /* Bias */
1c007f7a:	6699                	lui	a3,0x6
	S47_Conv2d_16x16x1x3_Relu(
1c007f7c:	000e2503          	lw	a0,0(t3)
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26752)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26768)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27516)) /* Infos */
1c007f80:	b7cd0813          	addi	a6,s10,-1156
		((signed char * __restrict__) (quant_model_L2_Memory+26768)), /* ScaleN */
1c007f84:	890d0793          	addi	a5,s10,-1904
		((unsigned char * __restrict__) (quant_model_L2_Memory+26752)), /* Scale */
1c007f88:	880d0713          	addi	a4,s10,-1920
		((signed int * __restrict__) (quant_model_L2_Memory+25536)), /* Bias */
1c007f8c:	3c068613          	addi	a2,a3,960 # 63c0 <__rt_stack_size+0x5bc0>
		((signed char * __restrict__) (quant_model_L2_Memory+18624)), /* Filter */
1c007f90:	8c040593          	addi	a1,s0,-1856 # 48c0 <__rt_stack_size+0x40c0>
	AT_GraphPerf[45] = gap_cl_readhwtimer();
1c007f94:	0bf8aa23          	sw	t6,180(a7)
	S47_Conv2d_16x16x1x3_Relu(
1c007f98:	982a                	add	a6,a6,a0
1c007f9a:	97aa                	add	a5,a5,a0
1c007f9c:	972a                	add	a4,a4,a0
1c007f9e:	018506b3          	add	a3,a0,s8
1c007fa2:	962a                	add	a2,a2,a0
1c007fa4:	95aa                	add	a1,a1,a0
1c007fa6:	955e                	add	a0,a0,s7
1c007fa8:	c646                	sw	a7,12(sp)
1c007faa:	c272                	sw	t3,4(sp)
1c007fac:	d14fa0ef          	jal	ra,1c0024c0 <S6_Conv2d_16x16x1x3_Relu>
1c007fb0:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[45] = gap_cl_readhwtimer() - AT_GraphPerf[45];
1c007fb4:	48b2                	lw	a7,12(sp)
1c007fb6:	0b48a703          	lw	a4,180(a7)
1c007fba:	8f99                	sub	a5,a5,a4
1c007fbc:	0af8aa23          	sw	a5,180(a7)
1c007fc0:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[46] = gap_cl_readhwtimer();
	S48_MatAdd_16x1x299(
1c007fc4:	4e12                	lw	t3,4(sp)
1c007fc6:	4ea2                	lw	t4,8(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+51604)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27528)) /* Infos */
1c007fc8:	b88d0693          	addi	a3,s10,-1144
	S48_MatAdd_16x1x299(
1c007fcc:	000e2503          	lw	a0,0(t3)
	AT_GraphPerf[46] = gap_cl_readhwtimer();
1c007fd0:	0af8ac23          	sw	a5,184(a7)
	S48_MatAdd_16x1x299(
1c007fd4:	c646                	sw	a7,12(sp)
1c007fd6:	96aa                	add	a3,a3,a0
1c007fd8:	01d50633          	add	a2,a0,t4
1c007fdc:	018505b3          	add	a1,a0,s8
1c007fe0:	9566                	add	a0,a0,s9
1c007fe2:	c272                	sw	t3,4(sp)
1c007fe4:	afffa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c007fe8:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[46] = gap_cl_readhwtimer() - AT_GraphPerf[46];
1c007fec:	48b2                	lw	a7,12(sp)
1c007fee:	0b88a703          	lw	a4,184(a7)
1c007ff2:	8f99                	sub	a5,a5,a4
1c007ff4:	0af8ac23          	sw	a5,184(a7)
1c007ff8:	0084a483          	lw	s1,8(s1)
	AT_GraphPerf[47] = gap_cl_readhwtimer();
	S49_MatAdd_16x1x299(
1c007ffc:	4e12                	lw	t3,4(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27540)) /* Infos */
1c007ffe:	b94d0693          	addi	a3,s10,-1132
1c008002:	10200937          	lui	s2,0x10200
	S49_MatAdd_16x1x299(
1c008006:	000e2503          	lw	a0,0(t3)
	AT_GraphPerf[47] = gap_cl_readhwtimer();
1c00800a:	0a98ae23          	sw	s1,188(a7)
1c00800e:	40090913          	addi	s2,s2,1024 # 10200400 <__l1_end+0x2003dc>
	S49_MatAdd_16x1x299(
1c008012:	96aa                	add	a3,a3,a0
1c008014:	01650633          	add	a2,a0,s6
1c008018:	018505b3          	add	a1,a0,s8
1c00801c:	9556                	add	a0,a0,s5
1c00801e:	ac5fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c008022:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[47] = gap_cl_readhwtimer() - AT_GraphPerf[47];
1c008026:	1c01c4b7          	lui	s1,0x1c01c
1c00802a:	64848493          	addi	s1,s1,1608 # 1c01c648 <AT_GraphPerf>
1c00802e:	0bc4a703          	lw	a4,188(s1)
1c008032:	8f99                	sub	a5,a5,a4
1c008034:	0af4ae23          	sw	a5,188(s1)
1c008038:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[48] = gap_cl_readhwtimer();
	S50_Conv2d_16x16x1x3_Relu(
1c00803c:	1c010a37          	lui	s4,0x1c010
1c008040:	5f0a0a13          	addi	s4,s4,1520 # 1c0105f0 <quant_model_L2_Memory>
1c008044:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+19392)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25600)), /* Bias */
1c008048:	6b19                	lui	s6,0x6
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In */
1c00804a:	6c25                	lui	s8,0x9
1c00804c:	184c0c13          	addi	s8,s8,388 # 9184 <__rt_stack_size+0x8984>
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26784)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26800)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27552)) /* Infos */
1c008050:	ba098813          	addi	a6,s3,-1120
		((signed char * __restrict__) (quant_model_L2_Memory+26800)), /* ScaleN */
1c008054:	8b098793          	addi	a5,s3,-1872
		((unsigned char * __restrict__) (quant_model_L2_Memory+26784)), /* Scale */
1c008058:	8a098713          	addi	a4,s3,-1888
		((signed int * __restrict__) (quant_model_L2_Memory+25600)), /* Bias */
1c00805c:	400b0613          	addi	a2,s6,1024 # 6400 <__rt_stack_size+0x5c00>
		((signed char * __restrict__) (quant_model_L2_Memory+19392)), /* Filter */
1c008060:	bc040593          	addi	a1,s0,-1088
	S50_Conv2d_16x16x1x3_Relu(
1c008064:	982a                	add	a6,a6,a0
1c008066:	97aa                	add	a5,a5,a0
1c008068:	972a                	add	a4,a4,a0
1c00806a:	017506b3          	add	a3,a0,s7
1c00806e:	962a                	add	a2,a2,a0
1c008070:	95aa                	add	a1,a1,a0
1c008072:	9562                	add	a0,a0,s8
	AT_GraphPerf[48] = gap_cl_readhwtimer();
1c008074:	0d14a023          	sw	a7,192(s1)
	S50_Conv2d_16x16x1x3_Relu(
1c008078:	d99fa0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c00807c:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[48] = gap_cl_readhwtimer() - AT_GraphPerf[48];
1c008080:	0c04a703          	lw	a4,192(s1)
1c008084:	8f99                	sub	a5,a5,a4
1c008086:	0cf4a023          	sw	a5,192(s1)
1c00808a:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[49] = gap_cl_readhwtimer();
	S51_Conv2d_16x16x1x3_Relu(
1c00808e:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In */
		((signed char * __restrict__) (quant_model_L2_Memory+20160)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25664)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
1c008092:	6aa1                	lui	s5,0x8
1c008094:	ed4a8a93          	addi	s5,s5,-300 # 7ed4 <__rt_stack_size+0x76d4>
		((unsigned char * __restrict__) (quant_model_L2_Memory+26816)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26832)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27564)) /* Infos */
1c008098:	bac98813          	addi	a6,s3,-1108
		((signed char * __restrict__) (quant_model_L2_Memory+26832)), /* ScaleN */
1c00809c:	8d098793          	addi	a5,s3,-1840
		((unsigned char * __restrict__) (quant_model_L2_Memory+26816)), /* Scale */
1c0080a0:	8c098713          	addi	a4,s3,-1856
		((signed int * __restrict__) (quant_model_L2_Memory+25664)), /* Bias */
1c0080a4:	440b0613          	addi	a2,s6,1088
		((signed char * __restrict__) (quant_model_L2_Memory+20160)), /* Filter */
1c0080a8:	ec040593          	addi	a1,s0,-320
	S51_Conv2d_16x16x1x3_Relu(
1c0080ac:	982a                	add	a6,a6,a0
1c0080ae:	97aa                	add	a5,a5,a0
1c0080b0:	972a                	add	a4,a4,a0
1c0080b2:	015506b3          	add	a3,a0,s5
1c0080b6:	962a                	add	a2,a2,a0
1c0080b8:	95aa                	add	a1,a1,a0
1c0080ba:	955e                	add	a0,a0,s7
	AT_GraphPerf[49] = gap_cl_readhwtimer();
1c0080bc:	0d14a223          	sw	a7,196(s1)
	S51_Conv2d_16x16x1x3_Relu(
1c0080c0:	d51fa0ef          	jal	ra,1c002e10 <S10_Conv2d_16x16x1x3_Relu>
1c0080c4:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[49] = gap_cl_readhwtimer() - AT_GraphPerf[49];
1c0080c8:	0c44a703          	lw	a4,196(s1)
1c0080cc:	8f99                	sub	a5,a5,a4
1c0080ce:	0cf4a223          	sw	a5,196(s1)
1c0080d2:	00892703          	lw	a4,8(s2)
	AT_GraphPerf[50] = gap_cl_readhwtimer();
	S52_MatAdd_16x1x299(
1c0080d6:	000a2783          	lw	a5,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+51604)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
1c0080da:	6d29                	lui	s10,0xa
	S52_MatAdd_16x1x299(
1c0080dc:	6535                	lui	a0,0xd
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* Out */
1c0080de:	434d0d13          	addi	s10,s10,1076 # a434 <__rt_stack_size+0x9c34>
		((signed char * __restrict__) (quant_model_L2_Memory+27576)) /* Infos */
1c0080e2:	bb898693          	addi	a3,s3,-1096
	S52_MatAdd_16x1x299(
1c0080e6:	99450513          	addi	a0,a0,-1644 # c994 <__rt_stack_size+0xc194>
1c0080ea:	96be                	add	a3,a3,a5
1c0080ec:	01a78633          	add	a2,a5,s10
1c0080f0:	015785b3          	add	a1,a5,s5
1c0080f4:	953e                	add	a0,a0,a5
	AT_GraphPerf[50] = gap_cl_readhwtimer();
1c0080f6:	0ce4a423          	sw	a4,200(s1)
	S52_MatAdd_16x1x299(
1c0080fa:	9e9fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c0080fe:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[50] = gap_cl_readhwtimer() - AT_GraphPerf[50];
1c008102:	0c84a703          	lw	a4,200(s1)
1c008106:	8f99                	sub	a5,a5,a4
1c008108:	0cf4a423          	sw	a5,200(s1)
1c00810c:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[51] = gap_cl_readhwtimer();
	S53_MatAdd_16x1x299(
1c008110:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27588)) /* Infos */
1c008114:	bc498693          	addi	a3,s3,-1084
	AT_GraphPerf[51] = gap_cl_readhwtimer();
1c008118:	0cf4a623          	sw	a5,204(s1)
	S53_MatAdd_16x1x299(
1c00811c:	96aa                	add	a3,a3,a0
1c00811e:	01750633          	add	a2,a0,s7
1c008122:	015505b3          	add	a1,a0,s5
1c008126:	9562                	add	a0,a0,s8
1c008128:	9bbfa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c00812c:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[51] = gap_cl_readhwtimer() - AT_GraphPerf[51];
1c008130:	0cc4a703          	lw	a4,204(s1)
1c008134:	8f99                	sub	a5,a5,a4
1c008136:	0cf4a623          	sw	a5,204(s1)
1c00813a:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[52] = gap_cl_readhwtimer();
	S54_Conv2d_16x16x1x3_Relu(
1c00813e:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+20928)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25728)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26848)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26864)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27600)) /* Infos */
1c008142:	bd098813          	addi	a6,s3,-1072
		((signed char * __restrict__) (quant_model_L2_Memory+26864)), /* ScaleN */
1c008146:	8f098793          	addi	a5,s3,-1808
		((unsigned char * __restrict__) (quant_model_L2_Memory+26848)), /* Scale */
1c00814a:	8e098713          	addi	a4,s3,-1824
		((signed int * __restrict__) (quant_model_L2_Memory+25728)), /* Bias */
1c00814e:	480b0613          	addi	a2,s6,1152
		((signed char * __restrict__) (quant_model_L2_Memory+20928)), /* Filter */
1c008152:	1c040593          	addi	a1,s0,448
	S54_Conv2d_16x16x1x3_Relu(
1c008156:	982a                	add	a6,a6,a0
1c008158:	97aa                	add	a5,a5,a0
1c00815a:	972a                	add	a4,a4,a0
1c00815c:	015506b3          	add	a3,a0,s5
1c008160:	962a                	add	a2,a2,a0
1c008162:	95aa                	add	a1,a1,a0
1c008164:	955e                	add	a0,a0,s7
	AT_GraphPerf[52] = gap_cl_readhwtimer();
1c008166:	0d14a823          	sw	a7,208(s1)
	S54_Conv2d_16x16x1x3_Relu(
1c00816a:	ac8fb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c00816e:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[52] = gap_cl_readhwtimer() - AT_GraphPerf[52];
1c008172:	0d04a703          	lw	a4,208(s1)
1c008176:	8f99                	sub	a5,a5,a4
1c008178:	0cf4a823          	sw	a5,208(s1)
1c00817c:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[53] = gap_cl_readhwtimer();
	S55_Conv2d_16x16x1x3_Relu(
1c008180:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+21696)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25792)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26880)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26896)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27612)) /* Infos */
1c008184:	bdc98813          	addi	a6,s3,-1060
		((signed char * __restrict__) (quant_model_L2_Memory+26896)), /* ScaleN */
1c008188:	91098793          	addi	a5,s3,-1776
		((unsigned char * __restrict__) (quant_model_L2_Memory+26880)), /* Scale */
1c00818c:	90098713          	addi	a4,s3,-1792
		((signed int * __restrict__) (quant_model_L2_Memory+25792)), /* Bias */
1c008190:	4c0b0613          	addi	a2,s6,1216
		((signed char * __restrict__) (quant_model_L2_Memory+21696)), /* Filter */
1c008194:	4c040593          	addi	a1,s0,1216
	S55_Conv2d_16x16x1x3_Relu(
1c008198:	982a                	add	a6,a6,a0
1c00819a:	97aa                	add	a5,a5,a0
1c00819c:	972a                	add	a4,a4,a0
1c00819e:	018506b3          	add	a3,a0,s8
1c0081a2:	962a                	add	a2,a2,a0
1c0081a4:	95aa                	add	a1,a1,a0
1c0081a6:	9556                	add	a0,a0,s5
	AT_GraphPerf[53] = gap_cl_readhwtimer();
1c0081a8:	0d14aa23          	sw	a7,212(s1)
	S55_Conv2d_16x16x1x3_Relu(
1c0081ac:	a86fb0ef          	jal	ra,1c003432 <S14_Conv2d_16x16x1x3_Relu>
1c0081b0:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[53] = gap_cl_readhwtimer() - AT_GraphPerf[53];
1c0081b4:	0d44a703          	lw	a4,212(s1)
1c0081b8:	8f99                	sub	a5,a5,a4
1c0081ba:	0cf4aa23          	sw	a5,212(s1)
1c0081be:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[54] = gap_cl_readhwtimer();
	S56_MatAdd_16x1x299(
1c0081c2:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+42036)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* Out */
1c0081c6:	6cad                	lui	s9,0xb
1c0081c8:	6e4c8c93          	addi	s9,s9,1764 # b6e4 <__rt_stack_size+0xaee4>
		((signed char * __restrict__) (quant_model_L2_Memory+27624)) /* Infos */
1c0081cc:	be898693          	addi	a3,s3,-1048
	S56_MatAdd_16x1x299(
1c0081d0:	96aa                	add	a3,a3,a0
1c0081d2:	01950633          	add	a2,a0,s9
1c0081d6:	018505b3          	add	a1,a0,s8
1c0081da:	956a                	add	a0,a0,s10
	AT_GraphPerf[54] = gap_cl_readhwtimer();
1c0081dc:	0cf4ac23          	sw	a5,216(s1)
	S56_MatAdd_16x1x299(
1c0081e0:	903fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c0081e4:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[54] = gap_cl_readhwtimer() - AT_GraphPerf[54];
1c0081e8:	0d84a703          	lw	a4,216(s1)
1c0081ec:	8f99                	sub	a5,a5,a4
1c0081ee:	0cf4ac23          	sw	a5,216(s1)
1c0081f2:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[55] = gap_cl_readhwtimer();
	S57_MatAdd_16x1x299(
1c0081f6:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+37252)), /* In2 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27636)) /* Infos */
1c0081fa:	bf498693          	addi	a3,s3,-1036
	AT_GraphPerf[55] = gap_cl_readhwtimer();
1c0081fe:	0cf4ae23          	sw	a5,220(s1)
	S57_MatAdd_16x1x299(
1c008202:	96aa                	add	a3,a3,a0
1c008204:	01550633          	add	a2,a0,s5
1c008208:	018505b3          	add	a1,a0,s8
1c00820c:	955e                	add	a0,a0,s7
1c00820e:	8d5fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c008212:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[55] = gap_cl_readhwtimer() - AT_GraphPerf[55];
1c008216:	0dc4a703          	lw	a4,220(s1)
1c00821a:	8f99                	sub	a5,a5,a4
1c00821c:	0cf4ae23          	sw	a5,220(s1)
1c008220:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[56] = gap_cl_readhwtimer();
	S58_Conv2d_16x16x1x3_Relu(
1c008224:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+22464)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25856)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+27684)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26912)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26928)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27648)) /* Infos */
1c008228:	c0098813          	addi	a6,s3,-1024
		((signed char * __restrict__) (quant_model_L2_Memory+26928)), /* ScaleN */
1c00822c:	93098793          	addi	a5,s3,-1744
		((unsigned char * __restrict__) (quant_model_L2_Memory+26912)), /* Scale */
1c008230:	92098713          	addi	a4,s3,-1760
		((signed int * __restrict__) (quant_model_L2_Memory+25856)), /* Bias */
1c008234:	500b0613          	addi	a2,s6,1280
		((signed char * __restrict__) (quant_model_L2_Memory+22464)), /* Filter */
1c008238:	7c040593          	addi	a1,s0,1984
	S58_Conv2d_16x16x1x3_Relu(
1c00823c:	982a                	add	a6,a6,a0
1c00823e:	97aa                	add	a5,a5,a0
1c008240:	972a                	add	a4,a4,a0
1c008242:	017506b3          	add	a3,a0,s7
1c008246:	962a                	add	a2,a2,a0
1c008248:	95aa                	add	a1,a1,a0
1c00824a:	9556                	add	a0,a0,s5
	AT_GraphPerf[56] = gap_cl_readhwtimer();
1c00824c:	0f14a023          	sw	a7,224(s1)
	S58_Conv2d_16x16x1x3_Relu(
1c008250:	807fb0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c008254:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[56] = gap_cl_readhwtimer() - AT_GraphPerf[56];
1c008258:	0e04a703          	lw	a4,224(s1)
1c00825c:	8f99                	sub	a5,a5,a4
1c00825e:	0ef4a023          	sw	a5,224(s1)
1c008262:	00892883          	lw	a7,8(s2)
	AT_GraphPerf[57] = gap_cl_readhwtimer();
	S59_Conv2d_16x16x1x3_Relu(
1c008266:	000a2503          	lw	a0,0(s4)
		((signed char * __restrict__) (quant_model_L2_Memory+23232)), /* Filter */
		((signed int * __restrict__) (quant_model_L2_Memory+25920)), /* Bias */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* Out */
		((unsigned char * __restrict__) (quant_model_L2_Memory+26944)), /* Scale */
		((signed char * __restrict__) (quant_model_L2_Memory+26960)), /* ScaleN */
		((signed char * __restrict__) (quant_model_L2_Memory+27660)) /* Infos */
1c00826a:	c0c98813          	addi	a6,s3,-1012
		((signed char * __restrict__) (quant_model_L2_Memory+26960)), /* ScaleN */
1c00826e:	95098793          	addi	a5,s3,-1712
		((unsigned char * __restrict__) (quant_model_L2_Memory+26944)), /* Scale */
1c008272:	94098713          	addi	a4,s3,-1728
		((signed int * __restrict__) (quant_model_L2_Memory+25920)), /* Bias */
1c008276:	540b0613          	addi	a2,s6,1344
		((signed char * __restrict__) (quant_model_L2_Memory+23232)), /* Filter */
1c00827a:	ac0b0593          	addi	a1,s6,-1344
	S59_Conv2d_16x16x1x3_Relu(
1c00827e:	982a                	add	a6,a6,a0
1c008280:	97aa                	add	a5,a5,a0
1c008282:	972a                	add	a4,a4,a0
1c008284:	015506b3          	add	a3,a0,s5
1c008288:	962a                	add	a2,a2,a0
1c00828a:	95aa                	add	a1,a1,a0
1c00828c:	955e                	add	a0,a0,s7
	AT_GraphPerf[57] = gap_cl_readhwtimer();
1c00828e:	0f14a223          	sw	a7,228(s1)
	S59_Conv2d_16x16x1x3_Relu(
1c008292:	fc4fb0ef          	jal	ra,1c003a56 <S18_Conv2d_16x16x1x3_Relu>
1c008296:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[57] = gap_cl_readhwtimer() - AT_GraphPerf[57];
1c00829a:	0e44a703          	lw	a4,228(s1)
1c00829e:	8f99                	sub	a5,a5,a4
1c0082a0:	0ef4a223          	sw	a5,228(s1)
1c0082a4:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[58] = gap_cl_readhwtimer();
	S60_MatAdd_16x1x299(
1c0082a8:	000a2503          	lw	a0,0(s4)
1c0082ac:	4f02                	lw	t5,0(sp)
		((signed char * __restrict__) (quant_model_L2_Memory+46820)), /* In1 */
		((signed char * __restrict__) (quant_model_L2_Memory+32468)), /* In2 */
		((signed char * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (quant_model_L2_Memory+27672)) /* Infos */
1c0082ae:	c1898693          	addi	a3,s3,-1000
	S60_MatAdd_16x1x299(
1c0082b2:	96aa                	add	a3,a3,a0
1c0082b4:	015505b3          	add	a1,a0,s5
1c0082b8:	867a                	mv	a2,t5
1c0082ba:	9566                	add	a0,a0,s9
	AT_GraphPerf[58] = gap_cl_readhwtimer();
1c0082bc:	0ef4a423          	sw	a5,232(s1)
	S60_MatAdd_16x1x299(
1c0082c0:	823fa0ef          	jal	ra,1c002ae2 <S8_MatAdd_16x1x299>
1c0082c4:	00892903          	lw	s2,8(s2)
	);
	AT_GraphPerf[58] = gap_cl_readhwtimer() - AT_GraphPerf[58];
1c0082c8:	0e84a783          	lw	a5,232(s1)
	return 0;
}
1c0082cc:	40b6                	lw	ra,76(sp)
1c0082ce:	4426                	lw	s0,72(sp)
	AT_GraphPerf[58] = gap_cl_readhwtimer() - AT_GraphPerf[58];
1c0082d0:	40f90933          	sub	s2,s2,a5
1c0082d4:	0f24a423          	sw	s2,232(s1)
}
1c0082d8:	59f2                	lw	s3,60(sp)
1c0082da:	4496                	lw	s1,68(sp)
1c0082dc:	4906                	lw	s2,64(sp)
1c0082de:	5a62                	lw	s4,56(sp)
1c0082e0:	5ad2                	lw	s5,52(sp)
1c0082e2:	5b42                	lw	s6,48(sp)
1c0082e4:	5bb2                	lw	s7,44(sp)
1c0082e6:	5c22                	lw	s8,40(sp)
1c0082e8:	5c92                	lw	s9,36(sp)
1c0082ea:	5d02                	lw	s10,32(sp)
1c0082ec:	4df2                	lw	s11,28(sp)
1c0082ee:	4501                	li	a0,0
1c0082f0:	6161                	addi	sp,sp,80
1c0082f2:	8082                	ret

1c0082f4 <KerParReduct_CC_SQ8>:
 * Input Scaling and reduction to 8b then channel cnetric activation, Out location != In location. Features are evaluated in parallel
*/
void KerParReduct_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
	int S = Arg->Feat;
1c0082f4:	00855683          	lhu	a3,8(a0)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0082f8:	f1402773          	csrr	a4,mhartid
	int * __restrict__ In = (int *__restrict__) Arg->In;
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
	signed char * __restrict__ Out = (signed char *__restrict__) Arg->Out;
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int Size = Arg->W*Arg->H;
1c0082fc:	00a55e83          	lhu	t4,10(a0)
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c008300:	f836b7b3          	p.bclr	a5,a3,28,3
1c008304:	0036d613          	srli	a2,a3,0x3
1c008308:	00f037b3          	snez	a5,a5
1c00830c:	97b2                	add	a5,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c00830e:	c8071733          	p.extractu	a4,a4,4,0
1c008312:	02f70733          	mul	a4,a4,a5
	unsigned int Size = Arg->W*Arg->H;
1c008316:	00c55603          	lhu	a2,12(a0)
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c00831a:	00052883          	lw	a7,0(a0)
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c00831e:	01052303          	lw	t1,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c008322:	01452e03          	lw	t3,20(a0)
	signed char * __restrict__ Out = (signed char *__restrict__) Arg->Out;
1c008326:	414c                	lw	a1,4(a0)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c008328:	00f70833          	add	a6,a4,a5
1c00832c:	04d84833          	p.min	a6,a6,a3
	unsigned int Size = Arg->W*Arg->H;
1c008330:	00ce8edb          	p.mac	t4,t4,a2,zero
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_ActivationScale1_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c008334:	05077363          	bleu	a6,a4,1c00837a <KerParReduct_CC_SQ8+0x86>
1c008338:	040e8163          	beqz	t4,1c00837a <KerParReduct_CC_SQ8+0x86>
1c00833c:	002e9f13          	slli	t5,t4,0x2
1c008340:	9e3a                	add	t3,t3,a4
1c008342:	933a                	add	t1,t1,a4
1c008344:	40e80833          	sub	a6,a6,a4
1c008348:	43e708b3          	p.mac	a7,a4,t5
1c00834c:	43d705b3          	p.mac	a1,a4,t4
1c008350:	0148407b          	lp.setup	x0,a6,1c008378 <KerParReduct_CC_SQ8+0x84>
1c008354:	0013450b          	p.lbu	a0,1(t1!) # 2b0001 <__L2+0x230001>
1c008358:	001e460b          	p.lbu	a2,1(t3!)
1c00835c:	86c6                	mv	a3,a7
1c00835e:	8776                	mv	a4,t4
1c008360:	00a740fb          	lp.setup	x1,a4,1c008374 <KerParReduct_CC_SQ8+0x80>
                int Acc0 = gap_clip(AT_SCALE(Scale, In[i], ScaleN), 7);
1c008364:	0046a78b          	p.lw	a5,4(a3!)
1c008368:	02a787b3          	mul	a5,a5,a0
1c00836c:	40c067db          	p.mac.zh.sl	a5,zero,a2,zero
1c008370:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c008374:	00f580ab          	p.sb	a5,1(a1!)
1c008378:	98fa                	add	a7,a7,t5
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00837a:	002047b7          	lui	a5,0x204
1c00837e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c008382:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c008386:	8082                	ret

1c008388 <KerParReduct_CC_ReLU_SQ8>:


void KerParReduct_CC_ReLU_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
	int S = Arg->Feat;
1c008388:	00855683          	lhu	a3,8(a0)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c00838c:	f1402773          	csrr	a4,mhartid
	int * __restrict__ In = (int *__restrict__) Arg->In;
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
	signed char * __restrict__ Out = (signed char *__restrict__) Arg->Out;
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int Size = Arg->W*Arg->H;
1c008390:	00a55e83          	lhu	t4,10(a0)
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c008394:	f836b7b3          	p.bclr	a5,a3,28,3
1c008398:	0036d613          	srli	a2,a3,0x3
1c00839c:	00f037b3          	snez	a5,a5
1c0083a0:	97b2                	add	a5,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0083a2:	c8071733          	p.extractu	a4,a4,4,0
1c0083a6:	02f70733          	mul	a4,a4,a5
	unsigned int Size = Arg->W*Arg->H;
1c0083aa:	00c55603          	lhu	a2,12(a0)
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c0083ae:	00052883          	lw	a7,0(a0)
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c0083b2:	01052303          	lw	t1,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c0083b6:	01452e03          	lw	t3,20(a0)
	signed char * __restrict__ Out = (signed char *__restrict__) Arg->Out;
1c0083ba:	414c                	lw	a1,4(a0)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0083bc:	00f70833          	add	a6,a4,a5
1c0083c0:	04d84833          	p.min	a6,a6,a3
	unsigned int Size = Arg->W*Arg->H;
1c0083c4:	00ce8edb          	p.mac	t4,t4,a2,zero
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_ActivationScale1_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_RELU, A0, B0, C0);
1c0083c8:	05077563          	bleu	a6,a4,1c008412 <KerParReduct_CC_ReLU_SQ8+0x8a>
1c0083cc:	040e8363          	beqz	t4,1c008412 <KerParReduct_CC_ReLU_SQ8+0x8a>
1c0083d0:	002e9f13          	slli	t5,t4,0x2
1c0083d4:	9e3a                	add	t3,t3,a4
1c0083d6:	933a                	add	t1,t1,a4
1c0083d8:	40e80833          	sub	a6,a6,a4
1c0083dc:	43e708b3          	p.mac	a7,a4,t5
1c0083e0:	43d705b3          	p.mac	a1,a4,t4
1c0083e4:	0168407b          	lp.setup	x0,a6,1c008410 <KerParReduct_CC_ReLU_SQ8+0x88>
1c0083e8:	0013450b          	p.lbu	a0,1(t1!)
1c0083ec:	001e460b          	p.lbu	a2,1(t3!)
1c0083f0:	86c6                	mv	a3,a7
1c0083f2:	8776                	mv	a4,t4
1c0083f4:	00c740fb          	lp.setup	x1,a4,1c00840c <KerParReduct_CC_ReLU_SQ8+0x84>
                int Acc0 = gap_clip(AT_SCALE(Scale, In[i], ScaleN), 7);
1c0083f8:	0046a78b          	p.lw	a5,4(a3!)
1c0083fc:	02a787b3          	mul	a5,a5,a0
1c008400:	40c067db          	p.mac.zh.sl	a5,zero,a2,zero
1c008404:	148797b3          	p.clip	a5,a5,8
				Acc0 = Max(0, Acc0);
1c008408:	0407e7b3          	p.max	a5,a5,zero
                Out[i] = Acc0;
1c00840c:	00f580ab          	p.sb	a5,1(a1!)
1c008410:	98fa                	add	a7,a7,t5
1c008412:	002047b7          	lui	a5,0x204
1c008416:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00841a:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c00841e:	8082                	ret

1c008420 <KerParSetBiasB32_SQ8>:
/* Set Bias, all outputs evalauted in parallel */
void KerParSetBiasB32_SQ8(KerSetBias_SQ8_T *Arg)

{
	int * __restrict__ Out = Arg->Out;
	unsigned int W = Arg->W, H = Arg->H, Feat = Arg->Feat;
1c008420:	00855603          	lhu	a2,8(a0)
	int * __restrict__ Bias = Arg->Bias;
	unsigned int NormBias = Arg->NormBias;
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c008424:	f14026f3          	csrr	a3,mhartid
	int * __restrict__ Out = Arg->Out;
1c008428:	4118                	lw	a4,0(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00842a:	f83637b3          	p.bclr	a5,a2,28,3
1c00842e:	00365593          	srli	a1,a2,0x3
1c008432:	00f037b3          	snez	a5,a5
1c008436:	97ae                	add	a5,a5,a1
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c008438:	c80696b3          	p.extractu	a3,a3,4,0
1c00843c:	02f686b3          	mul	a3,a3,a5
	unsigned int W = Arg->W, H = Arg->H, Feat = Arg->Feat;
1c008440:	00455303          	lhu	t1,4(a0)
1c008444:	00655583          	lhu	a1,6(a0)
	int * __restrict__ Bias = Arg->Bias;
1c008448:	00c52803          	lw	a6,12(a0)
	unsigned int NormBias = Arg->NormBias;
1c00844c:	01054e83          	lbu	t4,16(a0)
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c008450:	97b6                	add	a5,a5,a3
1c008452:	04c7c7b3          	p.min	a5,a5,a2

	for (unsigned int of=First; of<Last; of++) {
1c008456:	06f6f863          	bleu	a5,a3,1c0084c6 <KerParSetBiasB32_SQ8+0xa6>
		int *LineOut = (int *) (Out+W*H*of);
1c00845a:	02b30333          	mul	t1,t1,a1
1c00845e:	00269613          	slli	a2,a3,0x2
1c008462:	00279593          	slli	a1,a5,0x2
1c008466:	8d91                	sub	a1,a1,a2
1c008468:	15f1                	addi	a1,a1,-4
1c00846a:	8189                	srli	a1,a1,0x2
1c00846c:	4e11                	li	t3,4
1c00846e:	9832                	add	a6,a6,a2
1c008470:	0585                	addi	a1,a1,1
1c008472:	00231f93          	slli	t6,t1,0x2
		int B = AT_LSHIFT(Bias[of], NormBias);
		for (unsigned int i=0; i<((W*H)/2); i++) {
			LineOut[2*i] = B; LineOut[2*i+1] = B;
		}
		LineOut[W*H-1] = B;
1c008476:	ffcf8893          	addi	a7,t6,-4
1c00847a:	8546                	mv	a0,a7
1c00847c:	42df8533          	p.mac	a0,t6,a3
		for (unsigned int i=0; i<((W*H)/2); i++) {
1c008480:	00135313          	srli	t1,t1,0x1
1c008484:	00331f13          	slli	t5,t1,0x3
1c008488:	411f0f33          	sub	t5,t5,a7
1c00848c:	411e0e33          	sub	t3,t3,a7
1c008490:	953a                	add	a0,a0,a4
1c008492:	0195c07b          	lp.setup	x0,a1,1c0084c4 <KerParSetBiasB32_SQ8+0xa4>
		int B = AT_LSHIFT(Bias[of], NormBias);
1c008496:	0048270b          	p.lw	a4,4(a6!)
1c00849a:	01d71733          	sll	a4,a4,t4
		for (unsigned int i=0; i<((W*H)/2); i++) {
1c00849e:	02030163          	beqz	t1,1c0084c0 <KerParSetBiasB32_SQ8+0xa0>
1c0084a2:	01e887b3          	add	a5,a7,t5
1c0084a6:	17e1                	addi	a5,a5,-8
1c0084a8:	838d                	srli	a5,a5,0x3
1c0084aa:	00ae0633          	add	a2,t3,a0
1c0084ae:	411506b3          	sub	a3,a0,a7
1c0084b2:	0785                	addi	a5,a5,1
1c0084b4:	0047c0fb          	lp.setup	x1,a5,1c0084bc <KerParSetBiasB32_SQ8+0x9c>
			LineOut[2*i] = B; LineOut[2*i+1] = B;
1c0084b8:	00e6a42b          	p.sw	a4,8(a3!)
1c0084bc:	00e6242b          	p.sw	a4,8(a2!)
		LineOut[W*H-1] = B;
1c0084c0:	00e56fab          	p.sw	a4,t6(a0!)
1c0084c4:	0001                	nop
1c0084c6:	002047b7          	lui	a5,0x204
1c0084ca:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0084ce:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c0084d2:	8082                	ret

1c0084d4 <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FSy, PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FSy, PadIn[2], Sy));

	unsigned int InFeatures = Arg->InFeatures;
		
	for (unsigned int of=First; of<Last; of++) 
		for (unsigned int If=0; If<InFeatures; If++) {
1c0084d4:	4e02                	lw	t3,0(sp)
1c0084d6:	00188303          	lb	t1,1(a7)
1c0084da:	040e0263          	beqz	t3,1c00851e <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1+0x4a>
1c0084de:	00088e03          	lb	t3,0(a7)
1c0084e2:	8e9a                	mv	t4,t1
1c0084e4:	02d708b3          	mul	a7,a4,a3
1c0084e8:	40c70633          	sub	a2,a4,a2
1c0084ec:	088a                	slli	a7,a7,0x2
1c0084ee:	42b60533          	p.mac	a0,a2,a1
1c0084f2:	9846                	add	a6,a6,a7
1c0084f4:	02f77463          	bleu	a5,a4,1c00851c <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1+0x48>
1c0084f8:	068a                	slli	a3,a3,0x2
1c0084fa:	00150613          	addi	a2,a0,1
1c0084fe:	8f99                	sub	a5,a5,a4
1c008500:	00c7c0fb          	lp.setup	x1,a5,1c008518 <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1+0x44>
1c008504:	00082703          	lw	a4,0(a6)
1c008508:	00b5730b          	p.lb	t1,a1(a0!)
1c00850c:	00b6788b          	p.lb	a7,a1(a2!)
1c008510:	43c30733          	p.mac	a4,t1,t3
1c008514:	43d88733          	p.mac	a4,a7,t4
1c008518:	00e866ab          	p.sw	a4,a3(a6!)
1c00851c:	8082                	ret
1c00851e:	00288e83          	lb	t4,2(a7)
1c008522:	8e1a                	mv	t3,t1
1c008524:	b7c1                	j	1c0084e4 <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1+0x10>

1c008526 <KerConv3x1BorderStrideNx1_SQ8.isra.3>:
1c008526:	715d                	addi	sp,sp,-80
1c008528:	4356                	lw	t1,84(sp)
1c00852a:	c2a6                	sw	s1,68(sp)
1c00852c:	44e6                	lw	s1,88(sp)
1c00852e:	c4a2                	sw	s0,72(sp)
1c008530:	c0ca                	sw	s2,64(sp)
1c008532:	de4e                	sw	s3,60(sp)
1c008534:	dc52                	sw	s4,56(sp)
1c008536:	da56                	sw	s5,52(sp)
1c008538:	d85a                	sw	s6,48(sp)
1c00853a:	d65e                	sw	s7,44(sp)
1c00853c:	d462                	sw	s8,40(sp)
1c00853e:	d266                	sw	s9,36(sp)
1c008540:	d06a                	sw	s10,32(sp)
1c008542:	ce6e                	sw	s11,28(sp)
1c008544:	c686                	sw	ra,76(sp)
1c008546:	78037e57          	pv.extract.b	t3,t1,0
1c00854a:	892a                	mv	s2,a0
1c00854c:	8c2e                	mv	s8,a1
1c00854e:	8cb2                	mv	s9,a2
1c008550:	8a36                	mv	s4,a3
1c008552:	89ba                	mv	s3,a4
1c008554:	8dbe                	mv	s11,a5
1c008556:	8b42                	mv	s6,a6
1c008558:	8bc6                	mv	s7,a7
1c00855a:	4d46                	lw	s10,80(sp)
1c00855c:	7814fad7          	pv.extract.b	s5,s1,2
1c008560:	7a037457          	pv.extract.b	s0,t1,1
1c008564:	020e1263          	bnez	t3,1c008588 <KerConv3x1BorderStrideNx1_SQ8.isra.3+0x62>
1c008568:	e81d                	bnez	s0,1c00859e <KerConv3x1BorderStrideNx1_SQ8.isra.3+0x78>
1c00856a:	40b6                	lw	ra,76(sp)
1c00856c:	4426                	lw	s0,72(sp)
1c00856e:	4496                	lw	s1,68(sp)
1c008570:	4906                	lw	s2,64(sp)
1c008572:	59f2                	lw	s3,60(sp)
1c008574:	5a62                	lw	s4,56(sp)
1c008576:	5ad2                	lw	s5,52(sp)
1c008578:	5b42                	lw	s6,48(sp)
1c00857a:	5bb2                	lw	s7,44(sp)
1c00857c:	5c22                	lw	s8,40(sp)
1c00857e:	5c92                	lw	s9,36(sp)
1c008580:	5d02                	lw	s10,32(sp)
1c008582:	4df2                	lw	s11,28(sp)
1c008584:	6161                	addi	sp,sp,80
1c008586:	8082                	ret
1c008588:	88b2                	mv	a7,a2
1c00858a:	882e                	mv	a6,a1
1c00858c:	c002                	sw	zero,0(sp)
1c00858e:	87de                	mv	a5,s7
1c008590:	875a                	mv	a4,s6
1c008592:	86ce                	mv	a3,s3
1c008594:	8656                	mv	a2,s5
1c008596:	85d2                	mv	a1,s4
1c008598:	f3dff0ef          	jal	ra,1c0084d4 <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1>
1c00859c:	d479                	beqz	s0,1c00856a <KerConv3x1BorderStrideNx1_SQ8.isra.3+0x44>
1c00859e:	43ad8933          	p.mac	s2,s11,s10
1c0085a2:	00299813          	slli	a6,s3,0x2
1c0085a6:	7804f4d7          	pv.extract.b	s1,s1,0
1c0085aa:	4785                	li	a5,1
1c0085ac:	4426                	lw	s0,72(sp)
1c0085ae:	1871                	addi	a6,a6,-4
1c0085b0:	c8be                	sw	a5,80(sp)
1c0085b2:	40b6                	lw	ra,76(sp)
1c0085b4:	5d02                	lw	s10,32(sp)
1c0085b6:	4df2                	lw	s11,28(sp)
1c0085b8:	40990533          	sub	a0,s2,s1
1c0085bc:	88e6                	mv	a7,s9
1c0085be:	4496                	lw	s1,68(sp)
1c0085c0:	4906                	lw	s2,64(sp)
1c0085c2:	5c92                	lw	s9,36(sp)
1c0085c4:	9862                	add	a6,a6,s8
1c0085c6:	87de                	mv	a5,s7
1c0085c8:	5c22                	lw	s8,40(sp)
1c0085ca:	5bb2                	lw	s7,44(sp)
1c0085cc:	875a                	mv	a4,s6
1c0085ce:	86ce                	mv	a3,s3
1c0085d0:	5b42                	lw	s6,48(sp)
1c0085d2:	59f2                	lw	s3,60(sp)
1c0085d4:	8656                	mv	a2,s5
1c0085d6:	85d2                	mv	a1,s4
1c0085d8:	5ad2                	lw	s5,52(sp)
1c0085da:	5a62                	lw	s4,56(sp)
1c0085dc:	6161                	addi	sp,sp,80
1c0085de:	ef7ff06f          	j	1c0084d4 <KerConv2x1from3x1StrideNx1_V_SQ8.isra.1>

1c0085e2 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10>:
1c0085e2:	7179                	addi	sp,sp,-48
1c0085e4:	d426                	sw	s1,40(sp)
1c0085e6:	54d2                	lw	s1,52(sp)
1c0085e8:	d622                	sw	s0,44(sp)
1c0085ea:	5ec2                	lw	t4,48(sp)
1c0085ec:	5472                	lw	s0,60(sp)
1c0085ee:	8f26                	mv	t5,s1
1c0085f0:	4336                	lw	t1,76(sp)
1c0085f2:	428e8f33          	p.mac	t5,t4,s0
1c0085f6:	d24a                	sw	s2,36(sp)
1c0085f8:	4906                	lw	s2,64(sp)
1c0085fa:	ce52                	sw	s4,28(sp)
1c0085fc:	cc56                	sw	s5,24(sp)
1c0085fe:	ca5a                	sw	s6,20(sp)
1c008600:	c466                	sw	s9,8(sp)
1c008602:	d04e                	sw	s3,32(sp)
1c008604:	c85e                	sw	s7,16(sp)
1c008606:	c662                	sw	s8,12(sp)
1c008608:	0f0a                	slli	t5,t5,0x2
1c00860a:	c26a                	sw	s10,4(sp)
1c00860c:	78037e57          	pv.extract.b	t3,t1,0
1c008610:	5a62                	lw	s4,56(sp)
1c008612:	78137357          	pv.extract.b	t1,t1,2
1c008616:	4a96                	lw	s5,68(sp)
1c008618:	4ca6                	lw	s9,72(sp)
1c00861a:	01e58b33          	add	s6,a1,t5
1c00861e:	09247a63          	bleu	s2,s0,1c0086b2 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xd0>
1c008622:	89b2                	mv	s3,a2
1c008624:	863a                	mv	a2,a4
1c008626:	41448733          	sub	a4,s1,s4
1c00862a:	9776                	add	a4,a4,t4
1c00862c:	070a                	slli	a4,a4,0x2
1c00862e:	0944f263          	bleu	s4,s1,1c0086b2 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xd0>
1c008632:	409a0c33          	sub	s8,s4,s1
1c008636:	0c0a                	slli	s8,s8,0x2
1c008638:	039405b3          	mul	a1,s0,s9
1c00863c:	9c3a                	add	s8,s8,a4
1c00863e:	100e5e33          	p.exthz	t3,t3
1c008642:	10035333          	p.exthz	t1,t1
1c008646:	03548733          	mul	a4,s1,s5
1c00864a:	406585b3          	sub	a1,a1,t1
1c00864e:	41c70733          	sub	a4,a4,t3
1c008652:	43158733          	p.mac	a4,a1,a7
1c008656:	031c8cb3          	mul	s9,s9,a7
1c00865a:	00e50bb3          	add	s7,a0,a4
1c00865e:	031803b3          	mul	t2,a6,a7
1c008662:	8d5e                	mv	s10,s7
1c008664:	875a                	mv	a4,s6
1c008666:	85a6                	mv	a1,s1
1c008668:	0047230b          	p.lw	t1,4(a4!)
1c00866c:	ca05                	beqz	a2,1c00869c <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xba>
1c00866e:	88ce                	mv	a7,s3
1c008670:	8fea                	mv	t6,s10
1c008672:	8f32                	mv	t5,a2
1c008674:	013f407b          	lp.setup	x0,t5,1c00869a <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xb8>
1c008678:	82c6                	mv	t0,a7
1c00867a:	ce99                	beqz	a3,1c008698 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xb6>
1c00867c:	00d882b3          	add	t0,a7,a3
1c008680:	887e                	mv	a6,t6
1c008682:	41128533          	sub	a0,t0,a7
1c008686:	007540fb          	lp.setup	x1,a0,1c008694 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0xb2>
1c00868a:	00080e83          	lb	t4,0(a6)
1c00868e:	00188e0b          	p.lb	t3,1(a7!)
1c008692:	983e                	add	a6,a6,a5
1c008694:	43ce8333          	p.mac	t1,t4,t3
1c008698:	9f9e                	add	t6,t6,t2
1c00869a:	8896                	mv	a7,t0
1c00869c:	fe672e23          	sw	t1,-4(a4)
1c0086a0:	0585                	addi	a1,a1,1
1c0086a2:	9d56                	add	s10,s10,s5
1c0086a4:	fd4592e3          	bne	a1,s4,1c008668 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0x86>
1c0086a8:	0405                	addi	s0,s0,1
1c0086aa:	9be6                	add	s7,s7,s9
1c0086ac:	9b62                	add	s6,s6,s8
1c0086ae:	fb241ae3          	bne	s0,s2,1c008662 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10+0x80>
1c0086b2:	5432                	lw	s0,44(sp)
1c0086b4:	54a2                	lw	s1,40(sp)
1c0086b6:	5912                	lw	s2,36(sp)
1c0086b8:	5982                	lw	s3,32(sp)
1c0086ba:	4a72                	lw	s4,28(sp)
1c0086bc:	4ae2                	lw	s5,24(sp)
1c0086be:	4b52                	lw	s6,20(sp)
1c0086c0:	4bc2                	lw	s7,16(sp)
1c0086c2:	4c32                	lw	s8,12(sp)
1c0086c4:	4ca2                	lw	s9,8(sp)
1c0086c6:	4d12                	lw	s10,4(sp)
1c0086c8:	6145                	addi	sp,sp,48
1c0086ca:	8082                	ret

1c0086cc <KerConv3x1Stride1x1_Body_SQ8.isra.13>:
1c0086cc:	833e                	mv	t1,a5
1c0086ce:	43170333          	p.mac	t1,a4,a7
1c0086d2:	4e12                	lw	t3,4(sp)
1c0086d4:	4210                	lw	a2,0(a2)
1c0086d6:	4f02                	lw	t5,0(sp)
1c0086d8:	780e7e57          	pv.extract.b	t3,t3,0
1c0086dc:	100e5e33          	p.exthz	t3,t3
1c0086e0:	b2107657          	pv.insert.b	a2,zero,3
1c0086e4:	030a                	slli	t1,t1,0x2
1c0086e6:	959a                	add	a1,a1,t1
1c0086e8:	0507f663          	bleu	a6,a5,1c008734 <KerConv3x1Stride1x1_Body_SQ8.isra.13+0x68>
1c0086ec:	02d88333          	mul	t1,a7,a3
1c0086f0:	00271f93          	slli	t6,a4,0x2
1c0086f4:	41c30733          	sub	a4,t1,t3
1c0086f8:	03e8fe63          	bleu	t5,a7,1c008734 <KerConv3x1Stride1x1_Body_SQ8.isra.13+0x68>
1c0086fc:	97ba                	add	a5,a5,a4
1c0086fe:	01050e33          	add	t3,a0,a6
1c008702:	00f50eb3          	add	t4,a0,a5
1c008706:	9e3a                	add	t3,t3,a4
1c008708:	41de0e33          	sub	t3,t3,t4
1c00870c:	013e407b          	lp.setup	x0,t3,1c008732 <KerConv3x1Stride1x1_Body_SQ8.isra.13+0x66>
1c008710:	8376                	mv	t1,t4
1c008712:	20d3778b          	p.lw	a5,a3(t1!)
1c008716:	882e                	mv	a6,a1
1c008718:	411f0533          	sub	a0,t5,a7
1c00871c:	008540fb          	lp.setup	x1,a0,1c00872c <KerConv3x1Stride1x1_Body_SQ8.isra.13+0x60>
1c008720:	00082703          	lw	a4,0(a6)
1c008724:	b8c79757          	pv.sdotsp.b	a4,a5,a2
1c008728:	00e86fab          	p.sw	a4,t6(a6!)
1c00872c:	20d3778b          	p.lw	a5,a3(t1!)
1c008730:	0591                	addi	a1,a1,4
1c008732:	0e85                	addi	t4,t4,1
1c008734:	8082                	ret

1c008736 <KerConvNxMDxDyStrideSxSy_Border_SQ8>:
1c008736:	fff68313          	addi	t1,a3,-1
1c00873a:	02f30333          	mul	t1,t1,a5
1c00873e:	7175                	addi	sp,sp,-144
1c008740:	d042                	sw	a6,32(sp)
1c008742:	5e82                	lw	t4,32(sp)
1c008744:	586a                	lw	a6,184(sp)
1c008746:	fff70f13          	addi	t5,a4,-1
1c00874a:	4ffa                	lw	t6,156(sp)
1c00874c:	78187e57          	pv.extract.b	t3,a6,2
1c008750:	78087857          	pv.extract.b	a6,a6,0
1c008754:	d442                	sw	a6,40(sp)
1c008756:	03df0f33          	mul	t5,t5,t4
1c00875a:	5ea2                	lw	t4,40(sp)
1c00875c:	d272                	sw	t3,36(sp)
1c00875e:	c526                	sw	s1,136(sp)
1c008760:	01f35e13          	srli	t3,t1,0x1f
1c008764:	54ba                	lw	s1,172(sp)
1c008766:	026e2e5b          	p.addn	t3,t3,t1,1
1c00876a:	c2f2                	sw	t3,68(sp)
1c00876c:	ffff8313          	addi	t1,t6,-1
1c008770:	41de0e33          	sub	t3,t3,t4
1c008774:	42930e33          	p.mac	t3,t1,s1
1c008778:	5f82                	lw	t6,32(sp)
1c00877a:	c722                	sw	s0,140(sp)
1c00877c:	c14e                	sw	s3,128(sp)
1c00877e:	843a                	mv	s0,a4
1c008780:	89ae                	mv	s3,a1
1c008782:	575a                	lw	a4,180(sp)
1c008784:	01ff5593          	srli	a1,t5,0x1f
1c008788:	03e5a5db          	p.addn	a1,a1,t5,1
1c00878c:	5f12                	lw	t5,36(sp)
1c00878e:	3fff8e93          	addi	t4,t6,1023
1c008792:	78177fd7          	pv.extract.b	t6,a4,2
1c008796:	dcd6                	sw	s5,120(sp)
1c008798:	d67e                	sw	t6,44(sp)
1c00879a:	c4ae                	sw	a1,72(sp)
1c00879c:	78077fd7          	pv.extract.b	t6,a4,0
1c0087a0:	8aaa                	mv	s5,a0
1c0087a2:	41e58533          	sub	a0,a1,t5
1c0087a6:	85b2                	mv	a1,a2
1c0087a8:	7a077657          	pv.extract.b	a2,a4,1
1c0087ac:	d4e6                	sw	s9,104(sp)
1c0087ae:	d2ea                	sw	s10,100(sp)
1c0087b0:	d0ee                	sw	s11,96(sp)
1c0087b2:	7a177757          	pv.extract.b	a4,a4,3
1c0087b6:	c34a                	sw	s2,132(sp)
1c0087b8:	ded2                	sw	s4,124(sp)
1c0087ba:	dada                	sw	s6,116(sp)
1c0087bc:	d8de                	sw	s7,112(sp)
1c0087be:	d6e2                	sw	s8,108(sp)
1c0087c0:	ca46                	sw	a7,20(sp)
1c0087c2:	de7a                	sw	t5,60(sp)
1c0087c4:	c6fe                	sw	t6,76(sp)
1c0087c6:	da32                	sw	a2,52(sp)
1c0087c8:	5d2a                	lw	s10,168(sp)
1c0087ca:	4dda                	lw	s11,148(sp)
1c0087cc:	c8ba                	sw	a4,80(sp)
1c0087ce:	ccf2                	sw	t3,88(sp)
1c0087d0:	5e02                	lw	t3,32(sp)
1c0087d2:	3ff78c93          	addi	s9,a5,1023
1c0087d6:	02fcccb3          	div	s9,s9,a5
1c0087da:	574a                	lw	a4,176(sp)
1c0087dc:	fffd0813          	addi	a6,s10,-1
1c0087e0:	03ceceb3          	div	t4,t4,t3
1c0087e4:	dc66                	sw	s9,56(sp)
1c0087e6:	42e80533          	p.mac	a0,a6,a4
1c0087ea:	d876                	sw	t4,48(sp)
1c0087ec:	5eb2                	lw	t4,44(sp)
1c0087ee:	caaa                	sw	a0,84(sp)
1c0087f0:	0c0e8563          	beqz	t4,1c0088ba <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x184>
1c0087f4:	5f1a                	lw	t5,164(sp)
1c0087f6:	0c0f0263          	beqz	t5,1c0088ba <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x184>
1c0087fa:	456a                	lw	a0,152(sp)
1c0087fc:	03c88333          	mul	t1,a7,t3
1c008800:	5fc2                	lw	t6,48(sp)
1c008802:	5722                	lw	a4,40(sp)
1c008804:	c66a                	sw	s10,12(sp)
1c008806:	5c12                	lw	s8,36(sp)
1c008808:	5d4a                	lw	s10,176(sp)
1c00880a:	100fcfb3          	p.exths	t6,t6
1c00880e:	cc7e                	sw	t6,24(sp)
1c008810:	4b81                	li	s7,0
1c008812:	02a48cb3          	mul	s9,s1,a0
1c008816:	40ec8cb3          	sub	s9,s9,a4
1c00881a:	4e62                	lw	t3,24(sp)
1c00881c:	fffc0393          	addi	t2,s8,-1
1c008820:	4eea                	lw	t4,152(sp)
1c008822:	95c383db          	p.mulsn	t2,t2,t3,10
1c008826:	4f7a                	lw	t5,156(sp)
1c008828:	0385                	addi	t2,t2,1
1c00882a:	09eef163          	bleu	t5,t4,1c0088ac <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x176>
1c00882e:	037d0633          	mul	a2,s10,s7
1c008832:	5f92                	lw	t6,36(sp)
1c008834:	5702                	lw	a4,32(sp)
1c008836:	4e52                	lw	t3,20(sp)
1c008838:	8966                	mv	s2,s9
1c00883a:	8b2e                	mv	s6,a1
1c00883c:	41f60633          	sub	a2,a2,t6
1c008840:	42e38633          	p.mac	a2,t2,a4
1c008844:	037d8733          	mul	a4,s11,s7
1c008848:	43c60933          	p.mac	s2,a2,t3
1c00884c:	01d702b3          	add	t0,a4,t4
1c008850:	01e70a33          	add	s4,a4,t5
1c008854:	028a                	slli	t0,t0,0x2
1c008856:	0a0a                	slli	s4,s4,0x2
1c008858:	92ce                	add	t0,t0,s3
1c00885a:	9a4e                	add	s4,s4,s3
1c00885c:	42d38b33          	p.mac	s6,t2,a3
1c008860:	9956                	add	s2,s2,s5
1c008862:	0042a80b          	p.lw	a6,4(t0!)
1c008866:	0283fe63          	bleu	s0,t2,1c0088a2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x16c>
1c00886a:	00138713          	addi	a4,t2,1
1c00886e:	855a                	mv	a0,s6
1c008870:	8eca                	mv	t4,s2
1c008872:	40740e33          	sub	t3,s0,t2
1c008876:	6ee46c63          	bltu	s0,a4,1c008f6e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x838>
1c00887a:	013e407b          	lp.setup	x0,t3,1c0088a0 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x16a>
1c00887e:	8f2a                	mv	t5,a0
1c008880:	ce99                	beqz	a3,1c00889e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x168>
1c008882:	00d50f33          	add	t5,a0,a3
1c008886:	8676                	mv	a2,t4
1c008888:	40af0733          	sub	a4,t5,a0
1c00888c:	007740fb          	lp.setup	x1,a4,1c00889a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x164>
1c008890:	00060f83          	lb	t6,0(a2)
1c008894:	0015088b          	p.lb	a7,1(a0!)
1c008898:	963e                	add	a2,a2,a5
1c00889a:	431f8833          	p.mac	a6,t6,a7
1c00889e:	9e9a                	add	t4,t4,t1
1c0088a0:	857a                	mv	a0,t5
1c0088a2:	ff02ae23          	sw	a6,-4(t0)
1c0088a6:	9926                	add	s2,s2,s1
1c0088a8:	fa5a1de3          	bne	s4,t0,1c008862 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x12c>
1c0088ac:	5e9a                	lw	t4,164(sp)
1c0088ae:	0b85                	addi	s7,s7,1
1c0088b0:	41ac0c33          	sub	s8,s8,s10
1c0088b4:	f7dbe3e3          	bltu	s7,t4,1c00881a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0xe4>
1c0088b8:	4d32                	lw	s10,12(sp)
1c0088ba:	4f46                	lw	t5,80(sp)
1c0088bc:	0c0f0663          	beqz	t5,1c008988 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x252>
1c0088c0:	5fca                	lw	t6,176(sp)
1c0088c2:	4556                	lw	a0,84(sp)
1c0088c4:	464a                	lw	a2,144(sp)
1c0088c6:	4726                	lw	a4,72(sp)
1c0088c8:	5e0a                	lw	t3,160(sp)
1c0088ca:	00af8bb3          	add	s7,t6,a0
1c0088ce:	41760bb3          	sub	s7,a2,s7
1c0088d2:	9bba                	add	s7,s7,a4
1c0088d4:	8b6a                	mv	s6,s10
1c0088d6:	0bcd7963          	bleu	t3,s10,1c008988 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x252>
1c0088da:	4eea                	lw	t4,152(sp)
1c0088dc:	8cfe                	mv	s9,t6
1c0088de:	4552                	lw	a0,20(sp)
1c0088e0:	5f82                	lw	t6,32(sp)
1c0088e2:	03d48c33          	mul	s8,s1,t4
1c0088e6:	5f42                	lw	t5,48(sp)
1c0088e8:	5722                	lw	a4,40(sp)
1c0088ea:	c66a                	sw	s10,12(sp)
1c0088ec:	100f4f33          	p.exths	t5,t5
1c0088f0:	cc7a                	sw	t5,24(sp)
1c0088f2:	8d76                	mv	s10,t4
1c0088f4:	02af8333          	mul	t1,t6,a0
1c0088f8:	40ec0c33          	sub	s8,s8,a4
1c0088fc:	4e62                	lw	t3,24(sp)
1c0088fe:	fffb8913          	addi	s2,s7,-1
1c008902:	4efa                	lw	t4,156(sp)
1c008904:	95c9095b          	p.mulsn	s2,s2,t3,10
1c008908:	0905                	addi	s2,s2,1
1c00890a:	14896933          	p.clipur	s2,s2,s0
1c00890e:	07dd7663          	bleu	t4,s10,1c00897a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x244>
1c008912:	036c8633          	mul	a2,s9,s6
1c008916:	5f12                	lw	t5,36(sp)
1c008918:	4fd2                	lw	t6,20(sp)
1c00891a:	83e2                	mv	t2,s8
1c00891c:	036d8733          	mul	a4,s11,s6
1c008920:	41e60633          	sub	a2,a2,t5
1c008924:	43f603b3          	p.mac	t2,a2,t6
1c008928:	01a702b3          	add	t0,a4,s10
1c00892c:	01d70a33          	add	s4,a4,t4
1c008930:	028a                	slli	t0,t0,0x2
1c008932:	0a0a                	slli	s4,s4,0x2
1c008934:	92ce                	add	t0,t0,s3
1c008936:	9a4e                	add	s4,s4,s3
1c008938:	93d6                	add	t2,t2,s5
1c00893a:	0042a80b          	p.lw	a6,4(t0!)
1c00893e:	02090963          	beqz	s2,1c008970 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x23a>
1c008942:	852e                	mv	a0,a1
1c008944:	8e9e                	mv	t4,t2
1c008946:	8e4a                	mv	t3,s2
1c008948:	013e407b          	lp.setup	x0,t3,1c00896e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x238>
1c00894c:	8f2a                	mv	t5,a0
1c00894e:	ce99                	beqz	a3,1c00896c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x236>
1c008950:	00d50f33          	add	t5,a0,a3
1c008954:	8676                	mv	a2,t4
1c008956:	40af0733          	sub	a4,t5,a0
1c00895a:	007740fb          	lp.setup	x1,a4,1c008968 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x232>
1c00895e:	00060f83          	lb	t6,0(a2)
1c008962:	0015088b          	p.lb	a7,1(a0!)
1c008966:	963e                	add	a2,a2,a5
1c008968:	431f8833          	p.mac	a6,t6,a7
1c00896c:	9e9a                	add	t4,t4,t1
1c00896e:	857a                	mv	a0,t5
1c008970:	ff02ae23          	sw	a6,-4(t0)
1c008974:	93a6                	add	t2,t2,s1
1c008976:	fc5a12e3          	bne	s4,t0,1c00893a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x204>
1c00897a:	550a                	lw	a0,160(sp)
1c00897c:	0b05                	addi	s6,s6,1
1c00897e:	419b8bb3          	sub	s7,s7,s9
1c008982:	f6ab6de3          	bltu	s6,a0,1c0088fc <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x1c6>
1c008986:	4d32                	lw	s10,12(sp)
1c008988:	4636                	lw	a2,76(sp)
1c00898a:	ca61                	beqz	a2,1c008a5a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x324>
1c00898c:	476a                	lw	a4,152(sp)
1c00898e:	c771                	beqz	a4,1c008a5a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x324>
1c008990:	5eca                	lw	t4,176(sp)
1c008992:	5e1a                	lw	t3,164(sp)
1c008994:	4552                	lw	a0,20(sp)
1c008996:	5f92                	lw	t6,36(sp)
1c008998:	03de0733          	mul	a4,t3,t4
1c00899c:	5622                	lw	a2,40(sp)
1c00899e:	5f62                	lw	t5,56(sp)
1c0089a0:	002d9c13          	slli	s8,s11,0x2
1c0089a4:	c0ee                	sw	s11,64(sp)
1c0089a6:	100f4f33          	p.exths	t5,t5
1c0089aa:	c67a                	sw	t5,12(sp)
1c0089ac:	4c81                	li	s9,0
1c0089ae:	41f70733          	sub	a4,a4,t6
1c0089b2:	03d50bb3          	mul	s7,a0,t4
1c0089b6:	5e82                	lw	t4,32(sp)
1c0089b8:	02a70733          	mul	a4,a4,a0
1c0089bc:	03be0e33          	mul	t3,t3,s11
1c0089c0:	8f11                	sub	a4,a4,a2
1c0089c2:	ce3a                	sw	a4,28(sp)
1c0089c4:	8db2                	mv	s11,a2
1c0089c6:	02ae8333          	mul	t1,t4,a0
1c0089ca:	cc72                	sw	t3,24(sp)
1c0089cc:	4f32                	lw	t5,12(sp)
1c0089ce:	fffd8393          	addi	t2,s11,-1
1c0089d2:	5f9a                	lw	t6,164(sp)
1c0089d4:	95e383db          	p.mulsn	t2,t2,t5,10
1c0089d8:	0385                	addi	t2,t2,1
1c0089da:	07aff963          	bleu	s10,t6,1c008a4c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x316>
1c0089de:	4a72                	lw	s4,28(sp)
1c0089e0:	4562                	lw	a0,24(sp)
1c0089e2:	8b7e                	mv	s6,t6
1c0089e4:	43948a33          	p.mac	s4,s1,s9
1c0089e8:	01950933          	add	s2,a0,s9
1c0089ec:	090a                	slli	s2,s2,0x2
1c0089ee:	994e                	add	s2,s2,s3
1c0089f0:	42778a33          	p.mac	s4,a5,t2
1c0089f4:	9a56                	add	s4,s4,s5
1c0089f6:	00092803          	lw	a6,0(s2)
1c0089fa:	c039                	beqz	s0,1c008a40 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x30a>
1c0089fc:	00758eb3          	add	t4,a1,t2
1c008a00:	40b00f33          	neg	t5,a1
1c008a04:	82d2                	mv	t0,s4
1c008a06:	8fa2                	mv	t6,s0
1c008a08:	01afc07b          	lp.setup	x0,t6,1c008a3c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x306>
1c008a0c:	02d3f663          	bleu	a3,t2,1c008a38 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x302>
1c008a10:	01df08b3          	add	a7,t5,t4
1c008a14:	41d68733          	sub	a4,a3,t4
1c008a18:	0885                	addi	a7,a7,1
1c008a1a:	8576                	mv	a0,t4
1c008a1c:	8616                	mv	a2,t0
1c008a1e:	41e70733          	sub	a4,a4,t5
1c008a22:	5516ea63          	bltu	a3,a7,1c008f76 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x840>
1c008a26:	007740fb          	lp.setup	x1,a4,1c008a34 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x2fe>
1c008a2a:	00060e03          	lb	t3,0(a2)
1c008a2e:	0015088b          	p.lb	a7,1(a0!)
1c008a32:	963e                	add	a2,a2,a5
1c008a34:	431e0833          	p.mac	a6,t3,a7
1c008a38:	929a                	add	t0,t0,t1
1c008a3a:	9eb6                	add	t4,t4,a3
1c008a3c:	40df0f33          	sub	t5,t5,a3
1c008a40:	01096c2b          	p.sw	a6,s8(s2!)
1c008a44:	0b05                	addi	s6,s6,1
1c008a46:	9a5e                	add	s4,s4,s7
1c008a48:	fbab17e3          	bne	s6,s10,1c0089f6 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x2c0>
1c008a4c:	466a                	lw	a2,152(sp)
1c008a4e:	0c85                	addi	s9,s9,1
1c008a50:	409d8db3          	sub	s11,s11,s1
1c008a54:	f6ccece3          	bltu	s9,a2,1c0089cc <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x296>
1c008a58:	4d86                	lw	s11,64(sp)
1c008a5a:	5752                	lw	a4,52(sp)
1c008a5c:	c371                	beqz	a4,1c008b20 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3ea>
1c008a5e:	4e66                	lw	t3,88(sp)
1c008a60:	4ed2                	lw	t4,20(sp)
1c008a62:	4f16                	lw	t5,68(sp)
1c008a64:	4c7a                	lw	s8,156(sp)
1c008a66:	01c48cb3          	add	s9,s1,t3
1c008a6a:	419e8cb3          	sub	s9,t4,s9
1c008a6e:	9cfa                	add	s9,s9,t5
1c008a70:	0bbc7863          	bleu	s11,s8,1c008b20 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3ea>
1c008a74:	5f9a                	lw	t6,164(sp)
1c008a76:	5e4a                	lw	t3,176(sp)
1c008a78:	5ee2                	lw	t4,56(sp)
1c008a7a:	5f12                	lw	t5,36(sp)
1c008a7c:	03cf8733          	mul	a4,t6,t3
1c008a80:	4fd2                	lw	t6,20(sp)
1c008a82:	100eceb3          	p.exths	t4,t4
1c008a86:	551a                	lw	a0,164(sp)
1c008a88:	c676                	sw	t4,12(sp)
1c008a8a:	5eca                	lw	t4,176(sp)
1c008a8c:	5e22                	lw	t3,40(sp)
1c008a8e:	002d9b93          	slli	s7,s11,0x2
1c008a92:	41e70733          	sub	a4,a4,t5
1c008a96:	5f02                	lw	t5,32(sp)
1c008a98:	03f70733          	mul	a4,a4,t6
1c008a9c:	03b50533          	mul	a0,a0,s11
1c008aa0:	41c70733          	sub	a4,a4,t3
1c008aa4:	ce3a                	sw	a4,28(sp)
1c008aa6:	03df8b33          	mul	s6,t6,t4
1c008aaa:	cc2a                	sw	a0,24(sp)
1c008aac:	03ff0333          	mul	t1,t5,t6
1c008ab0:	4fb2                	lw	t6,12(sp)
1c008ab2:	fffc8293          	addi	t0,s9,-1
1c008ab6:	551a                	lw	a0,164(sp)
1c008ab8:	95f282db          	p.mulsn	t0,t0,t6,10
1c008abc:	0285                	addi	t0,t0,1
1c008abe:	14d2e2b3          	p.clipur	t0,t0,a3
1c008ac2:	05a57a63          	bleu	s10,a0,1c008b16 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3e0>
1c008ac6:	4972                	lw	s2,28(sp)
1c008ac8:	4662                	lw	a2,24(sp)
1c008aca:	8a2a                	mv	s4,a0
1c008acc:	43848933          	p.mac	s2,s1,s8
1c008ad0:	00cc03b3          	add	t2,s8,a2
1c008ad4:	038a                	slli	t2,t2,0x2
1c008ad6:	93ce                	add	t2,t2,s3
1c008ad8:	9956                	add	s2,s2,s5
1c008ada:	0003a803          	lw	a6,0(t2)
1c008ade:	c415                	beqz	s0,1c008b0a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3d4>
1c008ae0:	8fae                	mv	t6,a1
1c008ae2:	8f4a                	mv	t5,s2
1c008ae4:	8ea2                	mv	t4,s0
1c008ae6:	011ec07b          	lp.setup	x0,t4,1c008b08 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3d2>
1c008aea:	00028e63          	beqz	t0,1c008b06 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3d0>
1c008aee:	857e                	mv	a0,t6
1c008af0:	867a                	mv	a2,t5
1c008af2:	8716                	mv	a4,t0
1c008af4:	007740fb          	lp.setup	x1,a4,1c008b02 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3cc>
1c008af8:	00060e03          	lb	t3,0(a2)
1c008afc:	0015088b          	p.lb	a7,1(a0!)
1c008b00:	963e                	add	a2,a2,a5
1c008b02:	431e0833          	p.mac	a6,t3,a7
1c008b06:	9f1a                	add	t5,t5,t1
1c008b08:	9fb6                	add	t6,t6,a3
1c008b0a:	0103ebab          	p.sw	a6,s7(t2!)
1c008b0e:	0a05                	addi	s4,s4,1
1c008b10:	995a                	add	s2,s2,s6
1c008b12:	fdaa14e3          	bne	s4,s10,1c008ada <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x3a4>
1c008b16:	0c05                	addi	s8,s8,1
1c008b18:	409c8cb3          	sub	s9,s9,s1
1c008b1c:	f9bc6ae3          	bltu	s8,s11,1c008ab0 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x37a>
1c008b20:	5732                	lw	a4,44(sp)
1c008b22:	1e070e63          	beqz	a4,1c008d1e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5e8>
1c008b26:	4e36                	lw	t3,76(sp)
1c008b28:	3e0e0463          	beqz	t3,1c008f10 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7da>
1c008b2c:	5e9a                	lw	t4,164(sp)
1c008b2e:	420e8963          	beqz	t4,1c008f60 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x82a>
1c008b32:	4f52                	lw	t5,20(sp)
1c008b34:	5f82                	lw	t6,32(sp)
1c008b36:	5542                	lw	a0,48(sp)
1c008b38:	5e62                	lw	t3,56(sp)
1c008b3a:	03ff0333          	mul	t1,t5,t6
1c008b3e:	5712                	lw	a4,36(sp)
1c008b40:	10054533          	p.exths	a0,a0
1c008b44:	100e4e33          	p.exths	t3,t3
1c008b48:	cc2a                	sw	a0,24(sp)
1c008b4a:	d63a                	sw	a4,44(sp)
1c008b4c:	ce02                	sw	zero,28(sp)
1c008b4e:	c672                	sw	t3,12(sp)
1c008b50:	c0ee                	sw	s11,64(sp)
1c008b52:	ceea                	sw	s10,92(sp)
1c008b54:	8eba                	mv	t4,a4
1c008b56:	4f62                	lw	t5,24(sp)
1c008b58:	fffe8b13          	addi	s6,t4,-1
1c008b5c:	4fea                	lw	t6,152(sp)
1c008b5e:	95eb0b5b          	p.mulsn	s6,s6,t5,10
1c008b62:	0b05                	addi	s6,s6,1
1c008b64:	0c0f8063          	beqz	t6,1c008c24 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4ee>
1c008b68:	4e72                	lw	t3,28(sp)
1c008b6a:	574a                	lw	a4,176(sp)
1c008b6c:	5e92                	lw	t4,36(sp)
1c008b6e:	5f02                	lw	t5,32(sp)
1c008b70:	03c70c33          	mul	s8,a4,t3
1c008b74:	4fd2                	lw	t6,20(sp)
1c008b76:	4506                	lw	a0,64(sp)
1c008b78:	5ba2                	lw	s7,40(sp)
1c008b7a:	4a01                	li	s4,0
1c008b7c:	41dc0c33          	sub	s8,s8,t4
1c008b80:	43eb0c33          	p.mac	s8,s6,t5
1c008b84:	02db0cb3          	mul	s9,s6,a3
1c008b88:	03fc0c33          	mul	s8,s8,t6
1c008b8c:	01958d33          	add	s10,a1,s9
1c008b90:	41a00d33          	neg	s10,s10
1c008b94:	0c85                	addi	s9,s9,1
1c008b96:	03c50db3          	mul	s11,a0,t3
1c008b9a:	417c0c33          	sub	s8,s8,s7
1c008b9e:	4632                	lw	a2,12(sp)
1c008ba0:	fffb8713          	addi	a4,s7,-1
1c008ba4:	014d8933          	add	s2,s11,s4
1c008ba8:	090a                	slli	s2,s2,0x2
1c008baa:	994e                	add	s2,s2,s3
1c008bac:	00092803          	lw	a6,0(s2)
1c008bb0:	94c7075b          	p.mulsn	a4,a4,a2,10
1c008bb4:	00170393          	addi	t2,a4,1
1c008bb8:	048b7e63          	bleu	s0,s6,1c008c14 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4de>
1c008bbc:	8fe2                	mv	t6,s8
1c008bbe:	43448fb3          	p.mac	t6,s1,s4
1c008bc2:	9766                	add	a4,a4,s9
1c008bc4:	001b0613          	addi	a2,s6,1
1c008bc8:	00e58eb3          	add	t4,a1,a4
1c008bcc:	8f6a                	mv	t5,s10
1c008bce:	416402b3          	sub	t0,s0,s6
1c008bd2:	42f38fb3          	p.mac	t6,t2,a5
1c008bd6:	9fd6                	add	t6,t6,s5
1c008bd8:	3ac46163          	bltu	s0,a2,1c008f7a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x844>
1c008bdc:	01a2c07b          	lp.setup	x0,t0,1c008c10 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4da>
1c008be0:	02d3f663          	bleu	a3,t2,1c008c0c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4d6>
1c008be4:	01df08b3          	add	a7,t5,t4
1c008be8:	41d68733          	sub	a4,a3,t4
1c008bec:	0885                	addi	a7,a7,1
1c008bee:	8576                	mv	a0,t4
1c008bf0:	867e                	mv	a2,t6
1c008bf2:	41e70733          	sub	a4,a4,t5
1c008bf6:	3916e663          	bltu	a3,a7,1c008f82 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x84c>
1c008bfa:	007740fb          	lp.setup	x1,a4,1c008c08 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4d2>
1c008bfe:	00060e03          	lb	t3,0(a2)
1c008c02:	0015088b          	p.lb	a7,1(a0!)
1c008c06:	963e                	add	a2,a2,a5
1c008c08:	431e0833          	p.mac	a6,t3,a7
1c008c0c:	9f9a                	add	t6,t6,t1
1c008c0e:	9eb6                	add	t4,t4,a3
1c008c10:	40df0f33          	sub	t5,t5,a3
1c008c14:	476a                	lw	a4,152(sp)
1c008c16:	01092023          	sw	a6,0(s2)
1c008c1a:	0a05                	addi	s4,s4,1
1c008c1c:	409b8bb3          	sub	s7,s7,s1
1c008c20:	f6ea6fe3          	bltu	s4,a4,1c008b9e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x468>
1c008c24:	4e72                	lw	t3,28(sp)
1c008c26:	5eb2                	lw	t4,44(sp)
1c008c28:	5f4a                	lw	t5,176(sp)
1c008c2a:	5f9a                	lw	t6,164(sp)
1c008c2c:	0e05                	addi	t3,t3,1
1c008c2e:	41ee8eb3          	sub	t4,t4,t5
1c008c32:	ce72                	sw	t3,28(sp)
1c008c34:	d676                	sw	t4,44(sp)
1c008c36:	f3fe60e3          	bltu	t3,t6,1c008b56 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x420>
1c008c3a:	5652                	lw	a2,52(sp)
1c008c3c:	4d86                	lw	s11,64(sp)
1c008c3e:	4d76                	lw	s10,92(sp)
1c008c40:	ce79                	beqz	a2,1c008d1e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5e8>
1c008c42:	4f66                	lw	t5,88(sp)
1c008c44:	4fd2                	lw	t6,20(sp)
1c008c46:	4e16                	lw	t3,68(sp)
1c008c48:	01e48733          	add	a4,s1,t5
1c008c4c:	40ef8733          	sub	a4,t6,a4
1c008c50:	5ee2                	lw	t4,56(sp)
1c008c52:	9772                	add	a4,a4,t3
1c008c54:	ce3a                	sw	a4,28(sp)
1c008c56:	4701                	li	a4,0
1c008c58:	c62e                	sw	a1,12(sp)
1c008c5a:	100eccb3          	p.exths	s9,t4
1c008c5e:	85ba                	mv	a1,a4
1c008c60:	d66a                	sw	s10,44(sp)
1c008c62:	5f72                	lw	t5,60(sp)
1c008c64:	4fe2                	lw	t6,24(sp)
1c008c66:	477a                	lw	a4,156(sp)
1c008c68:	ffff0a13          	addi	s4,t5,-1
1c008c6c:	95fa0a5b          	p.mulsn	s4,s4,t6,10
1c008c70:	0a05                	addi	s4,s4,1
1c008c72:	09b77b63          	bleu	s11,a4,1c008d08 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5d2>
1c008c76:	5e4a                	lw	t3,176(sp)
1c008c78:	5e92                	lw	t4,36(sp)
1c008c7a:	5f02                	lw	t5,32(sp)
1c008c7c:	02be0bb3          	mul	s7,t3,a1
1c008c80:	4fd2                	lw	t6,20(sp)
1c008c82:	4d32                	lw	s10,12(sp)
1c008c84:	893a                	mv	s2,a4
1c008c86:	5722                	lw	a4,40(sp)
1c008c88:	4b72                	lw	s6,28(sp)
1c008c8a:	41db8bb3          	sub	s7,s7,t4
1c008c8e:	43ea0bb3          	p.mac	s7,s4,t5
1c008c92:	03fb8bb3          	mul	s7,s7,t6
1c008c96:	02bd8c33          	mul	s8,s11,a1
1c008c9a:	40eb8bb3          	sub	s7,s7,a4
1c008c9e:	42da0d33          	p.mac	s10,s4,a3
1c008ca2:	fffb0e93          	addi	t4,s6,-1
1c008ca6:	012c0fb3          	add	t6,s8,s2
1c008caa:	0f8a                	slli	t6,t6,0x2
1c008cac:	9fce                	add	t6,t6,s3
1c008cae:	000fa803          	lw	a6,0(t6)
1c008cb2:	959e8edb          	p.mulsn	t4,t4,s9,10
1c008cb6:	0e85                	addi	t4,t4,1
1c008cb8:	14deeeb3          	p.clipur	t4,t4,a3
1c008cbc:	028a7f63          	bleu	s0,s4,1c008cfa <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5c4>
1c008cc0:	82de                	mv	t0,s7
1c008cc2:	432482b3          	p.mac	t0,s1,s2
1c008cc6:	001a0713          	addi	a4,s4,1
1c008cca:	83ea                	mv	t2,s10
1c008ccc:	41440f33          	sub	t5,s0,s4
1c008cd0:	92d6                	add	t0,t0,s5
1c008cd2:	2ae46663          	bltu	s0,a4,1c008f7e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x848>
1c008cd6:	011f407b          	lp.setup	x0,t5,1c008cf8 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5c2>
1c008cda:	000e8e63          	beqz	t4,1c008cf6 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5c0>
1c008cde:	851e                	mv	a0,t2
1c008ce0:	8616                	mv	a2,t0
1c008ce2:	8776                	mv	a4,t4
1c008ce4:	007740fb          	lp.setup	x1,a4,1c008cf2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5bc>
1c008ce8:	00060e03          	lb	t3,0(a2)
1c008cec:	0015088b          	p.lb	a7,1(a0!)
1c008cf0:	963e                	add	a2,a2,a5
1c008cf2:	431e0833          	p.mac	a6,t3,a7
1c008cf6:	929a                	add	t0,t0,t1
1c008cf8:	93b6                	add	t2,t2,a3
1c008cfa:	010fa023          	sw	a6,0(t6)
1c008cfe:	0905                	addi	s2,s2,1
1c008d00:	409b0b33          	sub	s6,s6,s1
1c008d04:	f9b96fe3          	bltu	s2,s11,1c008ca2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x56c>
1c008d08:	5e72                	lw	t3,60(sp)
1c008d0a:	5eca                	lw	t4,176(sp)
1c008d0c:	5f1a                	lw	t5,164(sp)
1c008d0e:	0585                	addi	a1,a1,1
1c008d10:	41de0e33          	sub	t3,t3,t4
1c008d14:	de72                	sw	t3,60(sp)
1c008d16:	f5e5e6e3          	bltu	a1,t5,1c008c62 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x52c>
1c008d1a:	45b2                	lw	a1,12(sp)
1c008d1c:	5d32                	lw	s10,44(sp)
1c008d1e:	4fc6                	lw	t6,80(sp)
1c008d20:	1c0f8a63          	beqz	t6,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008d24:	4536                	lw	a0,76(sp)
1c008d26:	20050363          	beqz	a0,1c008f2c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7f6>
1c008d2a:	5e4a                	lw	t3,176(sp)
1c008d2c:	4ed6                	lw	t4,84(sp)
1c008d2e:	4f4a                	lw	t5,144(sp)
1c008d30:	4fa6                	lw	t6,72(sp)
1c008d32:	01de0733          	add	a4,t3,t4
1c008d36:	40ef0733          	sub	a4,t5,a4
1c008d3a:	550a                	lw	a0,160(sp)
1c008d3c:	977e                	add	a4,a4,t6
1c008d3e:	cc6a                	sw	s10,24(sp)
1c008d40:	c43a                	sw	a4,8(sp)
1c008d42:	1aad7963          	bleu	a0,s10,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008d46:	8f3a                	mv	t5,a4
1c008d48:	5ec2                	lw	t4,48(sp)
1c008d4a:	5702                	lw	a4,32(sp)
1c008d4c:	4e52                	lw	t3,20(sp)
1c008d4e:	5fe2                	lw	t6,56(sp)
1c008d50:	4c6a                	lw	s8,152(sp)
1c008d52:	03c70333          	mul	t1,a4,t3
1c008d56:	100eceb3          	p.exths	t4,t4
1c008d5a:	876a                	mv	a4,s10
1c008d5c:	d86e                	sw	s11,48(sp)
1c008d5e:	c676                	sw	t4,12(sp)
1c008d60:	d07a                	sw	t5,32(sp)
1c008d62:	100fcd33          	p.exths	s10,t6
1c008d66:	ce22                	sw	s0,28(sp)
1c008d68:	8dba                	mv	s11,a4
1c008d6a:	857a                	mv	a0,t5
1c008d6c:	4632                	lw	a2,12(sp)
1c008d6e:	fff50b13          	addi	s6,a0,-1
1c008d72:	94cb0b5b          	p.mulsn	s6,s6,a2,10
1c008d76:	0b05                	addi	s6,s6,1
1c008d78:	0a0c0063          	beqz	s8,1c008e18 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6e2>
1c008d7c:	574a                	lw	a4,176(sp)
1c008d7e:	5e92                	lw	t4,36(sp)
1c008d80:	4f52                	lw	t5,20(sp)
1c008d82:	03b70bb3          	mul	s7,a4,s11
1c008d86:	5fc2                	lw	t6,48(sp)
1c008d88:	5a22                	lw	s4,40(sp)
1c008d8a:	4e72                	lw	t3,28(sp)
1c008d8c:	4901                	li	s2,0
1c008d8e:	15cb6b33          	p.clipur	s6,s6,t3
1c008d92:	41db8bb3          	sub	s7,s7,t4
1c008d96:	03eb8bb3          	mul	s7,s7,t5
1c008d9a:	03bf8cb3          	mul	s9,t6,s11
1c008d9e:	414b8bb3          	sub	s7,s7,s4
1c008da2:	fffa0393          	addi	t2,s4,-1
1c008da6:	012c8433          	add	s0,s9,s2
1c008daa:	040a                	slli	s0,s0,0x2
1c008dac:	944e                	add	s0,s0,s3
1c008dae:	00042803          	lw	a6,0(s0)
1c008db2:	95a383db          	p.mulsn	t2,t2,s10,10
1c008db6:	0385                	addi	t2,t2,1
1c008db8:	040b0963          	beqz	s6,1c008e0a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6d4>
1c008dbc:	8fde                	mv	t6,s7
1c008dbe:	43248fb3          	p.mac	t6,s1,s2
1c008dc2:	00758eb3          	add	t4,a1,t2
1c008dc6:	40b00f33          	neg	t5,a1
1c008dca:	82da                	mv	t0,s6
1c008dcc:	42778fb3          	p.mac	t6,a5,t2
1c008dd0:	9fd6                	add	t6,t6,s5
1c008dd2:	01a2c07b          	lp.setup	x0,t0,1c008e06 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6d0>
1c008dd6:	02d3f663          	bleu	a3,t2,1c008e02 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6cc>
1c008dda:	01df08b3          	add	a7,t5,t4
1c008dde:	41d68733          	sub	a4,a3,t4
1c008de2:	0885                	addi	a7,a7,1
1c008de4:	8576                	mv	a0,t4
1c008de6:	867e                	mv	a2,t6
1c008de8:	41e70733          	sub	a4,a4,t5
1c008dec:	1916e363          	bltu	a3,a7,1c008f72 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x83c>
1c008df0:	007740fb          	lp.setup	x1,a4,1c008dfe <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6c8>
1c008df4:	00060e03          	lb	t3,0(a2)
1c008df8:	0015088b          	p.lb	a7,1(a0!)
1c008dfc:	963e                	add	a2,a2,a5
1c008dfe:	431e0833          	p.mac	a6,t3,a7
1c008e02:	9f9a                	add	t6,t6,t1
1c008e04:	9eb6                	add	t4,t4,a3
1c008e06:	40df0f33          	sub	t5,t5,a3
1c008e0a:	01042023          	sw	a6,0(s0)
1c008e0e:	0905                	addi	s2,s2,1
1c008e10:	409a0a33          	sub	s4,s4,s1
1c008e14:	f98967e3          	bltu	s2,s8,1c008da2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x66c>
1c008e18:	5502                	lw	a0,32(sp)
1c008e1a:	574a                	lw	a4,176(sp)
1c008e1c:	5e0a                	lw	t3,160(sp)
1c008e1e:	0d85                	addi	s11,s11,1
1c008e20:	8d19                	sub	a0,a0,a4
1c008e22:	d02a                	sw	a0,32(sp)
1c008e24:	f5cde4e3          	bltu	s11,t3,1c008d6c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x636>
1c008e28:	5fd2                	lw	t6,52(sp)
1c008e2a:	4472                	lw	s0,28(sp)
1c008e2c:	5dc2                	lw	s11,48(sp)
1c008e2e:	0c0f8363          	beqz	t6,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008e32:	4666                	lw	a2,88(sp)
1c008e34:	4752                	lw	a4,20(sp)
1c008e36:	4e16                	lw	t3,68(sp)
1c008e38:	5ee2                	lw	t4,56(sp)
1c008e3a:	00c48d33          	add	s10,s1,a2
1c008e3e:	c822                	sw	s0,16(sp)
1c008e40:	4462                	lw	s0,24(sp)
1c008e42:	41a70d33          	sub	s10,a4,s10
1c008e46:	9d72                	add	s10,s10,t3
1c008e48:	100eccb3          	p.exths	s9,t4
1c008e4c:	4f22                	lw	t5,8(sp)
1c008e4e:	4fb2                	lw	t6,12(sp)
1c008e50:	477a                	lw	a4,156(sp)
1c008e52:	ffff0b13          	addi	s6,t5,-1
1c008e56:	95fb0b5b          	p.mulsn	s6,s6,t6,10
1c008e5a:	0b05                	addi	s6,s6,1
1c008e5c:	09b77363          	bleu	s11,a4,1c008ee2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7ac>
1c008e60:	5e4a                	lw	t3,176(sp)
1c008e62:	5f12                	lw	t5,36(sp)
1c008e64:	4fd2                	lw	t6,20(sp)
1c008e66:	028e0bb3          	mul	s7,t3,s0
1c008e6a:	893a                	mv	s2,a4
1c008e6c:	4ec2                	lw	t4,16(sp)
1c008e6e:	5722                	lw	a4,40(sp)
1c008e70:	8a6a                	mv	s4,s10
1c008e72:	15db6b33          	p.clipur	s6,s6,t4
1c008e76:	41eb8bb3          	sub	s7,s7,t5
1c008e7a:	03fb8bb3          	mul	s7,s7,t6
1c008e7e:	028d8c33          	mul	s8,s11,s0
1c008e82:	40eb8bb3          	sub	s7,s7,a4
1c008e86:	fffa0e93          	addi	t4,s4,-1
1c008e8a:	012c03b3          	add	t2,s8,s2
1c008e8e:	038a                	slli	t2,t2,0x2
1c008e90:	93ce                	add	t2,t2,s3
1c008e92:	0003a803          	lw	a6,0(t2)
1c008e96:	959e8edb          	p.mulsn	t4,t4,s9,10
1c008e9a:	0e85                	addi	t4,t4,1
1c008e9c:	14deeeb3          	p.clipur	t4,t4,a3
1c008ea0:	020b0a63          	beqz	s6,1c008ed4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x79e>
1c008ea4:	8f5e                	mv	t5,s7
1c008ea6:	43248f33          	p.mac	t5,s1,s2
1c008eaa:	82ae                	mv	t0,a1
1c008eac:	8fda                	mv	t6,s6
1c008eae:	9f56                	add	t5,t5,s5
1c008eb0:	011fc07b          	lp.setup	x0,t6,1c008ed2 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x79c>
1c008eb4:	000e8e63          	beqz	t4,1c008ed0 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x79a>
1c008eb8:	8516                	mv	a0,t0
1c008eba:	867a                	mv	a2,t5
1c008ebc:	8776                	mv	a4,t4
1c008ebe:	007740fb          	lp.setup	x1,a4,1c008ecc <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x796>
1c008ec2:	00060e03          	lb	t3,0(a2)
1c008ec6:	0015088b          	p.lb	a7,1(a0!)
1c008eca:	963e                	add	a2,a2,a5
1c008ecc:	431e0833          	p.mac	a6,t3,a7
1c008ed0:	9f1a                	add	t5,t5,t1
1c008ed2:	92b6                	add	t0,t0,a3
1c008ed4:	0103a023          	sw	a6,0(t2)
1c008ed8:	0905                	addi	s2,s2,1
1c008eda:	409a0a33          	sub	s4,s4,s1
1c008ede:	fbb964e3          	bltu	s2,s11,1c008e86 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x750>
1c008ee2:	4e22                	lw	t3,8(sp)
1c008ee4:	5eca                	lw	t4,176(sp)
1c008ee6:	5f0a                	lw	t5,160(sp)
1c008ee8:	0405                	addi	s0,s0,1
1c008eea:	41de0e33          	sub	t3,t3,t4
1c008eee:	c472                	sw	t3,8(sp)
1c008ef0:	f5e46ee3          	bltu	s0,t5,1c008e4c <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x716>
1c008ef4:	443a                	lw	s0,140(sp)
1c008ef6:	44aa                	lw	s1,136(sp)
1c008ef8:	491a                	lw	s2,132(sp)
1c008efa:	498a                	lw	s3,128(sp)
1c008efc:	5a76                	lw	s4,124(sp)
1c008efe:	5ae6                	lw	s5,120(sp)
1c008f00:	5b56                	lw	s6,116(sp)
1c008f02:	5bc6                	lw	s7,112(sp)
1c008f04:	5c36                	lw	s8,108(sp)
1c008f06:	5ca6                	lw	s9,104(sp)
1c008f08:	5d16                	lw	s10,100(sp)
1c008f0a:	5d86                	lw	s11,96(sp)
1c008f0c:	6149                	addi	sp,sp,144
1c008f0e:	8082                	ret
1c008f10:	5552                	lw	a0,52(sp)
1c008f12:	d16d                	beqz	a0,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008f14:	561a                	lw	a2,164(sp)
1c008f16:	e00604e3          	beqz	a2,1c008d1e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5e8>
1c008f1a:	5ec2                	lw	t4,48(sp)
1c008f1c:	4752                	lw	a4,20(sp)
1c008f1e:	5e02                	lw	t3,32(sp)
1c008f20:	100eceb3          	p.exths	t4,t4
1c008f24:	cc76                	sw	t4,24(sp)
1c008f26:	03c70333          	mul	t1,a4,t3
1c008f2a:	bb21                	j	1c008c42 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x50c>
1c008f2c:	5ed2                	lw	t4,52(sp)
1c008f2e:	fc0e83e3          	beqz	t4,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008f32:	5f4a                	lw	t5,176(sp)
1c008f34:	4fd6                	lw	t6,84(sp)
1c008f36:	454a                	lw	a0,144(sp)
1c008f38:	4e26                	lw	t3,72(sp)
1c008f3a:	01ff0733          	add	a4,t5,t6
1c008f3e:	40e50733          	sub	a4,a0,a4
1c008f42:	5e8a                	lw	t4,160(sp)
1c008f44:	9772                	add	a4,a4,t3
1c008f46:	cc6a                	sw	s10,24(sp)
1c008f48:	c43a                	sw	a4,8(sp)
1c008f4a:	fbdd75e3          	bleu	t4,s10,1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008f4e:	5542                	lw	a0,48(sp)
1c008f50:	4f52                	lw	t5,20(sp)
1c008f52:	5f82                	lw	t6,32(sp)
1c008f54:	10054533          	p.exths	a0,a0
1c008f58:	c62a                	sw	a0,12(sp)
1c008f5a:	03ff0333          	mul	t1,t5,t6
1c008f5e:	bdd1                	j	1c008e32 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6fc>
1c008f60:	5552                	lw	a0,52(sp)
1c008f62:	da051ee3          	bnez	a0,1c008d1e <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5e8>
1c008f66:	4746                	lw	a4,80(sp)
1c008f68:	dc0711e3          	bnez	a4,1c008d2a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5f4>
1c008f6c:	b761                	j	1c008ef4 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x7be>
1c008f6e:	4e05                	li	t3,1
1c008f70:	b229                	j	1c00887a <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x144>
1c008f72:	4705                	li	a4,1
1c008f74:	bdb5                	j	1c008df0 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x6ba>
1c008f76:	4705                	li	a4,1
1c008f78:	b47d                	j	1c008a26 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x2f0>
1c008f7a:	4285                	li	t0,1
1c008f7c:	b185                	j	1c008bdc <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4a6>
1c008f7e:	4f05                	li	t5,1
1c008f80:	bb99                	j	1c008cd6 <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x5a0>
1c008f82:	4705                	li	a4,1
1c008f84:	b99d                	j	1c008bfa <KerConvNxMDxDyStrideSxSy_Border_SQ8+0x4c4>

1c008f86 <KerParConv3x1Stride1x1_SQ8>:
1c008f86:	00e55683          	lhu	a3,14(a0)
1c008f8a:	7119                	addi	sp,sp,-128
1c008f8c:	cae6                	sw	s9,84(sp)
1c008f8e:	f1402cf3          	csrr	s9,mhartid
1c008f92:	f836b7b3          	p.bclr	a5,a3,28,3
1c008f96:	0036d713          	srli	a4,a3,0x3
1c008f9a:	00f037b3          	snez	a5,a5
1c008f9e:	97ba                	add	a5,a5,a4
1c008fa0:	c80c9cb3          	p.extractu	s9,s9,4,0
1c008fa4:	02fc8cb3          	mul	s9,s9,a5
1c008fa8:	daa6                	sw	s1,116(sp)
1c008faa:	d8ca                	sw	s2,112(sp)
1c008fac:	d6ce                	sw	s3,108(sp)
1c008fae:	d4d2                	sw	s4,104(sp)
1c008fb0:	d2d6                	sw	s5,100(sp)
1c008fb2:	d0da                	sw	s6,96(sp)
1c008fb4:	cede                	sw	s7,92(sp)
1c008fb6:	cce2                	sw	s8,88(sp)
1c008fb8:	c6ee                	sw	s11,76(sp)
1c008fba:	de86                	sw	ra,124(sp)
1c008fbc:	dca2                	sw	s0,120(sp)
1c008fbe:	c8ea                	sw	s10,80(sp)
1c008fc0:	5100                	lw	s0,32(a0)
1c008fc2:	00a55983          	lhu	s3,10(a0)
1c008fc6:	00655903          	lhu	s2,6(a0)
1c008fca:	78147657          	pv.extract.b	a2,s0,2
1c008fce:	7a147757          	pv.extract.b	a4,s0,3
1c008fd2:	97e6                	add	a5,a5,s9
1c008fd4:	9732                	add	a4,a4,a2
1c008fd6:	04d7c7b3          	p.min	a5,a5,a3
1c008fda:	78047bd7          	pv.extract.b	s7,s0,0
1c008fde:	974e                	add	a4,a4,s3
1c008fe0:	d43e                	sw	a5,40(sp)
1c008fe2:	410c                	lw	a1,0(a0)
1c008fe4:	1979                	addi	s2,s2,-2
1c008fe6:	00455b03          	lhu	s6,4(a0)
1c008fea:	00855c03          	lhu	s8,8(a0)
1c008fee:	01055783          	lhu	a5,16(a0)
1c008ff2:	01452d83          	lw	s11,20(a0)
1c008ff6:	4d44                	lw	s1,28(a0)
1c008ff8:	00c55503          	lhu	a0,12(a0)
1c008ffc:	995e                	add	s2,s2,s7
1c008ffe:	04c74ab3          	p.min	s5,a4,a2
1c009002:	99b2                	add	s3,s3,a2
1c009004:	7a047a57          	pv.extract.b	s4,s0,1
1c009008:	5622                	lw	a2,40(sp)
1c00900a:	9a4a                	add	s4,s4,s2
1c00900c:	057a4bb3          	p.min	s7,s4,s7
1c009010:	d066                	sw	s9,32(sp)
1c009012:	da2e                	sw	a1,52(sp)
1c009014:	d22a                	sw	a0,36(sp)
1c009016:	052be933          	p.max	s2,s7,s2
1c00901a:	053ae9b3          	p.max	s3,s5,s3
1c00901e:	06ccfc63          	bleu	a2,s9,1c009096 <KerParConv3x1Stride1x1_SQ8+0x110>
1c009022:	02ea0733          	mul	a4,s4,a4
1c009026:	00179693          	slli	a3,a5,0x1
1c00902a:	96be                	add	a3,a3,a5
1c00902c:	00151793          	slli	a5,a0,0x1
1c009030:	97aa                	add	a5,a5,a0
1c009032:	d836                	sw	a3,48(sp)
1c009034:	dc22                	sw	s0,56(sp)
1c009036:	de3e                	sw	a5,60(sp)
1c009038:	070a                	slli	a4,a4,0x2
1c00903a:	42dc8db3          	p.mac	s11,s9,a3
1c00903e:	d63a                	sw	a4,44(sp)
1c009040:	038b0c33          	mul	s8,s6,s8
1c009044:	ce6e                	sw	s11,28(sp)
1c009046:	42ec84b3          	p.mac	s1,s9,a4
1c00904a:	5712                	lw	a4,36(sp)
1c00904c:	cb0d                	beqz	a4,1c00907e <KerParConv3x1Stride1x1_SQ8+0xf8>
1c00904e:	56e2                	lw	a3,56(sp)
1c009050:	eaa5                	bnez	a3,1c0090c0 <KerParConv3x1Stride1x1_SQ8+0x13a>
1c009052:	4772                	lw	a4,28(sp)
1c009054:	57f2                	lw	a5,60(sp)
1c009056:	5d52                	lw	s10,52(sp)
1c009058:	8dba                	mv	s11,a4
1c00905a:	00f70cb3          	add	s9,a4,a5
1c00905e:	866e                	mv	a2,s11
1c009060:	856a                	mv	a0,s10
1c009062:	c222                	sw	s0,4(sp)
1c009064:	c04e                	sw	s3,0(sp)
1c009066:	88d6                	mv	a7,s5
1c009068:	884a                	mv	a6,s2
1c00906a:	87de                	mv	a5,s7
1c00906c:	8752                	mv	a4,s4
1c00906e:	86da                	mv	a3,s6
1c009070:	85a6                	mv	a1,s1
1c009072:	0d8d                	addi	s11,s11,3
1c009074:	e58ff0ef          	jal	ra,1c0086cc <KerConv3x1Stride1x1_Body_SQ8.isra.13>
1c009078:	9d62                	add	s10,s10,s8
1c00907a:	ff9d92e3          	bne	s11,s9,1c00905e <KerParConv3x1Stride1x1_SQ8+0xd8>
1c00907e:	5702                	lw	a4,32(sp)
1c009080:	47f2                	lw	a5,28(sp)
1c009082:	55c2                	lw	a1,48(sp)
1c009084:	5632                	lw	a2,44(sp)
1c009086:	56a2                	lw	a3,40(sp)
1c009088:	0705                	addi	a4,a4,1
1c00908a:	97ae                	add	a5,a5,a1
1c00908c:	d03a                	sw	a4,32(sp)
1c00908e:	ce3e                	sw	a5,28(sp)
1c009090:	94b2                	add	s1,s1,a2
1c009092:	fae69ce3          	bne	a3,a4,1c00904a <KerParConv3x1Stride1x1_SQ8+0xc4>
1c009096:	002047b7          	lui	a5,0x204
1c00909a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00909e:	01c7e703          	p.elw	a4,28(a5)
1c0090a2:	50f6                	lw	ra,124(sp)
1c0090a4:	5466                	lw	s0,120(sp)
1c0090a6:	54d6                	lw	s1,116(sp)
1c0090a8:	5946                	lw	s2,112(sp)
1c0090aa:	59b6                	lw	s3,108(sp)
1c0090ac:	5a26                	lw	s4,104(sp)
1c0090ae:	5a96                	lw	s5,100(sp)
1c0090b0:	5b06                	lw	s6,96(sp)
1c0090b2:	4bf6                	lw	s7,92(sp)
1c0090b4:	4c66                	lw	s8,88(sp)
1c0090b6:	4cd6                	lw	s9,84(sp)
1c0090b8:	4d46                	lw	s10,80(sp)
1c0090ba:	4db6                	lw	s11,76(sp)
1c0090bc:	6109                	addi	sp,sp,128
1c0090be:	8082                	ret
1c0090c0:	45f2                	lw	a1,28(sp)
1c0090c2:	5672                	lw	a2,60(sp)
1c0090c4:	5dd2                	lw	s11,52(sp)
1c0090c6:	8cae                	mv	s9,a1
1c0090c8:	00c58d33          	add	s10,a1,a2
1c0090cc:	8666                	mv	a2,s9
1c0090ce:	856e                	mv	a0,s11
1c0090d0:	88d6                	mv	a7,s5
1c0090d2:	884a                	mv	a6,s2
1c0090d4:	87de                	mv	a5,s7
1c0090d6:	8752                	mv	a4,s4
1c0090d8:	86da                	mv	a3,s6
1c0090da:	85a6                	mv	a1,s1
1c0090dc:	c222                	sw	s0,4(sp)
1c0090de:	c04e                	sw	s3,0(sp)
1c0090e0:	decff0ef          	jal	ra,1c0086cc <KerConv3x1Stride1x1_Body_SQ8.isra.13>
1c0090e4:	4685                	li	a3,1
1c0090e6:	8666                	mv	a2,s9
1c0090e8:	856e                	mv	a0,s11
1c0090ea:	c036                	sw	a3,0(sp)
1c0090ec:	c422                	sw	s0,8(sp)
1c0090ee:	c222                	sw	s0,4(sp)
1c0090f0:	88ce                	mv	a7,s3
1c0090f2:	8856                	mv	a6,s5
1c0090f4:	87ca                	mv	a5,s2
1c0090f6:	8752                	mv	a4,s4
1c0090f8:	86da                	mv	a3,s6
1c0090fa:	85a6                	mv	a1,s1
1c0090fc:	0c8d                	addi	s9,s9,3
1c0090fe:	c28ff0ef          	jal	ra,1c008526 <KerConv3x1BorderStrideNx1_SQ8.isra.3>
1c009102:	9de2                	add	s11,s11,s8
1c009104:	fdac94e3          	bne	s9,s10,1c0090cc <KerParConv3x1Stride1x1_SQ8+0x146>
1c009108:	bf9d                	j	1c00907e <KerParConv3x1Stride1x1_SQ8+0xf8>

1c00910a <KerParConvNxMDxDyStrideSxSy_SQ8>:
	gap_waitbarrier(0);
}

void KerParConvNxMDxDyStrideSxSy_SQ8(KerConv_SQ8_T *Arg)

{
1c00910a:	7131                	addi	sp,sp,-192
1c00910c:	db26                	sw	s1,180(sp)
1c00910e:	d94a                	sw	s2,176(sp)
1c009110:	d74e                	sw	s3,172(sp)
1c009112:	d552                	sw	s4,168(sp)
1c009114:	df06                	sw	ra,188(sp)
1c009116:	dd22                	sw	s0,184(sp)
1c009118:	d356                	sw	s5,164(sp)
1c00911a:	d15a                	sw	s6,160(sp)
1c00911c:	cf5e                	sw	s7,156(sp)
1c00911e:	cd62                	sw	s8,152(sp)
1c009120:	cb66                	sw	s9,148(sp)
1c009122:	c96a                	sw	s10,144(sp)
1c009124:	c76e                	sw	s11,140(sp)
	unsigned int FSx=Arg->N, Sx=Arg->S;
1c009126:	02654c03          	lbu	s8,38(a0)
	unsigned int FSy=Arg->Ny, Sy=Arg->Sy;
1c00912a:	02954b83          	lbu	s7,41(a0)
	int Dx=Arg->D, Dy=Arg->Dy;
1c00912e:	02854c83          	lbu	s9,40(a0)
1c009132:	02b54d03          	lbu	s10,43(a0)
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;

	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009136:	fffc0693          	addi	a3,s8,-1
	int Wo_F = Min(Wo, FirstDefinedOutput((Dx*(FSx-1)+1), PadIn[0], Sx)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, (Dx*(FSx-1)+1), PadIn[0], Sx));
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c00913a:	fffb8613          	addi	a2,s7,-1
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c00913e:	039686b3          	mul	a3,a3,s9
	v4s PadIn = Arg->Pad;
1c009142:	5100                	lw	s0,32(a0)
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009144:	00655703          	lhu	a4,6(a0)
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c009148:	00a55783          	lhu	a5,10(a0)
	unsigned int FSx=Arg->N, Sx=Arg->S;
1c00914c:	02754a83          	lbu	s5,39(a0)
	unsigned int FSy=Arg->Ny, Sy=Arg->Sy;
1c009150:	02a54b03          	lbu	s6,42(a0)
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009154:	780478d7          	pv.extract.b	a7,s0,0
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c009158:	78147857          	pv.extract.b	a6,s0,2
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c00915c:	fff70913          	addi	s2,a4,-1
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c009160:	fff78593          	addi	a1,a5,-1
1c009164:	03a60633          	mul	a2,a2,s10
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009168:	9946                	add	s2,s2,a7
1c00916a:	7a047e57          	pv.extract.b	t3,s0,1
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c00916e:	95c2                	add	a1,a1,a6
1c009170:	7a147357          	pv.extract.b	t1,s0,3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c009174:	9756                	add	a4,a4,s5
1c009176:	97da                	add	a5,a5,s6
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009178:	9972                	add	s2,s2,t3
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c00917a:	959a                	add	a1,a1,t1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00917c:	177d                	addi	a4,a4,-1
1c00917e:	17fd                	addi	a5,a5,-1
1c009180:	0016de13          	srli	t3,a3,0x1
1c009184:	00165313          	srli	t1,a2,0x1
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c009188:	40d90933          	sub	s2,s2,a3
	return ((Pad+Stride-1)/Stride);
1c00918c:	fffa8993          	addi	s3,s5,-1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c009190:	9746                	add	a4,a4,a7
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c009192:	8d91                	sub	a1,a1,a2
	return ((Pad+Stride-1)/Stride);
1c009194:	fffb0a13          	addi	s4,s6,-1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c009198:	97c2                	add	a5,a5,a6
	int Wo_F = Min(Wo, FirstDefinedOutput((Dx*(FSx-1)+1), PadIn[0], Sx)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, (Dx*(FSx-1)+1), PadIn[0], Sx));
1c00919a:	0685                	addi	a3,a3,1
	int Ho_F = Min(Ho, FirstDefinedOutput((Dy*(FSy-1)+1), PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, (Dy*(FSy-1)+1), PadIn[2], Sy));
1c00919c:	0605                	addi	a2,a2,1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00919e:	406787b3          	sub	a5,a5,t1
	return ((Pad+Stride-1)/Stride);
1c0091a2:	98ce                	add	a7,a7,s3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c0091a4:	41c70733          	sub	a4,a4,t3
1c0091a8:	8285                	srli	a3,a3,0x1
	return ((Pad+Stride-1)/Stride);
1c0091aa:	9852                	add	a6,a6,s4
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c0091ac:	03595933          	divu	s2,s2,s5
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c0091b0:	8205                	srli	a2,a2,0x1
1c0091b2:	8f15                	sub	a4,a4,a3
1c0091b4:	40c78633          	sub	a2,a5,a2
	unsigned int OutFeatures = Arg->OutFeatures;
1c0091b8:	00e55e03          	lhu	t3,14(a0)
	signed char * __restrict__ In = Arg->In;
1c0091bc:	4114                	lw	a3,0(a0)
	unsigned int CoreId = gap_coreid();
1c0091be:	f1402373          	csrr	t1,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0091c2:	f83e37b3          	p.bclr	a5,t3,28,3
	signed char * __restrict__ In = Arg->In;
1c0091c6:	dcb6                	sw	a3,120(sp)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0091c8:	00f037b3          	snez	a5,a5
1c0091cc:	003e5693          	srli	a3,t3,0x3
1c0091d0:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid();
1c0091d2:	c8031333          	p.extractu	t1,t1,4,0
	unsigned int W = Arg->W;
1c0091d6:	00455683          	lhu	a3,4(a0)
	int TotalInFeatures = Arg->TotalInFeatures;
1c0091da:	01055f03          	lhu	t5,16(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c0091de:	01452e83          	lw	t4,20(a0)
	unsigned int W = Arg->W;
1c0091e2:	de36                	sw	a3,60(sp)
	unsigned int H = Arg->H;
1c0091e4:	00855683          	lhu	a3,8(a0)
	int * __restrict__ Out = Arg->Out;
1c0091e8:	4d44                	lw	s1,28(a0)
	unsigned int H = Arg->H;
1c0091ea:	d4b6                	sw	a3,104(sp)

	unsigned int InFeatures = Arg->InFeatures;
1c0091ec:	00c55503          	lhu	a0,12(a0)
1c0091f0:	c4aa                	sw	a0,72(sp)
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c0091f2:	0365d5b3          	divu	a1,a1,s6
	int Wo = (Arg->UsedW-(Dx*(FSx-1)+1)+PadIn[0]+PadIn[1])/Sx + 1;
1c0091f6:	0905                	addi	s2,s2,1
	return ((Pad+Stride-1)/Stride);
1c0091f8:	0358d8b3          	divu	a7,a7,s5
	int Ho = (Arg->UsedH-(Dy*(FSy-1)+1)+PadIn[2]+PadIn[3])/Sy + 1;
1c0091fc:	0585                	addi	a1,a1,1
1c0091fe:	d2ae                	sw	a1,100(sp)
	return ((Pad+Stride-1)/Stride);
1c009200:	03685833          	divu	a6,a6,s6
	int Wo_F = Min(Wo, FirstDefinedOutput((Dx*(FSx-1)+1), PadIn[0], Sx)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, (Dx*(FSx-1)+1), PadIn[0], Sx));
1c009204:	051949b3          	p.min	s3,s2,a7
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c009208:	03575733          	divu	a4,a4,s5
	int Ho_F = Min(Ho, FirstDefinedOutput((Dy*(FSy-1)+1), PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, (Dy*(FSy-1)+1), PadIn[2], Sy));
1c00920c:	0505ca33          	p.min	s4,a1,a6
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c009210:	03665633          	divu	a2,a2,s6
	int Wo_F = Min(Wo, FirstDefinedOutput((Dx*(FSx-1)+1), PadIn[0], Sx)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, (Dx*(FSx-1)+1), PadIn[0], Sx));
1c009214:	04e9e733          	p.max	a4,s3,a4
1c009218:	c0ba                	sw	a4,64(sp)
	unsigned int First = Chunk*CoreId;
1c00921a:	02f30333          	mul	t1,t1,a5
	int Ho_F = Min(Ho, FirstDefinedOutput((Dy*(FSy-1)+1), PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, (Dy*(FSy-1)+1), PadIn[2], Sy));
1c00921e:	04ca6633          	p.max	a2,s4,a2
1c009222:	c2b2                	sw	a2,68(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c009224:	979a                	add	a5,a5,t1
1c009226:	05c7c7b3          	p.min	a5,a5,t3
	unsigned int First = Chunk*CoreId;
1c00922a:	ce9a                	sw	t1,92(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00922c:	d6be                	sw	a5,108(sp)

	for (unsigned int of=First; of<Last; of++)
1c00922e:	0af37663          	bleu	a5,t1,1c0092da <KerParConvNxMDxDyStrideSxSy_SQ8+0x1d0>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FSx*FSy*(TotalInFeatures*of  + If);
1c009232:	017c035b          	p.mac	t1,s8,s7,zero
			int *out = Out+Wo*Ho*(of);
			KerConvNxMDxDyStrideSxSy_Body_SQ8(in, out, filter, FSx, FSy, Dx, Dy, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, Sx, Sy, PadIn);
			if ((int)PadIn) KerConvNxMDxDyStrideSxSy_Border_SQ8(in, out, filter, FSx, FSy, Dx, Dy, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, Sx, Sy, PadIn, PadIn);
1c009236:	dea2                	sw	s0,124(sp)
1c009238:	cca2                	sw	s0,88(sp)
1c00923a:	026f0f33          	mul	t5,t5,t1
			signed char *in = In+W*H*If, *filter = Filter+FSx*FSy*(TotalInFeatures*of  + If);
1c00923e:	c69a                	sw	t1,76(sp)
1c009240:	5372                	lw	t1,60(sp)
1c009242:	02d30333          	mul	t1,t1,a3
1c009246:	dafa                	sw	t5,116(sp)
			int *out = Out+Wo*Ho*(of);
1c009248:	02b907b3          	mul	a5,s2,a1
			signed char *in = In+W*H*If, *filter = Filter+FSx*FSy*(TotalInFeatures*of  + If);
1c00924c:	c89a                	sw	t1,80(sp)
1c00924e:	4376                	lw	t1,92(sp)
1c009250:	078a                	slli	a5,a5,0x2
1c009252:	43e30eb3          	p.mac	t4,t1,t5
1c009256:	d8be                	sw	a5,112(sp)
1c009258:	426784b3          	p.mac	s1,a5,t1
1c00925c:	d0f6                	sw	t4,96(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c00925e:	4326                	lw	t1,72(sp)
1c009260:	06030063          	beqz	t1,1c0092c0 <KerParConvNxMDxDyStrideSxSy_SQ8+0x1b6>
1c009264:	5376                	lw	t1,124(sp)
1c009266:	5e66                	lw	t3,120(sp)
1c009268:	08031e63          	bnez	t1,1c009304 <KerParConvNxMDxDyStrideSxSy_SQ8+0x1fa>
			int *out = Out+Wo*Ho*(of);
1c00926c:	5306                	lw	t1,96(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c00926e:	4d81                	li	s11,0
1c009270:	87d6                	mv	a5,s5
1c009272:	846e                	mv	s0,s11
1c009274:	8ae2                	mv	s5,s8
1c009276:	dc26                	sw	s1,56(sp)
1c009278:	8df2                	mv	s11,t3
1c00927a:	849a                	mv	s1,t1
1c00927c:	8c3e                	mv	s8,a5
			KerConvNxMDxDyStrideSxSy_Body_SQ8(in, out, filter, FSx, FSy, Dx, Dy, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, Sx, Sy, PadIn);
1c00927e:	4366                	lw	t1,88(sp)
1c009280:	58f2                	lw	a7,60(sp)
1c009282:	55e2                	lw	a1,56(sp)
1c009284:	ce1a                	sw	t1,28(sp)
1c009286:	4316                	lw	t1,68(sp)
1c009288:	8626                	mv	a2,s1
1c00928a:	856e                	mv	a0,s11
1c00928c:	c81a                	sw	t1,16(sp)
1c00928e:	4306                	lw	t1,64(sp)
1c009290:	cc5a                	sw	s6,24(sp)
1c009292:	ca62                	sw	s8,20(sp)
1c009294:	c41a                	sw	t1,8(sp)
1c009296:	c652                	sw	s4,12(sp)
1c009298:	c24e                	sw	s3,4(sp)
1c00929a:	c04a                	sw	s2,0(sp)
1c00929c:	886a                	mv	a6,s10
1c00929e:	87e6                	mv	a5,s9
1c0092a0:	875e                	mv	a4,s7
1c0092a2:	86d6                	mv	a3,s5
1c0092a4:	b3eff0ef          	jal	ra,1c0085e2 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10>
1c0092a8:	4346                	lw	t1,80(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c0092aa:	0405                	addi	s0,s0,1
1c0092ac:	9d9a                	add	s11,s11,t1
1c0092ae:	4336                	lw	t1,76(sp)
1c0092b0:	949a                	add	s1,s1,t1
1c0092b2:	4326                	lw	t1,72(sp)
1c0092b4:	fc8315e3          	bne	t1,s0,1c00927e <KerParConvNxMDxDyStrideSxSy_SQ8+0x174>
1c0092b8:	54e2                	lw	s1,56(sp)
1c0092ba:	87e2                	mv	a5,s8
1c0092bc:	8c56                	mv	s8,s5
1c0092be:	8abe                	mv	s5,a5
	for (unsigned int of=First; of<Last; of++)
1c0092c0:	4376                	lw	t1,92(sp)
1c0092c2:	56d6                	lw	a3,116(sp)
1c0092c4:	0305                	addi	t1,t1,1
1c0092c6:	ce9a                	sw	t1,92(sp)
1c0092c8:	5306                	lw	t1,96(sp)
1c0092ca:	9336                	add	t1,t1,a3
1c0092cc:	d09a                	sw	t1,96(sp)
1c0092ce:	5346                	lw	t1,112(sp)
1c0092d0:	46f6                	lw	a3,92(sp)
1c0092d2:	949a                	add	s1,s1,t1
1c0092d4:	5336                	lw	t1,108(sp)
1c0092d6:	f8d314e3          	bne	t1,a3,1c00925e <KerParConvNxMDxDyStrideSxSy_SQ8+0x154>
1c0092da:	002047b7          	lui	a5,0x204
1c0092de:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0092e2:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c0092e6:	50fa                	lw	ra,188(sp)
1c0092e8:	546a                	lw	s0,184(sp)
1c0092ea:	54da                	lw	s1,180(sp)
1c0092ec:	594a                	lw	s2,176(sp)
1c0092ee:	59ba                	lw	s3,172(sp)
1c0092f0:	5a2a                	lw	s4,168(sp)
1c0092f2:	5a9a                	lw	s5,164(sp)
1c0092f4:	5b0a                	lw	s6,160(sp)
1c0092f6:	4bfa                	lw	s7,156(sp)
1c0092f8:	4c6a                	lw	s8,152(sp)
1c0092fa:	4cda                	lw	s9,148(sp)
1c0092fc:	4d4a                	lw	s10,144(sp)
1c0092fe:	4dba                	lw	s11,140(sp)
1c009300:	6129                	addi	sp,sp,192
1c009302:	8082                	ret
			int *out = Out+Wo*Ho*(of);
1c009304:	5d86                	lw	s11,96(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c009306:	4466                	lw	s0,88(sp)
1c009308:	4301                	li	t1,0
1c00930a:	dc4a                	sw	s2,56(sp)
1c00930c:	caa6                	sw	s1,84(sp)
1c00930e:	896e                	mv	s2,s11
1c009310:	84f2                	mv	s1,t3
1c009312:	8dde                	mv	s11,s7
1c009314:	8be2                	mv	s7,s8
1c009316:	8c56                	mv	s8,s5
1c009318:	8a9a                	mv	s5,t1
			KerConvNxMDxDyStrideSxSy_Body_SQ8(in, out, filter, FSx, FSy, Dx, Dy, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, Sx, Sy, PadIn);
1c00931a:	4316                	lw	t1,68(sp)
1c00931c:	58f2                	lw	a7,60(sp)
1c00931e:	45d6                	lw	a1,84(sp)
1c009320:	c81a                	sw	t1,16(sp)
1c009322:	4306                	lw	t1,64(sp)
1c009324:	864a                	mv	a2,s2
1c009326:	8526                	mv	a0,s1
1c009328:	c41a                	sw	t1,8(sp)
1c00932a:	5362                	lw	t1,56(sp)
1c00932c:	886a                	mv	a6,s10
1c00932e:	87e6                	mv	a5,s9
1c009330:	876e                	mv	a4,s11
1c009332:	86de                	mv	a3,s7
1c009334:	c01a                	sw	t1,0(sp)
1c009336:	ce22                	sw	s0,28(sp)
1c009338:	cc5a                	sw	s6,24(sp)
1c00933a:	ca62                	sw	s8,20(sp)
1c00933c:	c652                	sw	s4,12(sp)
1c00933e:	c24e                	sw	s3,4(sp)
1c009340:	aa2ff0ef          	jal	ra,1c0085e2 <KerConvNxMDxDyStrideSxSy_Body_SQ8.isra.10>
			if ((int)PadIn) KerConvNxMDxDyStrideSxSy_Border_SQ8(in, out, filter, FSx, FSy, Dx, Dy, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, Sx, Sy, PadIn, PadIn);
1c009344:	4316                	lw	t1,68(sp)
1c009346:	58f2                	lw	a7,60(sp)
1c009348:	45d6                	lw	a1,84(sp)
1c00934a:	cc1a                	sw	t1,24(sp)
1c00934c:	5316                	lw	t1,100(sp)
1c00934e:	864a                	mv	a2,s2
1c009350:	8526                	mv	a0,s1
1c009352:	c81a                	sw	t1,16(sp)
1c009354:	4306                	lw	t1,64(sp)
1c009356:	d422                	sw	s0,40(sp)
1c009358:	d222                	sw	s0,36(sp)
1c00935a:	c61a                	sw	t1,12(sp)
1c00935c:	5362                	lw	t1,56(sp)
1c00935e:	d05a                	sw	s6,32(sp)
1c009360:	ce62                	sw	s8,28(sp)
1c009362:	c21a                	sw	t1,4(sp)
1c009364:	5326                	lw	t1,104(sp)
1c009366:	ca52                	sw	s4,20(sp)
1c009368:	c44e                	sw	s3,8(sp)
1c00936a:	c01a                	sw	t1,0(sp)
1c00936c:	886a                	mv	a6,s10
1c00936e:	87e6                	mv	a5,s9
1c009370:	876e                	mv	a4,s11
1c009372:	86de                	mv	a3,s7
1c009374:	bc2ff0ef          	jal	ra,1c008736 <KerConvNxMDxDyStrideSxSy_Border_SQ8>
1c009378:	4346                	lw	t1,80(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c00937a:	0a85                	addi	s5,s5,1
1c00937c:	949a                	add	s1,s1,t1
1c00937e:	4336                	lw	t1,76(sp)
1c009380:	991a                	add	s2,s2,t1
1c009382:	4326                	lw	t1,72(sp)
1c009384:	f9531be3          	bne	t1,s5,1c00931a <KerParConvNxMDxDyStrideSxSy_SQ8+0x210>
1c009388:	8ae2                	mv	s5,s8
1c00938a:	5962                	lw	s2,56(sp)
1c00938c:	8c5e                	mv	s8,s7
1c00938e:	44d6                	lw	s1,84(sp)
1c009390:	8bee                	mv	s7,s11
1c009392:	b73d                	j	1c0092c0 <KerParConvNxMDxDyStrideSxSy_SQ8+0x1b6>

1c009394 <KerParMatAdd_SQ8>:
	int W				= Arg->W;
	int H				= Arg->H;
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
	unsigned int OutScale = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALE], OutScaleN = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALEN];

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c009394:	00c55f03          	lhu	t5,12(a0)
1c009398:	f1402773          	csrr	a4,mhartid
	int W				= Arg->W;
1c00939c:	00e55303          	lhu	t1,14(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0093a0:	f83f37b3          	p.bclr	a5,t5,28,3
1c0093a4:	003f5693          	srli	a3,t5,0x3
1c0093a8:	00f037b3          	snez	a5,a5
1c0093ac:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c0093ae:	c8071733          	p.extractu	a4,a4,4,0
	int H				= Arg->H;
1c0093b2:	01055683          	lhu	a3,16(a0)
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c0093b6:	02f70733          	mul	a4,a4,a5
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
1c0093ba:	01452e83          	lw	t4,20(a0)
{
1c0093be:	1101                	addi	sp,sp,-32
1c0093c0:	ce22                	sw	s0,28(sp)
1c0093c2:	cc26                	sw	s1,24(sp)
1c0093c4:	ca4a                	sw	s2,20(sp)
1c0093c6:	c84e                	sw	s3,16(sp)
1c0093c8:	c652                	sw	s4,12(sp)
1c0093ca:	c456                	sw	s5,8(sp)
	signed char * __restrict__ In2	= Arg->In2;
1c0093cc:	414c                	lw	a1,4(a0)
1c0093ce:	02d30333          	mul	t1,t1,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c0093d2:	00f706b3          	add	a3,a4,a5
1c0093d6:	05e6c6b3          	p.min	a3,a3,t5
	signed char * __restrict__ Out	= Arg->Out;
1c0093da:	00852803          	lw	a6,8(a0)
	signed char * __restrict__ In1	= Arg->In1;
1c0093de:	00052f83          	lw	t6,0(a0)
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
1c0093e2:	005ec603          	lbu	a2,5(t4)
1c0093e6:	006ec883          	lbu	a7,6(t4)
	unsigned int OutScale = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALE], OutScaleN = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALEN];
1c0093ea:	007ece03          	lbu	t3,7(t4)
1c0093ee:	008ec983          	lbu	s3,8(t4)

	unsigned int F = First*W*H, S = Max(0, Last*W*H-F);
1c0093f2:	026707b3          	mul	a5,a4,t1
1c0093f6:	026686b3          	mul	a3,a3,t1
	signed char * __restrict__ I1 = In1 + F, *__restrict__ I2 = In2 + F, *__restrict__ O  = Out + F;
1c0093fa:	00ff8533          	add	a0,t6,a5
1c0093fe:	95be                	add	a1,a1,a5
1c009400:	983e                	add	a6,a6,a5
	unsigned int F = First*W*H, S = Max(0, Last*W*H-F);
1c009402:	8e9d                	sub	a3,a3,a5
1c009404:	0406e6b3          	p.max	a3,a3,zero
1c009408:	0016d793          	srli	a5,a3,0x1
	if (In1Scale && OutScale) {
1c00940c:	e245                	bnez	a2,1c0094ac <KerParMatAdd_SQ8+0x118>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
			O[2*i  ] = gap_clip(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
			O[2*i+1] = gap_clip(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
		}
		if (S&0x1) O[S-1] = gap_clip(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], 7);
	} else if (OutScale) {
1c00940e:	1a0e0a63          	beqz	t3,1c0095c2 <KerParMatAdd_SQ8+0x22e>
		for (int i=0; i<S/2; i++) {
1c009412:	cfa1                	beqz	a5,1c00946a <KerParMatAdd_SQ8+0xd6>
1c009414:	00179613          	slli	a2,a5,0x1
1c009418:	1679                	addi	a2,a2,-2
1c00941a:	8205                	srli	a2,a2,0x1
1c00941c:	88ce                	mv	a7,s3
1c00941e:	83aa                	mv	t2,a0
1c009420:	82ae                	mv	t0,a1
1c009422:	8fc2                	mv	t6,a6
1c009424:	00150f13          	addi	t5,a0,1
1c009428:	00158e93          	addi	t4,a1,1
1c00942c:	00180313          	addi	t1,a6,1
1c009430:	0605                	addi	a2,a2,1
1c009432:	01a640fb          	lp.setup	x1,a2,1c009466 <KerParMatAdd_SQ8+0xd2>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c009436:	0023870b          	p.lb	a4,2(t2!)
1c00943a:	0022848b          	p.lb	s1,2(t0!)
1c00943e:	002f078b          	p.lb	a5,2(t5!)
1c009442:	002e840b          	p.lb	s0,2(t4!)
			O[2*i  ] = gap_clip(AT_SCALE(I10 + I20, OutScale, OutScaleN), 7);
1c009446:	9726                	add	a4,a4,s1
1c009448:	03c70733          	mul	a4,a4,t3
			O[2*i+1] = gap_clip(AT_SCALE(I11 + I21, OutScale, OutScaleN), 7);
1c00944c:	97a2                	add	a5,a5,s0
1c00944e:	03c787b3          	mul	a5,a5,t3
			O[2*i  ] = gap_clip(AT_SCALE(I10 + I20, OutScale, OutScaleN), 7);
1c009452:	4110675b          	p.mac.zh.sl	a4,zero,a7,zero
1c009456:	14871733          	p.clip	a4,a4,8
1c00945a:	00ef812b          	p.sb	a4,2(t6!)
			O[2*i+1] = gap_clip(AT_SCALE(I11 + I21, OutScale, OutScaleN), 7);
1c00945e:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c009462:	148797b3          	p.clip	a5,a5,8
1c009466:	00f3012b          	p.sb	a5,2(t1!)
		}
		if (S&0x1) O[S-1] = gap_clip(AT_SCALE(I1[S-1] + I2[S-1], OutScale, OutScaleN), 7);
1c00946a:	fc16b7b3          	p.bclr	a5,a3,30,1
1c00946e:	c38d                	beqz	a5,1c009490 <KerParMatAdd_SQ8+0xfc>
1c009470:	16fd                	addi	a3,a3,-1
1c009472:	9536                	add	a0,a0,a3
1c009474:	95b6                	add	a1,a1,a3
1c009476:	00050783          	lb	a5,0(a0)
1c00947a:	00058703          	lb	a4,0(a1)
1c00947e:	97ba                	add	a5,a5,a4
1c009480:	03c787b3          	mul	a5,a5,t3
1c009484:	413067db          	p.mac.zh.sl	a5,zero,s3,zero
1c009488:	148797b3          	p.clip	a5,a5,8
1c00948c:	00f846a3          	p.sb	a5,a3(a6)
1c009490:	002047b7          	lui	a5,0x204
1c009494:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c009498:	01c7e703          	p.elw	a4,28(a5)
			O[2*i+1] = gap_clip(I11 + I21, 7);
		}
		if (S&0x1) O[S-1] = gap_clip(I1[S-1] + I2[S-1], 7);
	}
	gap_waitbarrier(0);
}
1c00949c:	4472                	lw	s0,28(sp)
1c00949e:	44e2                	lw	s1,24(sp)
1c0094a0:	4952                	lw	s2,20(sp)
1c0094a2:	49c2                	lw	s3,16(sp)
1c0094a4:	4a32                	lw	s4,12(sp)
1c0094a6:	4aa2                	lw	s5,8(sp)
1c0094a8:	6105                	addi	sp,sp,32
1c0094aa:	8082                	ret
	if (In1Scale && OutScale) {
1c0094ac:	080e0863          	beqz	t3,1c00953c <KerParMatAdd_SQ8+0x1a8>
		for (int i=0; i<S/2; i++) {
1c0094b0:	c7bd                	beqz	a5,1c00951e <KerParMatAdd_SQ8+0x18a>
1c0094b2:	00179313          	slli	t1,a5,0x1
1c0094b6:	1379                	addi	t1,t1,-2
1c0094b8:	00135313          	srli	t1,t1,0x1
1c0094bc:	8f46                	mv	t5,a7
1c0094be:	8ece                	mv	t4,s3
1c0094c0:	8faa                	mv	t6,a0
1c0094c2:	892e                	mv	s2,a1
1c0094c4:	84c2                	mv	s1,a6
1c0094c6:	00150413          	addi	s0,a0,1
1c0094ca:	00158393          	addi	t2,a1,1
1c0094ce:	00180293          	addi	t0,a6,1
1c0094d2:	0305                	addi	t1,t1,1
1c0094d4:	023340fb          	lp.setup	x1,t1,1c00951a <KerParMatAdd_SQ8+0x186>
			O[2*i  ] = gap_clip(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c0094d8:	000f8703          	lb	a4,0(t6)
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c0094dc:	0024078b          	p.lb	a5,2(s0!)
1c0094e0:	00290a8b          	p.lb	s5,2(s2!)
			O[2*i  ] = gap_clip(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c0094e4:	80c7075b          	p.muls	a4,a4,a2
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c0094e8:	00238a0b          	p.lb	s4,2(t2!)
1c0094ec:	0f89                	addi	t6,t6,2
			O[2*i+1] = gap_clip(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c0094ee:	80c787db          	p.muls	a5,a5,a2
			O[2*i  ] = gap_clip(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c0094f2:	41e0675b          	p.mac.zh.sl	a4,zero,t5,zero
1c0094f6:	9756                	add	a4,a4,s5
			O[2*i+1] = gap_clip(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c0094f8:	41e067db          	p.mac.zh.sl	a5,zero,t5,zero
			O[2*i  ] = gap_clip(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c0094fc:	03c70733          	mul	a4,a4,t3
			O[2*i+1] = gap_clip(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c009500:	97d2                	add	a5,a5,s4
1c009502:	03c787b3          	mul	a5,a5,t3
			O[2*i  ] = gap_clip(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c009506:	41d0675b          	p.mac.zh.sl	a4,zero,t4,zero
1c00950a:	14871733          	p.clip	a4,a4,8
1c00950e:	00e4812b          	p.sb	a4,2(s1!)
			O[2*i+1] = gap_clip(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c009512:	41d067db          	p.mac.zh.sl	a5,zero,t4,zero
1c009516:	148797b3          	p.clip	a5,a5,8
1c00951a:	00f2812b          	p.sb	a5,2(t0!)
		if (S&0x1) O[S-1] = gap_clip(AT_SCALE(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], OutScale, OutScaleN), 7);
1c00951e:	fc16b7b3          	p.bclr	a5,a3,30,1
1c009522:	d7bd                	beqz	a5,1c009490 <KerParMatAdd_SQ8+0xfc>
1c009524:	16fd                	addi	a3,a3,-1
1c009526:	9536                	add	a0,a0,a3
1c009528:	00050783          	lb	a5,0(a0)
1c00952c:	95b6                	add	a1,a1,a3
1c00952e:	00058703          	lb	a4,0(a1)
1c009532:	80c787db          	p.muls	a5,a5,a2
1c009536:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c00953a:	b791                	j	1c00947e <KerParMatAdd_SQ8+0xea>
		for (int i=0; i<S/2; i++) {
1c00953c:	cfb1                	beqz	a5,1c009598 <KerParMatAdd_SQ8+0x204>
1c00953e:	00179313          	slli	t1,a5,0x1
1c009542:	1379                	addi	t1,t1,-2
1c009544:	00135313          	srli	t1,t1,0x1
1c009548:	8e46                	mv	t3,a7
1c00954a:	8eaa                	mv	t4,a0
1c00954c:	842e                	mv	s0,a1
1c00954e:	83c2                	mv	t2,a6
1c009550:	00150293          	addi	t0,a0,1
1c009554:	00158f93          	addi	t6,a1,1
1c009558:	00180f13          	addi	t5,a6,1
1c00955c:	0305                	addi	t1,t1,1
1c00955e:	01b340fb          	lp.setup	x1,t1,1c009594 <KerParMatAdd_SQ8+0x200>
			O[2*i  ] = gap_clip(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c009562:	000e8703          	lb	a4,0(t4)
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c009566:	0022878b          	p.lb	a5,2(t0!)
1c00956a:	0024090b          	p.lb	s2,2(s0!)
			O[2*i  ] = gap_clip(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c00956e:	80c7075b          	p.muls	a4,a4,a2
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c009572:	002f848b          	p.lb	s1,2(t6!)
1c009576:	0e89                	addi	t4,t4,2
			O[2*i+1] = gap_clip(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
1c009578:	80c787db          	p.muls	a5,a5,a2
			O[2*i  ] = gap_clip(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c00957c:	41c0675b          	p.mac.zh.sl	a4,zero,t3,zero
1c009580:	974a                	add	a4,a4,s2
1c009582:	14871733          	p.clip	a4,a4,8
1c009586:	00e3812b          	p.sb	a4,2(t2!)
			O[2*i+1] = gap_clip(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
1c00958a:	41c067db          	p.mac.zh.sl	a5,zero,t3,zero
1c00958e:	97a6                	add	a5,a5,s1
1c009590:	148797b3          	p.clip	a5,a5,8
1c009594:	00ff012b          	p.sb	a5,2(t5!)
		if (S&0x1) O[S-1] = gap_clip(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], 7);
1c009598:	fc16b7b3          	p.bclr	a5,a3,30,1
1c00959c:	ee078ae3          	beqz	a5,1c009490 <KerParMatAdd_SQ8+0xfc>
1c0095a0:	16fd                	addi	a3,a3,-1
1c0095a2:	9536                	add	a0,a0,a3
1c0095a4:	00050783          	lb	a5,0(a0)
1c0095a8:	95b6                	add	a1,a1,a3
1c0095aa:	00058703          	lb	a4,0(a1)
1c0095ae:	80c787db          	p.muls	a5,a5,a2
1c0095b2:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c0095b6:	97ba                	add	a5,a5,a4
1c0095b8:	148797b3          	p.clip	a5,a5,8
1c0095bc:	00f846a3          	p.sb	a5,a3(a6)
1c0095c0:	bdc1                	j	1c009490 <KerParMatAdd_SQ8+0xfc>
		for (int i=0; i<S/2; i++) {
1c0095c2:	c3b9                	beqz	a5,1c009608 <KerParMatAdd_SQ8+0x274>
1c0095c4:	00179613          	slli	a2,a5,0x1
1c0095c8:	1679                	addi	a2,a2,-2
1c0095ca:	8205                	srli	a2,a2,0x1
1c0095cc:	8faa                	mv	t6,a0
1c0095ce:	8f2e                	mv	t5,a1
1c0095d0:	8ec2                	mv	t4,a6
1c0095d2:	00150e13          	addi	t3,a0,1
1c0095d6:	00158313          	addi	t1,a1,1
1c0095da:	00180893          	addi	a7,a6,1
1c0095de:	0605                	addi	a2,a2,1
1c0095e0:	012640fb          	lp.setup	x1,a2,1c009604 <KerParMatAdd_SQ8+0x270>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c0095e4:	002f870b          	p.lb	a4,2(t6!)
1c0095e8:	002f038b          	p.lb	t2,2(t5!)
1c0095ec:	002e078b          	p.lb	a5,2(t3!)
1c0095f0:	0023028b          	p.lb	t0,2(t1!)
			O[2*i  ] = gap_clip(I10 + I20, 7);
1c0095f4:	971e                	add	a4,a4,t2
1c0095f6:	14871733          	p.clip	a4,a4,8
			O[2*i+1] = gap_clip(I11 + I21, 7);
1c0095fa:	9796                	add	a5,a5,t0
1c0095fc:	148797b3          	p.clip	a5,a5,8
			O[2*i  ] = gap_clip(I10 + I20, 7);
1c009600:	00ee812b          	p.sb	a4,2(t4!)
			O[2*i+1] = gap_clip(I11 + I21, 7);
1c009604:	00f8812b          	p.sb	a5,2(a7!)
		if (S&0x1) O[S-1] = gap_clip(I1[S-1] + I2[S-1], 7);
1c009608:	fc16b7b3          	p.bclr	a5,a3,30,1
1c00960c:	e80782e3          	beqz	a5,1c009490 <KerParMatAdd_SQ8+0xfc>
1c009610:	16fd                	addi	a3,a3,-1
1c009612:	9536                	add	a0,a0,a3
1c009614:	95b6                	add	a1,a1,a3
1c009616:	00050783          	lb	a5,0(a0)
1c00961a:	00058703          	lb	a4,0(a1)
1c00961e:	97ba                	add	a5,a5,a4
1c009620:	148797b3          	p.clip	a5,a5,8
1c009624:	00f846a3          	p.sb	a5,a3(a6)
1c009628:	b5a5                	j	1c009490 <KerParMatAdd_SQ8+0xfc>

1c00962a <KerParMatAdd_ReLU_SQ8>:
	int W				= Arg->W;
	int H				= Arg->H;
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
	unsigned int OutScale = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALE], OutScaleN = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALEN];

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c00962a:	00c55f03          	lhu	t5,12(a0)
1c00962e:	f1402773          	csrr	a4,mhartid
	int W				= Arg->W;
1c009632:	00e55303          	lhu	t1,14(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c009636:	f83f37b3          	p.bclr	a5,t5,28,3
1c00963a:	003f5693          	srli	a3,t5,0x3
1c00963e:	00f037b3          	snez	a5,a5
1c009642:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c009644:	c8071733          	p.extractu	a4,a4,4,0
	int H				= Arg->H;
1c009648:	01055683          	lhu	a3,16(a0)
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c00964c:	02f70733          	mul	a4,a4,a5
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
1c009650:	01452e83          	lw	t4,20(a0)
{
1c009654:	1101                	addi	sp,sp,-32
1c009656:	ce22                	sw	s0,28(sp)
1c009658:	cc26                	sw	s1,24(sp)
1c00965a:	ca4a                	sw	s2,20(sp)
1c00965c:	c84e                	sw	s3,16(sp)
1c00965e:	c652                	sw	s4,12(sp)
1c009660:	c456                	sw	s5,8(sp)
	signed char * __restrict__ In2	= Arg->In2;
1c009662:	414c                	lw	a1,4(a0)
1c009664:	02d30333          	mul	t1,t1,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Arg->Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Arg->Feat);
1c009668:	00f706b3          	add	a3,a4,a5
1c00966c:	05e6c6b3          	p.min	a3,a3,t5
	signed char * __restrict__ Out	= Arg->Out;
1c009670:	00852803          	lw	a6,8(a0)
	signed char * __restrict__ In1	= Arg->In1;
1c009674:	00052f83          	lw	t6,0(a0)
	unsigned int In1Scale = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALE], In1ScaleN = ((unsigned char *)Arg->Infos)[AT_INF_IN1SCALEN];
1c009678:	005ec603          	lbu	a2,5(t4)
1c00967c:	006ec883          	lbu	a7,6(t4)
	unsigned int OutScale = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALE], OutScaleN = ((unsigned char *)Arg->Infos)[AT_INF_OUTSCALEN];
1c009680:	007ece03          	lbu	t3,7(t4)
1c009684:	008ec983          	lbu	s3,8(t4)

	unsigned int F = First*W*H, S = Max(0, Last*W*H-F);
1c009688:	026707b3          	mul	a5,a4,t1
1c00968c:	026686b3          	mul	a3,a3,t1
	signed char * __restrict__ I1 = In1 + F, *__restrict__ I2 = In2 + F, *__restrict__ O  = Out + F;
1c009690:	00ff8533          	add	a0,t6,a5
1c009694:	95be                	add	a1,a1,a5
1c009696:	983e                	add	a6,a6,a5
	unsigned int F = First*W*H, S = Max(0, Last*W*H-F);
1c009698:	8e9d                	sub	a3,a3,a5
1c00969a:	0406e6b3          	p.max	a3,a3,zero
1c00969e:	0016d793          	srli	a5,a3,0x1
	if (In1Scale && OutScale) {
1c0096a2:	e245                	bnez	a2,1c009742 <KerParMatAdd_ReLU_SQ8+0x118>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
		}
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], 7);
	} else if (OutScale) {
1c0096a4:	1a0e0a63          	beqz	t3,1c009858 <KerParMatAdd_ReLU_SQ8+0x22e>
		for (int i=0; i<S/2; i++) {
1c0096a8:	cfa1                	beqz	a5,1c009700 <KerParMatAdd_ReLU_SQ8+0xd6>
1c0096aa:	00179613          	slli	a2,a5,0x1
1c0096ae:	1679                	addi	a2,a2,-2
1c0096b0:	8205                	srli	a2,a2,0x1
1c0096b2:	88ce                	mv	a7,s3
1c0096b4:	83aa                	mv	t2,a0
1c0096b6:	82ae                	mv	t0,a1
1c0096b8:	8fc2                	mv	t6,a6
1c0096ba:	00150f13          	addi	t5,a0,1
1c0096be:	00158e93          	addi	t4,a1,1
1c0096c2:	00180313          	addi	t1,a6,1
1c0096c6:	0605                	addi	a2,a2,1
1c0096c8:	01a640fb          	lp.setup	x1,a2,1c0096fc <KerParMatAdd_ReLU_SQ8+0xd2>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c0096cc:	0023870b          	p.lb	a4,2(t2!)
1c0096d0:	0022848b          	p.lb	s1,2(t0!)
1c0096d4:	002f078b          	p.lb	a5,2(t5!)
1c0096d8:	002e840b          	p.lb	s0,2(t4!)
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10 + I20, OutScale, OutScaleN), 7);
1c0096dc:	9726                	add	a4,a4,s1
1c0096de:	03c70733          	mul	a4,a4,t3
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(I11 + I21, OutScale, OutScaleN), 7);
1c0096e2:	97a2                	add	a5,a5,s0
1c0096e4:	03c787b3          	mul	a5,a5,t3
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10 + I20, OutScale, OutScaleN), 7);
1c0096e8:	4110675b          	p.mac.zh.sl	a4,zero,a7,zero
1c0096ec:	14872733          	p.clipu	a4,a4,8
1c0096f0:	00ef812b          	p.sb	a4,2(t6!)
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(I11 + I21, OutScale, OutScaleN), 7);
1c0096f4:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c0096f8:	1487a7b3          	p.clipu	a5,a5,8
1c0096fc:	00f3012b          	p.sb	a5,2(t1!)
		}
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(AT_SCALE(I1[S-1] + I2[S-1], OutScale, OutScaleN), 7);
1c009700:	fc16b7b3          	p.bclr	a5,a3,30,1
1c009704:	c38d                	beqz	a5,1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>
1c009706:	16fd                	addi	a3,a3,-1
1c009708:	9536                	add	a0,a0,a3
1c00970a:	95b6                	add	a1,a1,a3
1c00970c:	00050783          	lb	a5,0(a0)
1c009710:	00058703          	lb	a4,0(a1)
1c009714:	97ba                	add	a5,a5,a4
1c009716:	03c787b3          	mul	a5,a5,t3
1c00971a:	413067db          	p.mac.zh.sl	a5,zero,s3,zero
1c00971e:	1487a7b3          	p.clipu	a5,a5,8
1c009722:	00f846a3          	p.sb	a5,a3(a6)
1c009726:	002047b7          	lui	a5,0x204
1c00972a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00972e:	01c7e703          	p.elw	a4,28(a5)
			O[2*i+1] = AT_CLIP_POS_IMM(I11 + I21, 7);
		}
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(I1[S-1] + I2[S-1], 7);
	}
	gap_waitbarrier(0);
}
1c009732:	4472                	lw	s0,28(sp)
1c009734:	44e2                	lw	s1,24(sp)
1c009736:	4952                	lw	s2,20(sp)
1c009738:	49c2                	lw	s3,16(sp)
1c00973a:	4a32                	lw	s4,12(sp)
1c00973c:	4aa2                	lw	s5,8(sp)
1c00973e:	6105                	addi	sp,sp,32
1c009740:	8082                	ret
	if (In1Scale && OutScale) {
1c009742:	080e0863          	beqz	t3,1c0097d2 <KerParMatAdd_ReLU_SQ8+0x1a8>
		for (int i=0; i<S/2; i++) {
1c009746:	c7bd                	beqz	a5,1c0097b4 <KerParMatAdd_ReLU_SQ8+0x18a>
1c009748:	00179313          	slli	t1,a5,0x1
1c00974c:	1379                	addi	t1,t1,-2
1c00974e:	00135313          	srli	t1,t1,0x1
1c009752:	8f46                	mv	t5,a7
1c009754:	8ece                	mv	t4,s3
1c009756:	8faa                	mv	t6,a0
1c009758:	892e                	mv	s2,a1
1c00975a:	84c2                	mv	s1,a6
1c00975c:	00150413          	addi	s0,a0,1
1c009760:	00158393          	addi	t2,a1,1
1c009764:	00180293          	addi	t0,a6,1
1c009768:	0305                	addi	t1,t1,1
1c00976a:	023340fb          	lp.setup	x1,t1,1c0097b0 <KerParMatAdd_ReLU_SQ8+0x186>
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c00976e:	000f8703          	lb	a4,0(t6)
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c009772:	0024078b          	p.lb	a5,2(s0!)
1c009776:	00290a8b          	p.lb	s5,2(s2!)
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c00977a:	80c7075b          	p.muls	a4,a4,a2
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c00977e:	00238a0b          	p.lb	s4,2(t2!)
1c009782:	0f89                	addi	t6,t6,2
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c009784:	80c787db          	p.muls	a5,a5,a2
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c009788:	41e0675b          	p.mac.zh.sl	a4,zero,t5,zero
1c00978c:	9756                	add	a4,a4,s5
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c00978e:	41e067db          	p.mac.zh.sl	a5,zero,t5,zero
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c009792:	03c70733          	mul	a4,a4,t3
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c009796:	97d2                	add	a5,a5,s4
1c009798:	03c787b3          	mul	a5,a5,t3
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, OutScale, OutScaleN), 7);
1c00979c:	41d0675b          	p.mac.zh.sl	a4,zero,t4,zero
1c0097a0:	14872733          	p.clipu	a4,a4,8
1c0097a4:	00e4812b          	p.sb	a4,2(s1!)
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, OutScale, OutScaleN), 7);
1c0097a8:	41d067db          	p.mac.zh.sl	a5,zero,t4,zero
1c0097ac:	1487a7b3          	p.clipu	a5,a5,8
1c0097b0:	00f2812b          	p.sb	a5,2(t0!)
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(AT_SCALE(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], OutScale, OutScaleN), 7);
1c0097b4:	fc16b7b3          	p.bclr	a5,a3,30,1
1c0097b8:	d7bd                	beqz	a5,1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>
1c0097ba:	16fd                	addi	a3,a3,-1
1c0097bc:	9536                	add	a0,a0,a3
1c0097be:	00050783          	lb	a5,0(a0)
1c0097c2:	95b6                	add	a1,a1,a3
1c0097c4:	00058703          	lb	a4,0(a1)
1c0097c8:	80c787db          	p.muls	a5,a5,a2
1c0097cc:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c0097d0:	b791                	j	1c009714 <KerParMatAdd_ReLU_SQ8+0xea>
		for (int i=0; i<S/2; i++) {
1c0097d2:	cfb1                	beqz	a5,1c00982e <KerParMatAdd_ReLU_SQ8+0x204>
1c0097d4:	00179313          	slli	t1,a5,0x1
1c0097d8:	1379                	addi	t1,t1,-2
1c0097da:	00135313          	srli	t1,t1,0x1
1c0097de:	8e46                	mv	t3,a7
1c0097e0:	8eaa                	mv	t4,a0
1c0097e2:	842e                	mv	s0,a1
1c0097e4:	83c2                	mv	t2,a6
1c0097e6:	00150293          	addi	t0,a0,1
1c0097ea:	00158f93          	addi	t6,a1,1
1c0097ee:	00180f13          	addi	t5,a6,1
1c0097f2:	0305                	addi	t1,t1,1
1c0097f4:	01b340fb          	lp.setup	x1,t1,1c00982a <KerParMatAdd_ReLU_SQ8+0x200>
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c0097f8:	000e8703          	lb	a4,0(t4)
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c0097fc:	0022878b          	p.lb	a5,2(t0!)
1c009800:	0024090b          	p.lb	s2,2(s0!)
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c009804:	80c7075b          	p.muls	a4,a4,a2
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c009808:	002f848b          	p.lb	s1,2(t6!)
1c00980c:	0e89                	addi	t4,t4,2
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
1c00980e:	80c787db          	p.muls	a5,a5,a2
			O[2*i  ] = AT_CLIP_POS_IMM(AT_SCALE(I10, In1Scale, In1ScaleN) + I20, 7);
1c009812:	41c0675b          	p.mac.zh.sl	a4,zero,t3,zero
1c009816:	974a                	add	a4,a4,s2
1c009818:	14872733          	p.clipu	a4,a4,8
1c00981c:	00e3812b          	p.sb	a4,2(t2!)
			O[2*i+1] = AT_CLIP_POS_IMM(AT_SCALE(I11, In1Scale, In1ScaleN) + I21, 7);
1c009820:	41c067db          	p.mac.zh.sl	a5,zero,t3,zero
1c009824:	97a6                	add	a5,a5,s1
1c009826:	1487a7b3          	p.clipu	a5,a5,8
1c00982a:	00ff012b          	p.sb	a5,2(t5!)
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(AT_SCALE(I1[S-1], In1Scale, In1ScaleN) + I2[S-1], 7);
1c00982e:	fc16b7b3          	p.bclr	a5,a3,30,1
1c009832:	ee078ae3          	beqz	a5,1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>
1c009836:	16fd                	addi	a3,a3,-1
1c009838:	9536                	add	a0,a0,a3
1c00983a:	00050783          	lb	a5,0(a0)
1c00983e:	95b6                	add	a1,a1,a3
1c009840:	00058703          	lb	a4,0(a1)
1c009844:	80c787db          	p.muls	a5,a5,a2
1c009848:	411067db          	p.mac.zh.sl	a5,zero,a7,zero
1c00984c:	97ba                	add	a5,a5,a4
1c00984e:	1487a7b3          	p.clipu	a5,a5,8
1c009852:	00f846a3          	p.sb	a5,a3(a6)
1c009856:	bdc1                	j	1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>
		for (int i=0; i<S/2; i++) {
1c009858:	c3b9                	beqz	a5,1c00989e <KerParMatAdd_ReLU_SQ8+0x274>
1c00985a:	00179613          	slli	a2,a5,0x1
1c00985e:	1679                	addi	a2,a2,-2
1c009860:	8205                	srli	a2,a2,0x1
1c009862:	8faa                	mv	t6,a0
1c009864:	8f2e                	mv	t5,a1
1c009866:	8ec2                	mv	t4,a6
1c009868:	00150e13          	addi	t3,a0,1
1c00986c:	00158313          	addi	t1,a1,1
1c009870:	00180893          	addi	a7,a6,1
1c009874:	0605                	addi	a2,a2,1
1c009876:	012640fb          	lp.setup	x1,a2,1c00989a <KerParMatAdd_ReLU_SQ8+0x270>
			int I10=I1[2*i], I20=I2[2*i], I11=I1[2*i+1], I21=I2[2*i+1];
1c00987a:	002f870b          	p.lb	a4,2(t6!)
1c00987e:	002f038b          	p.lb	t2,2(t5!)
1c009882:	002e078b          	p.lb	a5,2(t3!)
1c009886:	0023028b          	p.lb	t0,2(t1!)
			O[2*i  ] = AT_CLIP_POS_IMM(I10 + I20, 7);
1c00988a:	971e                	add	a4,a4,t2
1c00988c:	14872733          	p.clipu	a4,a4,8
			O[2*i+1] = AT_CLIP_POS_IMM(I11 + I21, 7);
1c009890:	9796                	add	a5,a5,t0
1c009892:	1487a7b3          	p.clipu	a5,a5,8
			O[2*i  ] = AT_CLIP_POS_IMM(I10 + I20, 7);
1c009896:	00ee812b          	p.sb	a4,2(t4!)
			O[2*i+1] = AT_CLIP_POS_IMM(I11 + I21, 7);
1c00989a:	00f8812b          	p.sb	a5,2(a7!)
		if (S&0x1) O[S-1] = AT_CLIP_POS_IMM(I1[S-1] + I2[S-1], 7);
1c00989e:	fc16b7b3          	p.bclr	a5,a3,30,1
1c0098a2:	e80782e3          	beqz	a5,1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>
1c0098a6:	16fd                	addi	a3,a3,-1
1c0098a8:	9536                	add	a0,a0,a3
1c0098aa:	95b6                	add	a1,a1,a3
1c0098ac:	00050783          	lb	a5,0(a0)
1c0098b0:	00058703          	lb	a4,0(a1)
1c0098b4:	97ba                	add	a5,a5,a4
1c0098b6:	1487a7b3          	p.clipu	a5,a5,8
1c0098ba:	00f846a3          	p.sb	a5,a3(a6)
1c0098be:	b5a5                	j	1c009726 <KerParMatAdd_ReLU_SQ8+0xfc>

1c0098c0 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c0098c0:	415c                	lw	a5,4(a0)
1c0098c2:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c0098c4:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c0098c8:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c0098ca:	8302                	jr	t1

1c0098cc <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c0098cc:	8082                	ret

1c0098ce <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_direct_read_async(file, buffer, size, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c0098ce:	1141                	addi	sp,sp,-16
1c0098d0:	c422                	sw	s0,8(sp)
1c0098d2:	c226                	sw	s1,4(sp)
1c0098d4:	c606                	sw	ra,12(sp)
1c0098d6:	c04a                	sw	s2,0(sp)
1c0098d8:	842a                	mv	s0,a0
1c0098da:	00040783          	lb	a5,0(s0)
1c0098de:	c799                	beqz	a5,1c0098ec <pi_task_wait_on.isra.3+0x1e>
1c0098e0:	40b2                	lw	ra,12(sp)
1c0098e2:	4422                	lw	s0,8(sp)
1c0098e4:	4492                	lw	s1,4(sp)
1c0098e6:	4902                	lw	s2,0(sp)
1c0098e8:	0141                	addi	sp,sp,16
1c0098ea:	8082                	ret
1c0098ec:	30047973          	csrrci	s2,mstatus,8
1c0098f0:	4585                	li	a1,1
1c0098f2:	01c00513          	li	a0,28
1c0098f6:	177020ef          	jal	ra,1c00c26c <__rt_event_execute>
1c0098fa:	30091073          	csrw	mstatus,s2
1c0098fe:	bff1                	j	1c0098da <pi_task_wait_on.isra.3+0xc>

1c009900 <pi_fs_conf_init>:
1c009900:	00052023          	sw	zero,0(a0)
1c009904:	00052423          	sw	zero,8(a0)
1c009908:	00050623          	sb	zero,12(a0)
1c00990c:	00052823          	sw	zero,16(a0)
1c009910:	8082                	ret

1c009912 <pi_fs_mount>:
1c009912:	4158                	lw	a4,4(a0)
1c009914:	4b1c                	lw	a5,16(a4)
1c009916:	eb89                	bnez	a5,1c009928 <pi_fs_mount+0x16>
1c009918:	431c                	lw	a5,0(a4)
1c00991a:	cb99                	beqz	a5,1c009930 <pi_fs_mount+0x1e>
1c00991c:	0017bf63          	p.bneimm	a5,1,1c00993a <pi_fs_mount+0x28>
1c009920:	1c0107b7          	lui	a5,0x1c010
1c009924:	44078793          	addi	a5,a5,1088 # 1c010440 <__pi_host_fs_api>
1c009928:	0007a303          	lw	t1,0(a5)
1c00992c:	c11c                	sw	a5,0(a0)
1c00992e:	8302                	jr	t1
1c009930:	1c0107b7          	lui	a5,0x1c010
1c009934:	41878793          	addi	a5,a5,1048 # 1c010418 <__pi_read_fs_api>
1c009938:	bfc5                	j	1c009928 <pi_fs_mount+0x16>
1c00993a:	557d                	li	a0,-1
1c00993c:	8082                	ret

1c00993e <pi_fs_unmount>:
1c00993e:	411c                	lw	a5,0(a0)
1c009940:	0047a303          	lw	t1,4(a5)
1c009944:	8302                	jr	t1

1c009946 <pi_fs_open>:
1c009946:	411c                	lw	a5,0(a0)
1c009948:	0087a303          	lw	t1,8(a5)
1c00994c:	8302                	jr	t1

1c00994e <pi_fs_close>:
1c00994e:	415c                	lw	a5,4(a0)
1c009950:	00c7a303          	lw	t1,12(a5)
1c009954:	8302                	jr	t1

1c009956 <pi_fs_read_async>:
1c009956:	415c                	lw	a5,4(a0)
1c009958:	0107a303          	lw	t1,16(a5)
1c00995c:	8302                	jr	t1

1c00995e <pi_fs_read>:
1c00995e:	7175                	addi	sp,sp,-144
1c009960:	4785                	li	a5,1
1c009962:	868a                	mv	a3,sp
1c009964:	c706                	sw	ra,140(sp)
1c009966:	c522                	sw	s0,136(sp)
1c009968:	cc3e                	sw	a5,24(sp)
1c00996a:	d43e                	sw	a5,40(sp)
1c00996c:	c202                	sw	zero,4(sp)
1c00996e:	00010a23          	sb	zero,20(sp)
1c009972:	fe5ff0ef          	jal	ra,1c009956 <pi_fs_read_async>
1c009976:	842a                	mv	s0,a0
1c009978:	0848                	addi	a0,sp,20
1c00997a:	f55ff0ef          	jal	ra,1c0098ce <pi_task_wait_on.isra.3>
1c00997e:	8522                	mv	a0,s0
1c009980:	40ba                	lw	ra,140(sp)
1c009982:	442a                	lw	s0,136(sp)
1c009984:	6149                	addi	sp,sp,144
1c009986:	8082                	ret

1c009988 <pi_fs_write_async>:
1c009988:	415c                	lw	a5,4(a0)
1c00998a:	0187a303          	lw	t1,24(a5)
1c00998e:	8302                	jr	t1

1c009990 <pi_fs_write>:
1c009990:	7175                	addi	sp,sp,-144
1c009992:	4785                	li	a5,1
1c009994:	868a                	mv	a3,sp
1c009996:	c706                	sw	ra,140(sp)
1c009998:	c522                	sw	s0,136(sp)
1c00999a:	cc3e                	sw	a5,24(sp)
1c00999c:	d43e                	sw	a5,40(sp)
1c00999e:	c202                	sw	zero,4(sp)
1c0099a0:	00010a23          	sb	zero,20(sp)
1c0099a4:	fe5ff0ef          	jal	ra,1c009988 <pi_fs_write_async>
1c0099a8:	842a                	mv	s0,a0
1c0099aa:	0848                	addi	a0,sp,20
1c0099ac:	f23ff0ef          	jal	ra,1c0098ce <pi_task_wait_on.isra.3>
1c0099b0:	8522                	mv	a0,s0
1c0099b2:	40ba                	lw	ra,140(sp)
1c0099b4:	442a                	lw	s0,136(sp)
1c0099b6:	6149                	addi	sp,sp,144
1c0099b8:	8082                	ret

1c0099ba <pi_fs_copy_async>:

int32_t pi_fs_copy_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc, pi_task_t *task)
{
  return file->api->copy(file, index, buffer, size, ext2loc, task);
1c0099ba:	00452803          	lw	a6,4(a0)
1c0099be:	02082303          	lw	t1,32(a6)
1c0099c2:	8302                	jr	t1

1c0099c4 <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c0099c4:	411c                	lw	a5,0(a0)
1c0099c6:	00c7a303          	lw	t1,12(a5)
1c0099ca:	8302                	jr	t1

1c0099cc <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0099cc:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c0099ce:	01852803          	lw	a6,24(a0)
{
1c0099d2:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0099d4:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c0099d6:	495c                	lw	a5,20(a0)
{
1c0099d8:	88ae                	mv	a7,a1
1c0099da:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c0099dc:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c0099e0:	00c52803          	lw	a6,12(a0)
{
1c0099e4:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c0099e6:	00c78333          	add	t1,a5,a2
1c0099ea:	00687463          	bleu	t1,a6,1c0099f2 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c0099ee:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c0099f2:	97b2                	add	a5,a5,a2
1c0099f4:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c0099f6:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c0099f8:	86b2                	mv	a3,a2
1c0099fa:	8646                	mv	a2,a7
1c0099fc:	411c                	lw	a5,0(a0)
1c0099fe:	4b9c                	lw	a5,16(a5)
1c009a00:	9782                	jalr	a5
    
    return 0;
}
1c009a02:	40b2                	lw	ra,12(sp)
1c009a04:	4501                	li	a0,0
1c009a06:	0141                	addi	sp,sp,16
1c009a08:	8082                	ret

1c009a0a <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c009a0a:	455c                	lw	a5,12(a0)
1c009a0c:	00f5f563          	bleu	a5,a1,1c009a16 <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c009a10:	c94c                	sw	a1,20(a0)
        return 0;
1c009a12:	4501                	li	a0,0
1c009a14:	8082                	ret
    }
    return -1;
1c009a16:	557d                	li	a0,-1
}
1c009a18:	8082                	ret

1c009a1a <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009a1a:	411c                	lw	a5,0(a0)
{
1c009a1c:	1141                	addi	sp,sp,-16
1c009a1e:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009a20:	0087a803          	lw	a6,8(a5)
{
1c009a24:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c009a26:	495c                	lw	a5,20(a0)
1c009a28:	4d10                	lw	a2,24(a0)
{
1c009a2a:	88ae                	mv	a7,a1
1c009a2c:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c009a2e:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c009a32:	4550                	lw	a2,12(a0)
{
1c009a34:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c009a36:	008786b3          	add	a3,a5,s0
1c009a3a:	00d67463          	bleu	a3,a2,1c009a42 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c009a3e:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c009a42:	97a2                	add	a5,a5,s0
1c009a44:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c009a46:	00082503          	lw	a0,0(a6)
1c009a4a:	86a2                	mv	a3,s0
1c009a4c:	8646                	mv	a2,a7
1c009a4e:	f77ff0ef          	jal	ra,1c0099c4 <pi_flash_read_async>
    
    return real_size;
}
1c009a52:	8522                	mv	a0,s0
1c009a54:	40b2                	lw	ra,12(sp)
1c009a56:	4422                	lw	s0,8(sp)
1c009a58:	0141                	addi	sp,sp,16
1c009a5a:	8082                	ret

1c009a5c <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c009a5c:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009a5e:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c009a60:	01882803          	lw	a6,24(a6)
1c009a64:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c009a66:	95c2                	add	a1,a1,a6
1c009a68:	4108                	lw	a0,0(a0)
1c009a6a:	00052883          	lw	a7,0(a0)
1c009a6e:	0288a303          	lw	t1,40(a7)
1c009a72:	8302                	jr	t1

1c009a74 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c009a74:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009a76:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c009a78:	01832e03          	lw	t3,24(t1)
1c009a7c:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c009a7e:	95f2                	add	a1,a1,t3
1c009a80:	4108                	lw	a0,0(a0)
1c009a82:	00052303          	lw	t1,0(a0)
1c009a86:	02c32303          	lw	t1,44(t1)
1c009a8a:	8302                	jr	t1

1c009a8c <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009a8c:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c009a90:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c009a94:	00052023          	sw	zero,0(a0)
1c009a98:	01c00713          	li	a4,28
  if (sched->first) {
1c009a9c:	c619                	beqz	a2,1c009aaa <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c009a9e:	435c                	lw	a5,4(a4)
1c009aa0:	c388                	sw	a0,0(a5)
  sched->last = event;
1c009aa2:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c009aa4:	30069073          	csrw	mstatus,a3
}
1c009aa8:	8082                	ret
    sched->first = event;
1c009aaa:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c009aae:	bfd5                	j	1c009aa2 <rt_event_enqueue+0x16>

1c009ab0 <__pi_fs_free>:
    if(fs != NULL)
1c009ab0:	c91d                	beqz	a0,1c009ae6 <__pi_fs_free+0x36>
{
1c009ab2:	1141                	addi	sp,sp,-16
1c009ab4:	c422                	sw	s0,8(sp)
1c009ab6:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c009ab8:	09c52503          	lw	a0,156(a0)
{
1c009abc:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c009abe:	c511                	beqz	a0,1c009aca <__pi_fs_free+0x1a>
1c009ac0:	09842783          	lw	a5,152(s0)
1c009ac4:	438c                	lw	a1,0(a5)
1c009ac6:	259020ef          	jal	ra,1c00c51e <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c009aca:	09842503          	lw	a0,152(s0)
1c009ace:	c501                	beqz	a0,1c009ad6 <__pi_fs_free+0x26>
1c009ad0:	45a1                	li	a1,8
1c009ad2:	24d020ef          	jal	ra,1c00c51e <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c009ad6:	8522                	mv	a0,s0
}
1c009ad8:	4422                	lw	s0,8(sp)
1c009ada:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c009adc:	1b800593          	li	a1,440
}
1c009ae0:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c009ae2:	23d0206f          	j	1c00c51e <pi_l2_free>
1c009ae6:	8082                	ret

1c009ae8 <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c009ae8:	4508                	lw	a0,8(a0)
1c009aea:	fc7ff06f          	j	1c009ab0 <__pi_fs_free>

1c009aee <__pi_read_fs_open>:
{
1c009aee:	1101                	addi	sp,sp,-32
1c009af0:	ca26                	sw	s1,20(sp)
1c009af2:	c452                	sw	s4,8(sp)
1c009af4:	c256                	sw	s5,4(sp)
1c009af6:	ce06                	sw	ra,28(sp)
1c009af8:	cc22                	sw	s0,24(sp)
1c009afa:	c84a                	sw	s2,16(sp)
1c009afc:	c64e                	sw	s3,12(sp)
1c009afe:	c05a                	sw	s6,0(sp)
1c009b00:	8a2a                	mv	s4,a0
1c009b02:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c009b04:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c009b06:	08163f63          	p.bneimm	a2,1,1c009ba4 <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c009b0a:	12c4a783          	lw	a5,300(s1)
1c009b0e:	c399                	beqz	a5,1c009b14 <__pi_read_fs_open+0x26>
    return NULL;
1c009b10:	4501                	li	a0,0
1c009b12:	a8bd                	j	1c009b90 <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c009b14:	0c000513          	li	a0,192
1c009b18:	1f9020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009b1c:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c009b1e:	d96d                	beqz	a0,1c009b10 <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c009b20:	8556                	mv	a0,s5
1c009b22:	7b4040ef          	jal	ra,1c00e2d6 <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c009b26:	00750913          	addi	s2,a0,7
1c009b2a:	c4093933          	p.bclr	s2,s2,2,0
1c009b2e:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c009b30:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c009b32:	854a                	mv	a0,s2
1c009b34:	1dd020ef          	jal	ra,1c00c510 <pi_l2_malloc>
        if(header == NULL)
1c009b38:	e519                	bnez	a0,1c009b46 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c009b3a:	0c000593          	li	a1,192
1c009b3e:	8522                	mv	a0,s0
1c009b40:	1df020ef          	jal	ra,1c00c51e <pi_l2_free>
1c009b44:	b7f1                	j	1c009b10 <__pi_read_fs_open+0x22>
        file->header = header;
1c009b46:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c009b4a:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c009b4e:	864e                	mv	a2,s3
1c009b50:	85d6                	mv	a1,s5
1c009b52:	0531                	addi	a0,a0,12
1c009b54:	7a8040ef          	jal	ra,1c00e2fc <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c009b58:	0b442783          	lw	a5,180(s0)
1c009b5c:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c009b60:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c009b64:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c009b68:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c009b6c:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c009b6e:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c009b70:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c009b74:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c009b78:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c009b7c:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c009b80:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c009b84:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c009b86:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c009b88:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c009b8c:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c009b8e:	8522                	mv	a0,s0
}
1c009b90:	40f2                	lw	ra,28(sp)
1c009b92:	4462                	lw	s0,24(sp)
1c009b94:	44d2                	lw	s1,20(sp)
1c009b96:	4942                	lw	s2,16(sp)
1c009b98:	49b2                	lw	s3,12(sp)
1c009b9a:	4a22                	lw	s4,8(sp)
1c009b9c:	4a92                	lw	s5,4(sp)
1c009b9e:	4b02                	lw	s6,0(sp)
1c009ba0:	6105                	addi	sp,sp,32
1c009ba2:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c009ba4:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c009ba8:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c009baa:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c009bac:	0007ab03          	lw	s6,0(a5)
1c009bb0:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c009bb4:	0569c163          	blt	s3,s6,1c009bf6 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c009bb8:	f5698ce3          	beq	s3,s6,1c009b10 <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c009bbc:	0c000513          	li	a0,192
1c009bc0:	151020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009bc4:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c009bc6:	d529                	beqz	a0,1c009b10 <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c009bc8:	08800513          	li	a0,136
1c009bcc:	145020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009bd0:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c009bd4:	d13d                	beqz	a0,1c009b3a <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c009bd6:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c009bda:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c009bdc:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c009be0:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c009be2:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c009be6:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c009bea:	97ba                	add	a5,a5,a4
1c009bec:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c009bee:	57fd                	li	a5,-1
1c009bf0:	0af42823          	sw	a5,176(s0)
1c009bf4:	b761                	j	1c009b7c <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c009bf6:	85d6                	mv	a1,s5
1c009bf8:	00c40513          	addi	a0,s0,12
1c009bfc:	6a6040ef          	jal	ra,1c00e2a2 <strcmp>
1c009c00:	c901                	beqz	a0,1c009c10 <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c009c02:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c009c04:	8922                	mv	s2,s0
1c009c06:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c009c08:	97a2                	add	a5,a5,s0
1c009c0a:	00c78413          	addi	s0,a5,12
1c009c0e:	b75d                	j	1c009bb4 <__pi_read_fs_open+0xc6>
1c009c10:	8922                	mv	s2,s0
1c009c12:	b76d                	j	1c009bbc <__pi_read_fs_open+0xce>

1c009c14 <__pi_fs_mount_step>:
{
1c009c14:	7179                	addi	sp,sp,-48
1c009c16:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c009c18:	09052483          	lw	s1,144(a0)
{
1c009c1c:	d422                	sw	s0,40(sp)
1c009c1e:	d606                	sw	ra,44(sp)
1c009c20:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c009c22:	ce02                	sw	zero,28(sp)
{
1c009c24:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c009c26:	0834a563          	p.beqimm	s1,3,1c009cb0 <__pi_fs_mount_step+0x9c>
1c009c2a:	0c44aa63          	p.beqimm	s1,4,1c009cfe <__pi_fs_mount_step+0xea>
1c009c2e:	0614bb63          	p.bneimm	s1,1,1c009ca4 <__pi_fs_mount_step+0x90>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c009c32:	4108                	lw	a0,0(a0)
1c009c34:	086c                	addi	a1,sp,28
1c009c36:	008010ef          	jal	ra,1c00ac3e <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c009c3a:	ed09                	bnez	a0,1c009c54 <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c009c3c:	4054                	lw	a3,4(s0)
1c009c3e:	4572                	lw	a0,28(sp)
1c009c40:	08100613          	li	a2,129
1c009c44:	4585                	li	a1,1
1c009c46:	7fd000ef          	jal	ra,1c00ac42 <pi_partition_find_first>
1c009c4a:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c009c4c:	e901                	bnez	a0,1c009c5c <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c009c4e:	4572                	lw	a0,28(sp)
1c009c50:	7ed000ef          	jal	ra,1c00ac3c <pi_partition_table_free>
    fs->error = -1;
1c009c54:	57fd                	li	a5,-1
1c009c56:	12f42223          	sw	a5,292(s0)
1c009c5a:	a0d1                	j	1c009d1e <__pi_fs_mount_step+0x10a>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c009c5c:	7d7000ef          	jal	ra,1c00ac32 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c009c60:	02800593          	li	a1,40
1c009c64:	c408                	sw	a0,8(s0)
1c009c66:	854a                	mv	a0,s2
1c009c68:	0b7020ef          	jal	ra,1c00c51e <pi_l2_free>
            pi_partition_table_free(partition_table);
1c009c6c:	4572                	lw	a0,28(sp)
1c009c6e:	7cf000ef          	jal	ra,1c00ac3c <pi_partition_table_free>
            fs->mount_step++;
1c009c72:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c009c76:	4008                	lw	a0,0(s0)
1c009c78:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c009c7a:	0789                	addi	a5,a5,2
1c009c7c:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c009c80:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c009c84:	1c00a7b7          	lui	a5,0x1c00a
1c009c88:	c1478793          	addi	a5,a5,-1004 # 1c009c14 <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c009c8c:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c009c90:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c009c92:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c009c94:	d844                	sw	s1,52(s0)
  task->done = 0;
1c009c96:	02040023          	sb	zero,32(s0)
1c009c9a:	00c40713          	addi	a4,s0,12
1c009c9e:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c009ca0:	d25ff0ef          	jal	ra,1c0099c4 <pi_flash_read_async>
}
1c009ca4:	50b2                	lw	ra,44(sp)
1c009ca6:	5422                	lw	s0,40(sp)
1c009ca8:	5492                	lw	s1,36(sp)
1c009caa:	5902                	lw	s2,32(sp)
1c009cac:	6145                	addi	sp,sp,48
1c009cae:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c009cb0:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c009cb4:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c009cb6:	4394                	lw	a3,0(a5)
1c009cb8:	069d                	addi	a3,a3,7
1c009cba:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c009cbe:	8536                	mv	a0,a3
1c009cc0:	c636                	sw	a3,12(sp)
1c009cc2:	04f020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009cc6:	08a42e23          	sw	a0,156(s0)
1c009cca:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c009ccc:	46b2                	lw	a3,12(sp)
1c009cce:	d159                	beqz	a0,1c009c54 <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c009cd0:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c009cd4:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c009cd6:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c009cda:	0785                	addi	a5,a5,1
1c009cdc:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c009ce0:	1c00a7b7          	lui	a5,0x1c00a
1c009ce4:	c1478793          	addi	a5,a5,-1004 # 1c009c14 <__pi_fs_mount_step>
1c009ce8:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c009cea:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c009cec:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c009cee:	d85c                	sw	a5,52(s0)
1c009cf0:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c009cf4:	00c40713          	addi	a4,s0,12
1c009cf8:	00848593          	addi	a1,s1,8
1c009cfc:	b755                	j	1c009ca0 <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c009cfe:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c009d02:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c009d04:	00470793          	addi	a5,a4,4
1c009d08:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c009d0a:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c009d0c:	00b6ce63          	blt	a3,a1,1c009d28 <__pi_fs_mount_step+0x114>
            if(desc == NULL)
1c009d10:	e31d                	bnez	a4,1c009d36 <__pi_fs_mount_step+0x122>
                fs->free_flash_area = desc->addr + desc->size;
1c009d12:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c009d16:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c009d1a:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c009d1e:	08c42503          	lw	a0,140(s0)
1c009d22:	d6bff0ef          	jal	ra,1c009a8c <rt_event_enqueue>
1c009d26:	bfbd                	j	1c009ca4 <__pi_fs_mount_step+0x90>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c009d28:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c009d2a:	873e                	mv	a4,a5
1c009d2c:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c009d2e:	963e                	add	a2,a2,a5
1c009d30:	00c60793          	addi	a5,a2,12
1c009d34:	bfe1                	j	1c009d0c <__pi_fs_mount_step+0xf8>
                fs->free_flash_area = desc->addr + desc->size;
1c009d36:	431c                	lw	a5,0(a4)
1c009d38:	4358                	lw	a4,4(a4)
1c009d3a:	97ba                	add	a5,a5,a4
1c009d3c:	bfd9                	j	1c009d12 <__pi_fs_mount_step+0xfe>

1c009d3e <__pi_read_fs_close>:
    if(file->header == NULL)
1c009d3e:	0b452603          	lw	a2,180(a0)
{
1c009d42:	1141                	addi	sp,sp,-16
1c009d44:	c422                	sw	s0,8(sp)
1c009d46:	c606                	sw	ra,12(sp)
1c009d48:	842a                	mv	s0,a0
    if(file->header == NULL)
1c009d4a:	ee19                	bnez	a2,1c009d68 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c009d4c:	0ac52503          	lw	a0,172(a0)
1c009d50:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c009d54:	7ca020ef          	jal	ra,1c00c51e <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c009d58:	8522                	mv	a0,s0
}
1c009d5a:	4422                	lw	s0,8(sp)
1c009d5c:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c009d5e:	0c000593          	li	a1,192
}
1c009d62:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c009d64:	7ba0206f          	j	1c00c51e <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009d68:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c009d6a:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c009d6c:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009d6e:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c009d70:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c009d74:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c009d76:	4388                	lw	a0,0(a5)
1c009d78:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c009d7a:	c258                	sw	a4,4(a2)
1c009d7c:	411c                	lw	a5,0(a0)
1c009d7e:	5bdc                	lw	a5,52(a5)
1c009d80:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c009d82:	0b842583          	lw	a1,184(s0)
1c009d86:	0b442503          	lw	a0,180(s0)
1c009d8a:	b7e9                	j	1c009d54 <__pi_read_fs_close+0x16>

1c009d8c <__pi_read_fs_mount>:
{
1c009d8c:	7175                	addi	sp,sp,-144
1c009d8e:	c326                	sw	s1,132(sp)
1c009d90:	c14a                	sw	s2,128(sp)
1c009d92:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c009d94:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c009d98:	1b800513          	li	a0,440
{
1c009d9c:	c522                	sw	s0,136(sp)
1c009d9e:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c009da0:	770020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009da4:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c009da6:	e919                	bnez	a0,1c009dbc <__pi_read_fs_mount+0x30>
    __pi_fs_free(fs);
1c009da8:	8522                	mv	a0,s0
1c009daa:	d07ff0ef          	jal	ra,1c009ab0 <__pi_fs_free>
    return -1;
1c009dae:	557d                	li	a0,-1
}
1c009db0:	40ba                	lw	ra,140(sp)
1c009db2:	442a                	lw	s0,136(sp)
1c009db4:	449a                	lw	s1,132(sp)
1c009db6:	490a                	lw	s2,128(sp)
1c009db8:	6149                	addi	sp,sp,144
1c009dba:	8082                	ret
    fs->flash = conf->flash;
1c009dbc:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c009dc0:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c009dc4:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c009dc8:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c009dca:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c009dce:	4521                	li	a0,8
1c009dd0:	740020ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c009dd4:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c009dd8:	d961                	beqz	a0,1c009da8 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c009dda:	4785                	li	a5,1
1c009ddc:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c009de0:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c009de2:	d43e                	sw	a5,40(sp)
1c009de4:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c009de8:	00010793          	mv	a5,sp
1c009dec:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c009df0:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c009df4:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c009df6:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c009dfa:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c009dfc:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c009dfe:	8522                	mv	a0,s0
1c009e00:	e15ff0ef          	jal	ra,1c009c14 <__pi_fs_mount_step>
  while(!task->done)
1c009e04:	01410783          	lb	a5,20(sp)
1c009e08:	c791                	beqz	a5,1c009e14 <__pi_read_fs_mount+0x88>
    if(fs->error)
1c009e0a:	12442783          	lw	a5,292(s0)
1c009e0e:	ffc9                	bnez	a5,1c009da8 <__pi_read_fs_mount+0x1c>
    return 0;
1c009e10:	4501                	li	a0,0
1c009e12:	bf79                	j	1c009db0 <__pi_read_fs_mount+0x24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009e14:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009e18:	4585                	li	a1,1
1c009e1a:	01c00513          	li	a0,28
1c009e1e:	44e020ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009e22:	30091073          	csrw	mstatus,s2
1c009e26:	bff9                	j	1c009e04 <__pi_read_fs_mount+0x78>

1c009e28 <__pi_fs_read_cached>:
{
1c009e28:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c009e2a:	0b052583          	lw	a1,176(a0)
{
1c009e2e:	1141                	addi	sp,sp,-16
1c009e30:	c226                	sw	s1,4(sp)
1c009e32:	c606                	sw	ra,12(sp)
1c009e34:	c422                	sw	s0,8(sp)
1c009e36:	84ba                	mv	s1,a4
1c009e38:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c009e3c:	00b66f63          	bltu	a2,a1,1c009e5a <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c009e40:	f8363733          	p.bclr	a4,a2,28,3
1c009e44:	08800413          	li	s0,136
1c009e48:	8c19                	sub	s0,s0,a4
1c009e4a:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c009e4e:	008606b3          	add	a3,a2,s0
1c009e52:	08858713          	addi	a4,a1,136
1c009e56:	02d77a63          	bleu	a3,a4,1c009e8a <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009e5a:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c009e5c:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009e60:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009e64:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c009e68:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009e6c:	873e                	mv	a4,a5
1c009e6e:	0008a503          	lw	a0,0(a7)
1c009e72:	8642                	mv	a2,a6
        return 0;
1c009e74:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009e76:	b4fff0ef          	jal	ra,1c0099c4 <pi_flash_read_async>
        *pending = 1;
1c009e7a:	4785                	li	a5,1
1c009e7c:	c09c                	sw	a5,0(s1)
}
1c009e7e:	8522                	mv	a0,s0
1c009e80:	40b2                	lw	ra,12(sp)
1c009e82:	4422                	lw	s0,8(sp)
1c009e84:	4492                	lw	s1,4(sp)
1c009e86:	0141                	addi	sp,sp,16
1c009e88:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c009e8a:	40b605b3          	sub	a1,a2,a1
1c009e8e:	95c2                	add	a1,a1,a6
1c009e90:	8622                	mv	a2,s0
1c009e92:	8546                	mv	a0,a7
1c009e94:	468040ef          	jal	ra,1c00e2fc <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c009e98:	b7dd                	j	1c009e7e <__pi_fs_read_cached+0x56>

1c009e9a <__pi_fs_read>:
{
1c009e9a:	7179                	addi	sp,sp,-48
1c009e9c:	d422                	sw	s0,40(sp)
1c009e9e:	d226                	sw	s1,36(sp)
1c009ea0:	d04a                	sw	s2,32(sp)
1c009ea2:	ca56                	sw	s5,20(sp)
1c009ea4:	c85a                	sw	s6,16(sp)
1c009ea6:	d606                	sw	ra,44(sp)
1c009ea8:	8b3e                	mv	s6,a5
1c009eaa:	ce4e                	sw	s3,28(sp)
1c009eac:	cc52                	sw	s4,24(sp)
1c009eae:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c009eb0:	47c1                	li	a5,16
{
1c009eb2:	892e                	mv	s2,a1
1c009eb4:	8432                	mv	s0,a2
1c009eb6:	84b6                	mv	s1,a3
1c009eb8:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c009eba:	06d7d163          	ble	a3,a5,1c009f1c <__pi_fs_read+0x82>
1c009ebe:	00b647b3          	xor	a5,a2,a1
1c009ec2:	f837b7b3          	p.bclr	a5,a5,28,3
1c009ec6:	ebb9                	bnez	a5,1c009f1c <__pi_fs_read+0x82>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c009ec8:	08800793          	li	a5,136
1c009ecc:	06d7d963          	ble	a3,a5,1c009f3e <__pi_fs_read+0xa4>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c009ed0:	411c                	lw	a5,0(a0)
1c009ed2:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c009ed6:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c009eda:	c39d                	beqz	a5,1c009f00 <__pi_fs_read+0x66>
        prefix_size = 4 - prefix_size;
1c009edc:	4991                	li	s3,4
1c009ede:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c009ee2:	8756                	mv	a4,s5
1c009ee4:	87da                	mv	a5,s6
1c009ee6:	86ce                	mv	a3,s3
1c009ee8:	8622                	mv	a2,s0
1c009eea:	85ca                	mv	a1,s2
1c009eec:	f3dff0ef          	jal	ra,1c009e28 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c009ef0:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c009ef4:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c009ef6:	eba5                	bnez	a5,1c009f66 <__pi_fs_read+0xcc>
        addr += prefix_size;
1c009ef8:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c009efa:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c009efc:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009f00:	000ba503          	lw	a0,0(s7)
    int block_size = size & ~0x7;
1c009f04:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c009f08:	875a                	mv	a4,s6
1c009f0a:	86d2                	mv	a3,s4
1c009f0c:	864a                	mv	a2,s2
1c009f0e:	85a2                	mv	a1,s0
1c009f10:	ab5ff0ef          	jal	ra,1c0099c4 <pi_flash_read_async>
    *pending = 1;
1c009f14:	4785                	li	a5,1
1c009f16:	00faa023          	sw	a5,0(s5)
    return block_size;
1c009f1a:	a0b1                	j	1c009f66 <__pi_fs_read+0xcc>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009f1c:	8622                	mv	a2,s0
}
1c009f1e:	5422                	lw	s0,40(sp)
1c009f20:	50b2                	lw	ra,44(sp)
1c009f22:	49f2                	lw	s3,28(sp)
1c009f24:	4a62                	lw	s4,24(sp)
1c009f26:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009f28:	87da                	mv	a5,s6
1c009f2a:	8756                	mv	a4,s5
}
1c009f2c:	4b42                	lw	s6,16(sp)
1c009f2e:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009f30:	86a6                	mv	a3,s1
1c009f32:	85ca                	mv	a1,s2
}
1c009f34:	5492                	lw	s1,36(sp)
1c009f36:	5902                	lw	s2,32(sp)
1c009f38:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c009f3a:	eefff06f          	j	1c009e28 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c009f3e:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c009f42:	f8b667e3          	bltu	a2,a1,1c009ed0 <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c009f46:	00c687b3          	add	a5,a3,a2
1c009f4a:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c009f4e:	f8e7f1e3          	bleu	a4,a5,1c009ed0 <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c009f52:	40b60433          	sub	s0,a2,a1
1c009f56:	0ac52583          	lw	a1,172(a0)
1c009f5a:	8636                	mv	a2,a3
1c009f5c:	854a                	mv	a0,s2
1c009f5e:	95a2                	add	a1,a1,s0
1c009f60:	39c040ef          	jal	ra,1c00e2fc <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c009f64:	8a26                	mv	s4,s1
}
1c009f66:	50b2                	lw	ra,44(sp)
1c009f68:	5422                	lw	s0,40(sp)
1c009f6a:	8552                	mv	a0,s4
1c009f6c:	5492                	lw	s1,36(sp)
1c009f6e:	5902                	lw	s2,32(sp)
1c009f70:	49f2                	lw	s3,28(sp)
1c009f72:	4a62                	lw	s4,24(sp)
1c009f74:	4ad2                	lw	s5,20(sp)
1c009f76:	4b42                	lw	s6,16(sp)
1c009f78:	4bb2                	lw	s7,12(sp)
1c009f7a:	6145                	addi	sp,sp,48
1c009f7c:	8082                	ret

1c009f7e <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c009f7e:	0a852683          	lw	a3,168(a0)
{
1c009f82:	7179                	addi	sp,sp,-48
1c009f84:	d422                	sw	s0,40(sp)
1c009f86:	d606                	sw	ra,44(sp)
1c009f88:	d226                	sw	s1,36(sp)
1c009f8a:	d04a                	sw	s2,32(sp)
1c009f8c:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c009f8e:	c602                	sw	zero,12(sp)
{
1c009f90:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c009f92:	ee99                	bnez	a3,1c009fb0 <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c009f94:	501c                	lw	a5,32(s0)
1c009f96:	0bc42703          	lw	a4,188(s0)
1c009f9a:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c009f9c:	5008                	lw	a0,32(s0)
1c009f9e:	aefff0ef          	jal	ra,1c009a8c <rt_event_enqueue>
}
1c009fa2:	50b2                	lw	ra,44(sp)
1c009fa4:	5422                	lw	s0,40(sp)
1c009fa6:	5492                	lw	s1,36(sp)
1c009fa8:	5902                	lw	s2,32(sp)
1c009faa:	49f2                	lw	s3,28(sp)
1c009fac:	6145                	addi	sp,sp,48
1c009fae:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c009fb0:	1c00a4b7          	lui	s1,0x1c00a
1c009fb4:	f7e48493          	addi	s1,s1,-130 # 1c009f7e <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c009fb8:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c009fbc:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c009fbe:	4d50                	lw	a2,28(a0)
1c009fc0:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c009fc4:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c009fc6:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c009fca:	4985                	li	s3,1
    int size = __pi_fs_read(
1c009fcc:	87ca                	mv	a5,s2
1c009fce:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c009fd2:	02050c23          	sb	zero,56(a0)
1c009fd6:	0078                	addi	a4,sp,12
1c009fd8:	ec3ff0ef          	jal	ra,1c009e9a <__pi_fs_read>
    file->pending_addr += size;
1c009fdc:	4c5c                	lw	a5,28(s0)
1c009fde:	97aa                	add	a5,a5,a0
1c009fe0:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c009fe2:	0a442783          	lw	a5,164(s0)
1c009fe6:	97aa                	add	a5,a5,a0
1c009fe8:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c009fec:	0a842783          	lw	a5,168(s0)
1c009ff0:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c009ff4:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c009ff6:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c009ffa:	f7c5                	bnez	a5,1c009fa2 <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c009ffc:	dd41                	beqz	a0,1c009f94 <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c009ffe:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c00a002:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c00a004:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c00a006:	05342623          	sw	s3,76(s0)
1c00a00a:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c00a00e:	854a                	mv	a0,s2
1c00a010:	b779                	j	1c009f9e <__pi_read_fs_try_read+0x20>

1c00a012 <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c00a012:	495c                	lw	a5,20(a0)
1c00a014:	4558                	lw	a4,12(a0)
{
1c00a016:	1101                	addi	sp,sp,-32
1c00a018:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c00a01a:	00c78833          	add	a6,a5,a2
1c00a01e:	01077463          	bleu	a6,a4,1c00a026 <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c00a022:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c00a026:	0ac52e23          	sw	a2,188(a0)
1c00a02a:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c00a02e:	495c                	lw	a5,20(a0)
1c00a030:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c00a032:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c00a036:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c00a038:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c00a03a:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c00a03c:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c00a040:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c00a042:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c00a044:	c632                	sw	a2,12(sp)
1c00a046:	f39ff0ef          	jal	ra,1c009f7e <__pi_read_fs_try_read>
}
1c00a04a:	4632                	lw	a2,12(sp)
1c00a04c:	40f2                	lw	ra,28(sp)
1c00a04e:	8532                	mv	a0,a2
1c00a050:	6105                	addi	sp,sp,32
1c00a052:	8082                	ret

1c00a054 <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c00a054:	1c01c7b7          	lui	a5,0x1c01c
1c00a058:	3407ae23          	sw	zero,860(a5) # 1c01c35c <bsp_fs_data>
  return 0;
}
1c00a05c:	4501                	li	a0,0
1c00a05e:	8082                	ret

1c00a060 <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c00a060:	8082                	ret

1c00a062 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a062:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c00a066:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00a06a:	00052023          	sw	zero,0(a0)
1c00a06e:	01c00713          	li	a4,28
  if (sched->first) {
1c00a072:	c619                	beqz	a2,1c00a080 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c00a074:	435c                	lw	a5,4(a4)
1c00a076:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00a078:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c00a07a:	30069073          	csrw	mstatus,a3
}
1c00a07e:	8082                	ret
    sched->first = event;
1c00a080:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00a084:	bfd5                	j	1c00a078 <rt_event_enqueue+0x16>

1c00a086 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c00a086:	4948                	lw	a0,20(a0)
1c00a088:	1830106f          	j	1c00ba0a <semihost_seek>

1c00a08c <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c00a08c:	7179                	addi	sp,sp,-48
1c00a08e:	d422                	sw	s0,40(sp)
1c00a090:	d226                	sw	s1,36(sp)
1c00a092:	d04a                	sw	s2,32(sp)
1c00a094:	ce4e                	sw	s3,28(sp)
1c00a096:	cc52                	sw	s4,24(sp)
1c00a098:	ca56                	sw	s5,20(sp)
1c00a09a:	c85a                	sw	s6,16(sp)
1c00a09c:	c65e                	sw	s7,12(sp)
1c00a09e:	c462                	sw	s8,8(sp)
1c00a0a0:	d606                	sw	ra,44(sp)
1c00a0a2:	89aa                	mv	s3,a0
1c00a0a4:	8a2e                	mv	s4,a1
1c00a0a6:	84b2                	mv	s1,a2
1c00a0a8:	8b36                	mv	s6,a3
1c00a0aa:	8bba                	mv	s7,a4
1c00a0ac:	843e                	mv	s0,a5
1c00a0ae:	8c42                	mv	s8,a6
1c00a0b0:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c00a0b2:	4901                	li	s2,0
1c00a0b4:	03696263          	bltu	s2,s6,1c00a0d8 <__pi_host_fs_copy_2d_async+0x4c>
1c00a0b8:	8556                	mv	a0,s5
1c00a0ba:	fa9ff0ef          	jal	ra,1c00a062 <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c00a0be:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c00a0c0:	50b2                	lw	ra,44(sp)
1c00a0c2:	5422                	lw	s0,40(sp)
1c00a0c4:	5492                	lw	s1,36(sp)
1c00a0c6:	5902                	lw	s2,32(sp)
1c00a0c8:	49f2                	lw	s3,28(sp)
1c00a0ca:	4a62                	lw	s4,24(sp)
1c00a0cc:	4ad2                	lw	s5,20(sp)
1c00a0ce:	4b42                	lw	s6,16(sp)
1c00a0d0:	4bb2                	lw	s7,12(sp)
1c00a0d2:	4c22                	lw	s8,8(sp)
1c00a0d4:	6145                	addi	sp,sp,48
1c00a0d6:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c00a0d8:	85d2                	mv	a1,s4
1c00a0da:	854e                	mv	a0,s3
1c00a0dc:	05645433          	p.minu	s0,s0,s6
1c00a0e0:	fa7ff0ef          	jal	ra,1c00a086 <__pi_host_fs_seek>
1c00a0e4:	e10d                	bnez	a0,1c00a106 <__pi_host_fs_copy_2d_async+0x7a>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c00a0e6:	8622                	mv	a2,s0
1c00a0e8:	85a6                	mv	a1,s1
1c00a0ea:	854e                	mv	a0,s3
    if (ext2loc)
1c00a0ec:	000c0a63          	beqz	s8,1c00a100 <__pi_host_fs_copy_2d_async+0x74>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c00a0f0:	86fff0ef          	jal	ra,1c00995e <pi_fs_read>
1c00a0f4:	00851963          	bne	a0,s0,1c00a106 <__pi_host_fs_copy_2d_async+0x7a>
    buffer = ((char *)buffer) + length;
1c00a0f8:	94a2                	add	s1,s1,s0
    index += stride;
1c00a0fa:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c00a0fc:	9922                	add	s2,s2,s0
1c00a0fe:	bf5d                	j	1c00a0b4 <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c00a100:	891ff0ef          	jal	ra,1c009990 <pi_fs_write>
1c00a104:	bfc5                	j	1c00a0f4 <__pi_host_fs_copy_2d_async+0x68>
1c00a106:	8556                	mv	a0,s5
1c00a108:	f5bff0ef          	jal	ra,1c00a062 <rt_event_enqueue>
  return -1;
1c00a10c:	557d                	li	a0,-1
1c00a10e:	bf4d                	j	1c00a0c0 <__pi_host_fs_copy_2d_async+0x34>

1c00a110 <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c00a110:	4948                	lw	a0,20(a0)
{
1c00a112:	1101                	addi	sp,sp,-32
1c00a114:	ce06                	sw	ra,28(sp)
1c00a116:	cc22                	sw	s0,24(sp)
1c00a118:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c00a11a:	c636                	sw	a3,12(sp)
{
1c00a11c:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c00a11e:	0cf010ef          	jal	ra,1c00b9ec <semihost_write>
1c00a122:	46b2                	lw	a3,12(sp)
1c00a124:	842a                	mv	s0,a0
1c00a126:	8536                	mv	a0,a3
1c00a128:	f3bff0ef          	jal	ra,1c00a062 <rt_event_enqueue>
}
1c00a12c:	40848533          	sub	a0,s1,s0
1c00a130:	40f2                	lw	ra,28(sp)
1c00a132:	4462                	lw	s0,24(sp)
1c00a134:	44d2                	lw	s1,20(sp)
1c00a136:	6105                	addi	sp,sp,32
1c00a138:	8082                	ret

1c00a13a <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c00a13a:	4948                	lw	a0,20(a0)
{
1c00a13c:	1101                	addi	sp,sp,-32
1c00a13e:	ce06                	sw	ra,28(sp)
1c00a140:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00a142:	c636                	sw	a3,12(sp)
{
1c00a144:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c00a146:	089010ef          	jal	ra,1c00b9ce <semihost_read>
  task->implem.data[0] = result;
1c00a14a:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00a14c:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c00a14e:	de80                	sw	s0,56(a3)
1c00a150:	8536                	mv	a0,a3
1c00a152:	f11ff0ef          	jal	ra,1c00a062 <rt_event_enqueue>
}
1c00a156:	8522                	mv	a0,s0
1c00a158:	40f2                	lw	ra,28(sp)
1c00a15a:	4462                	lw	s0,24(sp)
1c00a15c:	6105                	addi	sp,sp,32
1c00a15e:	8082                	ret

1c00a160 <__pi_host_fs_copy_async>:
{
1c00a160:	1101                	addi	sp,sp,-32
1c00a162:	cc22                	sw	s0,24(sp)
1c00a164:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c00a166:	c636                	sw	a3,12(sp)
{
1c00a168:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c00a16a:	c43a                	sw	a4,8(sp)
{
1c00a16c:	ce06                	sw	ra,28(sp)
1c00a16e:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c00a170:	c23e                	sw	a5,4(sp)
1c00a172:	f15ff0ef          	jal	ra,1c00a086 <__pi_host_fs_seek>
1c00a176:	4632                	lw	a2,12(sp)
1c00a178:	4692                	lw	a3,4(sp)
1c00a17a:	4722                	lw	a4,8(sp)
1c00a17c:	e105                	bnez	a0,1c00a19c <__pi_host_fs_copy_async+0x3c>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c00a17e:	85a6                	mv	a1,s1
1c00a180:	8522                	mv	a0,s0
  if (ext2loc)
1c00a182:	c719                	beqz	a4,1c00a190 <__pi_host_fs_copy_async+0x30>
}
1c00a184:	4462                	lw	s0,24(sp)
1c00a186:	40f2                	lw	ra,28(sp)
1c00a188:	44d2                	lw	s1,20(sp)
1c00a18a:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c00a18c:	fafff06f          	j	1c00a13a <__pi_host_fs_read_async>
}
1c00a190:	4462                	lw	s0,24(sp)
1c00a192:	40f2                	lw	ra,28(sp)
1c00a194:	44d2                	lw	s1,20(sp)
1c00a196:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c00a198:	f79ff06f          	j	1c00a110 <__pi_host_fs_write_async>
}
1c00a19c:	40f2                	lw	ra,28(sp)
1c00a19e:	4462                	lw	s0,24(sp)
1c00a1a0:	44d2                	lw	s1,20(sp)
1c00a1a2:	557d                	li	a0,-1
1c00a1a4:	6105                	addi	sp,sp,32
1c00a1a6:	8082                	ret

1c00a1a8 <__pi_host_fs_direct_read_async>:
1c00a1a8:	f93ff06f          	j	1c00a13a <__pi_host_fs_read_async>

1c00a1ac <__pi_host_fs_close>:
{
1c00a1ac:	1141                	addi	sp,sp,-16
1c00a1ae:	c422                	sw	s0,8(sp)
1c00a1b0:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c00a1b2:	4948                	lw	a0,20(a0)
{
1c00a1b4:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c00a1b6:	011010ef          	jal	ra,1c00b9c6 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00a1ba:	8522                	mv	a0,s0
}
1c00a1bc:	4422                	lw	s0,8(sp)
1c00a1be:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00a1c0:	45e1                	li	a1,24
}
1c00a1c2:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00a1c4:	35a0206f          	j	1c00c51e <pi_l2_free>

1c00a1c8 <__pi_host_fs_open>:
{
1c00a1c8:	1101                	addi	sp,sp,-32
1c00a1ca:	ca26                	sw	s1,20(sp)
1c00a1cc:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00a1ce:	4561                	li	a0,24
{
1c00a1d0:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00a1d2:	c632                	sw	a2,12(sp)
{
1c00a1d4:	ce06                	sw	ra,28(sp)
1c00a1d6:	cc22                	sw	s0,24(sp)
1c00a1d8:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00a1da:	336020ef          	jal	ra,1c00c510 <pi_l2_malloc>
  if (file == NULL) goto error;
1c00a1de:	4632                	lw	a2,12(sp)
1c00a1e0:	e909                	bnez	a0,1c00a1f2 <__pi_host_fs_open+0x2a>
  return NULL;
1c00a1e2:	4401                	li	s0,0
}
1c00a1e4:	8522                	mv	a0,s0
1c00a1e6:	40f2                	lw	ra,28(sp)
1c00a1e8:	4462                	lw	s0,24(sp)
1c00a1ea:	44d2                	lw	s1,20(sp)
1c00a1ec:	4942                	lw	s2,16(sp)
1c00a1ee:	6105                	addi	sp,sp,32
1c00a1f0:	8082                	ret
  file->header.fs = device;
1c00a1f2:	c104                	sw	s1,0(a0)
1c00a1f4:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c00a1f6:	4599                	li	a1,6
1c00a1f8:	00162663          	p.beqimm	a2,1,1c00a204 <__pi_host_fs_open+0x3c>
1c00a1fc:	45a1                	li	a1,8
1c00a1fe:	00262363          	p.beqimm	a2,2,1c00a204 <__pi_host_fs_open+0x3c>
1c00a202:	4581                	li	a1,0
1c00a204:	854a                	mv	a0,s2
1c00a206:	794010ef          	jal	ra,1c00b99a <semihost_open>
1c00a20a:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c00a20c:	fdf52be3          	p.beqimm	a0,-1,1c00a1e2 <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c00a210:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c00a212:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c00a214:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c00a216:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c00a218:	1c01c7b7          	lui	a5,0x1c01c
1c00a21c:	35c78793          	addi	a5,a5,860 # 1c01c35c <bsp_fs_data>
1c00a220:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c00a222:	b7c9                	j	1c00a1e4 <__pi_host_fs_open+0x1c>

1c00a224 <__rt_event_enqueue>:
  if (sched->first) {
1c00a224:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00a228:	00052023          	sw	zero,0(a0)
1c00a22c:	01c00713          	li	a4,28
  if (sched->first) {
1c00a230:	c689                	beqz	a3,1c00a23a <__rt_event_enqueue+0x16>
    sched->last->next = event;
1c00a232:	435c                	lw	a5,4(a4)
1c00a234:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00a236:	c348                	sw	a0,4(a4)
}
1c00a238:	8082                	ret
    sched->first = event;
1c00a23a:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00a23e:	bfe5                	j	1c00a236 <__rt_event_enqueue+0x12>

1c00a240 <hyperflash_ioctl>:



static int32_t hyperflash_ioctl(struct pi_device *device, uint32_t cmd, void *arg)
{
  switch (cmd)
1c00a240:	e589                	bnez	a1,1c00a24a <hyperflash_ioctl+0xa>
  {
    case PI_FLASH_IOCTL_INFO:
    {
      struct pi_flash_info *flash_info = (struct pi_flash_info *)arg;
      flash_info->sector_size = 1<<18;
1c00a242:	000407b7          	lui	a5,0x40
1c00a246:	c21c                	sw	a5,0(a2)
      // TODO find a way to know what is on the flash, as they may be a boot binary
      flash_info->flash_start = flash_info->sector_size;
1c00a248:	c25c                	sw	a5,4(a2)
    }
  }
  return 0;
}
1c00a24a:	4501                	li	a0,0
1c00a24c:	8082                	ret

1c00a24e <hyperflash_stall_task>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a24e:	30047373          	csrrci	t1,mstatus,8

    restore_irq(irq);
    return 1;
  }
#else
  if (hyperflash->pending_task != NULL)
1c00a252:	01852e03          	lw	t3,24(a0)
1c00a256:	020e0763          	beqz	t3,1c00a284 <hyperflash_stall_task+0x36>
  {
    task->implem.data[0] = id;
1c00a25a:	dd90                	sw	a2,56(a1)
    task->implem.data[1] = arg0;
1c00a25c:	ddd4                	sw	a3,60(a1)
    task->implem.data[2] = arg1;
1c00a25e:	c1b8                	sw	a4,64(a1)
    task->implem.data[3] = arg2;
1c00a260:	c1fc                	sw	a5,68(a1)
    task->implem.data[4] = arg3;
1c00a262:	0505a423          	sw	a6,72(a1)
    task->implem.data[5] = arg4;
1c00a266:	0515a623          	sw	a7,76(a1)

    if (hyperflash->waiting_first)
1c00a26a:	491c                	lw	a5,16(a0)
1c00a26c:	cb91                	beqz	a5,1c00a280 <hyperflash_stall_task+0x32>
      hyperflash->waiting_last->implem.next = task;
1c00a26e:	495c                	lw	a5,20(a0)
1c00a270:	cfcc                	sw	a1,28(a5)
    else
      hyperflash->waiting_first = task;

    hyperflash->waiting_last = task;
1c00a272:	c94c                	sw	a1,20(a0)
    task->implem.next = NULL;
1c00a274:	0005ae23          	sw	zero,28(a1)
  __builtin_pulp_spr_write(reg, val);
1c00a278:	30031073          	csrw	mstatus,t1

    restore_irq(irq);
    return 1;
1c00a27c:	4505                	li	a0,1
1c00a27e:	8082                	ret
      hyperflash->waiting_first = task;
1c00a280:	c90c                	sw	a1,16(a0)
1c00a282:	bfc5                	j	1c00a272 <hyperflash_stall_task+0x24>
  }
#endif  /* PMSIS_DRIVERS */

  hyperflash->pending_task = task;
1c00a284:	cd0c                	sw	a1,24(a0)
1c00a286:	30031073          	csrw	mstatus,t1

  restore_irq(irq);
  return 0;
1c00a28a:	4501                	li	a0,0
}
1c00a28c:	8082                	ret

1c00a28e <hyperflash_read_2d_async>:
{
1c00a28e:	1101                	addi	sp,sp,-32
1c00a290:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a292:	4500                	lw	s0,8(a0)
{
1c00a294:	ca26                	sw	s1,20(sp)
1c00a296:	84ae                	mv	s1,a1
1c00a298:	c84a                	sw	s2,16(sp)
1c00a29a:	c64e                	sw	s3,12(sp)
1c00a29c:	c452                	sw	s4,8(sp)
1c00a29e:	c256                	sw	s5,4(sp)
1c00a2a0:	c05a                	sw	s6,0(sp)
1c00a2a2:	8932                	mv	s2,a2
1c00a2a4:	8b2a                	mv	s6,a0
1c00a2a6:	89b6                	mv	s3,a3
1c00a2a8:	8a3a                	mv	s4,a4
1c00a2aa:	8abe                	mv	s5,a5
1c00a2ac:	85c2                	mv	a1,a6
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c00a2ae:	88be                	mv	a7,a5
1c00a2b0:	883a                	mv	a6,a4
1c00a2b2:	87b6                	mv	a5,a3
1c00a2b4:	8732                	mv	a4,a2
1c00a2b6:	86a6                	mv	a3,s1
1c00a2b8:	4619                	li	a2,6
1c00a2ba:	8522                	mv	a0,s0
{
1c00a2bc:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c00a2be:	f91ff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a2c2:	e129                	bnez	a0,1c00a304 <hyperflash_read_2d_async+0x76>
  task->arg[0] = (uint32_t)callback;
1c00a2c4:	1c00a7b7          	lui	a5,0x1c00a
1c00a2c8:	52878793          	addi	a5,a5,1320 # 1c00a528 <hyperflash_handle_pending_task>
  task->done = 0;
1c00a2cc:	02040e23          	sb	zero,60(s0)
1c00a2d0:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a2d2:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a2d4:	03642823          	sw	s6,48(s0)
  task->implem.keep = 1;
1c00a2d8:	c83c                	sw	a5,80(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a2da:	04042023          	sw	zero,64(s0)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a2de:	02840813          	addi	a6,s0,40
1c00a2e2:	8522                	mv	a0,s0
}
1c00a2e4:	4462                	lw	s0,24(sp)
1c00a2e6:	40f2                	lw	ra,28(sp)
1c00a2e8:	4b02                	lw	s6,0(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a2ea:	87d6                	mv	a5,s5
1c00a2ec:	8752                	mv	a4,s4
}
1c00a2ee:	4a92                	lw	s5,4(sp)
1c00a2f0:	4a22                	lw	s4,8(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a2f2:	86ce                	mv	a3,s3
1c00a2f4:	864a                	mv	a2,s2
}
1c00a2f6:	49b2                	lw	s3,12(sp)
1c00a2f8:	4942                	lw	s2,16(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a2fa:	85a6                	mv	a1,s1
}
1c00a2fc:	44d2                	lw	s1,20(sp)
1c00a2fe:	6105                	addi	sp,sp,32
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a300:	1430306f          	j	1c00dc42 <pi_hyper_read_2d_async>
}
1c00a304:	40f2                	lw	ra,28(sp)
1c00a306:	4462                	lw	s0,24(sp)
1c00a308:	44d2                	lw	s1,20(sp)
1c00a30a:	4942                	lw	s2,16(sp)
1c00a30c:	49b2                	lw	s3,12(sp)
1c00a30e:	4a22                	lw	s4,8(sp)
1c00a310:	4a92                	lw	s5,4(sp)
1c00a312:	4b02                	lw	s6,0(sp)
1c00a314:	6105                	addi	sp,sp,32
1c00a316:	8082                	ret

1c00a318 <hyperflash_copy_2d_async>:



static int hyperflash_copy_2d_async(struct pi_device *device, uint32_t flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  if (!ext2loc)
1c00a318:	00080b63          	beqz	a6,1c00a32e <hyperflash_copy_2d_async+0x16>
{
1c00a31c:	1141                	addi	sp,sp,-16
1c00a31e:	8846                	mv	a6,a7
1c00a320:	c606                	sw	ra,12(sp)
    return -1;

  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c00a322:	f6dff0ef          	jal	ra,1c00a28e <hyperflash_read_2d_async>

  return 0;
}
1c00a326:	40b2                	lw	ra,12(sp)
  return 0;
1c00a328:	4501                	li	a0,0
}
1c00a32a:	0141                	addi	sp,sp,16
1c00a32c:	8082                	ret
    return -1;
1c00a32e:	557d                	li	a0,-1
}
1c00a330:	8082                	ret

1c00a332 <hyperflash_set_reg_exec>:
  hyperflash->udma_buffer[0] = value;
1c00a332:	00c51623          	sh	a2,12(a0)
  pi_hyper_write(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 2);
1c00a336:	4689                	li	a3,2
1c00a338:	00c50613          	addi	a2,a0,12
1c00a33c:	55e0306f          	j	1c00d89a <pi_hyper_write>

1c00a340 <hyperflash_erase_sector_async>:
{
1c00a340:	1101                	addi	sp,sp,-32
1c00a342:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a344:	4500                	lw	s0,8(a0)
{
1c00a346:	c64e                	sw	s3,12(sp)
1c00a348:	89ae                	mv	s3,a1
1c00a34a:	c84a                	sw	s2,16(sp)
1c00a34c:	85b2                	mv	a1,a2
1c00a34e:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c00a350:	4881                	li	a7,0
1c00a352:	4801                	li	a6,0
1c00a354:	4781                	li	a5,0
1c00a356:	4701                	li	a4,0
1c00a358:	86ce                	mv	a3,s3
1c00a35a:	4609                	li	a2,2
1c00a35c:	8522                	mv	a0,s0
{
1c00a35e:	ce06                	sw	ra,28(sp)
1c00a360:	ca26                	sw	s1,20(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c00a362:	eedff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a366:	e549                	bnez	a0,1c00a3f0 <hyperflash_erase_sector_async+0xb0>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a368:	6485                	lui	s1,0x1
1c00a36a:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00a36e:	8522                	mv	a0,s0
1c00a370:	0aa00613          	li	a2,170
1c00a374:	fbfff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00a378:	8522                	mv	a0,s0
1c00a37a:	05500613          	li	a2,85
1c00a37e:	55400593          	li	a1,1364
1c00a382:	fb1ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c00a386:	aaa48593          	addi	a1,s1,-1366
1c00a38a:	8522                	mv	a0,s0
1c00a38c:	08000613          	li	a2,128
1c00a390:	fa3ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a394:	aaa48593          	addi	a1,s1,-1366
1c00a398:	8522                	mv	a0,s0
1c00a39a:	0aa00613          	li	a2,170
1c00a39e:	f95ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00a3a2:	8522                	mv	a0,s0
1c00a3a4:	05500613          	li	a2,85
1c00a3a8:	55400593          	li	a1,1364
1c00a3ac:	f87ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, addr, 0x30);
1c00a3b0:	85ce                	mv	a1,s3
1c00a3b2:	8522                	mv	a0,s0
1c00a3b4:	03000613          	li	a2,48
1c00a3b8:	f7bff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c00a3bc:	1c00b7b7          	lui	a5,0x1c00b
1c00a3c0:	b6478793          	addi	a5,a5,-1180 # 1c00ab64 <hyperflash_check_erase>
1c00a3c4:	02040e23          	sb	zero,60(s0)
1c00a3c8:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a3ca:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a3cc:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a3d0:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00a3d4:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c00a3d6:	02840513          	addi	a0,s0,40
}
1c00a3da:	4462                	lw	s0,24(sp)
1c00a3dc:	40f2                	lw	ra,28(sp)
1c00a3de:	44d2                	lw	s1,20(sp)
1c00a3e0:	4942                	lw	s2,16(sp)
1c00a3e2:	49b2                	lw	s3,12(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c00a3e4:	6589                	lui	a1,0x2
1c00a3e6:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
}
1c00a3ea:	6105                	addi	sp,sp,32
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c00a3ec:	73f0106f          	j	1c00c32a <pi_task_push_delayed_us>
}
1c00a3f0:	40f2                	lw	ra,28(sp)
1c00a3f2:	4462                	lw	s0,24(sp)
1c00a3f4:	44d2                	lw	s1,20(sp)
1c00a3f6:	4942                	lw	s2,16(sp)
1c00a3f8:	49b2                	lw	s3,12(sp)
1c00a3fa:	6105                	addi	sp,sp,32
1c00a3fc:	8082                	ret

1c00a3fe <hyperflash_erase_chip_async>:
{
1c00a3fe:	1141                	addi	sp,sp,-16
1c00a400:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a402:	4500                	lw	s0,8(a0)
{
1c00a404:	c04a                	sw	s2,0(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c00a406:	4881                	li	a7,0
{
1c00a408:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c00a40a:	4801                	li	a6,0
1c00a40c:	4781                	li	a5,0
1c00a40e:	4701                	li	a4,0
1c00a410:	4681                	li	a3,0
1c00a412:	4605                	li	a2,1
1c00a414:	8522                	mv	a0,s0
{
1c00a416:	c606                	sw	ra,12(sp)
1c00a418:	c226                	sw	s1,4(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c00a41a:	e35ff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a41e:	e541                	bnez	a0,1c00a4a6 <hyperflash_erase_chip_async+0xa8>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a420:	6485                	lui	s1,0x1
1c00a422:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00a426:	8522                	mv	a0,s0
1c00a428:	0aa00613          	li	a2,170
1c00a42c:	f07ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00a430:	8522                	mv	a0,s0
1c00a432:	05500613          	li	a2,85
1c00a436:	55400593          	li	a1,1364
1c00a43a:	ef9ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c00a43e:	aaa48593          	addi	a1,s1,-1366
1c00a442:	8522                	mv	a0,s0
1c00a444:	08000613          	li	a2,128
1c00a448:	eebff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a44c:	aaa48593          	addi	a1,s1,-1366
1c00a450:	8522                	mv	a0,s0
1c00a452:	0aa00613          	li	a2,170
1c00a456:	eddff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00a45a:	8522                	mv	a0,s0
1c00a45c:	05500613          	li	a2,85
1c00a460:	55400593          	li	a1,1364
1c00a464:	ecfff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x10);
1c00a468:	aaa48593          	addi	a1,s1,-1366
1c00a46c:	8522                	mv	a0,s0
1c00a46e:	4641                	li	a2,16
1c00a470:	ec3ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c00a474:	1c00b7b7          	lui	a5,0x1c00b
1c00a478:	b6478793          	addi	a5,a5,-1180 # 1c00ab64 <hyperflash_check_erase>
1c00a47c:	02040e23          	sb	zero,60(s0)
1c00a480:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a482:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a484:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a488:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00a48c:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a48e:	02840513          	addi	a0,s0,40
}
1c00a492:	4422                	lw	s0,8(sp)
1c00a494:	40b2                	lw	ra,12(sp)
1c00a496:	4492                	lw	s1,4(sp)
1c00a498:	4902                	lw	s2,0(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a49a:	65e1                	lui	a1,0x18
1c00a49c:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c00a4a0:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00a4a2:	6890106f          	j	1c00c32a <pi_task_push_delayed_us>
}
1c00a4a6:	40b2                	lw	ra,12(sp)
1c00a4a8:	4422                	lw	s0,8(sp)
1c00a4aa:	4492                	lw	s1,4(sp)
1c00a4ac:	4902                	lw	s2,0(sp)
1c00a4ae:	0141                	addi	sp,sp,16
1c00a4b0:	8082                	ret

1c00a4b2 <hyperflash_read_async>:
{
1c00a4b2:	1101                	addi	sp,sp,-32
1c00a4b4:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a4b6:	4500                	lw	s0,8(a0)
{
1c00a4b8:	ca26                	sw	s1,20(sp)
1c00a4ba:	84ae                	mv	s1,a1
1c00a4bc:	c84a                	sw	s2,16(sp)
1c00a4be:	c64e                	sw	s3,12(sp)
1c00a4c0:	c452                	sw	s4,8(sp)
1c00a4c2:	8932                	mv	s2,a2
1c00a4c4:	8a2a                	mv	s4,a0
1c00a4c6:	89b6                	mv	s3,a3
1c00a4c8:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c00a4ca:	87b6                	mv	a5,a3
1c00a4cc:	8732                	mv	a4,a2
1c00a4ce:	4881                	li	a7,0
1c00a4d0:	4801                	li	a6,0
1c00a4d2:	86a6                	mv	a3,s1
1c00a4d4:	4615                	li	a2,5
1c00a4d6:	8522                	mv	a0,s0
{
1c00a4d8:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c00a4da:	d75ff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a4de:	ed0d                	bnez	a0,1c00a518 <hyperflash_read_async+0x66>
  task->arg[0] = (uint32_t)callback;
1c00a4e0:	1c00a7b7          	lui	a5,0x1c00a
1c00a4e4:	52878793          	addi	a5,a5,1320 # 1c00a528 <hyperflash_handle_pending_task>
1c00a4e8:	02040e23          	sb	zero,60(s0)
1c00a4ec:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a4ee:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00a4f0:	03442823          	sw	s4,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a4f4:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00a4f8:	c83c                	sw	a5,80(s0)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a4fa:	02840713          	addi	a4,s0,40
1c00a4fe:	8522                	mv	a0,s0
}
1c00a500:	4462                	lw	s0,24(sp)
1c00a502:	40f2                	lw	ra,28(sp)
1c00a504:	4a22                	lw	s4,8(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a506:	86ce                	mv	a3,s3
1c00a508:	864a                	mv	a2,s2
}
1c00a50a:	49b2                	lw	s3,12(sp)
1c00a50c:	4942                	lw	s2,16(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a50e:	85a6                	mv	a1,s1
}
1c00a510:	44d2                	lw	s1,20(sp)
1c00a512:	6105                	addi	sp,sp,32
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c00a514:	3360306f          	j	1c00d84a <pi_hyper_read_async>
}
1c00a518:	40f2                	lw	ra,28(sp)
1c00a51a:	4462                	lw	s0,24(sp)
1c00a51c:	44d2                	lw	s1,20(sp)
1c00a51e:	4942                	lw	s2,16(sp)
1c00a520:	49b2                	lw	s3,12(sp)
1c00a522:	4a22                	lw	s4,8(sp)
1c00a524:	6105                	addi	sp,sp,32
1c00a526:	8082                	ret

1c00a528 <hyperflash_handle_pending_task>:
{
1c00a528:	1101                	addi	sp,sp,-32
1c00a52a:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a52c:	4504                	lw	s1,8(a0)
{
1c00a52e:	cc22                	sw	s0,24(sp)
1c00a530:	842a                	mv	s0,a0
1c00a532:	ce06                	sw	ra,28(sp)
1c00a534:	c84a                	sw	s2,16(sp)
1c00a536:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a538:	30047973          	csrrci	s2,mstatus,8
  pi_task_enqueue(hyperflash->pending_task);
1c00a53c:	4c88                	lw	a0,24(s1)
1c00a53e:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c00a542:	ce3ff0ef          	jal	ra,1c00a224 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c00a546:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->waiting_first;
1c00a54a:	4898                	lw	a4,16(s1)
  hyperflash->pending_task = NULL;
1c00a54c:	0004ac23          	sw	zero,24(s1)
  if (task)
1c00a550:	c319                	beqz	a4,1c00a556 <hyperflash_handle_pending_task+0x2e>
    hyperflash->waiting_first = task->implem.next;
1c00a552:	4f5c                	lw	a5,28(a4)
1c00a554:	c89c                	sw	a5,16(s1)
1c00a556:	30091073          	csrw	mstatus,s2
  if (task)
1c00a55a:	c379                	beqz	a4,1c00a620 <hyperflash_handle_pending_task+0xf8>
    if (task->implem.data[0] == STALL_TASK_PROGRAM)
1c00a55c:	5f1c                	lw	a5,56(a4)
1c00a55e:	ef81                	bnez	a5,1c00a576 <hyperflash_handle_pending_task+0x4e>
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a560:	8522                	mv	a0,s0
}
1c00a562:	4462                	lw	s0,24(sp)
1c00a564:	40f2                	lw	ra,28(sp)
1c00a566:	44d2                	lw	s1,20(sp)
1c00a568:	4942                	lw	s2,16(sp)
1c00a56a:	49b2                	lw	s3,12(sp)
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a56c:	4374                	lw	a3,68(a4)
1c00a56e:	4330                	lw	a2,64(a4)
1c00a570:	5f4c                	lw	a1,60(a4)
}
1c00a572:	6105                	addi	sp,sp,32
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a574:	a40d                	j	1c00a796 <hyperflash_program_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_CHIP)
1c00a576:	0017bc63          	p.bneimm	a5,1,1c00a58e <hyperflash_handle_pending_task+0x66>
      hyperflash_erase_chip_async(device, task);
1c00a57a:	8522                	mv	a0,s0
}
1c00a57c:	4462                	lw	s0,24(sp)
1c00a57e:	40f2                	lw	ra,28(sp)
1c00a580:	44d2                	lw	s1,20(sp)
1c00a582:	4942                	lw	s2,16(sp)
1c00a584:	49b2                	lw	s3,12(sp)
      hyperflash_erase_chip_async(device, task);
1c00a586:	85ba                	mv	a1,a4
}
1c00a588:	6105                	addi	sp,sp,32
      hyperflash_erase_chip_async(device, task);
1c00a58a:	e75ff06f          	j	1c00a3fe <hyperflash_erase_chip_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_SECTOR)
1c00a58e:	0027bd63          	p.bneimm	a5,2,1c00a5a8 <hyperflash_handle_pending_task+0x80>
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c00a592:	8522                	mv	a0,s0
}
1c00a594:	4462                	lw	s0,24(sp)
1c00a596:	40f2                	lw	ra,28(sp)
1c00a598:	44d2                	lw	s1,20(sp)
1c00a59a:	4942                	lw	s2,16(sp)
1c00a59c:	49b2                	lw	s3,12(sp)
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c00a59e:	5f4c                	lw	a1,60(a4)
1c00a5a0:	863a                	mv	a2,a4
}
1c00a5a2:	6105                	addi	sp,sp,32
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c00a5a4:	d9dff06f          	j	1c00a340 <hyperflash_erase_sector_async>
    else if (task->implem.data[0] == STALL_TASK_REG_SET)
1c00a5a8:	0037bd63          	p.bneimm	a5,3,1c00a5c2 <hyperflash_handle_pending_task+0x9a>
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5ac:	8522                	mv	a0,s0
}
1c00a5ae:	4462                	lw	s0,24(sp)
1c00a5b0:	40f2                	lw	ra,28(sp)
1c00a5b2:	44d2                	lw	s1,20(sp)
1c00a5b4:	4942                	lw	s2,16(sp)
1c00a5b6:	49b2                	lw	s3,12(sp)
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5b8:	4330                	lw	a2,64(a4)
1c00a5ba:	5f4c                	lw	a1,60(a4)
1c00a5bc:	86ba                	mv	a3,a4
}
1c00a5be:	6105                	addi	sp,sp,32
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5c0:	a0f9                	j	1c00a68e <hyperflash_reg_set_async>
    else if (task->implem.data[0] == STALL_TASK_REG_GET)
1c00a5c2:	0047bd63          	p.bneimm	a5,4,1c00a5dc <hyperflash_handle_pending_task+0xb4>
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5c6:	8522                	mv	a0,s0
}
1c00a5c8:	4462                	lw	s0,24(sp)
1c00a5ca:	40f2                	lw	ra,28(sp)
1c00a5cc:	44d2                	lw	s1,20(sp)
1c00a5ce:	4942                	lw	s2,16(sp)
1c00a5d0:	49b2                	lw	s3,12(sp)
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5d2:	4330                	lw	a2,64(a4)
1c00a5d4:	5f4c                	lw	a1,60(a4)
1c00a5d6:	86ba                	mv	a3,a4
}
1c00a5d8:	6105                	addi	sp,sp,32
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00a5da:	a891                	j	1c00a62e <hyperflash_reg_get_async>
    else if (task->implem.data[0] == STALL_TASK_READ)
1c00a5dc:	0057be63          	p.bneimm	a5,5,1c00a5f8 <hyperflash_handle_pending_task+0xd0>
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a5e0:	8522                	mv	a0,s0
}
1c00a5e2:	4462                	lw	s0,24(sp)
1c00a5e4:	40f2                	lw	ra,28(sp)
1c00a5e6:	44d2                	lw	s1,20(sp)
1c00a5e8:	4942                	lw	s2,16(sp)
1c00a5ea:	49b2                	lw	s3,12(sp)
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a5ec:	4374                	lw	a3,68(a4)
1c00a5ee:	4330                	lw	a2,64(a4)
1c00a5f0:	5f4c                	lw	a1,60(a4)
}
1c00a5f2:	6105                	addi	sp,sp,32
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00a5f4:	ebfff06f          	j	1c00a4b2 <hyperflash_read_async>
    else if (task->implem.data[0] == STALL_TASK_READ_2D)
1c00a5f8:	0267b463          	p.bneimm	a5,6,1c00a620 <hyperflash_handle_pending_task+0xf8>
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00a5fc:	883a                	mv	a6,a4
1c00a5fe:	8522                	mv	a0,s0
}
1c00a600:	4462                	lw	s0,24(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00a602:	477c                	lw	a5,76(a4)
}
1c00a604:	40f2                	lw	ra,28(sp)
1c00a606:	44d2                	lw	s1,20(sp)
1c00a608:	4942                	lw	s2,16(sp)
1c00a60a:	49b2                	lw	s3,12(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00a60c:	4738                	lw	a4,72(a4)
1c00a60e:	04482683          	lw	a3,68(a6)
1c00a612:	04082603          	lw	a2,64(a6)
1c00a616:	03c82583          	lw	a1,60(a6)
}
1c00a61a:	6105                	addi	sp,sp,32
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c00a61c:	c73ff06f          	j	1c00a28e <hyperflash_read_2d_async>
}
1c00a620:	40f2                	lw	ra,28(sp)
1c00a622:	4462                	lw	s0,24(sp)
1c00a624:	44d2                	lw	s1,20(sp)
1c00a626:	4942                	lw	s2,16(sp)
1c00a628:	49b2                	lw	s3,12(sp)
1c00a62a:	6105                	addi	sp,sp,32
1c00a62c:	8082                	ret

1c00a62e <hyperflash_reg_get_async>:
{
1c00a62e:	1101                	addi	sp,sp,-32
1c00a630:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a632:	4500                	lw	s0,8(a0)
{
1c00a634:	c64e                	sw	s3,12(sp)
1c00a636:	89ae                	mv	s3,a1
1c00a638:	ca26                	sw	s1,20(sp)
1c00a63a:	c84a                	sw	s2,16(sp)
1c00a63c:	84aa                	mv	s1,a0
1c00a63e:	8932                	mv	s2,a2
1c00a640:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c00a642:	8732                	mv	a4,a2
1c00a644:	4881                	li	a7,0
1c00a646:	4801                	li	a6,0
1c00a648:	4781                	li	a5,0
1c00a64a:	86ce                	mv	a3,s3
1c00a64c:	4611                	li	a2,4
1c00a64e:	8522                	mv	a0,s0
{
1c00a650:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c00a652:	bfdff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a656:	e50d                	bnez	a0,1c00a680 <hyperflash_reg_get_async+0x52>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c00a658:	8522                	mv	a0,s0
1c00a65a:	00c40613          	addi	a2,s0,12
1c00a65e:	85ce                	mv	a1,s3
1c00a660:	4691                	li	a3,4
1c00a662:	1fe030ef          	jal	ra,1c00d860 <pi_hyper_read>
  return hyperflash->udma_buffer[0];
1c00a666:	00c45783          	lhu	a5,12(s0)
}
1c00a66a:	4462                	lw	s0,24(sp)
1c00a66c:	40f2                	lw	ra,28(sp)
  *(uint16_t *)value = hyperflash_get_reg_exec(hyperflash, addr);
1c00a66e:	00f91023          	sh	a5,0(s2)
}
1c00a672:	49b2                	lw	s3,12(sp)
1c00a674:	4942                	lw	s2,16(sp)
  hyperflash_handle_pending_task(device);
1c00a676:	8526                	mv	a0,s1
}
1c00a678:	44d2                	lw	s1,20(sp)
1c00a67a:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c00a67c:	eadff06f          	j	1c00a528 <hyperflash_handle_pending_task>
}
1c00a680:	40f2                	lw	ra,28(sp)
1c00a682:	4462                	lw	s0,24(sp)
1c00a684:	44d2                	lw	s1,20(sp)
1c00a686:	4942                	lw	s2,16(sp)
1c00a688:	49b2                	lw	s3,12(sp)
1c00a68a:	6105                	addi	sp,sp,32
1c00a68c:	8082                	ret

1c00a68e <hyperflash_reg_set_async>:
{
1c00a68e:	1101                	addi	sp,sp,-32
1c00a690:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a692:	4504                	lw	s1,8(a0)
{
1c00a694:	c84a                	sw	s2,16(sp)
1c00a696:	892e                	mv	s2,a1
1c00a698:	cc22                	sw	s0,24(sp)
1c00a69a:	c64e                	sw	s3,12(sp)
1c00a69c:	842a                	mv	s0,a0
1c00a69e:	89b2                	mv	s3,a2
1c00a6a0:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c00a6a2:	8732                	mv	a4,a2
1c00a6a4:	4881                	li	a7,0
1c00a6a6:	4801                	li	a6,0
1c00a6a8:	4781                	li	a5,0
1c00a6aa:	86ca                	mv	a3,s2
1c00a6ac:	460d                	li	a2,3
1c00a6ae:	8526                	mv	a0,s1
{
1c00a6b0:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c00a6b2:	b9dff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a6b6:	e105                	bnez	a0,1c00a6d6 <hyperflash_reg_set_async+0x48>
  hyperflash_set_reg_exec(hyperflash, addr, *(uint16_t *)value);
1c00a6b8:	0009d603          	lhu	a2,0(s3)
1c00a6bc:	8526                	mv	a0,s1
1c00a6be:	85ca                	mv	a1,s2
1c00a6c0:	c73ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  hyperflash_handle_pending_task(device);
1c00a6c4:	8522                	mv	a0,s0
}
1c00a6c6:	4462                	lw	s0,24(sp)
1c00a6c8:	40f2                	lw	ra,28(sp)
1c00a6ca:	44d2                	lw	s1,20(sp)
1c00a6cc:	4942                	lw	s2,16(sp)
1c00a6ce:	49b2                	lw	s3,12(sp)
1c00a6d0:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c00a6d2:	e57ff06f          	j	1c00a528 <hyperflash_handle_pending_task>
}
1c00a6d6:	40f2                	lw	ra,28(sp)
1c00a6d8:	4462                	lw	s0,24(sp)
1c00a6da:	44d2                	lw	s1,20(sp)
1c00a6dc:	4942                	lw	s2,16(sp)
1c00a6de:	49b2                	lw	s3,12(sp)
1c00a6e0:	6105                	addi	sp,sp,32
1c00a6e2:	8082                	ret

1c00a6e4 <hyperflash_program_resume>:
{
1c00a6e4:	1101                	addi	sp,sp,-32
1c00a6e6:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a6e8:	4500                	lw	s0,8(a0)
{
1c00a6ea:	ce06                	sw	ra,28(sp)
1c00a6ec:	ca26                	sw	s1,20(sp)
  if (hyperflash->pending_size == 0)
1c00a6ee:	13042683          	lw	a3,304(s0)
{
1c00a6f2:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_size == 0)
1c00a6f4:	ea81                	bnez	a3,1c00a704 <hyperflash_program_resume+0x20>
}
1c00a6f6:	4462                	lw	s0,24(sp)
1c00a6f8:	40f2                	lw	ra,28(sp)
1c00a6fa:	44d2                	lw	s1,20(sp)
1c00a6fc:	4942                	lw	s2,16(sp)
1c00a6fe:	6105                	addi	sp,sp,32
    hyperflash_handle_pending_task(device);
1c00a700:	e29ff06f          	j	1c00a528 <hyperflash_handle_pending_task>
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c00a704:	12842783          	lw	a5,296(s0)
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a708:	6905                	lui	s2,0x1
1c00a70a:	84aa                	mv	s1,a0
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c00a70c:	ec97b733          	p.bclr	a4,a5,22,9
1c00a710:	20000793          	li	a5,512
1c00a714:	8f99                	sub	a5,a5,a4
1c00a716:	04f6d6b3          	p.minu	a3,a3,a5
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00a71a:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c00a71e:	8522                	mv	a0,s0
1c00a720:	0aa00613          	li	a2,170
1c00a724:	c636                	sw	a3,12(sp)
1c00a726:	c0dff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00a72a:	8522                	mv	a0,s0
1c00a72c:	05500613          	li	a2,85
1c00a730:	55400593          	li	a1,1364
1c00a734:	bffff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xA0);
1c00a738:	aaa90593          	addi	a1,s2,-1366
1c00a73c:	8522                	mv	a0,s0
1c00a73e:	0a000613          	li	a2,160
1c00a742:	bf1ff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
    hyperflash->pending_hyper_addr += iter_size;
1c00a746:	46b2                	lw	a3,12(sp)
    uint32_t hyper_addr = hyperflash->pending_hyper_addr;
1c00a748:	12842583          	lw	a1,296(s0)
    uint32_t data = hyperflash->pending_data;
1c00a74c:	12c42603          	lw	a2,300(s0)
  task->done = 0;
1c00a750:	02040e23          	sb	zero,60(s0)
    hyperflash->pending_hyper_addr += iter_size;
1c00a754:	00d587b3          	add	a5,a1,a3
1c00a758:	12f42423          	sw	a5,296(s0)
    hyperflash->pending_data += iter_size;
1c00a75c:	00d607b3          	add	a5,a2,a3
1c00a760:	12f42623          	sw	a5,300(s0)
    hyperflash->pending_size -= iter_size;
1c00a764:	13042783          	lw	a5,304(s0)
  task->arg[1] = (uint32_t)arg;
1c00a768:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00a76a:	04042023          	sw	zero,64(s0)
1c00a76e:	8f95                	sub	a5,a5,a3
1c00a770:	12f42823          	sw	a5,304(s0)
  task->arg[0] = (uint32_t)callback;
1c00a774:	1c00b7b7          	lui	a5,0x1c00b
1c00a778:	bb878793          	addi	a5,a5,-1096 # 1c00abb8 <hyperflash_check_program>
1c00a77c:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00a77e:	4785                	li	a5,1
1c00a780:	c83c                	sw	a5,80(s0)
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00a782:	02840713          	addi	a4,s0,40
1c00a786:	8522                	mv	a0,s0
}
1c00a788:	4462                	lw	s0,24(sp)
1c00a78a:	40f2                	lw	ra,28(sp)
1c00a78c:	44d2                	lw	s1,20(sp)
1c00a78e:	4942                	lw	s2,16(sp)
1c00a790:	6105                	addi	sp,sp,32
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00a792:	0f00306f          	j	1c00d882 <pi_hyper_write_async>

1c00a796 <hyperflash_program_async>:
{
1c00a796:	1101                	addi	sp,sp,-32
1c00a798:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a79a:	4500                	lw	s0,8(a0)
{
1c00a79c:	c452                	sw	s4,8(sp)
1c00a79e:	8a2e                	mv	s4,a1
1c00a7a0:	ca26                	sw	s1,20(sp)
1c00a7a2:	c84a                	sw	s2,16(sp)
1c00a7a4:	c64e                	sw	s3,12(sp)
1c00a7a6:	84aa                	mv	s1,a0
1c00a7a8:	89b2                	mv	s3,a2
1c00a7aa:	8936                	mv	s2,a3
1c00a7ac:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c00a7ae:	87b6                	mv	a5,a3
1c00a7b0:	8732                	mv	a4,a2
1c00a7b2:	4881                	li	a7,0
1c00a7b4:	4801                	li	a6,0
1c00a7b6:	86d2                	mv	a3,s4
1c00a7b8:	4601                	li	a2,0
1c00a7ba:	8522                	mv	a0,s0
{
1c00a7bc:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c00a7be:	a91ff0ef          	jal	ra,1c00a24e <hyperflash_stall_task>
1c00a7c2:	e10d                	bnez	a0,1c00a7e4 <hyperflash_program_async+0x4e>
  hyperflash->pending_hyper_addr = hyper_addr;
1c00a7c4:	13442423          	sw	s4,296(s0)
  hyperflash->pending_data = (uint32_t)data;
1c00a7c8:	13342623          	sw	s3,300(s0)
  hyperflash->pending_size = size;
1c00a7cc:	13242823          	sw	s2,304(s0)
}
1c00a7d0:	4462                	lw	s0,24(sp)
1c00a7d2:	40f2                	lw	ra,28(sp)
1c00a7d4:	4942                	lw	s2,16(sp)
1c00a7d6:	49b2                	lw	s3,12(sp)
1c00a7d8:	4a22                	lw	s4,8(sp)
  hyperflash_program_resume(device);
1c00a7da:	8526                	mv	a0,s1
}
1c00a7dc:	44d2                	lw	s1,20(sp)
1c00a7de:	6105                	addi	sp,sp,32
  hyperflash_program_resume(device);
1c00a7e0:	f05ff06f          	j	1c00a6e4 <hyperflash_program_resume>
}
1c00a7e4:	40f2                	lw	ra,28(sp)
1c00a7e6:	4462                	lw	s0,24(sp)
1c00a7e8:	44d2                	lw	s1,20(sp)
1c00a7ea:	4942                	lw	s2,16(sp)
1c00a7ec:	49b2                	lw	s3,12(sp)
1c00a7ee:	4a22                	lw	s4,8(sp)
1c00a7f0:	6105                	addi	sp,sp,32
1c00a7f2:	8082                	ret

1c00a7f4 <hyperflash_copy_async>:
{
1c00a7f4:	1141                	addi	sp,sp,-16
1c00a7f6:	c606                	sw	ra,12(sp)
  if (!ext2loc)
1c00a7f8:	eb01                	bnez	a4,1c00a808 <hyperflash_copy_async+0x14>
    hyperflash_program_async(device, flash_addr, buffer, size, task);
1c00a7fa:	873e                	mv	a4,a5
1c00a7fc:	f9bff0ef          	jal	ra,1c00a796 <hyperflash_program_async>
}
1c00a800:	40b2                	lw	ra,12(sp)
1c00a802:	4501                	li	a0,0
1c00a804:	0141                	addi	sp,sp,16
1c00a806:	8082                	ret
    hyperflash_read_async(device, flash_addr, buffer, size, task);
1c00a808:	873e                	mv	a4,a5
1c00a80a:	ca9ff0ef          	jal	ra,1c00a4b2 <hyperflash_read_async>
1c00a80e:	bfcd                	j	1c00a800 <hyperflash_copy_async+0xc>

1c00a810 <hyperflash_close>:
{
1c00a810:	1141                	addi	sp,sp,-16
1c00a812:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00a814:	4500                	lw	s0,8(a0)
{
1c00a816:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperflash->hyper_device);
1c00a818:	8522                	mv	a0,s0
1c00a81a:	69b020ef          	jal	ra,1c00d6b4 <pi_hyper_close>
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c00a81e:	8522                	mv	a0,s0
}
1c00a820:	4422                	lw	s0,8(sp)
1c00a822:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c00a824:	13c00593          	li	a1,316
}
1c00a828:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c00a82a:	4f50106f          	j	1c00c51e <pi_l2_free>

1c00a82e <hyperflash_open>:
{
1c00a82e:	7179                	addi	sp,sp,-48
1c00a830:	d226                	sw	s1,36(sp)
1c00a832:	d04a                	sw	s2,32(sp)
1c00a834:	84aa                	mv	s1,a0
  struct pi_hyperflash_conf *conf = (struct pi_hyperflash_conf *)device->config;
1c00a836:	00452903          	lw	s2,4(a0)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c00a83a:	13c00513          	li	a0,316
{
1c00a83e:	d606                	sw	ra,44(sp)
1c00a840:	d422                	sw	s0,40(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c00a842:	4cf010ef          	jal	ra,1c00c510 <pi_l2_malloc>
  if (hyperflash == NULL)
1c00a846:	c935                	beqz	a0,1c00a8ba <hyperflash_open+0x8c>
  device->data = (void *)hyperflash;
1c00a848:	c488                	sw	a0,8(s1)
1c00a84a:	842a                	mv	s0,a0
  if (bsp_hyperflash_open(conf))
1c00a84c:	854a                	mv	a0,s2
1c00a84e:	1e4010ef          	jal	ra,1c00ba32 <bsp_hyperflash_open>
1c00a852:	84aa                	mv	s1,a0
1c00a854:	ed21                	bnez	a0,1c00a8ac <hyperflash_open+0x7e>
  struct pi_hyper_conf hyper_conf = {0};
1c00a856:	4671                	li	a2,28
1c00a858:	4581                	li	a1,0
1c00a85a:	0048                	addi	a0,sp,4
1c00a85c:	291030ef          	jal	ra,1c00e2ec <memset>
  pi_hyper_conf_init(&hyper_conf);
1c00a860:	0048                	addi	a0,sp,4
1c00a862:	4e3020ef          	jal	ra,1c00d544 <pi_hyper_conf_init>
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c00a866:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c00a86a:	8522                	mv	a0,s0
1c00a86c:	004c                	addi	a1,sp,4
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c00a86e:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00a872:	00892783          	lw	a5,8(s2)
  hyper_conf.type = PI_HYPER_TYPE_FLASH;
1c00a876:	c802                	sw	zero,16(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00a878:	c63e                	sw	a5,12(sp)
  hyper_conf.xip_en = conf->xip_en;
1c00a87a:	00c92783          	lw	a5,12(s2)
1c00a87e:	00f104a3          	sb	a5,9(sp)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c00a882:	36a010ef          	jal	ra,1c00bbec <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperflash->hyper_device);
1c00a886:	8522                	mv	a0,s0
1c00a888:	4cd020ef          	jal	ra,1c00d554 <pi_hyper_open>
  if (error)
1c00a88c:	e105                	bnez	a0,1c00a8ac <hyperflash_open+0x7e>
  hyperflash->pending_task = NULL;
1c00a88e:	00042c23          	sw	zero,24(s0)
  hyperflash->waiting_first = NULL;
1c00a892:	00042823          	sw	zero,16(s0)
  hyperflash->erase_task = NULL;
1c00a896:	02042223          	sw	zero,36(s0)
  hyperflash->erase_waiting_first = NULL;
1c00a89a:	00042e23          	sw	zero,28(s0)
}
1c00a89e:	50b2                	lw	ra,44(sp)
1c00a8a0:	5422                	lw	s0,40(sp)
1c00a8a2:	8526                	mv	a0,s1
1c00a8a4:	5902                	lw	s2,32(sp)
1c00a8a6:	5492                	lw	s1,36(sp)
1c00a8a8:	6145                	addi	sp,sp,48
1c00a8aa:	8082                	ret
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c00a8ac:	13c00593          	li	a1,316
1c00a8b0:	8522                	mv	a0,s0
1c00a8b2:	46d010ef          	jal	ra,1c00c51e <pi_l2_free>
  return -2;
1c00a8b6:	54f9                	li	s1,-2
1c00a8b8:	b7dd                	j	1c00a89e <hyperflash_open+0x70>
    return -1;
1c00a8ba:	54fd                	li	s1,-1
1c00a8bc:	b7cd                	j	1c00a89e <hyperflash_open+0x70>

1c00a8be <pi_task_wait_on.isra.3>:
static inline void pi_task_wait_on(struct pi_task *task)
1c00a8be:	1141                	addi	sp,sp,-16
1c00a8c0:	c422                	sw	s0,8(sp)
1c00a8c2:	c226                	sw	s1,4(sp)
1c00a8c4:	c606                	sw	ra,12(sp)
1c00a8c6:	c04a                	sw	s2,0(sp)
1c00a8c8:	842a                	mv	s0,a0
  while(!task->done)
1c00a8ca:	00040783          	lb	a5,0(s0)
1c00a8ce:	c799                	beqz	a5,1c00a8dc <pi_task_wait_on.isra.3+0x1e>
}
1c00a8d0:	40b2                	lw	ra,12(sp)
1c00a8d2:	4422                	lw	s0,8(sp)
1c00a8d4:	4492                	lw	s1,4(sp)
1c00a8d6:	4902                	lw	s2,0(sp)
1c00a8d8:	0141                	addi	sp,sp,16
1c00a8da:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a8dc:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a8e0:	4585                	li	a1,1
1c00a8e2:	01c00513          	li	a0,28
1c00a8e6:	187010ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a8ea:	30091073          	csrw	mstatus,s2
1c00a8ee:	bff1                	j	1c00a8ca <pi_task_wait_on.isra.3+0xc>

1c00a8f0 <hyperflash_copy_2d>:
  pi_task_wait_on(&task);
  return 0;
}

static inline int hyperflash_copy_2d(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc)
{
1c00a8f0:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a8f2:	4885                	li	a7,1
1c00a8f4:	c706                	sw	ra,140(sp)
1c00a8f6:	cc46                	sw	a7,24(sp)
  task->arg[0] = (uint32_t)0;
1c00a8f8:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00a8fa:	d446                	sw	a7,40(sp)
  task->done = 0;
1c00a8fc:	00010a23          	sb	zero,20(sp)
  if (!ext2loc)
1c00a900:	00080c63          	beqz	a6,1c00a918 <hyperflash_copy_2d+0x28>
  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c00a904:	880a                	mv	a6,sp
1c00a906:	989ff0ef          	jal	ra,1c00a28e <hyperflash_read_2d_async>
  pi_task_t task;
  pi_task_block(&task);
  if (hyperflash_copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, &task))
    return -1;
  pi_task_wait_on(&task);
1c00a90a:	0848                	addi	a0,sp,20
1c00a90c:	fb3ff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
  return 0;
1c00a910:	4501                	li	a0,0
}
1c00a912:	40ba                	lw	ra,140(sp)
1c00a914:	6149                	addi	sp,sp,144
1c00a916:	8082                	ret
    return -1;
1c00a918:	557d                	li	a0,-1
1c00a91a:	bfe5                	j	1c00a912 <hyperflash_copy_2d+0x22>

1c00a91c <hyperflash_erase_sector>:
{
1c00a91c:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a91e:	4785                	li	a5,1
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c00a920:	860a                	mv	a2,sp
{
1c00a922:	c706                	sw	ra,140(sp)
1c00a924:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a926:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a928:	c202                	sw	zero,4(sp)
1c00a92a:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c00a92e:	a13ff0ef          	jal	ra,1c00a340 <hyperflash_erase_sector_async>
  pi_task_wait_on(&task);
1c00a932:	0848                	addi	a0,sp,20
1c00a934:	f8bff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a938:	40ba                	lw	ra,140(sp)
1c00a93a:	4501                	li	a0,0
1c00a93c:	6149                	addi	sp,sp,144
1c00a93e:	8082                	ret

1c00a940 <hyperflash_erase_chip>:
{
1c00a940:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a942:	4785                	li	a5,1
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c00a944:	858a                	mv	a1,sp
{
1c00a946:	c706                	sw	ra,140(sp)
1c00a948:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a94a:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a94c:	c202                	sw	zero,4(sp)
1c00a94e:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c00a952:	aadff0ef          	jal	ra,1c00a3fe <hyperflash_erase_chip_async>
  pi_task_wait_on(&task);
1c00a956:	0848                	addi	a0,sp,20
1c00a958:	f67ff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a95c:	40ba                	lw	ra,140(sp)
1c00a95e:	4501                	li	a0,0
1c00a960:	6149                	addi	sp,sp,144
1c00a962:	8082                	ret

1c00a964 <hyperflash_read>:
{
1c00a964:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a966:	4785                	li	a5,1
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00a968:	870a                	mv	a4,sp
{
1c00a96a:	c706                	sw	ra,140(sp)
1c00a96c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a96e:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a970:	c202                	sw	zero,4(sp)
1c00a972:	00010a23          	sb	zero,20(sp)
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00a976:	b3dff0ef          	jal	ra,1c00a4b2 <hyperflash_read_async>
  pi_task_wait_on(&task);
1c00a97a:	0848                	addi	a0,sp,20
1c00a97c:	f43ff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a980:	40ba                	lw	ra,140(sp)
1c00a982:	4501                	li	a0,0
1c00a984:	6149                	addi	sp,sp,144
1c00a986:	8082                	ret

1c00a988 <hyperflash_reg_get>:
{
1c00a988:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a98a:	4785                	li	a5,1
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00a98c:	868a                	mv	a3,sp
{
1c00a98e:	c706                	sw	ra,140(sp)
1c00a990:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a992:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a994:	c202                	sw	zero,4(sp)
1c00a996:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00a99a:	c95ff0ef          	jal	ra,1c00a62e <hyperflash_reg_get_async>
  pi_task_wait_on(&task);
1c00a99e:	0848                	addi	a0,sp,20
1c00a9a0:	f1fff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a9a4:	40ba                	lw	ra,140(sp)
1c00a9a6:	4501                	li	a0,0
1c00a9a8:	6149                	addi	sp,sp,144
1c00a9aa:	8082                	ret

1c00a9ac <hyperflash_reg_set>:
{
1c00a9ac:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a9ae:	4785                	li	a5,1
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00a9b0:	868a                	mv	a3,sp
{
1c00a9b2:	c706                	sw	ra,140(sp)
1c00a9b4:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a9b6:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a9b8:	c202                	sw	zero,4(sp)
1c00a9ba:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00a9be:	cd1ff0ef          	jal	ra,1c00a68e <hyperflash_reg_set_async>
  pi_task_wait_on(&task);
1c00a9c2:	0848                	addi	a0,sp,20
1c00a9c4:	efbff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a9c8:	40ba                	lw	ra,140(sp)
1c00a9ca:	4501                	li	a0,0
1c00a9cc:	6149                	addi	sp,sp,144
1c00a9ce:	8082                	ret

1c00a9d0 <hyperflash_program>:
{
1c00a9d0:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a9d2:	4785                	li	a5,1
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00a9d4:	870a                	mv	a4,sp
{
1c00a9d6:	c706                	sw	ra,140(sp)
1c00a9d8:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a9da:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00a9dc:	c202                	sw	zero,4(sp)
1c00a9de:	00010a23          	sb	zero,20(sp)
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00a9e2:	db5ff0ef          	jal	ra,1c00a796 <hyperflash_program_async>
  pi_task_wait_on(&task);
1c00a9e6:	0848                	addi	a0,sp,20
1c00a9e8:	ed7ff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00a9ec:	40ba                	lw	ra,140(sp)
1c00a9ee:	4501                	li	a0,0
1c00a9f0:	6149                	addi	sp,sp,144
1c00a9f2:	8082                	ret

1c00a9f4 <hyperflash_copy>:
{
1c00a9f4:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00a9f6:	4785                	li	a5,1
1c00a9f8:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00a9fa:	d43e                	sw	a5,40(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00a9fc:	878a                	mv	a5,sp
{
1c00a9fe:	c522                	sw	s0,136(sp)
1c00aa00:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00aa02:	c202                	sw	zero,4(sp)
1c00aa04:	00010a23          	sb	zero,20(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00aa08:	dedff0ef          	jal	ra,1c00a7f4 <hyperflash_copy_async>
    return -1;
1c00aa0c:	547d                	li	s0,-1
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c00aa0e:	e509                	bnez	a0,1c00aa18 <hyperflash_copy+0x24>
1c00aa10:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c00aa12:	0848                	addi	a0,sp,20
1c00aa14:	eabff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00aa18:	8522                	mv	a0,s0
1c00aa1a:	40ba                	lw	ra,140(sp)
1c00aa1c:	442a                	lw	s0,136(sp)
1c00aa1e:	6149                	addi	sp,sp,144
1c00aa20:	8082                	ret

1c00aa22 <hyperflash_erase_resume>:
{
1c00aa22:	1101                	addi	sp,sp,-32
1c00aa24:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00aa26:	4500                	lw	s0,8(a0)
{
1c00aa28:	ca26                	sw	s1,20(sp)
1c00aa2a:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_erase_size == 0)
1c00aa2c:	13842483          	lw	s1,312(s0)
{
1c00aa30:	ce06                	sw	ra,28(sp)
1c00aa32:	c64e                	sw	s3,12(sp)
1c00aa34:	892a                	mv	s2,a0
  if (hyperflash->pending_erase_size == 0)
1c00aa36:	ec8d                	bnez	s1,1c00aa70 <hyperflash_erase_resume+0x4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aa38:	300474f3          	csrrci	s1,mstatus,8
  pi_task_enqueue(hyperflash->erase_task);
1c00aa3c:	5048                	lw	a0,36(s0)
1c00aa3e:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c00aa42:	fe2ff0ef          	jal	ra,1c00a224 <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c00aa46:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->erase_waiting_first;
1c00aa4a:	4c54                	lw	a3,28(s0)
  hyperflash->erase_task = NULL;
1c00aa4c:	02042223          	sw	zero,36(s0)
  if (task)
1c00aa50:	c299                	beqz	a3,1c00aa56 <hyperflash_erase_resume+0x34>
    hyperflash->erase_waiting_first = task->implem.next;
1c00aa52:	4edc                	lw	a5,28(a3)
1c00aa54:	cc5c                	sw	a5,28(s0)
1c00aa56:	30049073          	csrw	mstatus,s1
  if (task)
1c00aa5a:	c2b5                	beqz	a3,1c00aabe <hyperflash_erase_resume+0x9c>
}
1c00aa5c:	4462                	lw	s0,24(sp)
1c00aa5e:	40f2                	lw	ra,28(sp)
1c00aa60:	44d2                	lw	s1,20(sp)
1c00aa62:	49b2                	lw	s3,12(sp)
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c00aa64:	42b0                	lw	a2,64(a3)
1c00aa66:	5ecc                	lw	a1,60(a3)
1c00aa68:	854a                	mv	a0,s2
}
1c00aa6a:	4942                	lw	s2,16(sp)
1c00aa6c:	6105                	addi	sp,sp,32
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c00aa6e:	a8b9                	j	1c00aacc <hyperflash_erase_async>
    unsigned int iter_size = SECTOR_SIZE - (hyperflash->pending_erase_hyper_addr & (SECTOR_SIZE - 1));
1c00aa70:	13442583          	lw	a1,308(s0)
1c00aa74:	000407b7          	lui	a5,0x40
  task->id = PI_TASK_CALLBACK_ID;
1c00aa78:	0c042023          	sw	zero,192(s0)
1c00aa7c:	db25b733          	p.bclr	a4,a1,13,18
1c00aa80:	8f99                	sub	a5,a5,a4
1c00aa82:	04f4d4b3          	p.minu	s1,s1,a5
  task->arg[0] = (uint32_t)callback;
1c00aa86:	1c00b7b7          	lui	a5,0x1c00b
1c00aa8a:	a2278793          	addi	a5,a5,-1502 # 1c00aa22 <hyperflash_erase_resume>
1c00aa8e:	0af42623          	sw	a5,172(s0)
  task->implem.keep = 1;
1c00aa92:	4785                	li	a5,1
1c00aa94:	0cf42823          	sw	a5,208(s0)
  task->arg[1] = (uint32_t)arg;
1c00aa98:	0aa42823          	sw	a0,176(s0)
  task->done = 0;
1c00aa9c:	0a040e23          	sb	zero,188(s0)
    hyperflash_erase_sector_async(device, hyper_addr, pi_task_callback(&hyperflash->task2, hyperflash_erase_resume, device));
1c00aaa0:	0a840613          	addi	a2,s0,168
1c00aaa4:	89dff0ef          	jal	ra,1c00a340 <hyperflash_erase_sector_async>
    hyperflash->pending_erase_hyper_addr += iter_size;
1c00aaa8:	13442783          	lw	a5,308(s0)
1c00aaac:	97a6                	add	a5,a5,s1
1c00aaae:	12f42a23          	sw	a5,308(s0)
    hyperflash->pending_erase_size -= iter_size;
1c00aab2:	13842783          	lw	a5,312(s0)
1c00aab6:	409784b3          	sub	s1,a5,s1
1c00aaba:	12942c23          	sw	s1,312(s0)
}
1c00aabe:	40f2                	lw	ra,28(sp)
1c00aac0:	4462                	lw	s0,24(sp)
1c00aac2:	44d2                	lw	s1,20(sp)
1c00aac4:	4942                	lw	s2,16(sp)
1c00aac6:	49b2                	lw	s3,12(sp)
1c00aac8:	6105                	addi	sp,sp,32
1c00aaca:	8082                	ret

1c00aacc <hyperflash_erase_async>:
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00aacc:	451c                	lw	a5,8(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aace:	30047773          	csrrci	a4,mstatus,8
  if (hyperflash->erase_task != NULL)
1c00aad2:	0247a803          	lw	a6,36(a5)
1c00aad6:	02080463          	beqz	a6,1c00aafe <hyperflash_erase_async+0x32>
    task->implem.data[0] = id;
1c00aada:	450d                	li	a0,3
1c00aadc:	de88                	sw	a0,56(a3)
    task->implem.data[1] = arg0;
1c00aade:	decc                	sw	a1,60(a3)
    task->implem.data[2] = arg1;
1c00aae0:	c2b0                	sw	a2,64(a3)
    task->implem.data[3] = arg2;
1c00aae2:	0406a223          	sw	zero,68(a3)
    if (hyperflash->erase_waiting_first)
1c00aae6:	4fd0                	lw	a2,28(a5)
1c00aae8:	ca09                	beqz	a2,1c00aafa <hyperflash_erase_async+0x2e>
      hyperflash->erase_waiting_last->implem.next = task;
1c00aaea:	5390                	lw	a2,32(a5)
1c00aaec:	ce54                	sw	a3,28(a2)
    hyperflash->erase_waiting_last = task;
1c00aaee:	d394                	sw	a3,32(a5)
    task->implem.next = NULL;
1c00aaf0:	0006ae23          	sw	zero,28(a3)
  __builtin_pulp_spr_write(reg, val);
1c00aaf4:	30071073          	csrw	mstatus,a4
}
1c00aaf8:	8082                	ret
      hyperflash->erase_waiting_first = task;
1c00aafa:	cfd4                	sw	a3,28(a5)
1c00aafc:	bfcd                	j	1c00aaee <hyperflash_erase_async+0x22>
  hyperflash->erase_task = task;
1c00aafe:	d3d4                	sw	a3,36(a5)
1c00ab00:	30071073          	csrw	mstatus,a4
  hyperflash->pending_erase_hyper_addr = addr;
1c00ab04:	12b7aa23          	sw	a1,308(a5)
  hyperflash->pending_erase_size = size;
1c00ab08:	12c7ac23          	sw	a2,312(a5)
  hyperflash_erase_resume(device);
1c00ab0c:	f17ff06f          	j	1c00aa22 <hyperflash_erase_resume>

1c00ab10 <hyperflash_erase>:
{
1c00ab10:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00ab12:	4785                	li	a5,1
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c00ab14:	868a                	mv	a3,sp
{
1c00ab16:	c706                	sw	ra,140(sp)
1c00ab18:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00ab1a:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c00ab1c:	c202                	sw	zero,4(sp)
1c00ab1e:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c00ab22:	fabff0ef          	jal	ra,1c00aacc <hyperflash_erase_async>
  pi_task_wait_on(&task);
1c00ab26:	0848                	addi	a0,sp,20
1c00ab28:	d97ff0ef          	jal	ra,1c00a8be <pi_task_wait_on.isra.3>
}
1c00ab2c:	40ba                	lw	ra,140(sp)
1c00ab2e:	4501                	li	a0,0
1c00ab30:	6149                	addi	sp,sp,144
1c00ab32:	8082                	ret

1c00ab34 <hyperflash_get_status_reg>:
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00ab34:	6585                	lui	a1,0x1
{
1c00ab36:	1141                	addi	sp,sp,-16
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00ab38:	07000613          	li	a2,112
1c00ab3c:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
{
1c00ab40:	c606                	sw	ra,12(sp)
1c00ab42:	c422                	sw	s0,8(sp)
1c00ab44:	842a                	mv	s0,a0
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c00ab46:	fecff0ef          	jal	ra,1c00a332 <hyperflash_set_reg_exec>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c00ab4a:	8522                	mv	a0,s0
1c00ab4c:	00c40613          	addi	a2,s0,12
1c00ab50:	4691                	li	a3,4
1c00ab52:	4581                	li	a1,0
1c00ab54:	50d020ef          	jal	ra,1c00d860 <pi_hyper_read>
}
1c00ab58:	00c45503          	lhu	a0,12(s0)
1c00ab5c:	40b2                	lw	ra,12(sp)
1c00ab5e:	4422                	lw	s0,8(sp)
1c00ab60:	0141                	addi	sp,sp,16
1c00ab62:	8082                	ret

1c00ab64 <hyperflash_check_erase>:
{
1c00ab64:	1141                	addi	sp,sp,-16
1c00ab66:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00ab68:	4500                	lw	s0,8(a0)
{
1c00ab6a:	c226                	sw	s1,4(sp)
1c00ab6c:	84aa                	mv	s1,a0
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c00ab6e:	8522                	mv	a0,s0
{
1c00ab70:	c606                	sw	ra,12(sp)
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c00ab72:	fc3ff0ef          	jal	ra,1c00ab34 <hyperflash_get_status_reg>
  if (((reg_status >> 7) & 1) == 0)
1c00ab76:	c0751533          	p.extractu	a0,a0,0,7
1c00ab7a:	e905                	bnez	a0,1c00abaa <hyperflash_check_erase+0x46>
  task->arg[0] = (uint32_t)callback;
1c00ab7c:	1c00b7b7          	lui	a5,0x1c00b
1c00ab80:	b6478793          	addi	a5,a5,-1180 # 1c00ab64 <hyperflash_check_erase>
1c00ab84:	02040e23          	sb	zero,60(s0)
1c00ab88:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00ab8a:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00ab8c:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00ab8e:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00ab92:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00ab94:	02840513          	addi	a0,s0,40
}
1c00ab98:	4422                	lw	s0,8(sp)
1c00ab9a:	40b2                	lw	ra,12(sp)
1c00ab9c:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00ab9e:	65e1                	lui	a1,0x18
1c00aba0:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c00aba4:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c00aba6:	7840106f          	j	1c00c32a <pi_task_push_delayed_us>
}
1c00abaa:	4422                	lw	s0,8(sp)
1c00abac:	40b2                	lw	ra,12(sp)
    hyperflash_handle_pending_task(device);
1c00abae:	8526                	mv	a0,s1
}
1c00abb0:	4492                	lw	s1,4(sp)
1c00abb2:	0141                	addi	sp,sp,16
    hyperflash_handle_pending_task(device);
1c00abb4:	975ff06f          	j	1c00a528 <hyperflash_handle_pending_task>

1c00abb8 <hyperflash_check_program>:
{
1c00abb8:	1141                	addi	sp,sp,-16
1c00abba:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00abbc:	4500                	lw	s0,8(a0)
{
1c00abbe:	c226                	sw	s1,4(sp)
1c00abc0:	84aa                	mv	s1,a0
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c00abc2:	8522                	mv	a0,s0
{
1c00abc4:	c606                	sw	ra,12(sp)
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c00abc6:	f6fff0ef          	jal	ra,1c00ab34 <hyperflash_get_status_reg>
1c00abca:	08057513          	andi	a0,a0,128
1c00abce:	e51d                	bnez	a0,1c00abfc <hyperflash_check_program+0x44>
  task->arg[0] = (uint32_t)callback;
1c00abd0:	1c00b7b7          	lui	a5,0x1c00b
1c00abd4:	bb878793          	addi	a5,a5,-1096 # 1c00abb8 <hyperflash_check_program>
1c00abd8:	02040e23          	sb	zero,60(s0)
1c00abdc:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00abde:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00abe0:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00abe2:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c00abe6:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00abe8:	02840513          	addi	a0,s0,40
}
1c00abec:	4422                	lw	s0,8(sp)
1c00abee:	40b2                	lw	ra,12(sp)
1c00abf0:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00abf2:	0fa00593          	li	a1,250
}
1c00abf6:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c00abf8:	7320106f          	j	1c00c32a <pi_task_push_delayed_us>
}
1c00abfc:	4422                	lw	s0,8(sp)
1c00abfe:	40b2                	lw	ra,12(sp)
    hyperflash_program_resume(device);
1c00ac00:	8526                	mv	a0,s1
}
1c00ac02:	4492                	lw	s1,4(sp)
1c00ac04:	0141                	addi	sp,sp,16
    hyperflash_program_resume(device);
1c00ac06:	adfff06f          	j	1c00a6e4 <hyperflash_program_resume>

1c00ac0a <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c00ac0a:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c00ac0c:	1c0107b7          	lui	a5,0x1c010
{
1c00ac10:	c606                	sw	ra,12(sp)
1c00ac12:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c00ac14:	46878793          	addi	a5,a5,1128 # 1c010468 <hyperflash_api>
1c00ac18:	c11c                	sw	a5,0(a0)
{
1c00ac1a:	842a                	mv	s0,a0
  bsp_hyperflash_conf_init(conf);
1c00ac1c:	60d000ef          	jal	ra,1c00ba28 <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c00ac20:	8522                	mv	a0,s0
1c00ac22:	cabfe0ef          	jal	ra,1c0098cc <__flash_conf_init>
  conf->xip_en = 0;
}
1c00ac26:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c00ac28:	00042623          	sw	zero,12(s0)
}
1c00ac2c:	4422                	lw	s0,8(sp)
1c00ac2e:	0141                	addi	sp,sp,16
1c00ac30:	8082                	ret

1c00ac32 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c00ac32:	c119                	beqz	a0,1c00ac38 <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c00ac34:	4548                	lw	a0,12(a0)
1c00ac36:	8082                	ret
    else
        return UINT32_MAX;
1c00ac38:	557d                	li	a0,-1
}
1c00ac3a:	8082                	ret

1c00ac3c <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c00ac3c:	aaf1                	j	1c00ae18 <flash_partition_table_free>

1c00ac3e <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c00ac3e:	4601                	li	a2,0
1c00ac40:	a8d1                	j	1c00ad14 <flash_partition_table_load>

1c00ac42 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c00ac42:	1141                	addi	sp,sp,-16
1c00ac44:	c226                	sw	s1,4(sp)
1c00ac46:	c606                	sw	ra,12(sp)
1c00ac48:	c422                	sw	s0,8(sp)
1c00ac4a:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c00ac4c:	2ac5                	jal	1c00ae3c <flash_partition_find_first>
    if(info == NULL)
1c00ac4e:	c539                	beqz	a0,1c00ac9c <pi_partition_find_first+0x5a>
1c00ac50:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c00ac52:	02800513          	li	a0,40
1c00ac56:	0bb010ef          	jal	ra,1c00c510 <pi_l2_malloc>
    partition->type = info->type;
1c00ac5a:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00ac5e:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c00ac60:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c00ac62:	00344783          	lbu	a5,3(s0)
1c00ac66:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c00ac68:	441c                	lw	a5,8(s0)
1c00ac6a:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c00ac6c:	405c                	lw	a5,4(s0)
1c00ac6e:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00ac70:	87aa                	mv	a5,a0
1c00ac72:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c00ac76:	4458                	lw	a4,12(s0)
1c00ac78:	c398                	sw	a4,0(a5)
1c00ac7a:	481c                	lw	a5,16(s0)
1c00ac7c:	cd1c                	sw	a5,24(a0)
1c00ac7e:	485c                	lw	a5,20(s0)
1c00ac80:	cd5c                	sw	a5,28(a0)
1c00ac82:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c00ac84:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c00ac88:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c00ac8c:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c00ac8e:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c00ac92:	40b2                	lw	ra,12(sp)
1c00ac94:	4422                	lw	s0,8(sp)
1c00ac96:	4492                	lw	s1,4(sp)
1c00ac98:	0141                	addi	sp,sp,16
1c00ac9a:	8082                	ret
        return NULL;
1c00ac9c:	4501                	li	a0,0
1c00ac9e:	bfd5                	j	1c00ac92 <pi_partition_find_first+0x50>

1c00aca0 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c00aca0:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00aca2:	00754683          	lbu	a3,7(a0)
1c00aca6:	4781                	li	a5,0
1c00aca8:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00acaa:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00acae:	04f69663          	bne	a3,a5,1c00acfa <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c00acb2:	00854783          	lbu	a5,8(a0)
1c00acb6:	cfa9                	beqz	a5,1c00ad10 <flash_partition_table_verify+0x70>
{
1c00acb8:	7155                	addi	sp,sp,-208
1c00acba:	c5a2                	sw	s0,200(sp)
1c00acbc:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c00acbe:	1028                	addi	a0,sp,40
{
1c00acc0:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c00acc2:	c62e                	sw	a1,12(sp)
1c00acc4:	2bb000ef          	jal	ra,1c00b77e <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c00acc8:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c00accc:	45b2                	lw	a1,12(sp)
1c00acce:	1028                	addi	a0,sp,40
1c00acd0:	0616                	slli	a2,a2,0x5
1c00acd2:	2df000ef          	jal	ra,1c00b7b0 <MD5_Update>
        MD5_Final(digest, &context);
1c00acd6:	102c                	addi	a1,sp,40
1c00acd8:	0828                	addi	a0,sp,24
1c00acda:	373000ef          	jal	ra,1c00b84c <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00acde:	4641                	li	a2,16
1c00ace0:	082c                	addi	a1,sp,24
1c00ace2:	01440513          	addi	a0,s0,20
1c00ace6:	5d0030ef          	jal	ra,1c00e2b6 <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c00acea:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00acec:	e111                	bnez	a0,1c00acf0 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c00acee:	4781                	li	a5,0
}
1c00acf0:	40be                	lw	ra,204(sp)
1c00acf2:	442e                	lw	s0,200(sp)
1c00acf4:	853e                	mv	a0,a5
1c00acf6:	6169                	addi	sp,sp,208
1c00acf8:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00acfa:	0207580b          	p.lhu	a6,32(a4!)
1c00acfe:	00c81663          	bne	a6,a2,1c00ad0a <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00ad02:	0785                	addi	a5,a5,1
1c00ad04:	0ff7f793          	andi	a5,a5,255
1c00ad08:	b75d                	j	1c00acae <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c00ad0a:	478d                	li	a5,3
}
1c00ad0c:	853e                	mv	a0,a5
1c00ad0e:	8082                	ret
    return PI_OK;
1c00ad10:	4781                	li	a5,0
1c00ad12:	bfed                	j	1c00ad0c <flash_partition_table_verify+0x6c>

1c00ad14 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c00ad14:	1101                	addi	sp,sp,-32
1c00ad16:	ca26                	sw	s1,20(sp)
1c00ad18:	ce06                	sw	ra,28(sp)
1c00ad1a:	cc22                	sw	s0,24(sp)
1c00ad1c:	c84a                	sw	s2,16(sp)
1c00ad1e:	c64e                	sw	s3,12(sp)
1c00ad20:	c452                	sw	s4,8(sp)
1c00ad22:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c00ad24:	4489                	li	s1,2
    if(partition_table == NULL)
1c00ad26:	c9e1                	beqz	a1,1c00adf6 <flash_partition_table_load+0xe2>
1c00ad28:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c00ad2a:	02800513          	li	a0,40
1c00ad2e:	89b2                	mv	s3,a2
1c00ad30:	8aae                	mv	s5,a1
1c00ad32:	7de010ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c00ad36:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c00ad38:	20100493          	li	s1,513
    if(table == NULL)
1c00ad3c:	cd4d                	beqz	a0,1c00adf6 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c00ad3e:	4511                	li	a0,4
1c00ad40:	7d0010ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c00ad44:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c00ad46:	c171                	beqz	a0,1c00ae0a <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c00ad48:	00092783          	lw	a5,0(s2)
1c00ad4c:	862a                	mv	a2,a0
1c00ad4e:	4581                	li	a1,0
1c00ad50:	5b9c                	lw	a5,48(a5)
1c00ad52:	4691                	li	a3,4
1c00ad54:	854a                	mv	a0,s2
1c00ad56:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c00ad58:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00ad5c:	4591                	li	a1,4
1c00ad5e:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00ad60:	0a0a0863          	beqz	s4,1c00ae10 <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00ad64:	7ba010ef          	jal	ra,1c00c51e <pi_l2_free>
1c00ad68:	00092783          	lw	a5,0(s2)
1c00ad6c:	02000693          	li	a3,32
1c00ad70:	00440613          	addi	a2,s0,4
1c00ad74:	5b9c                	lw	a5,48(a5)
1c00ad76:	85d2                	mv	a1,s4
1c00ad78:	854a                	mv	a0,s2
1c00ad7a:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00ad7c:	00445703          	lhu	a4,4(s0)
1c00ad80:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c00ad84:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00ad86:	04f71763          	bne	a4,a5,1c00add4 <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00ad8a:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c00ad8e:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00ad90:	0417b263          	p.bneimm	a5,1,1c00add4 <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00ad94:	00744503          	lbu	a0,7(s0)
1c00ad98:	0516                	slli	a0,a0,0x5
1c00ad9a:	776010ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c00ad9e:	d048                	sw	a0,36(s0)
1c00ada0:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c00ada2:	c525                	beqz	a0,1c00ae0a <flash_partition_table_load+0xf6>
1c00ada4:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00ada8:	00744683          	lbu	a3,7(s0)
1c00adac:	020a0593          	addi	a1,s4,32
1c00adb0:	5b9c                	lw	a5,48(a5)
1c00adb2:	0696                	slli	a3,a3,0x5
1c00adb4:	854a                	mv	a0,s2
1c00adb6:	9782                	jalr	a5
    if(table->header.crc_flags)
1c00adb8:	00844783          	lbu	a5,8(s0)
1c00adbc:	c395                	beqz	a5,1c00ade0 <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c00adbe:	8522                	mv	a0,s0
1c00adc0:	ee1ff0ef          	jal	ra,1c00aca0 <flash_partition_table_verify>
1c00adc4:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c00adc6:	cd09                	beqz	a0,1c00ade0 <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00adc8:	00744583          	lbu	a1,7(s0)
1c00adcc:	5048                	lw	a0,36(s0)
1c00adce:	0596                	slli	a1,a1,0x5
1c00add0:	74e010ef          	jal	ra,1c00c51e <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c00add4:	02800593          	li	a1,40
1c00add8:	8522                	mv	a0,s0
1c00adda:	744010ef          	jal	ra,1c00c51e <pi_l2_free>
1c00adde:	a821                	j	1c00adf6 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c00ade0:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c00ade4:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c00ade8:	4481                	li	s1,0
    if(nbr_of_entries)
1c00adea:	00098663          	beqz	s3,1c00adf6 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00adee:	00744783          	lbu	a5,7(s0)
1c00adf2:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c00adf6:	40f2                	lw	ra,28(sp)
1c00adf8:	4462                	lw	s0,24(sp)
1c00adfa:	8526                	mv	a0,s1
1c00adfc:	4942                	lw	s2,16(sp)
1c00adfe:	44d2                	lw	s1,20(sp)
1c00ae00:	49b2                	lw	s3,12(sp)
1c00ae02:	4a22                	lw	s4,8(sp)
1c00ae04:	4a92                	lw	s5,4(sp)
1c00ae06:	6105                	addi	sp,sp,32
1c00ae08:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c00ae0a:	20100493          	li	s1,513
1c00ae0e:	b7d9                	j	1c00add4 <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00ae10:	70e010ef          	jal	ra,1c00c51e <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c00ae14:	4495                	li	s1,5
1c00ae16:	bf7d                	j	1c00add4 <flash_partition_table_load+0xc0>

1c00ae18 <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c00ae18:	1141                	addi	sp,sp,-16
1c00ae1a:	c422                	sw	s0,8(sp)
1c00ae1c:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00ae1e:	00754583          	lbu	a1,7(a0)
{
1c00ae22:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00ae24:	5148                	lw	a0,36(a0)
1c00ae26:	0596                	slli	a1,a1,0x5
1c00ae28:	6f6010ef          	jal	ra,1c00c51e <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00ae2c:	8522                	mv	a0,s0
}
1c00ae2e:	4422                	lw	s0,8(sp)
1c00ae30:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00ae32:	02800593          	li	a1,40
}
1c00ae36:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00ae38:	6e60106f          	j	1c00c51e <pi_l2_free>

1c00ae3c <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c00ae3c:	7179                	addi	sp,sp,-48
1c00ae3e:	d226                	sw	s1,36(sp)
1c00ae40:	d04a                	sw	s2,32(sp)
1c00ae42:	cc52                	sw	s4,24(sp)
1c00ae44:	ca56                	sw	s5,20(sp)
1c00ae46:	d606                	sw	ra,44(sp)
1c00ae48:	d422                	sw	s0,40(sp)
1c00ae4a:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00ae4c:	00754983          	lbu	s3,7(a0)
{
1c00ae50:	892a                	mv	s2,a0
1c00ae52:	8a2e                	mv	s4,a1
1c00ae54:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00ae56:	4481                	li	s1,0
1c00ae58:	0ff4f793          	andi	a5,s1,255
1c00ae5c:	0137ed63          	bltu	a5,s3,1c00ae76 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00ae60:	4401                	li	s0,0
}
1c00ae62:	8522                	mv	a0,s0
1c00ae64:	50b2                	lw	ra,44(sp)
1c00ae66:	5422                	lw	s0,40(sp)
1c00ae68:	5492                	lw	s1,36(sp)
1c00ae6a:	5902                	lw	s2,32(sp)
1c00ae6c:	49f2                	lw	s3,28(sp)
1c00ae6e:	4a62                	lw	s4,24(sp)
1c00ae70:	4ad2                	lw	s5,20(sp)
1c00ae72:	6145                	addi	sp,sp,48
1c00ae74:	8082                	ret
        part = table->partitions + i;
1c00ae76:	02492783          	lw	a5,36(s2)
1c00ae7a:	00549413          	slli	s0,s1,0x5
1c00ae7e:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c00ae80:	00244783          	lbu	a5,2(s0)
1c00ae84:	03479063          	bne	a5,s4,1c00aea4 <flash_partition_find_first+0x68>
1c00ae88:	00344783          	lbu	a5,3(s0)
1c00ae8c:	01579c63          	bne	a5,s5,1c00aea4 <flash_partition_find_first+0x68>
        if(label == NULL)
1c00ae90:	dae9                	beqz	a3,1c00ae62 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c00ae92:	8536                	mv	a0,a3
1c00ae94:	4641                	li	a2,16
1c00ae96:	00c40593          	addi	a1,s0,12
1c00ae9a:	c636                	sw	a3,12(sp)
1c00ae9c:	41a030ef          	jal	ra,1c00e2b6 <strncmp>
1c00aea0:	46b2                	lw	a3,12(sp)
1c00aea2:	d161                	beqz	a0,1c00ae62 <flash_partition_find_first+0x26>
1c00aea4:	0485                	addi	s1,s1,1
1c00aea6:	bf4d                	j	1c00ae58 <flash_partition_find_first+0x1c>

1c00aea8 <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00aea8:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c00aeaa:	00852283          	lw	t0,8(a0)
1c00aeae:	fc060613          	addi	a2,a2,-64
{
1c00aeb2:	de52                	sw	s4,60(sp)
1c00aeb4:	dc56                	sw	s5,56(sp)
1c00aeb6:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c00aeb8:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c00aebc:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c00aec0:	01452a83          	lw	s5,20(a0)
1c00aec4:	0605                	addi	a2,a2,1
{
1c00aec6:	c6a2                	sw	s0,76(sp)
1c00aec8:	c4a6                	sw	s1,72(sp)
1c00aeca:	c2ca                	sw	s2,68(sp)
1c00aecc:	c0ce                	sw	s3,64(sp)
1c00aece:	da5a                	sw	s6,52(sp)
1c00aed0:	d85e                	sw	s7,48(sp)
1c00aed2:	d662                	sw	s8,44(sp)
1c00aed4:	d466                	sw	s9,40(sp)
1c00aed6:	d26a                	sw	s10,36(sp)
1c00aed8:	d06e                	sw	s11,32(sp)
1c00aeda:	87aa                	mv	a5,a0
	a = ctx->a;
1c00aedc:	cc16                	sw	t0,24(sp)
1c00aede:	ce32                	sw	a2,28(sp)
1c00aee0:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00aee2:	0005a983          	lw	s3,0(a1)
1c00aee6:	d76aa537          	lui	a0,0xd76aa
1c00aeea:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00aeee:	00a30733          	add	a4,t1,a0
1c00aef2:	013706b3          	add	a3,a4,s3
1c00aef6:	015a4733          	xor	a4,s4,s5
1c00aefa:	01077733          	and	a4,a4,a6
1c00aefe:	0537ac23          	sw	s3,88(a5)
1c00af02:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00af06:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00af08:	9736                	add	a4,a4,a3
1c00af0a:	e8c7b6b7          	lui	a3,0xe8c7b
1c00af0e:	4365                	li	t1,25
1c00af10:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c00af14:	00da8e33          	add	t3,s5,a3
1c00af18:	08675733          	p.ror	a4,a4,t1
1c00af1c:	9742                	add	a4,a4,a6
1c00af1e:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00af22:	01484e33          	xor	t3,a6,s4
1c00af26:	cff0                	sw	a2,92(a5)
1c00af28:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00af2c:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00af30:	014e4e33          	xor	t3,t3,s4
1c00af34:	24207bb7          	lui	s7,0x24207
1c00af38:	4d51                	li	s10,20
1c00af3a:	9e36                	add	t3,t3,a3
1c00af3c:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81ea93f>
1c00af40:	017a0533          	add	a0,s4,s7
1c00af44:	09ae5e33          	p.ror	t3,t3,s10
1c00af48:	9e3a                	add	t3,t3,a4
1c00af4a:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00af4e:	00e84533          	xor	a0,a6,a4
1c00af52:	0717a023          	sw	a7,96(a5)
1c00af56:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00af5a:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00af5e:	01054533          	xor	a0,a0,a6
1c00af62:	c1bddc37          	lui	s8,0xc1bdd
1c00af66:	4cbd                	li	s9,15
1c00af68:	9536                	add	a0,a0,a3
1c00af6a:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00af6e:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00af70:	09955533          	p.ror	a0,a0,s9
1c00af74:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00af78:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00af7c:	9572                	add	a0,a0,t3
1c00af7e:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00af82:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00af86:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00af8a:	8e69                	and	a2,a2,a0
1c00af8c:	8e39                	xor	a2,a2,a4
1c00af8e:	f57c1eb7          	lui	t4,0xf57c1
1c00af92:	4c29                	li	s8,10
1c00af94:	9636                	add	a2,a2,a3
1c00af96:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c00af9a:	01dd86b3          	add	a3,s11,t4
1c00af9e:	09865633          	p.ror	a2,a2,s8
1c00afa2:	962a                	add	a2,a2,a0
1c00afa4:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00afa6:	00ae46b3          	xor	a3,t3,a0
1c00afaa:	07b7a423          	sw	s11,104(a5)
1c00afae:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00afb0:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00afb2:	01c6c6b3          	xor	a3,a3,t3
1c00afb6:	9736                	add	a4,a4,a3
1c00afb8:	4787c6b7          	lui	a3,0x4787c
1c00afbc:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b85fe8e>
1c00afc0:	00d40fb3          	add	t6,s0,a3
1c00afc4:	08675733          	p.ror	a4,a4,t1
1c00afc8:	9732                	add	a4,a4,a2
1c00afca:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00afcc:	00c54fb3          	xor	t6,a0,a2
1c00afd0:	00efffb3          	and	t6,t6,a4
1c00afd4:	d7e0                	sw	s0,108(a5)
1c00afd6:	00afcfb3          	xor	t6,t6,a0
1c00afda:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00afdc:	0185ae03          	lw	t3,24(a1)
1c00afe0:	a8304bb7          	lui	s7,0xa8304
1c00afe4:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00afe8:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00afea:	09afdfb3          	p.ror	t6,t6,s10
1c00afee:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00aff2:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00aff6:	9fba                	add	t6,t6,a4
1c00aff8:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00affa:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00affe:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00b002:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00b006:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00b008:	00c8c8b3          	xor	a7,a7,a2
1c00b00c:	fd469db7          	lui	s11,0xfd469
1c00b010:	98aa                	add	a7,a7,a0
1c00b012:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c00b016:	01b906b3          	add	a3,s2,s11
1c00b01a:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00b01e:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00b022:	98fe                	add	a7,a7,t6
1c00b024:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00b026:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00b02a:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00b02e:	0116f6b3          	and	a3,a3,a7
1c00b032:	8eb9                	xor	a3,a3,a4
1c00b034:	6980aeb7          	lui	t4,0x6980a
1c00b038:	9636                	add	a2,a2,a3
1c00b03a:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7ed13c>
1c00b03e:	01df06b3          	add	a3,t5,t4
1c00b042:	09865633          	p.ror	a2,a2,s8
1c00b046:	9646                	add	a2,a2,a7
1c00b048:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00b04a:	011fc6b3          	xor	a3,t6,a7
1c00b04e:	07e7ac23          	sw	t5,120(a5)
1c00b052:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00b054:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00b056:	01f6c6b3          	xor	a3,a3,t6
1c00b05a:	96ba                	add	a3,a3,a4
1c00b05c:	8b44f737          	lui	a4,0x8b44f
1c00b060:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c00b064:	00e504b3          	add	s1,a0,a4
1c00b068:	0866d6b3          	p.ror	a3,a3,t1
1c00b06c:	96b2                	add	a3,a3,a2
1c00b06e:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00b070:	00c8c4b3          	xor	s1,a7,a2
1c00b074:	8cf5                	and	s1,s1,a3
1c00b076:	dfe8                	sw	a0,124(a5)
1c00b078:	0114c4b3          	xor	s1,s1,a7
1c00b07c:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00b07e:	0285af83          	lw	t6,40(a1)
1c00b082:	7bd9                	lui	s7,0xffff6
1c00b084:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c00b088:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00b08c:	09a4d4b3          	p.ror	s1,s1,s10
1c00b090:	94b6                	add	s1,s1,a3
1c00b092:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00b094:	00d64eb3          	xor	t4,a2,a3
1c00b098:	009efeb3          	and	t4,t4,s1
1c00b09c:	09f7a023          	sw	t6,128(a5)
1c00b0a0:	00ceceb3          	xor	t4,t4,a2
1c00b0a4:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00b0a6:	02c5a883          	lw	a7,44(a1)
1c00b0aa:	895cddb7          	lui	s11,0x895cd
1c00b0ae:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00b0b2:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00b0b4:	099edeb3          	p.ror	t4,t4,s9
1c00b0b8:	01b88533          	add	a0,a7,s11
1c00b0bc:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00b0be:	0917a223          	sw	a7,132(a5)
1c00b0c2:	962a                	add	a2,a2,a0
1c00b0c4:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00b0c8:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00b0cc:	01d57533          	and	a0,a0,t4
1c00b0d0:	8d35                	xor	a0,a0,a3
1c00b0d2:	6b901737          	lui	a4,0x6b901
1c00b0d6:	9532                	add	a0,a0,a2
1c00b0d8:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8e4986>
1c00b0dc:	00e38633          	add	a2,t2,a4
1c00b0e0:	09855533          	p.ror	a0,a0,s8
1c00b0e4:	9576                	add	a0,a0,t4
1c00b0e6:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00b0e8:	01d4c633          	xor	a2,s1,t4
1c00b0ec:	8e69                	and	a2,a2,a0
1c00b0ee:	8e25                	xor	a2,a2,s1
1c00b0f0:	0877a423          	sw	t2,136(a5)
1c00b0f4:	96b2                	add	a3,a3,a2
1c00b0f6:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00b0fa:	0345a303          	lw	t1,52(a1)
1c00b0fe:	fd987db7          	lui	s11,0xfd987
1c00b102:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c00b106:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00b10a:	00d50733          	add	a4,a0,a3
1c00b10e:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00b110:	00aecbb3          	xor	s7,t4,a0
1c00b114:	00ebfbb3          	and	s7,s7,a4
1c00b118:	01dbcbb3          	xor	s7,s7,t4
1c00b11c:	94de                	add	s1,s1,s7
1c00b11e:	0867a623          	sw	t1,140(a5)
1c00b122:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00b126:	5d84                	lw	s1,56(a1)
1c00b128:	a6794637          	lui	a2,0xa6794
1c00b12c:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00b130:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00b134:	9bba                	add	s7,s7,a4
1c00b136:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00b138:	00e54b33          	xor	s6,a0,a4
1c00b13c:	017b7b33          	and	s6,s6,s7
1c00b140:	00ab4b33          	xor	s6,s6,a0
1c00b144:	0897a823          	sw	s1,144(a5)
1c00b148:	9eda                	add	t4,t4,s6
1c00b14a:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00b14e:	03c5ae83          	lw	t4,60(a1)
1c00b152:	49b416b7          	lui	a3,0x49b41
1c00b156:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db24085>
1c00b15a:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00b15e:	9b5e                	add	s6,s6,s7
1c00b160:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00b162:	01774633          	xor	a2,a4,s7
1c00b166:	01667633          	and	a2,a2,s6
1c00b16a:	8e39                	xor	a2,a2,a4
1c00b16c:	9532                	add	a0,a0,a2
1c00b16e:	09855633          	p.ror	a2,a0,s8
1c00b172:	4c22                	lw	s8,8(sp)
1c00b174:	f61e2d37          	lui	s10,0xf61e2
1c00b178:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c00b17c:	965a                	add	a2,a2,s6
1c00b17e:	01ac06b3          	add	a3,s8,s10
1c00b182:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c00b184:	00cb46b3          	xor	a3,s6,a2
1c00b188:	0176f6b3          	and	a3,a3,s7
1c00b18c:	0166c6b3          	xor	a3,a3,s6
1c00b190:	4ded                	li	s11,27
1c00b192:	96ba                	add	a3,a3,a4
1c00b194:	c040b537          	lui	a0,0xc040b
1c00b198:	09b6d6b3          	p.ror	a3,a3,s11
1c00b19c:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c00b1a0:	96b2                	add	a3,a3,a2
1c00b1a2:	00ae0733          	add	a4,t3,a0
1c00b1a6:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c00b1a8:	00d64733          	xor	a4,a2,a3
1c00b1ac:	01677733          	and	a4,a4,s6
1c00b1b0:	8f31                	xor	a4,a4,a2
1c00b1b2:	4d5d                	li	s10,23
1c00b1b4:	975e                	add	a4,a4,s7
1c00b1b6:	265e6bb7          	lui	s7,0x265e6
1c00b1ba:	09a75733          	p.ror	a4,a4,s10
1c00b1be:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5c92b5>
1c00b1c2:	9736                	add	a4,a4,a3
1c00b1c4:	01788533          	add	a0,a7,s7
1c00b1c8:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c00b1ca:	00e6cb33          	xor	s6,a3,a4
1c00b1ce:	00cb7b33          	and	s6,s6,a2
1c00b1d2:	00db4b33          	xor	s6,s6,a3
1c00b1d6:	4cc9                	li	s9,18
1c00b1d8:	9b2a                	add	s6,s6,a0
1c00b1da:	e9b6cc37          	lui	s8,0xe9b6c
1c00b1de:	099b5b33          	p.ror	s6,s6,s9
1c00b1e2:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c00b1e6:	9b3a                	add	s6,s6,a4
1c00b1e8:	01898533          	add	a0,s3,s8
1c00b1ec:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00b1ee:	01674533          	xor	a0,a4,s6
1c00b1f2:	8d75                	and	a0,a0,a3
1c00b1f4:	8d39                	xor	a0,a0,a4
1c00b1f6:	4c31                	li	s8,12
1c00b1f8:	9532                	add	a0,a0,a2
1c00b1fa:	d62f1bb7          	lui	s7,0xd62f1
1c00b1fe:	09855533          	p.ror	a0,a0,s8
1c00b202:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c00b206:	955a                	add	a0,a0,s6
1c00b208:	01740633          	add	a2,s0,s7
1c00b20c:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00b20e:	00ab4633          	xor	a2,s6,a0
1c00b212:	8e79                	and	a2,a2,a4
1c00b214:	01664633          	xor	a2,a2,s6
1c00b218:	96b2                	add	a3,a3,a2
1c00b21a:	02441bb7          	lui	s7,0x2441
1c00b21e:	09b6d6b3          	p.ror	a3,a3,s11
1c00b222:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c00b226:	96aa                	add	a3,a3,a0
1c00b228:	017f8633          	add	a2,t6,s7
1c00b22c:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00b22e:	00d54633          	xor	a2,a0,a3
1c00b232:	01667633          	and	a2,a2,s6
1c00b236:	8e29                	xor	a2,a2,a0
1c00b238:	9732                	add	a4,a4,a2
1c00b23a:	d8a1ebb7          	lui	s7,0xd8a1e
1c00b23e:	09a75733          	p.ror	a4,a4,s10
1c00b242:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c00b246:	9736                	add	a4,a4,a3
1c00b248:	017e8633          	add	a2,t4,s7
1c00b24c:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00b24e:	00e6c633          	xor	a2,a3,a4
1c00b252:	8e69                	and	a2,a2,a0
1c00b254:	8e35                	xor	a2,a2,a3
1c00b256:	4bc2                	lw	s7,16(sp)
1c00b258:	9b32                	add	s6,s6,a2
1c00b25a:	e7d40637          	lui	a2,0xe7d40
1c00b25e:	099b5b33          	p.ror	s6,s6,s9
1c00b262:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c00b266:	9b3a                	add	s6,s6,a4
1c00b268:	965e                	add	a2,a2,s7
1c00b26a:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c00b26c:	01674633          	xor	a2,a4,s6
1c00b270:	8e75                	and	a2,a2,a3
1c00b272:	8e39                	xor	a2,a2,a4
1c00b274:	9532                	add	a0,a0,a2
1c00b276:	4652                	lw	a2,20(sp)
1c00b278:	21e1dbb7          	lui	s7,0x21e1d
1c00b27c:	09855533          	p.ror	a0,a0,s8
1c00b280:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e0064a>
1c00b284:	955a                	add	a0,a0,s6
1c00b286:	9bb2                	add	s7,s7,a2
1c00b288:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c00b28a:	00ab4bb3          	xor	s7,s6,a0
1c00b28e:	00ebfbb3          	and	s7,s7,a4
1c00b292:	016bcbb3          	xor	s7,s7,s6
1c00b296:	9bb6                	add	s7,s7,a3
1c00b298:	c3370637          	lui	a2,0xc3370
1c00b29c:	09bbdbb3          	p.ror	s7,s7,s11
1c00b2a0:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c00b2a4:	9baa                	add	s7,s7,a0
1c00b2a6:	9626                	add	a2,a2,s1
1c00b2a8:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c00b2aa:	01754633          	xor	a2,a0,s7
1c00b2ae:	01667633          	and	a2,a2,s6
1c00b2b2:	8e29                	xor	a2,a2,a0
1c00b2b4:	963a                	add	a2,a2,a4
1c00b2b6:	f4d51737          	lui	a4,0xf4d51
1c00b2ba:	09a65633          	p.ror	a2,a2,s10
1c00b2be:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c00b2c2:	965e                	add	a2,a2,s7
1c00b2c4:	9716                	add	a4,a4,t0
1c00b2c6:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c00b2c8:	00cbc733          	xor	a4,s7,a2
1c00b2cc:	8f69                	and	a4,a4,a0
1c00b2ce:	01774733          	xor	a4,a4,s7
1c00b2d2:	9b3a                	add	s6,s6,a4
1c00b2d4:	455a1737          	lui	a4,0x455a1
1c00b2d8:	099b5b33          	p.ror	s6,s6,s9
1c00b2dc:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x29584d51>
1c00b2e0:	9b32                	add	s6,s6,a2
1c00b2e2:	977a                	add	a4,a4,t5
1c00b2e4:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c00b2e6:	01664733          	xor	a4,a2,s6
1c00b2ea:	01777733          	and	a4,a4,s7
1c00b2ee:	8f31                	xor	a4,a4,a2
1c00b2f0:	953a                	add	a0,a0,a4
1c00b2f2:	a9e3f6b7          	lui	a3,0xa9e3f
1c00b2f6:	09855533          	p.ror	a0,a0,s8
1c00b2fa:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c00b2fe:	955a                	add	a0,a0,s6
1c00b300:	969a                	add	a3,a3,t1
1c00b302:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c00b304:	00ab46b3          	xor	a3,s6,a0
1c00b308:	8ef1                	and	a3,a3,a2
1c00b30a:	0166c6b3          	xor	a3,a3,s6
1c00b30e:	9bb6                	add	s7,s7,a3
1c00b310:	09bbd6b3          	p.ror	a3,s7,s11
1c00b314:	4bb2                	lw	s7,12(sp)
1c00b316:	fcefa737          	lui	a4,0xfcefa
1c00b31a:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c00b31e:	96aa                	add	a3,a3,a0
1c00b320:	975e                	add	a4,a4,s7
1c00b322:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c00b324:	00d54733          	xor	a4,a0,a3
1c00b328:	01677733          	and	a4,a4,s6
1c00b32c:	8f29                	xor	a4,a4,a0
1c00b32e:	963a                	add	a2,a2,a4
1c00b330:	09a65733          	p.ror	a4,a2,s10
1c00b334:	676f0637          	lui	a2,0x676f0
1c00b338:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6d3b3d>
1c00b33c:	9736                	add	a4,a4,a3
1c00b33e:	964a                	add	a2,a2,s2
1c00b340:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c00b342:	00e6c633          	xor	a2,a3,a4
1c00b346:	8e69                	and	a2,a2,a0
1c00b348:	8e35                	xor	a2,a2,a3
1c00b34a:	9b32                	add	s6,s6,a2
1c00b34c:	8d2a5637          	lui	a2,0x8d2a5
1c00b350:	099b5b33          	p.ror	s6,s6,s9
1c00b354:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c00b358:	9b3a                	add	s6,s6,a4
1c00b35a:	961e                	add	a2,a2,t2
1c00b35c:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c00b35e:	01674633          	xor	a2,a4,s6
1c00b362:	8e75                	and	a2,a2,a3
1c00b364:	8e39                	xor	a2,a2,a4
1c00b366:	9532                	add	a0,a0,a2
1c00b368:	09855533          	p.ror	a0,a0,s8
1c00b36c:	fffa4637          	lui	a2,0xfffa4
1c00b370:	955a                	add	a0,a0,s6
1c00b372:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c00b376:	00ab4bb3          	xor	s7,s6,a0
1c00b37a:	9622                	add	a2,a2,s0
1c00b37c:	96b2                	add	a3,a3,a2
1c00b37e:	00ebc633          	xor	a2,s7,a4
1c00b382:	4cf1                	li	s9,28
1c00b384:	96b2                	add	a3,a3,a2
1c00b386:	8771f637          	lui	a2,0x8771f
1c00b38a:	0996d6b3          	p.ror	a3,a3,s9
1c00b38e:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c00b392:	96aa                	add	a3,a3,a0
1c00b394:	967a                	add	a2,a2,t5
1c00b396:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c00b398:	00dbc633          	xor	a2,s7,a3
1c00b39c:	4c55                	li	s8,21
1c00b39e:	963a                	add	a2,a2,a4
1c00b3a0:	09865633          	p.ror	a2,a2,s8
1c00b3a4:	6d9d6737          	lui	a4,0x6d9d6
1c00b3a8:	9636                	add	a2,a2,a3
1c00b3aa:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519b9986>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c00b3ae:	00c6cd33          	xor	s10,a3,a2
1c00b3b2:	9746                	add	a4,a4,a7
1c00b3b4:	975a                	add	a4,a4,s6
1c00b3b6:	00ad4b33          	xor	s6,s10,a0
1c00b3ba:	4bc1                	li	s7,16
1c00b3bc:	975a                	add	a4,a4,s6
1c00b3be:	fde54b37          	lui	s6,0xfde54
1c00b3c2:	09775733          	p.ror	a4,a4,s7
1c00b3c6:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c00b3ca:	9732                	add	a4,a4,a2
1c00b3cc:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c00b3ce:	00ed4d33          	xor	s10,s10,a4
1c00b3d2:	955a                	add	a0,a0,s6
1c00b3d4:	956a                	add	a0,a0,s10
1c00b3d6:	4b25                	li	s6,9
1c00b3d8:	09655533          	p.ror	a0,a0,s6
1c00b3dc:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00b3de:	00a74d33          	xor	s10,a4,a0
1c00b3e2:	4da2                	lw	s11,8(sp)
1c00b3e4:	c06a                	sw	s10,0(sp)
1c00b3e6:	a4befd37          	lui	s10,0xa4bef
1c00b3ea:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c00b3ee:	9dea                	add	s11,s11,s10
1c00b3f0:	96ee                	add	a3,a3,s11
1c00b3f2:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00b3f4:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c00b3f8:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00b3fc:	00cdcd33          	xor	s10,s11,a2
1c00b400:	96ea                	add	a3,a3,s10
1c00b402:	4d42                	lw	s10,16(sp)
1c00b404:	4bdeddb7          	lui	s11,0x4bded
1c00b408:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fdd080d>
1c00b40c:	9d6e                	add	s10,s10,s11
1c00b40e:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00b410:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00b412:	0996d6b3          	p.ror	a3,a3,s9
1c00b416:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00b418:	00dd4db3          	xor	s11,s10,a3
1c00b41c:	966e                	add	a2,a2,s11
1c00b41e:	09865633          	p.ror	a2,a2,s8
1c00b422:	f6bb5db7          	lui	s11,0xf6bb5
1c00b426:	9636                	add	a2,a2,a3
1c00b428:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c00b42c:	00c6cd33          	xor	s10,a3,a2
1c00b430:	9dca                	add	s11,s11,s2
1c00b432:	976e                	add	a4,a4,s11
1c00b434:	00ad4db3          	xor	s11,s10,a0
1c00b438:	976e                	add	a4,a4,s11
1c00b43a:	bebfcdb7          	lui	s11,0xbebfc
1c00b43e:	09775733          	p.ror	a4,a4,s7
1c00b442:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c00b446:	9732                	add	a4,a4,a2
1c00b448:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c00b44a:	00ed4d33          	xor	s10,s10,a4
1c00b44e:	956e                	add	a0,a0,s11
1c00b450:	956a                	add	a0,a0,s10
1c00b452:	09655533          	p.ror	a0,a0,s6
1c00b456:	289b8d37          	lui	s10,0x289b8
1c00b45a:	953a                	add	a0,a0,a4
1c00b45c:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc99b72a>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00b460:	00a74db3          	xor	s11,a4,a0
1c00b464:	9d1a                	add	s10,s10,t1
1c00b466:	96ea                	add	a3,a3,s10
1c00b468:	00cdcd33          	xor	s10,s11,a2
1c00b46c:	9d36                	add	s10,s10,a3
1c00b46e:	eaa126b7          	lui	a3,0xeaa12
1c00b472:	099d5d33          	p.ror	s10,s10,s9
1c00b476:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c00b47a:	9d2a                	add	s10,s10,a0
1c00b47c:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c00b47e:	01adcdb3          	xor	s11,s11,s10
1c00b482:	9636                	add	a2,a2,a3
1c00b484:	966e                	add	a2,a2,s11
1c00b486:	09865633          	p.ror	a2,a2,s8
1c00b48a:	d4ef3db7          	lui	s11,0xd4ef3
1c00b48e:	966a                	add	a2,a2,s10
1c00b490:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c00b494:	00cd46b3          	xor	a3,s10,a2
1c00b498:	9d96                	add	s11,s11,t0
1c00b49a:	976e                	add	a4,a4,s11
1c00b49c:	00a6cdb3          	xor	s11,a3,a0
1c00b4a0:	9dba                	add	s11,s11,a4
1c00b4a2:	04882737          	lui	a4,0x4882
1c00b4a6:	097dddb3          	p.ror	s11,s11,s7
1c00b4aa:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c00b4ae:	9db2                	add	s11,s11,a2
1c00b4b0:	9772                	add	a4,a4,t3
1c00b4b2:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c00b4b4:	01b6c6b3          	xor	a3,a3,s11
1c00b4b8:	96aa                	add	a3,a3,a0
1c00b4ba:	0966d6b3          	p.ror	a3,a3,s6
1c00b4be:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c00b4c0:	00ddc533          	xor	a0,s11,a3
1c00b4c4:	4752                	lw	a4,20(sp)
1c00b4c6:	c02a                	sw	a0,0(sp)
1c00b4c8:	d9d4d537          	lui	a0,0xd9d4d
1c00b4cc:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c00b4d0:	972a                	add	a4,a4,a0
1c00b4d2:	9d3a                	add	s10,s10,a4
1c00b4d4:	4702                	lw	a4,0(sp)
1c00b4d6:	00c74533          	xor	a0,a4,a2
1c00b4da:	9d2a                	add	s10,s10,a0
1c00b4dc:	e6dba537          	lui	a0,0xe6dba
1c00b4e0:	099d5cb3          	p.ror	s9,s10,s9
1c00b4e4:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c00b4e8:	9cb6                	add	s9,s9,a3
1c00b4ea:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c00b4ec:	01974733          	xor	a4,a4,s9
1c00b4f0:	962a                	add	a2,a2,a0
1c00b4f2:	963a                	add	a2,a2,a4
1c00b4f4:	09865c33          	p.ror	s8,a2,s8
1c00b4f8:	1fa28737          	lui	a4,0x1fa28
1c00b4fc:	9c66                	add	s8,s8,s9
1c00b4fe:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a0b55c>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00b502:	018ccd33          	xor	s10,s9,s8
1c00b506:	9776                	add	a4,a4,t4
1c00b508:	9dba                	add	s11,s11,a4
1c00b50a:	00dd4733          	xor	a4,s10,a3
1c00b50e:	9dba                	add	s11,s11,a4
1c00b510:	097ddbb3          	p.ror	s7,s11,s7
1c00b514:	4db2                	lw	s11,12(sp)
1c00b516:	c4ac5737          	lui	a4,0xc4ac5
1c00b51a:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c00b51e:	9be2                	add	s7,s7,s8
1c00b520:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00b522:	017d4d33          	xor	s10,s10,s7
1c00b526:	96ba                	add	a3,a3,a4
1c00b528:	f4292737          	lui	a4,0xf4292
1c00b52c:	96ea                	add	a3,a3,s10
1c00b52e:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00b532:	0966db33          	p.ror	s6,a3,s6
1c00b536:	99ba                	add	s3,s3,a4
1c00b538:	9b5e                	add	s6,s6,s7
1c00b53a:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c00b53c:	fffc4c93          	not	s9,s8
1c00b540:	016cecb3          	or	s9,s9,s6
1c00b544:	017cccb3          	xor	s9,s9,s7
1c00b548:	432b0737          	lui	a4,0x432b0
1c00b54c:	4669                	li	a2,26
1c00b54e:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x272937fb>
1c00b552:	9cce                	add	s9,s9,s3
1c00b554:	08ccdcb3          	p.ror	s9,s9,a2
1c00b558:	993a                	add	s2,s2,a4
1c00b55a:	9cda                	add	s9,s9,s6
1c00b55c:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c00b55e:	fffbcc13          	not	s8,s7
1c00b562:	019c6c33          	or	s8,s8,s9
1c00b566:	016c4c33          	xor	s8,s8,s6
1c00b56a:	ab942737          	lui	a4,0xab942
1c00b56e:	4559                	li	a0,22
1c00b570:	9c4a                	add	s8,s8,s2
1c00b572:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c00b576:	08ac5c33          	p.ror	s8,s8,a0
1c00b57a:	94ba                	add	s1,s1,a4
1c00b57c:	9c66                	add	s8,s8,s9
1c00b57e:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c00b580:	fffb4b93          	not	s7,s6
1c00b584:	018bebb3          	or	s7,s7,s8
1c00b588:	019bcbb3          	xor	s7,s7,s9
1c00b58c:	fc93a737          	lui	a4,0xfc93a
1c00b590:	4945                	li	s2,17
1c00b592:	9ba6                	add	s7,s7,s1
1c00b594:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c00b598:	9722                	add	a4,a4,s0
1c00b59a:	092bdbb3          	p.ror	s7,s7,s2
1c00b59e:	9be2                	add	s7,s7,s8
1c00b5a0:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c00b5a2:	fffcc713          	not	a4,s9
1c00b5a6:	01776733          	or	a4,a4,s7
1c00b5aa:	01874733          	xor	a4,a4,s8
1c00b5ae:	46ad                	li	a3,11
1c00b5b0:	975a                	add	a4,a4,s6
1c00b5b2:	08d75733          	p.ror	a4,a4,a3
1c00b5b6:	655b6437          	lui	s0,0x655b6
1c00b5ba:	975e                	add	a4,a4,s7
1c00b5bc:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x49599227>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c00b5c0:	fffc4493          	not	s1,s8
1c00b5c4:	93a2                	add	t2,t2,s0
1c00b5c6:	8cd9                	or	s1,s1,a4
1c00b5c8:	9c9e                	add	s9,s9,t2
1c00b5ca:	0174c4b3          	xor	s1,s1,s7
1c00b5ce:	9ca6                	add	s9,s9,s1
1c00b5d0:	08ccdcb3          	p.ror	s9,s9,a2
1c00b5d4:	8f0cd3b7          	lui	t2,0x8f0cd
1c00b5d8:	9cba                	add	s9,s9,a4
1c00b5da:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c00b5de:	fffbc413          	not	s0,s7
1c00b5e2:	929e                	add	t0,t0,t2
1c00b5e4:	01946433          	or	s0,s0,s9
1c00b5e8:	9c16                	add	s8,s8,t0
1c00b5ea:	8c39                	xor	s0,s0,a4
1c00b5ec:	9c22                	add	s8,s8,s0
1c00b5ee:	08ac5c33          	p.ror	s8,s8,a0
1c00b5f2:	ffeff2b7          	lui	t0,0xffeff
1c00b5f6:	9c66                	add	s8,s8,s9
1c00b5f8:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c00b5fc:	fff74393          	not	t2,a4
1c00b600:	9f96                	add	t6,t6,t0
1c00b602:	0183e3b3          	or	t2,t2,s8
1c00b606:	9bfe                	add	s7,s7,t6
1c00b608:	0193c3b3          	xor	t2,t2,s9
1c00b60c:	42a2                	lw	t0,8(sp)
1c00b60e:	9b9e                	add	s7,s7,t2
1c00b610:	85846fb7          	lui	t6,0x85846
1c00b614:	092bdbb3          	p.ror	s7,s7,s2
1c00b618:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c00b61c:	9be2                	add	s7,s7,s8
1c00b61e:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00b620:	fffcc293          	not	t0,s9
1c00b624:	0172e2b3          	or	t0,t0,s7
1c00b628:	0182c2b3          	xor	t0,t0,s8
1c00b62c:	977e                	add	a4,a4,t6
1c00b62e:	9716                	add	a4,a4,t0
1c00b630:	08d75733          	p.ror	a4,a4,a3
1c00b634:	6fa88fb7          	lui	t6,0x6fa88
1c00b638:	975e                	add	a4,a4,s7
1c00b63a:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a6b6b3>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c00b63e:	fffc4293          	not	t0,s8
1c00b642:	9f7e                	add	t5,t5,t6
1c00b644:	00e2e2b3          	or	t0,t0,a4
1c00b648:	9cfa                	add	s9,s9,t5
1c00b64a:	0172c2b3          	xor	t0,t0,s7
1c00b64e:	9c96                	add	s9,s9,t0
1c00b650:	08ccdcb3          	p.ror	s9,s9,a2
1c00b654:	fe2cef37          	lui	t5,0xfe2ce
1c00b658:	9cba                	add	s9,s9,a4
1c00b65a:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c00b65e:	fffbcf93          	not	t6,s7
1c00b662:	9efa                	add	t4,t4,t5
1c00b664:	019fefb3          	or	t6,t6,s9
1c00b668:	9c76                	add	s8,s8,t4
1c00b66a:	00efcfb3          	xor	t6,t6,a4
1c00b66e:	9c7e                	add	s8,s8,t6
1c00b670:	08ac5c33          	p.ror	s8,s8,a0
1c00b674:	a3014eb7          	lui	t4,0xa3014
1c00b678:	9c66                	add	s8,s8,s9
1c00b67a:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c00b67e:	fff74f13          	not	t5,a4
1c00b682:	9e76                	add	t3,t3,t4
1c00b684:	018f6f33          	or	t5,t5,s8
1c00b688:	9bf2                	add	s7,s7,t3
1c00b68a:	019f4f33          	xor	t5,t5,s9
1c00b68e:	9bfa                	add	s7,s7,t5
1c00b690:	092bdbb3          	p.ror	s7,s7,s2
1c00b694:	4e081e37          	lui	t3,0x4e081
1c00b698:	9be2                	add	s7,s7,s8
1c00b69a:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32064a05>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c00b69e:	fffcce93          	not	t4,s9
1c00b6a2:	9372                	add	t1,t1,t3
1c00b6a4:	017eeeb3          	or	t4,t4,s7
1c00b6a8:	018eceb3          	xor	t4,t4,s8
1c00b6ac:	971a                	add	a4,a4,t1
1c00b6ae:	9776                	add	a4,a4,t4
1c00b6b0:	4d42                	lw	s10,16(sp)
1c00b6b2:	08d75733          	p.ror	a4,a4,a3
1c00b6b6:	f7538337          	lui	t1,0xf7538
1c00b6ba:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c00b6bc:	fffc4e13          	not	t3,s8
1c00b6c0:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c00b6c4:	936a                	add	t1,t1,s10
1c00b6c6:	00ee6e33          	or	t3,t3,a4
1c00b6ca:	017e4e33          	xor	t3,t3,s7
1c00b6ce:	9c9a                	add	s9,s9,t1
1c00b6d0:	9cf2                	add	s9,s9,t3
1c00b6d2:	08ccd633          	p.ror	a2,s9,a2
1c00b6d6:	bd3af337          	lui	t1,0xbd3af
1c00b6da:	963a                	add	a2,a2,a4
1c00b6dc:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c00b6e0:	fffbce13          	not	t3,s7
1c00b6e4:	989a                	add	a7,a7,t1
1c00b6e6:	00ce6e33          	or	t3,t3,a2
1c00b6ea:	00ee4e33          	xor	t3,t3,a4
1c00b6ee:	9c46                	add	s8,s8,a7
1c00b6f0:	9c72                	add	s8,s8,t3
1c00b6f2:	08ac5533          	p.ror	a0,s8,a0
1c00b6f6:	2ad7d8b7          	lui	a7,0x2ad7d
1c00b6fa:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c00b6fc:	fff74313          	not	t1,a4
1c00b700:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed60b1f>
1c00b704:	98ee                	add	a7,a7,s11
1c00b706:	00a36333          	or	t1,t1,a0
1c00b70a:	9bc6                	add	s7,s7,a7
1c00b70c:	00c34333          	xor	t1,t1,a2
1c00b710:	9b9a                	add	s7,s7,t1
1c00b712:	4dd2                	lw	s11,20(sp)
1c00b714:	092bd933          	p.ror	s2,s7,s2
1c00b718:	eb86d8b7          	lui	a7,0xeb86d
1c00b71c:	992a                	add	s2,s2,a0
1c00b71e:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b722:	fff64313          	not	t1,a2
		a += saved_a;
1c00b726:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c00b728:	4ef2                	lw	t4,28(sp)
1c00b72a:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b72c:	01236333          	or	t1,t1,s2
1c00b730:	9746                	add	a4,a4,a7
1c00b732:	00a34333          	xor	t1,t1,a0
1c00b736:	971a                	add	a4,a4,t1
1c00b738:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c00b73c:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c00b73e:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00b740:	974a                	add	a4,a4,s2
		a += saved_a;
1c00b742:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c00b744:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c00b746:	983a                	add	a6,a6,a4
		c += saved_c;
1c00b748:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c00b74a:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c00b74c:	f80e9a63          	bnez	t4,1c00aee0 <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c00b750:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c00b752:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c00b756:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c00b75a:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c00b75e:	0107a623          	sw	a6,12(a5)
}
1c00b762:	44a6                	lw	s1,72(sp)
1c00b764:	4916                	lw	s2,68(sp)
1c00b766:	4986                	lw	s3,64(sp)
1c00b768:	5a72                	lw	s4,60(sp)
1c00b76a:	5ae2                	lw	s5,56(sp)
1c00b76c:	5b52                	lw	s6,52(sp)
1c00b76e:	5bc2                	lw	s7,48(sp)
1c00b770:	5c32                	lw	s8,44(sp)
1c00b772:	5ca2                	lw	s9,40(sp)
1c00b774:	5d12                	lw	s10,36(sp)
1c00b776:	5d82                	lw	s11,32(sp)
1c00b778:	852e                	mv	a0,a1
1c00b77a:	6161                	addi	sp,sp,80
1c00b77c:	8082                	ret

1c00b77e <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c00b77e:	674527b7          	lui	a5,0x67452
1c00b782:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b435b65>
1c00b786:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c00b788:	efcdb7b7          	lui	a5,0xefcdb
1c00b78c:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c00b790:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c00b792:	98bae7b7          	lui	a5,0x98bae
1c00b796:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c00b79a:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c00b79c:	103257b7          	lui	a5,0x10325
1c00b7a0:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325452>
1c00b7a4:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c00b7a6:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c00b7aa:	00052223          	sw	zero,4(a0)
}
1c00b7ae:	8082                	ret

1c00b7b0 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00b7b0:	1101                	addi	sp,sp,-32
1c00b7b2:	cc22                	sw	s0,24(sp)
1c00b7b4:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c00b7b6:	4108                	lw	a0,0(a0)
{
1c00b7b8:	ca26                	sw	s1,20(sp)
1c00b7ba:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b7bc:	00c507b3          	add	a5,a0,a2
{
1c00b7c0:	ce06                	sw	ra,28(sp)
1c00b7c2:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b7c4:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c00b7c8:	c01c                	sw	a5,0(s0)
{
1c00b7ca:	892e                	mv	s2,a1
1c00b7cc:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00b7ce:	00a7f563          	bleu	a0,a5,1c00b7d8 <MD5_Update+0x28>
		ctx->hi++;
1c00b7d2:	405c                	lw	a5,4(s0)
1c00b7d4:	0785                	addi	a5,a5,1
1c00b7d6:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c00b7d8:	4058                	lw	a4,4(s0)
1c00b7da:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c00b7de:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c00b7e2:	97ba                	add	a5,a5,a4
1c00b7e4:	c05c                	sw	a5,4(s0)

	if (used) {
1c00b7e6:	c129                	beqz	a0,1c00b828 <MD5_Update+0x78>
		available = 64 - used;
1c00b7e8:	04000993          	li	s3,64
1c00b7ec:	40a989b3          	sub	s3,s3,a0
1c00b7f0:	0561                	addi	a0,a0,24
1c00b7f2:	9522                	add	a0,a0,s0

		if (size < available) {
1c00b7f4:	0134fc63          	bleu	s3,s1,1c00b80c <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c00b7f8:	8626                	mv	a2,s1
1c00b7fa:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c00b7fc:	4462                	lw	s0,24(sp)
1c00b7fe:	40f2                	lw	ra,28(sp)
1c00b800:	44d2                	lw	s1,20(sp)
1c00b802:	4942                	lw	s2,16(sp)
1c00b804:	49b2                	lw	s3,12(sp)
1c00b806:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c00b808:	2f50206f          	j	1c00e2fc <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c00b80c:	85ca                	mv	a1,s2
1c00b80e:	864e                	mv	a2,s3
1c00b810:	2ed020ef          	jal	ra,1c00e2fc <memcpy>
		body(ctx, ctx->buffer, 64);
1c00b814:	04000613          	li	a2,64
1c00b818:	01840593          	addi	a1,s0,24
1c00b81c:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c00b81e:	994e                	add	s2,s2,s3
		size -= available;
1c00b820:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c00b824:	e84ff0ef          	jal	ra,1c00aea8 <body>
	if (size >= 64) {
1c00b828:	03f00793          	li	a5,63
1c00b82c:	0097fb63          	bleu	s1,a5,1c00b842 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c00b830:	ca04b633          	p.bclr	a2,s1,5,0
1c00b834:	85ca                	mv	a1,s2
1c00b836:	8522                	mv	a0,s0
1c00b838:	e70ff0ef          	jal	ra,1c00aea8 <body>
1c00b83c:	892a                	mv	s2,a0
		size &= 0x3f;
1c00b83e:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c00b842:	8626                	mv	a2,s1
1c00b844:	85ca                	mv	a1,s2
1c00b846:	01840513          	addi	a0,s0,24
1c00b84a:	bf4d                	j	1c00b7fc <MD5_Update+0x4c>

1c00b84c <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c00b84c:	1141                	addi	sp,sp,-16
1c00b84e:	c226                	sw	s1,4(sp)
1c00b850:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c00b852:	4188                	lw	a0,0(a1)
{
1c00b854:	c422                	sw	s0,8(sp)
1c00b856:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c00b858:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c00b85c:	00a58733          	add	a4,a1,a0
{
1c00b860:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c00b862:	00150793          	addi	a5,a0,1
1c00b866:	f8000693          	li	a3,-128

	available = 64 - used;
1c00b86a:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c00b86e:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c00b872:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c00b874:	471d                	li	a4,7
{
1c00b876:	842e                	mv	s0,a1
1c00b878:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c00b87c:	02c76063          	bltu	a4,a2,1c00b89c <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c00b880:	0565                	addi	a0,a0,25
1c00b882:	4581                	li	a1,0
1c00b884:	9522                	add	a0,a0,s0
1c00b886:	267020ef          	jal	ra,1c00e2ec <memset>
		body(ctx, ctx->buffer, 64);
1c00b88a:	04000613          	li	a2,64
1c00b88e:	85ca                	mv	a1,s2
1c00b890:	8522                	mv	a0,s0
1c00b892:	e16ff0ef          	jal	ra,1c00aea8 <body>
		used = 0;
		available = 64;
1c00b896:	04000613          	li	a2,64
		used = 0;
1c00b89a:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c00b89c:	01878513          	addi	a0,a5,24
1c00b8a0:	1661                	addi	a2,a2,-8
1c00b8a2:	4581                	li	a1,0
1c00b8a4:	9522                	add	a0,a0,s0
1c00b8a6:	247020ef          	jal	ra,1c00e2ec <memset>

	ctx->lo <<= 3;
1c00b8aa:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c00b8ac:	85ca                	mv	a1,s2
1c00b8ae:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c00b8b2:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c00b8b4:	873e                	mv	a4,a5
1c00b8b6:	04e40823          	sb	a4,80(s0)
1c00b8ba:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c00b8be:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00b8c0:	04e408a3          	sb	a4,81(s0)
1c00b8c4:	0107d713          	srli	a4,a5,0x10
1c00b8c8:	83e1                	srli	a5,a5,0x18
1c00b8ca:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00b8ce:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00b8d0:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00b8d4:	873e                	mv	a4,a5
1c00b8d6:	04e40a23          	sb	a4,84(s0)
1c00b8da:	0087d713          	srli	a4,a5,0x8
1c00b8de:	04e40aa3          	sb	a4,85(s0)
1c00b8e2:	0107d713          	srli	a4,a5,0x10
1c00b8e6:	83e1                	srli	a5,a5,0x18
1c00b8e8:	04f40ba3          	sb	a5,87(s0)
1c00b8ec:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00b8f0:	8522                	mv	a0,s0
1c00b8f2:	db6ff0ef          	jal	ra,1c00aea8 <body>

	OUT(&result[0], ctx->a)
1c00b8f6:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c00b8f8:	8522                	mv	a0,s0
1c00b8fa:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c00b8fe:	00f48023          	sb	a5,0(s1)
1c00b902:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c00b904:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c00b906:	83a1                	srli	a5,a5,0x8
1c00b908:	00f480a3          	sb	a5,1(s1)
1c00b90c:	00a45783          	lhu	a5,10(s0)
1c00b910:	00f48123          	sb	a5,2(s1)
1c00b914:	00b44783          	lbu	a5,11(s0)
1c00b918:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c00b91c:	445c                	lw	a5,12(s0)
1c00b91e:	00f48223          	sb	a5,4(s1)
1c00b922:	445c                	lw	a5,12(s0)
1c00b924:	83a1                	srli	a5,a5,0x8
1c00b926:	00f482a3          	sb	a5,5(s1)
1c00b92a:	00e45783          	lhu	a5,14(s0)
1c00b92e:	00f48323          	sb	a5,6(s1)
1c00b932:	00f44783          	lbu	a5,15(s0)
1c00b936:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c00b93a:	481c                	lw	a5,16(s0)
1c00b93c:	00f48423          	sb	a5,8(s1)
1c00b940:	481c                	lw	a5,16(s0)
1c00b942:	83a1                	srli	a5,a5,0x8
1c00b944:	00f484a3          	sb	a5,9(s1)
1c00b948:	01245783          	lhu	a5,18(s0)
1c00b94c:	00f48523          	sb	a5,10(s1)
1c00b950:	01344783          	lbu	a5,19(s0)
1c00b954:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c00b958:	485c                	lw	a5,20(s0)
1c00b95a:	00f48623          	sb	a5,12(s1)
1c00b95e:	485c                	lw	a5,20(s0)
1c00b960:	83a1                	srli	a5,a5,0x8
1c00b962:	00f486a3          	sb	a5,13(s1)
1c00b966:	01645783          	lhu	a5,22(s0)
1c00b96a:	00f48723          	sb	a5,14(s1)
1c00b96e:	01744783          	lbu	a5,23(s0)
1c00b972:	00f487a3          	sb	a5,15(s1)
}
1c00b976:	40b2                	lw	ra,12(sp)
1c00b978:	4422                	lw	s0,8(sp)
1c00b97a:	4492                	lw	s1,4(sp)
1c00b97c:	4902                	lw	s2,0(sp)
1c00b97e:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00b980:	16d0206f          	j	1c00e2ec <memset>

1c00b984 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c00b984:	01f01013          	slli	zero,zero,0x1f
1c00b988:	00100073          	ebreak
1c00b98c:	40705013          	srai	zero,zero,0x7
1c00b990:	8082                	ret

1c00b992 <semihost_write0>:
1c00b992:	85aa                	mv	a1,a0
1c00b994:	4511                	li	a0,4
1c00b996:	fefff06f          	j	1c00b984 <__internal_semihost>

1c00b99a <semihost_open>:
1c00b99a:	7139                	addi	sp,sp,-64
1c00b99c:	de06                	sw	ra,60(sp)
1c00b99e:	dc22                	sw	s0,56(sp)
1c00b9a0:	c62e                	sw	a1,12(sp)
1c00b9a2:	842a                	mv	s0,a0
1c00b9a4:	133020ef          	jal	ra,1c00e2d6 <strlen>
1c00b9a8:	45b2                	lw	a1,12(sp)
1c00b9aa:	083c                	addi	a5,sp,24
1c00b9ac:	c380                	sw	s0,0(a5)
1c00b9ae:	087c                	addi	a5,sp,28
1c00b9b0:	c38c                	sw	a1,0(a5)
1c00b9b2:	101c                	addi	a5,sp,32
1c00b9b4:	c388                	sw	a0,0(a5)
1c00b9b6:	082c                	addi	a1,sp,24
1c00b9b8:	4505                	li	a0,1
1c00b9ba:	fcbff0ef          	jal	ra,1c00b984 <__internal_semihost>
1c00b9be:	50f2                	lw	ra,60(sp)
1c00b9c0:	5462                	lw	s0,56(sp)
1c00b9c2:	6121                	addi	sp,sp,64
1c00b9c4:	8082                	ret

1c00b9c6 <semihost_close>:
1c00b9c6:	85aa                	mv	a1,a0
1c00b9c8:	4509                	li	a0,2
1c00b9ca:	fbbff06f          	j	1c00b984 <__internal_semihost>

1c00b9ce <semihost_read>:
1c00b9ce:	7179                	addi	sp,sp,-48
1c00b9d0:	d606                	sw	ra,44(sp)
1c00b9d2:	003c                	addi	a5,sp,8
1c00b9d4:	c388                	sw	a0,0(a5)
1c00b9d6:	007c                	addi	a5,sp,12
1c00b9d8:	c38c                	sw	a1,0(a5)
1c00b9da:	4519                	li	a0,6
1c00b9dc:	081c                	addi	a5,sp,16
1c00b9de:	002c                	addi	a1,sp,8
1c00b9e0:	c390                	sw	a2,0(a5)
1c00b9e2:	fa3ff0ef          	jal	ra,1c00b984 <__internal_semihost>
1c00b9e6:	50b2                	lw	ra,44(sp)
1c00b9e8:	6145                	addi	sp,sp,48
1c00b9ea:	8082                	ret

1c00b9ec <semihost_write>:
1c00b9ec:	7179                	addi	sp,sp,-48
1c00b9ee:	d606                	sw	ra,44(sp)
1c00b9f0:	003c                	addi	a5,sp,8
1c00b9f2:	c388                	sw	a0,0(a5)
1c00b9f4:	007c                	addi	a5,sp,12
1c00b9f6:	c38c                	sw	a1,0(a5)
1c00b9f8:	4515                	li	a0,5
1c00b9fa:	081c                	addi	a5,sp,16
1c00b9fc:	002c                	addi	a1,sp,8
1c00b9fe:	c390                	sw	a2,0(a5)
1c00ba00:	f85ff0ef          	jal	ra,1c00b984 <__internal_semihost>
1c00ba04:	50b2                	lw	ra,44(sp)
1c00ba06:	6145                	addi	sp,sp,48
1c00ba08:	8082                	ret

1c00ba0a <semihost_seek>:
1c00ba0a:	1101                	addi	sp,sp,-32
1c00ba0c:	c42a                	sw	a0,8(sp)
1c00ba0e:	c62e                	sw	a1,12(sp)
1c00ba10:	4529                	li	a0,10
1c00ba12:	002c                	addi	a1,sp,8
1c00ba14:	ce06                	sw	ra,28(sp)
1c00ba16:	f6fff0ef          	jal	ra,1c00b984 <__internal_semihost>
1c00ba1a:	40f2                	lw	ra,28(sp)
1c00ba1c:	6105                	addi	sp,sp,32
1c00ba1e:	8082                	ret

1c00ba20 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c00ba20:	85aa                	mv	a1,a0
1c00ba22:	4561                	li	a0,24
1c00ba24:	f61ff06f          	j	1c00b984 <__internal_semihost>

1c00ba28 <bsp_hyperflash_conf_init>:
}

void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
    conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
    conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ba28:	4785                	li	a5,1
    conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c00ba2a:	00052223          	sw	zero,4(a0)
    conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ba2e:	c51c                	sw	a5,8(a0)
}
1c00ba30:	8082                	ret

1c00ba32 <bsp_hyperflash_open>:
1c00ba32:	4501                	li	a0,0
1c00ba34:	8082                	ret

1c00ba36 <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ba36:	002047b7          	lui	a5,0x204
1c00ba3a:	00070737          	lui	a4,0x70
1c00ba3e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ba42:	0ff00713          	li	a4,255
1c00ba46:	002046b7          	lui	a3,0x204
1c00ba4a:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ba4e:	20078793          	addi	a5,a5,512
1c00ba52:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ba56:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c00ba5a:	8082                	ret

1c00ba5c <__rt_init>:
{
1c00ba5c:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c00ba5e:	1a104737          	lui	a4,0x1a104
1c00ba62:	ce06                	sw	ra,28(sp)
1c00ba64:	cc22                	sw	s0,24(sp)
1c00ba66:	ca26                	sw	s1,20(sp)
1c00ba68:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10404c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c00ba6c:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00ba70:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c00ba74:	2b49                	jal	1c00c006 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c00ba76:	1b0007b7          	lui	a5,0x1b000
1c00ba7a:	39878793          	addi	a5,a5,920 # 1b000398 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00ba7e:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c00ba82:	7d179073          	csrw	0x7d1,a5
1c00ba86:	1c010737          	lui	a4,0x1c010
1c00ba8a:	5c472703          	lw	a4,1476(a4) # 1c0105c4 <__rt_fc_stack_size>
1c00ba8e:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c00ba90:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c00ba94:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c00ba98:	2add                	jal	1c00bc8e <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c00ba9a:	54fd                	li	s1,-1
1c00ba9c:	1a1067b7          	lui	a5,0x1a106
1c00baa0:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fe0>
1c00baa4:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c00baa8:	1c0005b7          	lui	a1,0x1c000
1c00baac:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c00bab0:	456d                	li	a0,27
1c00bab2:	2a3d                	jal	1c00bbf0 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00bab4:	080007b7          	lui	a5,0x8000
1c00bab8:	00204737          	lui	a4,0x204
1c00babc:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00bac0:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c00bac4:	29a010ef          	jal	ra,1c00cd5e <__rt_pmu_init>
  __rt_freq_init();
1c00bac8:	6e5000ef          	jal	ra,1c00c9ac <__rt_freq_init>
1c00bacc:	002017b7          	lui	a5,0x201
1c00bad0:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c00bad4:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bad6:	01402473          	csrr	s0,uhartid
1c00bada:	1c00f4b7          	lui	s1,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00bade:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c00bae0:	24ed                	jal	1c00bdca <__rt_utils_init>
1c00bae2:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c00bae6:	1a7000ef          	jal	ra,1c00c48c <__rt_allocs_init>
1c00baea:	70848493          	addi	s1,s1,1800 # 1c00f708 <ctor_list+0x4>
  __rt_event_sched_init();
1c00baee:	029000ef          	jal	ra,1c00c316 <__rt_event_sched_init>
  __rt_padframe_init();
1c00baf2:	1dc020ef          	jal	ra,1c00dcce <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c00baf6:	0044a78b          	p.lw	a5,4(s1!)
1c00bafa:	ebad                	bnez	a5,1c00bb6c <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c00bafc:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c00bb00:	4501                	li	a0,0
1c00bb02:	2c61                	jal	1c00bd9a <__rt_cbsys_exec>
1c00bb04:	e539                	bnez	a0,1c00bb52 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bb06:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00bb0a:	8795                	srai	a5,a5,0x5
1c00bb0c:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c00bb10:	02000713          	li	a4,32
1c00bb14:	0ae78363          	beq	a5,a4,1c00bbba <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c00bb18:	4681                	li	a3,0
1c00bb1a:	4601                	li	a2,0
1c00bb1c:	4581                	li	a1,0
1c00bb1e:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c00bb20:	cba1                	beqz	a5,1c00bb70 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c00bb22:	78c010ef          	jal	ra,1c00d2ae <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c00bb26:	6591                	lui	a1,0x4
1c00bb28:	4509                	li	a0,2
1c00bb2a:	0b7000ef          	jal	ra,1c00c3e0 <rt_alloc>
1c00bb2e:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c00bb30:	c10d                	beqz	a0,1c00bb52 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c00bb32:	6805                	lui	a6,0x1
1c00bb34:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c00bb38:	1c00c637          	lui	a2,0x1c00c
1c00bb3c:	c002                	sw	zero,0(sp)
1c00bb3e:	48a1                	li	a7,8
1c00bb40:	87c2                	mv	a5,a6
1c00bb42:	4681                	li	a3,0
1c00bb44:	a3660613          	addi	a2,a2,-1482 # 1c00ba36 <cluster_start>
1c00bb48:	4581                	li	a1,0
1c00bb4a:	4501                	li	a0,0
1c00bb4c:	6d2010ef          	jal	ra,1c00d21e <rt_cluster_call>
1c00bb50:	c52d                	beqz	a0,1c00bbba <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c00bb52:	1c010537          	lui	a0,0x1c010
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bb56:	01402673          	csrr	a2,uhartid
1c00bb5a:	85a2                	mv	a1,s0
1c00bb5c:	f4563633          	p.bclr	a2,a2,26,5
1c00bb60:	fb450513          	addi	a0,a0,-76 # 1c00ffb4 <__clz_tab+0x828>
1c00bb64:	2c5020ef          	jal	ra,1c00e628 <printf>
1c00bb68:	245020ef          	jal	ra,1c00e5ac <abort>
    (**fpp)();
1c00bb6c:	9782                	jalr	a5
1c00bb6e:	b761                	j	1c00baf6 <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c00bb70:	73e010ef          	jal	ra,1c00d2ae <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c00bb74:	6591                	lui	a1,0x4
1c00bb76:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c00bb7a:	4509                	li	a0,2
1c00bb7c:	065000ef          	jal	ra,1c00c3e0 <rt_alloc>
    if (stacks == NULL) return -1;
1c00bb80:	d969                	beqz	a0,1c00bb52 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00bb82:	00204737          	lui	a4,0x204
1c00bb86:	0ff00793          	li	a5,255
1c00bb8a:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c00bb8e:	1c00f7b7          	lui	a5,0x1c00f
1c00bb92:	64c78793          	addi	a5,a5,1612 # 1c00f64c <__rt_set_slave_stack>
1c00bb96:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00bb9a:	08f72023          	sw	a5,128(a4)
1c00bb9e:	6785                	lui	a5,0x1
1c00bba0:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00bba4:	08f72023          	sw	a5,128(a4)
1c00bba8:	08a72023          	sw	a0,128(a4)
}
1c00bbac:	4462                	lw	s0,24(sp)
1c00bbae:	40f2                	lw	ra,28(sp)
1c00bbb0:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c00bbb2:	4501                	li	a0,0
}
1c00bbb4:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c00bbb6:	e81ff06f          	j	1c00ba36 <cluster_start>
}
1c00bbba:	40f2                	lw	ra,28(sp)
1c00bbbc:	4462                	lw	s0,24(sp)
1c00bbbe:	44d2                	lw	s1,20(sp)
1c00bbc0:	6105                	addi	sp,sp,32
1c00bbc2:	8082                	ret

1c00bbc4 <__rt_deinit>:
{
1c00bbc4:	1141                	addi	sp,sp,-16
1c00bbc6:	c606                	sw	ra,12(sp)
1c00bbc8:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00bbca:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c00bbce:	4505                	li	a0,1
1c00bbd0:	1c00f437          	lui	s0,0x1c00f
1c00bbd4:	22d9                	jal	1c00bd9a <__rt_cbsys_exec>
1c00bbd6:	74c40413          	addi	s0,s0,1868 # 1c00f74c <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00bbda:	0044278b          	p.lw	a5,4(s0!)
1c00bbde:	e789                	bnez	a5,1c00bbe8 <__rt_deinit+0x24>
}
1c00bbe0:	40b2                	lw	ra,12(sp)
1c00bbe2:	4422                	lw	s0,8(sp)
1c00bbe4:	0141                	addi	sp,sp,16
1c00bbe6:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00bbe8:	9782                	jalr	a5
1c00bbea:	bfc5                	j	1c00bbda <__rt_deinit+0x16>

1c00bbec <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c00bbec:	c14c                	sw	a1,4(a0)
}
1c00bbee:	8082                	ret

1c00bbf0 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bbf0:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c00bbf4:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00bbf8:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bbfc:	02e79c63          	bne	a5,a4,1c00bc34 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c00bc00:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c00bc04:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c00bc06:	8d89                	sub	a1,a1,a0
1c00bc08:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c00bc0a:	c14586b3          	p.extract	a3,a1,0,20
1c00bc0e:	06f00793          	li	a5,111
1c00bc12:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c00bc16:	d21586b3          	p.extract	a3,a1,9,1
1c00bc1a:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c00bc1e:	c0b586b3          	p.extract	a3,a1,0,11
1c00bc22:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c00bc26:	cec585b3          	p.extract	a1,a1,7,12
1c00bc2a:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c00bc2e:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c00bc32:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c00bc34:	002007b7          	lui	a5,0x200
1c00bc38:	43b8                	lw	a4,64(a5)
1c00bc3a:	b7e9                	j	1c00bc04 <rt_irq_set_handler+0x14>

1c00bc3c <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c00bc3c:	8082                	ret

1c00bc3e <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c00bc3e:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c00bc42:	b9c7a703          	lw	a4,-1124(a5) # 1b000b9c <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c00bc46:	1141                	addi	sp,sp,-16
1c00bc48:	c422                	sw	s0,8(sp)
1c00bc4a:	c606                	sw	ra,12(sp)
1c00bc4c:	fc173733          	p.bclr	a4,a4,30,1
1c00bc50:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c00bc52:	c315                	beqz	a4,1c00bc76 <__rt_handle_illegal_instr+0x38>
1c00bc54:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bc58:	01402673          	csrr	a2,uhartid
1c00bc5c:	1c010537          	lui	a0,0x1c010
1c00bc60:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c00bc62:	40565593          	srai	a1,a2,0x5
1c00bc66:	f265b5b3          	p.bclr	a1,a1,25,6
1c00bc6a:	f4563633          	p.bclr	a2,a2,26,5
1c00bc6e:	00c50513          	addi	a0,a0,12 # 1c01000c <__clz_tab+0x880>
1c00bc72:	1b7020ef          	jal	ra,1c00e628 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c00bc76:	b9c42783          	lw	a5,-1124(s0)
1c00bc7a:	c01797b3          	p.extractu	a5,a5,0,1
1c00bc7e:	c399                	beqz	a5,1c00bc84 <__rt_handle_illegal_instr+0x46>
1c00bc80:	12d020ef          	jal	ra,1c00e5ac <abort>
  illegal_insn_handler_c();
#endif
}
1c00bc84:	4422                	lw	s0,8(sp)
1c00bc86:	40b2                	lw	ra,12(sp)
1c00bc88:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c00bc8a:	fb3ff06f          	j	1c00bc3c <illegal_insn_handler_c>

1c00bc8e <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c00bc8e:	57fd                	li	a5,-1
1c00bc90:	00204737          	lui	a4,0x204
1c00bc94:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00bc98:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bc9c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00bca0:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bca4:	00e79763          	bne	a5,a4,1c00bcb2 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00bca8:	57fd                	li	a5,-1
1c00bcaa:	00204737          	lui	a4,0x204
1c00bcae:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bcb2:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00bcb6:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00bcba:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bcbe:	00e79963          	bne	a5,a4,1c00bcd0 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c00bcc2:	1c0007b7          	lui	a5,0x1c000
1c00bcc6:	00078793          	mv	a5,a5
1c00bcca:	30579073          	csrw	mtvec,a5
1c00bcce:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c00bcd0:	1c0007b7          	lui	a5,0x1c000
1c00bcd4:	00200737          	lui	a4,0x200
1c00bcd8:	00078793          	mv	a5,a5
1c00bcdc:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c00bcde:	8082                	ret

1c00bce0 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c00bce0:	300476f3          	csrrci	a3,mstatus,8
1c00bce4:	08a54703          	lbu	a4,138(a0)
1c00bce8:	411c                	lw	a5,0(a0)
1c00bcea:	c321                	beqz	a4,1c00bd2a <__rt_fc_cluster_lock_req+0x4a>
1c00bcec:	4398                	lw	a4,0(a5)
1c00bcee:	cf09                	beqz	a4,1c00bd08 <__rt_fc_cluster_lock_req+0x28>
1c00bcf0:	43d8                	lw	a4,4(a5)
1c00bcf2:	cb09                	beqz	a4,1c00bd04 <__rt_fc_cluster_lock_req+0x24>
1c00bcf4:	4798                	lw	a4,8(a5)
1c00bcf6:	c348                	sw	a0,4(a4)
1c00bcf8:	c788                	sw	a0,8(a5)
1c00bcfa:	00052223          	sw	zero,4(a0)
1c00bcfe:	30069073          	csrw	mstatus,a3
1c00bd02:	8082                	ret
1c00bd04:	c3c8                	sw	a0,4(a5)
1c00bd06:	bfcd                	j	1c00bcf8 <__rt_fc_cluster_lock_req+0x18>
1c00bd08:	4705                	li	a4,1
1c00bd0a:	08e50423          	sb	a4,136(a0)
1c00bd0e:	4705                	li	a4,1
1c00bd10:	c398                	sw	a4,0(a5)
1c00bd12:	08954783          	lbu	a5,137(a0)
1c00bd16:	00201737          	lui	a4,0x201
1c00bd1a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00bd1e:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c00bd22:	07da                	slli	a5,a5,0x16
1c00bd24:	0007e723          	p.sw	zero,a4(a5)
1c00bd28:	bfd9                	j	1c00bcfe <__rt_fc_cluster_lock_req+0x1e>
1c00bd2a:	43d8                	lw	a4,4(a5)
1c00bd2c:	e719                	bnez	a4,1c00bd3a <__rt_fc_cluster_lock_req+0x5a>
1c00bd2e:	0007a023          	sw	zero,0(a5)
1c00bd32:	4785                	li	a5,1
1c00bd34:	08f50423          	sb	a5,136(a0)
1c00bd38:	bfe9                	j	1c00bd12 <__rt_fc_cluster_lock_req+0x32>
1c00bd3a:	4350                	lw	a2,4(a4)
1c00bd3c:	c3d0                	sw	a2,4(a5)
1c00bd3e:	4785                	li	a5,1
1c00bd40:	08f70423          	sb	a5,136(a4)
1c00bd44:	08974783          	lbu	a5,137(a4)
1c00bd48:	00201737          	lui	a4,0x201
1c00bd4c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00bd50:	04078793          	addi	a5,a5,64
1c00bd54:	07da                	slli	a5,a5,0x16
1c00bd56:	0007e723          	p.sw	zero,a4(a5)
1c00bd5a:	bfe1                	j	1c00bd32 <__rt_fc_cluster_lock_req+0x52>

1c00bd5c <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c00bd5c:	1101                	addi	sp,sp,-32
1c00bd5e:	cc22                	sw	s0,24(sp)
1c00bd60:	ca26                	sw	s1,20(sp)
1c00bd62:	842a                	mv	s0,a0
1c00bd64:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00bd66:	4501                	li	a0,0
1c00bd68:	45b1                	li	a1,12
1c00bd6a:	c632                	sw	a2,12(sp)
{
1c00bd6c:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00bd6e:	2d8d                	jal	1c00c3e0 <rt_alloc>
  if (cbsys == NULL) return -1;
1c00bd70:	4632                	lw	a2,12(sp)
1c00bd72:	c115                	beqz	a0,1c00bd96 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c00bd74:	1b0017b7          	lui	a5,0x1b001
1c00bd78:	040a                	slli	s0,s0,0x2
1c00bd7a:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c00bd7e:	97a2                	add	a5,a5,s0
1c00bd80:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c00bd82:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c00bd84:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c00bd86:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c00bd88:	c388                	sw	a0,0(a5)

  return 0;
1c00bd8a:	4501                	li	a0,0
}
1c00bd8c:	40f2                	lw	ra,28(sp)
1c00bd8e:	4462                	lw	s0,24(sp)
1c00bd90:	44d2                	lw	s1,20(sp)
1c00bd92:	6105                	addi	sp,sp,32
1c00bd94:	8082                	ret
  if (cbsys == NULL) return -1;
1c00bd96:	557d                	li	a0,-1
1c00bd98:	bfd5                	j	1c00bd8c <__rt_cbsys_add+0x30>

1c00bd9a <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c00bd9a:	1141                	addi	sp,sp,-16
1c00bd9c:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c00bd9e:	1b001437          	lui	s0,0x1b001
1c00bda2:	050a                	slli	a0,a0,0x2
1c00bda4:	ba040413          	addi	s0,s0,-1120 # 1b000ba0 <cbsys_first>
1c00bda8:	20a47403          	p.lw	s0,a0(s0)
{
1c00bdac:	c606                	sw	ra,12(sp)
  while (cbsys)
1c00bdae:	e411                	bnez	s0,1c00bdba <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c00bdb0:	4501                	li	a0,0
}
1c00bdb2:	40b2                	lw	ra,12(sp)
1c00bdb4:	4422                	lw	s0,8(sp)
1c00bdb6:	0141                	addi	sp,sp,16
1c00bdb8:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c00bdba:	401c                	lw	a5,0(s0)
1c00bdbc:	4048                	lw	a0,4(s0)
1c00bdbe:	9782                	jalr	a5
1c00bdc0:	e119                	bnez	a0,1c00bdc6 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c00bdc2:	4400                	lw	s0,8(s0)
1c00bdc4:	b7ed                	j	1c00bdae <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c00bdc6:	557d                	li	a0,-1
1c00bdc8:	b7ed                	j	1c00bdb2 <__rt_cbsys_exec+0x18>

1c00bdca <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c00bdca:	1b0017b7          	lui	a5,0x1b001
1c00bdce:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c00bdd2:	0007a023          	sw	zero,0(a5)
1c00bdd6:	0007a223          	sw	zero,4(a5)
1c00bdda:	0007a423          	sw	zero,8(a5)
1c00bdde:	0007a623          	sw	zero,12(a5)
1c00bde2:	0007a823          	sw	zero,16(a5)
1c00bde6:	0007aa23          	sw	zero,20(a5)
  }
}
1c00bdea:	8082                	ret

1c00bdec <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c00bdec:	1141                	addi	sp,sp,-16
1c00bdee:	c422                	sw	s0,8(sp)
1c00bdf0:	842a                	mv	s0,a0
1c00bdf2:	c606                	sw	ra,12(sp)
1c00bdf4:	c226                	sw	s1,4(sp)
1c00bdf6:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bdf8:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c00bdfc:	401c                	lw	a5,0(s0)
1c00bdfe:	eb99                	bnez	a5,1c00be14 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c00be00:	4785                	li	a5,1
1c00be02:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c00be04:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00be08:	40b2                	lw	ra,12(sp)
1c00be0a:	4422                	lw	s0,8(sp)
1c00be0c:	4492                	lw	s1,4(sp)
1c00be0e:	4902                	lw	s2,0(sp)
1c00be10:	0141                	addi	sp,sp,16
1c00be12:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c00be14:	4585                	li	a1,1
1c00be16:	01c00513          	li	a0,28
1c00be1a:	2989                	jal	1c00c26c <__rt_event_execute>
1c00be1c:	b7c5                	j	1c00bdfc <__rt_fc_lock+0x10>

1c00be1e <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00be1e:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c00be22:	415c                	lw	a5,4(a0)
1c00be24:	e791                	bnez	a5,1c00be30 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c00be26:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00be2a:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c00be2e:	8082                	ret
    lock->waiting = req->next;
1c00be30:	43d8                	lw	a4,4(a5)
1c00be32:	c158                	sw	a4,4(a0)
    req->done = 1;
1c00be34:	4705                	li	a4,1
1c00be36:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c00be3a:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c00be3e:	00201737          	lui	a4,0x201
1c00be42:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00be46:	04078793          	addi	a5,a5,64
1c00be4a:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00be4c:	0007e723          	p.sw	zero,a4(a5)
1c00be50:	bfe9                	j	1c00be2a <__rt_fc_unlock+0xc>

1c00be52 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00be52:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00be56:	8795                	srai	a5,a5,0x5
1c00be58:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00be5c:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c00be60:	4785                	li	a5,1
1c00be62:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c00be66:	1c00c7b7          	lui	a5,0x1c00c
1c00be6a:	ce078793          	addi	a5,a5,-800 # 1c00bce0 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00be6e:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00be70:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c00be74:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00be78:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00be7c:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00be7e:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00be80:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c00be82:	c005c533          	p.bset	a0,a1,0,0
1c00be86:	2b00106f          	j	1c00d136 <__rt_cluster_push_fc_event>

1c00be8a <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00be8a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00be8e:	8795                	srai	a5,a5,0x5
1c00be90:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00be94:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c00be98:	1c00c7b7          	lui	a5,0x1c00c
1c00be9c:	ce078793          	addi	a5,a5,-800 # 1c00bce0 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00bea0:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00bea2:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c00bea6:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c00beaa:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00beae:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00beb2:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00beb4:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00beb6:	05a1                	addi	a1,a1,8
1c00beb8:	c005c533          	p.bset	a0,a1,0,0
1c00bebc:	27a0106f          	j	1c00d136 <__rt_cluster_push_fc_event>

1c00bec0 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c00bec0:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00bec4:	00052023          	sw	zero,0(a0)
1c00bec8:	01c00713          	li	a4,28
1c00becc:	c689                	beqz	a3,1c00bed6 <__rt_event_enqueue+0x16>
1c00bece:	435c                	lw	a5,4(a4)
1c00bed0:	c388                	sw	a0,0(a5)
1c00bed2:	c348                	sw	a0,4(a4)
1c00bed4:	8082                	ret
1c00bed6:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00beda:	bfe5                	j	1c00bed2 <__rt_event_enqueue+0x12>

1c00bedc <__rt_bridge_check_bridge_req.part.5>:
1c00bedc:	1c010737          	lui	a4,0x1c010
1c00bee0:	50470793          	addi	a5,a4,1284 # 1c010504 <__hal_debug_struct>
1c00bee4:	0a47a783          	lw	a5,164(a5)
1c00bee8:	50470713          	addi	a4,a4,1284
1c00beec:	c789                	beqz	a5,1c00bef6 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c00beee:	4f94                	lw	a3,24(a5)
1c00bef0:	e681                	bnez	a3,1c00bef8 <__rt_bridge_check_bridge_req.part.5+0x1c>
1c00bef2:	0af72623          	sw	a5,172(a4)
1c00bef6:	8082                	ret
1c00bef8:	479c                	lw	a5,8(a5)
1c00befa:	bfcd                	j	1c00beec <__rt_bridge_check_bridge_req.part.5+0x10>

1c00befc <__rt_bridge_wait>:
1c00befc:	014027f3          	csrr	a5,uhartid
1c00bf00:	02000713          	li	a4,32
1c00bf04:	ca5797b3          	p.extractu	a5,a5,5,5
1c00bf08:	02e79c63          	bne	a5,a4,1c00bf40 <__rt_bridge_wait+0x44>
1c00bf0c:	1141                	addi	sp,sp,-16
1c00bf0e:	c422                	sw	s0,8(sp)
1c00bf10:	1a106437          	lui	s0,0x1a106
1c00bf14:	c606                	sw	ra,12(sp)
1c00bf16:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fe0>
1c00bf1a:	c187b7b3          	p.bclr	a5,a5,0,24
1c00bf1e:	00f42223          	sw	a5,4(s0)
1c00bf22:	4585                	li	a1,1
1c00bf24:	03800513          	li	a0,56
1c00bf28:	187000ef          	jal	ra,1c00c8ae <__rt_periph_wait_event>
1c00bf2c:	00442783          	lw	a5,4(s0)
1c00bf30:	c187c7b3          	p.bset	a5,a5,0,24
1c00bf34:	00f42223          	sw	a5,4(s0)
1c00bf38:	40b2                	lw	ra,12(sp)
1c00bf3a:	4422                	lw	s0,8(sp)
1c00bf3c:	0141                	addi	sp,sp,16
1c00bf3e:	8082                	ret
1c00bf40:	8082                	ret

1c00bf42 <__rt_bridge_handle_notif>:
1c00bf42:	1141                	addi	sp,sp,-16
1c00bf44:	c422                	sw	s0,8(sp)
1c00bf46:	1c010437          	lui	s0,0x1c010
1c00bf4a:	50440793          	addi	a5,s0,1284 # 1c010504 <__hal_debug_struct>
1c00bf4e:	0a47a783          	lw	a5,164(a5)
1c00bf52:	c606                	sw	ra,12(sp)
1c00bf54:	c226                	sw	s1,4(sp)
1c00bf56:	c04a                	sw	s2,0(sp)
1c00bf58:	50440413          	addi	s0,s0,1284
1c00bf5c:	c399                	beqz	a5,1c00bf62 <__rt_bridge_handle_notif+0x20>
1c00bf5e:	4bd8                	lw	a4,20(a5)
1c00bf60:	e31d                	bnez	a4,1c00bf86 <__rt_bridge_handle_notif+0x44>
1c00bf62:	0b442783          	lw	a5,180(s0)
1c00bf66:	c791                	beqz	a5,1c00bf72 <__rt_bridge_handle_notif+0x30>
1c00bf68:	43a8                	lw	a0,64(a5)
1c00bf6a:	0a042a23          	sw	zero,180(s0)
1c00bf6e:	f53ff0ef          	jal	ra,1c00bec0 <__rt_event_enqueue>
1c00bf72:	0ac42783          	lw	a5,172(s0)
1c00bf76:	ef85                	bnez	a5,1c00bfae <__rt_bridge_handle_notif+0x6c>
1c00bf78:	4422                	lw	s0,8(sp)
1c00bf7a:	40b2                	lw	ra,12(sp)
1c00bf7c:	4492                	lw	s1,4(sp)
1c00bf7e:	4902                	lw	s2,0(sp)
1c00bf80:	0141                	addi	sp,sp,16
1c00bf82:	f5bff06f          	j	1c00bedc <__rt_bridge_check_bridge_req.part.5>
1c00bf86:	4784                	lw	s1,8(a5)
1c00bf88:	4fd8                	lw	a4,28(a5)
1c00bf8a:	0a942223          	sw	s1,164(s0)
1c00bf8e:	cb01                	beqz	a4,1c00bf9e <__rt_bridge_handle_notif+0x5c>
1c00bf90:	0b042703          	lw	a4,176(s0)
1c00bf94:	c798                	sw	a4,8(a5)
1c00bf96:	0af42823          	sw	a5,176(s0)
1c00bf9a:	87a6                	mv	a5,s1
1c00bf9c:	b7c1                	j	1c00bf5c <__rt_bridge_handle_notif+0x1a>
1c00bf9e:	43a8                	lw	a0,64(a5)
1c00bfa0:	30047973          	csrrci	s2,mstatus,8
1c00bfa4:	f1dff0ef          	jal	ra,1c00bec0 <__rt_event_enqueue>
1c00bfa8:	30091073          	csrw	mstatus,s2
1c00bfac:	b7fd                	j	1c00bf9a <__rt_bridge_handle_notif+0x58>
1c00bfae:	40b2                	lw	ra,12(sp)
1c00bfb0:	4422                	lw	s0,8(sp)
1c00bfb2:	4492                	lw	s1,4(sp)
1c00bfb4:	4902                	lw	s2,0(sp)
1c00bfb6:	0141                	addi	sp,sp,16
1c00bfb8:	8082                	ret

1c00bfba <__rt_bridge_check_connection>:
1c00bfba:	1c0106b7          	lui	a3,0x1c010
1c00bfbe:	50468693          	addi	a3,a3,1284 # 1c010504 <__hal_debug_struct>
1c00bfc2:	469c                	lw	a5,8(a3)
1c00bfc4:	e3a1                	bnez	a5,1c00c004 <__rt_bridge_check_connection+0x4a>
1c00bfc6:	1a1047b7          	lui	a5,0x1a104
1c00bfca:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104050>
1c00bfce:	4398                	lw	a4,0(a5)
1c00bfd0:	8325                	srli	a4,a4,0x9
1c00bfd2:	f8373733          	p.bclr	a4,a4,28,3
1c00bfd6:	02773763          	p.bneimm	a4,7,1c00c004 <__rt_bridge_check_connection+0x4a>
1c00bfda:	1141                	addi	sp,sp,-16
1c00bfdc:	c422                	sw	s0,8(sp)
1c00bfde:	c606                	sw	ra,12(sp)
1c00bfe0:	4705                	li	a4,1
1c00bfe2:	c698                	sw	a4,8(a3)
1c00bfe4:	4709                	li	a4,2
1c00bfe6:	c398                	sw	a4,0(a5)
1c00bfe8:	843e                	mv	s0,a5
1c00bfea:	401c                	lw	a5,0(s0)
1c00bfec:	83a5                	srli	a5,a5,0x9
1c00bfee:	f837b7b3          	p.bclr	a5,a5,28,3
1c00bff2:	0077a663          	p.beqimm	a5,7,1c00bffe <__rt_bridge_check_connection+0x44>
1c00bff6:	40b2                	lw	ra,12(sp)
1c00bff8:	4422                	lw	s0,8(sp)
1c00bffa:	0141                	addi	sp,sp,16
1c00bffc:	8082                	ret
1c00bffe:	effff0ef          	jal	ra,1c00befc <__rt_bridge_wait>
1c00c002:	b7e5                	j	1c00bfea <__rt_bridge_check_connection+0x30>
1c00c004:	8082                	ret

1c00c006 <__rt_bridge_set_available>:
1c00c006:	1c0107b7          	lui	a5,0x1c010
1c00c00a:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
1c00c00e:	4798                	lw	a4,8(a5)
1c00c010:	1a1047b7          	lui	a5,0x1a104
1c00c014:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104050>
1c00c018:	e701                	bnez	a4,1c00c020 <__rt_bridge_set_available+0x1a>
1c00c01a:	4721                	li	a4,8
1c00c01c:	c398                	sw	a4,0(a5)
1c00c01e:	8082                	ret
1c00c020:	4709                	li	a4,2
1c00c022:	bfed                	j	1c00c01c <__rt_bridge_set_available+0x16>

1c00c024 <__rt_bridge_send_notif>:
1c00c024:	1141                	addi	sp,sp,-16
1c00c026:	c606                	sw	ra,12(sp)
1c00c028:	f93ff0ef          	jal	ra,1c00bfba <__rt_bridge_check_connection>
1c00c02c:	1c0107b7          	lui	a5,0x1c010
1c00c030:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
1c00c034:	479c                	lw	a5,8(a5)
1c00c036:	c789                	beqz	a5,1c00c040 <__rt_bridge_send_notif+0x1c>
1c00c038:	1a1047b7          	lui	a5,0x1a104
1c00c03c:	4719                	li	a4,6
1c00c03e:	dbf8                	sw	a4,116(a5)
1c00c040:	40b2                	lw	ra,12(sp)
1c00c042:	0141                	addi	sp,sp,16
1c00c044:	8082                	ret

1c00c046 <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c00c046:	1141                	addi	sp,sp,-16
1c00c048:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c00c04a:	f71ff0ef          	jal	ra,1c00bfba <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c00c04e:	1c0107b7          	lui	a5,0x1c010
1c00c052:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
1c00c056:	479c                	lw	a5,8(a5)
1c00c058:	c789                	beqz	a5,1c00c062 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c00c05a:	40b2                	lw	ra,12(sp)
1c00c05c:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c00c05e:	fa9ff06f          	j	1c00c006 <__rt_bridge_set_available>
}
1c00c062:	40b2                	lw	ra,12(sp)
1c00c064:	0141                	addi	sp,sp,16
1c00c066:	8082                	ret

1c00c068 <__rt_bridge_printf_flush>:
{
1c00c068:	1141                	addi	sp,sp,-16
1c00c06a:	c422                	sw	s0,8(sp)
1c00c06c:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c00c06e:	1c010437          	lui	s0,0x1c010
  __rt_bridge_check_connection();
1c00c072:	f49ff0ef          	jal	ra,1c00bfba <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00c076:	50440793          	addi	a5,s0,1284 # 1c010504 <__hal_debug_struct>
1c00c07a:	479c                	lw	a5,8(a5)
1c00c07c:	c39d                	beqz	a5,1c00c0a2 <__rt_bridge_printf_flush+0x3a>
1c00c07e:	50440413          	addi	s0,s0,1284
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00c082:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c00c084:	e399                	bnez	a5,1c00c08a <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c00c086:	4c1c                	lw	a5,24(s0)
1c00c088:	cf89                	beqz	a5,1c00c0a2 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c00c08a:	f9bff0ef          	jal	ra,1c00c024 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00c08e:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c00c090:	e791                	bnez	a5,1c00c09c <__rt_bridge_printf_flush+0x34>
}
1c00c092:	4422                	lw	s0,8(sp)
1c00c094:	40b2                	lw	ra,12(sp)
1c00c096:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c00c098:	fafff06f          	j	1c00c046 <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c00c09c:	e61ff0ef          	jal	ra,1c00befc <__rt_bridge_wait>
1c00c0a0:	b7fd                	j	1c00c08e <__rt_bridge_printf_flush+0x26>
}
1c00c0a2:	40b2                	lw	ra,12(sp)
1c00c0a4:	4422                	lw	s0,8(sp)
1c00c0a6:	0141                	addi	sp,sp,16
1c00c0a8:	8082                	ret

1c00c0aa <__rt_bridge_req_shutdown>:
{
1c00c0aa:	1141                	addi	sp,sp,-16
1c00c0ac:	c606                	sw	ra,12(sp)
1c00c0ae:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c00c0b0:	f0bff0ef          	jal	ra,1c00bfba <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00c0b4:	1c0107b7          	lui	a5,0x1c010
1c00c0b8:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
1c00c0bc:	479c                	lw	a5,8(a5)
1c00c0be:	c7a9                	beqz	a5,1c00c108 <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00c0c0:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c00c0c4:	fa5ff0ef          	jal	ra,1c00c068 <__rt_bridge_printf_flush>
1c00c0c8:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104050>
1c00c0cc:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00c0ce:	83a5                	srli	a5,a5,0x9
1c00c0d0:	f837b7b3          	p.bclr	a5,a5,28,3
1c00c0d4:	0277ae63          	p.beqimm	a5,7,1c00c110 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00c0d8:	4791                	li	a5,4
1c00c0da:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00c0dc:	1a104437          	lui	s0,0x1a104
1c00c0e0:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104050>
1c00c0e4:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c00c0e6:	83a5                	srli	a5,a5,0x9
1c00c0e8:	f837b7b3          	p.bclr	a5,a5,28,3
1c00c0ec:	0277b563          	p.bneimm	a5,7,1c00c116 <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00c0f0:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00c0f4:	1a104437          	lui	s0,0x1a104
1c00c0f8:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104050>
1c00c0fc:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00c0fe:	83a5                	srli	a5,a5,0x9
1c00c100:	f837b7b3          	p.bclr	a5,a5,28,3
1c00c104:	0077ac63          	p.beqimm	a5,7,1c00c11c <__rt_bridge_req_shutdown+0x72>
}
1c00c108:	40b2                	lw	ra,12(sp)
1c00c10a:	4422                	lw	s0,8(sp)
1c00c10c:	0141                	addi	sp,sp,16
1c00c10e:	8082                	ret
      __rt_bridge_wait();
1c00c110:	dedff0ef          	jal	ra,1c00befc <__rt_bridge_wait>
1c00c114:	bf65                	j	1c00c0cc <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c00c116:	de7ff0ef          	jal	ra,1c00befc <__rt_bridge_wait>
1c00c11a:	b7e9                	j	1c00c0e4 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c00c11c:	de1ff0ef          	jal	ra,1c00befc <__rt_bridge_wait>
1c00c120:	bff1                	j	1c00c0fc <__rt_bridge_req_shutdown+0x52>

1c00c122 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c00c122:	1c0107b7          	lui	a5,0x1c010
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00c126:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c00c12a:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00c12e:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffa40>
1c00c132:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c00c136:	4705                	li	a4,1
  bridge->first_req = 0;
1c00c138:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c00c13c:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c00c140:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c00c144:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c00c148:	00400793          	li	a5,4
1c00c14c:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c00c150:	0007a023          	sw	zero,0(a5)
}
1c00c154:	8082                	ret

1c00c156 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c00c156:	1141                	addi	sp,sp,-16
1c00c158:	c422                	sw	s0,8(sp)
1c00c15a:	c606                	sw	ra,12(sp)
1c00c15c:	842a                	mv	s0,a0
1c00c15e:	02052223          	sw	zero,36(a0)
1c00c162:	02052423          	sw	zero,40(a0)
1c00c166:	45c1                	li	a1,16
1c00c168:	4501                	li	a0,0
1c00c16a:	2c9d                	jal	1c00c3e0 <rt_alloc>
1c00c16c:	dc68                	sw	a0,124(s0)
1c00c16e:	02042a23          	sw	zero,52(s0)
1c00c172:	00042223          	sw	zero,4(s0)
1c00c176:	40b2                	lw	ra,12(sp)
1c00c178:	4422                	lw	s0,8(sp)
1c00c17a:	0141                	addi	sp,sp,16
1c00c17c:	8082                	ret

1c00c17e <__rt_wait_event_prepare_blocking>:
1c00c17e:	01800793          	li	a5,24
1c00c182:	4388                	lw	a0,0(a5)
1c00c184:	4118                	lw	a4,0(a0)
1c00c186:	02052423          	sw	zero,40(a0)
1c00c18a:	00052223          	sw	zero,4(a0)
1c00c18e:	c398                	sw	a4,0(a5)
1c00c190:	4785                	li	a5,1
1c00c192:	d15c                	sw	a5,36(a0)
1c00c194:	8082                	ret

1c00c196 <rt_event_alloc>:
1c00c196:	1101                	addi	sp,sp,-32
1c00c198:	c64e                	sw	s3,12(sp)
1c00c19a:	89ae                	mv	s3,a1
1c00c19c:	ce06                	sw	ra,28(sp)
1c00c19e:	cc22                	sw	s0,24(sp)
1c00c1a0:	ca26                	sw	s1,20(sp)
1c00c1a2:	c84a                	sw	s2,16(sp)
1c00c1a4:	c452                	sw	s4,8(sp)
1c00c1a6:	c256                	sw	s5,4(sp)
1c00c1a8:	30047a73          	csrrci	s4,mstatus,8
1c00c1ac:	014027f3          	csrr	a5,uhartid
1c00c1b0:	8795                	srai	a5,a5,0x5
1c00c1b2:	f267b7b3          	p.bclr	a5,a5,25,6
1c00c1b6:	02000713          	li	a4,32
1c00c1ba:	00278513          	addi	a0,a5,2
1c00c1be:	00e79363          	bne	a5,a4,1c00c1c4 <rt_event_alloc+0x2e>
1c00c1c2:	4505                	li	a0,1
1c00c1c4:	00799593          	slli	a1,s3,0x7
1c00c1c8:	2c21                	jal	1c00c3e0 <rt_alloc>
1c00c1ca:	842a                	mv	s0,a0
1c00c1cc:	557d                	li	a0,-1
1c00c1ce:	c819                	beqz	s0,1c00c1e4 <rt_event_alloc+0x4e>
1c00c1d0:	01800493          	li	s1,24
1c00c1d4:	4901                	li	s2,0
1c00c1d6:	00448a93          	addi	s5,s1,4
1c00c1da:	01394e63          	blt	s2,s3,1c00c1f6 <rt_event_alloc+0x60>
1c00c1de:	300a1073          	csrw	mstatus,s4
1c00c1e2:	4501                	li	a0,0
1c00c1e4:	40f2                	lw	ra,28(sp)
1c00c1e6:	4462                	lw	s0,24(sp)
1c00c1e8:	44d2                	lw	s1,20(sp)
1c00c1ea:	4942                	lw	s2,16(sp)
1c00c1ec:	49b2                	lw	s3,12(sp)
1c00c1ee:	4a22                	lw	s4,8(sp)
1c00c1f0:	4a92                	lw	s5,4(sp)
1c00c1f2:	6105                	addi	sp,sp,32
1c00c1f4:	8082                	ret
1c00c1f6:	8522                	mv	a0,s0
1c00c1f8:	85d6                	mv	a1,s5
1c00c1fa:	f5dff0ef          	jal	ra,1c00c156 <__rt_event_init>
1c00c1fe:	409c                	lw	a5,0(s1)
1c00c200:	0905                	addi	s2,s2,1
1c00c202:	c01c                	sw	a5,0(s0)
1c00c204:	c080                	sw	s0,0(s1)
1c00c206:	08040413          	addi	s0,s0,128
1c00c20a:	bfc1                	j	1c00c1da <rt_event_alloc+0x44>

1c00c20c <rt_event_get>:
1c00c20c:	30047773          	csrrci	a4,mstatus,8
1c00c210:	01800793          	li	a5,24
1c00c214:	4388                	lw	a0,0(a5)
1c00c216:	c509                	beqz	a0,1c00c220 <rt_event_get+0x14>
1c00c218:	4114                	lw	a3,0(a0)
1c00c21a:	c14c                	sw	a1,4(a0)
1c00c21c:	c510                	sw	a2,8(a0)
1c00c21e:	c394                	sw	a3,0(a5)
1c00c220:	30071073          	csrw	mstatus,a4
1c00c224:	8082                	ret

1c00c226 <rt_event_get_blocking>:
1c00c226:	30047773          	csrrci	a4,mstatus,8
1c00c22a:	01800793          	li	a5,24
1c00c22e:	4388                	lw	a0,0(a5)
1c00c230:	c909                	beqz	a0,1c00c242 <rt_event_get_blocking+0x1c>
1c00c232:	4114                	lw	a3,0(a0)
1c00c234:	00052223          	sw	zero,4(a0)
1c00c238:	00052423          	sw	zero,8(a0)
1c00c23c:	c394                	sw	a3,0(a5)
1c00c23e:	4785                	li	a5,1
1c00c240:	d15c                	sw	a5,36(a0)
1c00c242:	30071073          	csrw	mstatus,a4
1c00c246:	8082                	ret

1c00c248 <rt_event_push>:
1c00c248:	30047773          	csrrci	a4,mstatus,8
1c00c24c:	01800693          	li	a3,24
1c00c250:	42d4                	lw	a3,4(a3)
1c00c252:	00052023          	sw	zero,0(a0)
1c00c256:	01800793          	li	a5,24
1c00c25a:	e691                	bnez	a3,1c00c266 <rt_event_push+0x1e>
1c00c25c:	c3c8                	sw	a0,4(a5)
1c00c25e:	c788                	sw	a0,8(a5)
1c00c260:	30071073          	csrw	mstatus,a4
1c00c264:	8082                	ret
1c00c266:	4794                	lw	a3,8(a5)
1c00c268:	c288                	sw	a0,0(a3)
1c00c26a:	bfd5                	j	1c00c25e <rt_event_push+0x16>

1c00c26c <__rt_event_execute>:
1c00c26c:	1141                	addi	sp,sp,-16
1c00c26e:	c422                	sw	s0,8(sp)
1c00c270:	01800793          	li	a5,24
1c00c274:	43dc                	lw	a5,4(a5)
1c00c276:	c606                	sw	ra,12(sp)
1c00c278:	c226                	sw	s1,4(sp)
1c00c27a:	01800413          	li	s0,24
1c00c27e:	ef81                	bnez	a5,1c00c296 <__rt_event_execute+0x2a>
1c00c280:	c1b9                	beqz	a1,1c00c2c6 <__rt_event_execute+0x5a>
1c00c282:	002047b7          	lui	a5,0x204
1c00c286:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c00c28a:	300467f3          	csrrsi	a5,mstatus,8
1c00c28e:	300477f3          	csrrci	a5,mstatus,8
1c00c292:	405c                	lw	a5,4(s0)
1c00c294:	cb8d                	beqz	a5,1c00c2c6 <__rt_event_execute+0x5a>
1c00c296:	4485                	li	s1,1
1c00c298:	4398                	lw	a4,0(a5)
1c00c29a:	5794                	lw	a3,40(a5)
1c00c29c:	00978a23          	sb	s1,20(a5)
1c00c2a0:	c058                	sw	a4,4(s0)
1c00c2a2:	4788                	lw	a0,8(a5)
1c00c2a4:	43d8                	lw	a4,4(a5)
1c00c2a6:	e691                	bnez	a3,1c00c2b2 <__rt_event_execute+0x46>
1c00c2a8:	53d4                	lw	a3,36(a5)
1c00c2aa:	e681                	bnez	a3,1c00c2b2 <__rt_event_execute+0x46>
1c00c2ac:	4014                	lw	a3,0(s0)
1c00c2ae:	c394                	sw	a3,0(a5)
1c00c2b0:	c01c                	sw	a5,0(s0)
1c00c2b2:	0207a223          	sw	zero,36(a5)
1c00c2b6:	c711                	beqz	a4,1c00c2c2 <__rt_event_execute+0x56>
1c00c2b8:	300467f3          	csrrsi	a5,mstatus,8
1c00c2bc:	9702                	jalr	a4
1c00c2be:	300477f3          	csrrci	a5,mstatus,8
1c00c2c2:	405c                	lw	a5,4(s0)
1c00c2c4:	fbf1                	bnez	a5,1c00c298 <__rt_event_execute+0x2c>
1c00c2c6:	40b2                	lw	ra,12(sp)
1c00c2c8:	4422                	lw	s0,8(sp)
1c00c2ca:	4492                	lw	s1,4(sp)
1c00c2cc:	0141                	addi	sp,sp,16
1c00c2ce:	8082                	ret

1c00c2d0 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c00c2d0:	1141                	addi	sp,sp,-16
1c00c2d2:	c422                	sw	s0,8(sp)
1c00c2d4:	c606                	sw	ra,12(sp)
1c00c2d6:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c00c2d8:	505c                	lw	a5,36(s0)
1c00c2da:	ef81                	bnez	a5,1c00c2f2 <__rt_wait_event+0x22>
1c00c2dc:	585c                	lw	a5,52(s0)
1c00c2de:	eb91                	bnez	a5,1c00c2f2 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c00c2e0:	01800793          	li	a5,24
1c00c2e4:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c00c2e6:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c00c2e8:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c00c2ea:	c380                	sw	s0,0(a5)
}
1c00c2ec:	4422                	lw	s0,8(sp)
1c00c2ee:	0141                	addi	sp,sp,16
1c00c2f0:	8082                	ret
    __rt_event_execute(NULL, 1);
1c00c2f2:	4585                	li	a1,1
1c00c2f4:	4501                	li	a0,0
1c00c2f6:	f77ff0ef          	jal	ra,1c00c26c <__rt_event_execute>
1c00c2fa:	bff9                	j	1c00c2d8 <__rt_wait_event+0x8>

1c00c2fc <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c00c2fc:	1141                	addi	sp,sp,-16
1c00c2fe:	c606                	sw	ra,12(sp)
1c00c300:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c302:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c00c306:	fcbff0ef          	jal	ra,1c00c2d0 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00c30a:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c00c30e:	40b2                	lw	ra,12(sp)
1c00c310:	4422                	lw	s0,8(sp)
1c00c312:	0141                	addi	sp,sp,16
1c00c314:	8082                	ret

1c00c316 <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c00c316:	01800513          	li	a0,24
1c00c31a:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c00c31e:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c00c322:	4585                	li	a1,1
1c00c324:	0511                	addi	a0,a0,4
1c00c326:	e71ff06f          	j	1c00c196 <rt_event_alloc>

1c00c32a <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c00c32a:	ac15                	j	1c00c55e <rt_event_push_delayed>

1c00c32c <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c00c32c:	00758793          	addi	a5,a1,7
1c00c330:	c407b7b3          	p.bclr	a5,a5,2,0
1c00c334:	40b785b3          	sub	a1,a5,a1
1c00c338:	c11c                	sw	a5,0(a0)
1c00c33a:	8e0d                	sub	a2,a2,a1
1c00c33c:	00c05763          	blez	a2,1c00c34a <rt_user_alloc_init+0x1e>
1c00c340:	c4063633          	p.bclr	a2,a2,2,0
1c00c344:	c390                	sw	a2,0(a5)
1c00c346:	0007a223          	sw	zero,4(a5)
1c00c34a:	8082                	ret

1c00c34c <rt_user_alloc>:
1c00c34c:	411c                	lw	a5,0(a0)
1c00c34e:	059d                	addi	a1,a1,7
1c00c350:	c405b5b3          	p.bclr	a1,a1,2,0
1c00c354:	4701                	li	a4,0
1c00c356:	cb89                	beqz	a5,1c00c368 <rt_user_alloc+0x1c>
1c00c358:	4394                	lw	a3,0(a5)
1c00c35a:	43d0                	lw	a2,4(a5)
1c00c35c:	00b6c863          	blt	a3,a1,1c00c36c <rt_user_alloc+0x20>
1c00c360:	00b69b63          	bne	a3,a1,1c00c376 <rt_user_alloc+0x2a>
1c00c364:	c719                	beqz	a4,1c00c372 <rt_user_alloc+0x26>
1c00c366:	c350                	sw	a2,4(a4)
1c00c368:	853e                	mv	a0,a5
1c00c36a:	8082                	ret
1c00c36c:	873e                	mv	a4,a5
1c00c36e:	87b2                	mv	a5,a2
1c00c370:	b7dd                	j	1c00c356 <rt_user_alloc+0xa>
1c00c372:	c110                	sw	a2,0(a0)
1c00c374:	bfd5                	j	1c00c368 <rt_user_alloc+0x1c>
1c00c376:	00b78833          	add	a6,a5,a1
1c00c37a:	40b685b3          	sub	a1,a3,a1
1c00c37e:	00b82023          	sw	a1,0(a6)
1c00c382:	00c82223          	sw	a2,4(a6)
1c00c386:	c701                	beqz	a4,1c00c38e <rt_user_alloc+0x42>
1c00c388:	01072223          	sw	a6,4(a4)
1c00c38c:	bff1                	j	1c00c368 <rt_user_alloc+0x1c>
1c00c38e:	01052023          	sw	a6,0(a0)
1c00c392:	bfd9                	j	1c00c368 <rt_user_alloc+0x1c>

1c00c394 <rt_user_free>:
1c00c394:	411c                	lw	a5,0(a0)
1c00c396:	061d                	addi	a2,a2,7
1c00c398:	c4063633          	p.bclr	a2,a2,2,0
1c00c39c:	4701                	li	a4,0
1c00c39e:	c399                	beqz	a5,1c00c3a4 <rt_user_free+0x10>
1c00c3a0:	02b7e763          	bltu	a5,a1,1c00c3ce <rt_user_free+0x3a>
1c00c3a4:	00c586b3          	add	a3,a1,a2
1c00c3a8:	02d79663          	bne	a5,a3,1c00c3d4 <rt_user_free+0x40>
1c00c3ac:	4394                	lw	a3,0(a5)
1c00c3ae:	43dc                	lw	a5,4(a5)
1c00c3b0:	9636                	add	a2,a2,a3
1c00c3b2:	c190                	sw	a2,0(a1)
1c00c3b4:	c1dc                	sw	a5,4(a1)
1c00c3b6:	c31d                	beqz	a4,1c00c3dc <rt_user_free+0x48>
1c00c3b8:	4314                	lw	a3,0(a4)
1c00c3ba:	00d707b3          	add	a5,a4,a3
1c00c3be:	00f59d63          	bne	a1,a5,1c00c3d8 <rt_user_free+0x44>
1c00c3c2:	419c                	lw	a5,0(a1)
1c00c3c4:	97b6                	add	a5,a5,a3
1c00c3c6:	c31c                	sw	a5,0(a4)
1c00c3c8:	41dc                	lw	a5,4(a1)
1c00c3ca:	c35c                	sw	a5,4(a4)
1c00c3cc:	8082                	ret
1c00c3ce:	873e                	mv	a4,a5
1c00c3d0:	43dc                	lw	a5,4(a5)
1c00c3d2:	b7f1                	j	1c00c39e <rt_user_free+0xa>
1c00c3d4:	c190                	sw	a2,0(a1)
1c00c3d6:	bff9                	j	1c00c3b4 <rt_user_free+0x20>
1c00c3d8:	c34c                	sw	a1,4(a4)
1c00c3da:	8082                	ret
1c00c3dc:	c10c                	sw	a1,0(a0)
1c00c3de:	8082                	ret

1c00c3e0 <rt_alloc>:
1c00c3e0:	4785                	li	a5,1
1c00c3e2:	00a7fb63          	bleu	a0,a5,1c00c3f8 <rt_alloc+0x18>
1c00c3e6:	1c01c7b7          	lui	a5,0x1c01c
1c00c3ea:	7347a783          	lw	a5,1844(a5) # 1c01c734 <__rt_alloc_l1>
1c00c3ee:	1579                	addi	a0,a0,-2
1c00c3f0:	050a                	slli	a0,a0,0x2
1c00c3f2:	953e                	add	a0,a0,a5
1c00c3f4:	f59ff06f          	j	1c00c34c <rt_user_alloc>
1c00c3f8:	00153763          	p.bneimm	a0,1,1c00c406 <rt_alloc+0x26>
1c00c3fc:	1c01c537          	lui	a0,0x1c01c
1c00c400:	73c50513          	addi	a0,a0,1852 # 1c01c73c <__rt_alloc_fc_tcdm>
1c00c404:	bfc5                	j	1c00c3f4 <rt_alloc+0x14>
1c00c406:	1c01c537          	lui	a0,0x1c01c
1c00c40a:	73850513          	addi	a0,a0,1848 # 1c01c738 <__rt_alloc_l2>
1c00c40e:	b7dd                	j	1c00c3f4 <rt_alloc+0x14>

1c00c410 <rt_free>:
1c00c410:	4785                	li	a5,1
1c00c412:	00a7fb63          	bleu	a0,a5,1c00c428 <rt_free+0x18>
1c00c416:	1c01c7b7          	lui	a5,0x1c01c
1c00c41a:	7347a783          	lw	a5,1844(a5) # 1c01c734 <__rt_alloc_l1>
1c00c41e:	1579                	addi	a0,a0,-2
1c00c420:	050a                	slli	a0,a0,0x2
1c00c422:	953e                	add	a0,a0,a5
1c00c424:	f71ff06f          	j	1c00c394 <rt_user_free>
1c00c428:	c511                	beqz	a0,1c00c434 <rt_free+0x24>
1c00c42a:	1c01c537          	lui	a0,0x1c01c
1c00c42e:	73c50513          	addi	a0,a0,1852 # 1c01c73c <__rt_alloc_fc_tcdm>
1c00c432:	bfcd                	j	1c00c424 <rt_free+0x14>
1c00c434:	1c01c537          	lui	a0,0x1c01c
1c00c438:	73850513          	addi	a0,a0,1848 # 1c01c738 <__rt_alloc_l2>
1c00c43c:	b7e5                	j	1c00c424 <rt_free+0x14>

1c00c43e <__rt_alloc_init_l1>:
1c00c43e:	1c01c7b7          	lui	a5,0x1c01c
1c00c442:	7347a703          	lw	a4,1844(a5) # 1c01c734 <__rt_alloc_l1>
1c00c446:	100007b7          	lui	a5,0x10000
1c00c44a:	01651593          	slli	a1,a0,0x16
1c00c44e:	6641                	lui	a2,0x10
1c00c450:	050a                	slli	a0,a0,0x2
1c00c452:	02478793          	addi	a5,a5,36 # 10000024 <__l1_end>
1c00c456:	fdc60613          	addi	a2,a2,-36 # ffdc <__l1_heap_size>
1c00c45a:	95be                	add	a1,a1,a5
1c00c45c:	953a                	add	a0,a0,a4
1c00c45e:	ecfff06f          	j	1c00c32c <rt_user_alloc_init>

1c00c462 <__rt_alloc_init_l1_for_fc>:
1c00c462:	100005b7          	lui	a1,0x10000
1c00c466:	01651793          	slli	a5,a0,0x16
1c00c46a:	02458593          	addi	a1,a1,36 # 10000024 <__l1_end>
1c00c46e:	00b78733          	add	a4,a5,a1
1c00c472:	050a                	slli	a0,a0,0x2
1c00c474:	0791                	addi	a5,a5,4
1c00c476:	6641                	lui	a2,0x10
1c00c478:	1c01c6b7          	lui	a3,0x1c01c
1c00c47c:	fd860613          	addi	a2,a2,-40 # ffd8 <__rt_stack_size+0xf7d8>
1c00c480:	95be                	add	a1,a1,a5
1c00c482:	953a                	add	a0,a0,a4
1c00c484:	72e6aa23          	sw	a4,1844(a3) # 1c01c734 <__rt_alloc_l1>
1c00c488:	ea5ff06f          	j	1c00c32c <rt_user_alloc_init>

1c00c48c <__rt_allocs_init>:
1c00c48c:	1c01c5b7          	lui	a1,0x1c01c
1c00c490:	79c58793          	addi	a5,a1,1948 # 1c01c79c <__l2_end>
1c00c494:	1c080637          	lui	a2,0x1c080
1c00c498:	1c01c537          	lui	a0,0x1c01c
1c00c49c:	1141                	addi	sp,sp,-16
1c00c49e:	8e1d                	sub	a2,a2,a5
1c00c4a0:	79c58593          	addi	a1,a1,1948
1c00c4a4:	73850513          	addi	a0,a0,1848 # 1c01c738 <__rt_alloc_l2>
1c00c4a8:	c606                	sw	ra,12(sp)
1c00c4aa:	c422                	sw	s0,8(sp)
1c00c4ac:	e81ff0ef          	jal	ra,1c00c32c <rt_user_alloc_init>
1c00c4b0:	1b0015b7          	lui	a1,0x1b001
1c00c4b4:	3d058793          	addi	a5,a1,976 # 1b0013d0 <__fc_tcdm_end>
1c00c4b8:	1b004637          	lui	a2,0x1b004
1c00c4bc:	1c01c437          	lui	s0,0x1c01c
1c00c4c0:	8e1d                	sub	a2,a2,a5
1c00c4c2:	3d058593          	addi	a1,a1,976
1c00c4c6:	73c40513          	addi	a0,s0,1852 # 1c01c73c <__rt_alloc_fc_tcdm>
1c00c4ca:	e63ff0ef          	jal	ra,1c00c32c <rt_user_alloc_init>
1c00c4ce:	014027f3          	csrr	a5,uhartid
1c00c4d2:	ca5797b3          	p.extractu	a5,a5,5,5
1c00c4d6:	e799                	bnez	a5,1c00c4e4 <__rt_allocs_init+0x58>
1c00c4d8:	4422                	lw	s0,8(sp)
1c00c4da:	40b2                	lw	ra,12(sp)
1c00c4dc:	4501                	li	a0,0
1c00c4de:	0141                	addi	sp,sp,16
1c00c4e0:	f83ff06f          	j	1c00c462 <__rt_alloc_init_l1_for_fc>
1c00c4e4:	73c40513          	addi	a0,s0,1852
1c00c4e8:	4591                	li	a1,4
1c00c4ea:	e63ff0ef          	jal	ra,1c00c34c <rt_user_alloc>
1c00c4ee:	40b2                	lw	ra,12(sp)
1c00c4f0:	4422                	lw	s0,8(sp)
1c00c4f2:	1c01c7b7          	lui	a5,0x1c01c
1c00c4f6:	72a7aa23          	sw	a0,1844(a5) # 1c01c734 <__rt_alloc_l1>
1c00c4fa:	0141                	addi	sp,sp,16
1c00c4fc:	8082                	ret

1c00c4fe <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c00c4fe:	4509                	li	a0,2
1c00c500:	ee1ff06f          	j	1c00c3e0 <rt_alloc>

1c00c504 <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c00c504:	1c01c7b7          	lui	a5,0x1c01c
1c00c508:	7347a503          	lw	a0,1844(a5) # 1c01c734 <__rt_alloc_l1>
1c00c50c:	e89ff06f          	j	1c00c394 <rt_user_free>

1c00c510 <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c00c510:	85aa                	mv	a1,a0
1c00c512:	1c01c537          	lui	a0,0x1c01c
1c00c516:	73850513          	addi	a0,a0,1848 # 1c01c738 <__rt_alloc_l2>
1c00c51a:	e33ff06f          	j	1c00c34c <rt_user_alloc>

1c00c51e <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00c51e:	862e                	mv	a2,a1
1c00c520:	85aa                	mv	a1,a0
1c00c522:	1c01c537          	lui	a0,0x1c01c
1c00c526:	73850513          	addi	a0,a0,1848 # 1c01c738 <__rt_alloc_l2>
1c00c52a:	e6bff06f          	j	1c00c394 <rt_user_free>

1c00c52e <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c00c52e:	002007b7          	lui	a5,0x200
1c00c532:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c536:	0087a783          	lw	a5,8(a5)
1c00c53a:	1c01c737          	lui	a4,0x1c01c
1c00c53e:	60f72c23          	sw	a5,1560(a4) # 1c01c618 <timer_count>
1c00c542:	4501                	li	a0,0
1c00c544:	8082                	ret

1c00c546 <__rt_time_poweron>:
1c00c546:	1c01c7b7          	lui	a5,0x1c01c
1c00c54a:	6187a703          	lw	a4,1560(a5) # 1c01c618 <timer_count>
1c00c54e:	002007b7          	lui	a5,0x200
1c00c552:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c556:	00e7a423          	sw	a4,8(a5)
1c00c55a:	4501                	li	a0,0
1c00c55c:	8082                	ret

1c00c55e <rt_event_push_delayed>:
1c00c55e:	30047373          	csrrci	t1,mstatus,8
1c00c562:	1c01c637          	lui	a2,0x1c01c
1c00c566:	74062703          	lw	a4,1856(a2) # 1c01c740 <first_delayed>
1c00c56a:	002007b7          	lui	a5,0x200
1c00c56e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c572:	0087a783          	lw	a5,8(a5)
1c00c576:	46f9                	li	a3,30
1c00c578:	0405e5b3          	p.max	a1,a1,zero
1c00c57c:	02d5c5b3          	div	a1,a1,a3
1c00c580:	800006b7          	lui	a3,0x80000
1c00c584:	fff6c693          	not	a3,a3
1c00c588:	00d7f833          	and	a6,a5,a3
1c00c58c:	0585                	addi	a1,a1,1
1c00c58e:	97ae                	add	a5,a5,a1
1c00c590:	dd1c                	sw	a5,56(a0)
1c00c592:	982e                	add	a6,a6,a1
1c00c594:	4781                	li	a5,0
1c00c596:	c719                	beqz	a4,1c00c5a4 <rt_event_push_delayed+0x46>
1c00c598:	03872883          	lw	a7,56(a4)
1c00c59c:	00d8f8b3          	and	a7,a7,a3
1c00c5a0:	0108e863          	bltu	a7,a6,1c00c5b0 <rt_event_push_delayed+0x52>
1c00c5a4:	cb89                	beqz	a5,1c00c5b6 <rt_event_push_delayed+0x58>
1c00c5a6:	cfc8                	sw	a0,28(a5)
1c00c5a8:	cd58                	sw	a4,28(a0)
1c00c5aa:	30031073          	csrw	mstatus,t1
1c00c5ae:	8082                	ret
1c00c5b0:	87ba                	mv	a5,a4
1c00c5b2:	4f58                	lw	a4,28(a4)
1c00c5b4:	b7cd                	j	1c00c596 <rt_event_push_delayed+0x38>
1c00c5b6:	002007b7          	lui	a5,0x200
1c00c5ba:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c5be:	74a62023          	sw	a0,1856(a2)
1c00c5c2:	cd58                	sw	a4,28(a0)
1c00c5c4:	0087a703          	lw	a4,8(a5)
1c00c5c8:	95ba                	add	a1,a1,a4
1c00c5ca:	00b7a823          	sw	a1,16(a5)
1c00c5ce:	08500713          	li	a4,133
1c00c5d2:	00e7a023          	sw	a4,0(a5)
1c00c5d6:	bfd1                	j	1c00c5aa <rt_event_push_delayed+0x4c>

1c00c5d8 <rt_time_wait_us>:
1c00c5d8:	1101                	addi	sp,sp,-32
1c00c5da:	85aa                	mv	a1,a0
1c00c5dc:	4501                	li	a0,0
1c00c5de:	ce06                	sw	ra,28(sp)
1c00c5e0:	cc22                	sw	s0,24(sp)
1c00c5e2:	c62e                	sw	a1,12(sp)
1c00c5e4:	c43ff0ef          	jal	ra,1c00c226 <rt_event_get_blocking>
1c00c5e8:	45b2                	lw	a1,12(sp)
1c00c5ea:	842a                	mv	s0,a0
1c00c5ec:	f73ff0ef          	jal	ra,1c00c55e <rt_event_push_delayed>
1c00c5f0:	8522                	mv	a0,s0
1c00c5f2:	4462                	lw	s0,24(sp)
1c00c5f4:	40f2                	lw	ra,28(sp)
1c00c5f6:	6105                	addi	sp,sp,32
1c00c5f8:	d05ff06f          	j	1c00c2fc <rt_event_wait>

1c00c5fc <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c00c5fc:	1c01c7b7          	lui	a5,0x1c01c
1c00c600:	7407a023          	sw	zero,1856(a5) # 1c01c740 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c604:	002007b7          	lui	a5,0x200
{
1c00c608:	1141                	addi	sp,sp,-16
1c00c60a:	08300713          	li	a4,131
1c00c60e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00c612:	c606                	sw	ra,12(sp)
1c00c614:	c422                	sw	s0,8(sp)
1c00c616:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c00c61a:	1c00c5b7          	lui	a1,0x1c00c
1c00c61e:	68858593          	addi	a1,a1,1672 # 1c00c688 <__rt_timer_handler>
1c00c622:	452d                	li	a0,11
1c00c624:	dccff0ef          	jal	ra,1c00bbf0 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00c628:	6785                	lui	a5,0x1
1c00c62a:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00c62e:	00204737          	lui	a4,0x204
1c00c632:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c636:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00c63a:	1c00c5b7          	lui	a1,0x1c00c
1c00c63e:	4601                	li	a2,0
1c00c640:	52e58593          	addi	a1,a1,1326 # 1c00c52e <__rt_time_poweroff>
1c00c644:	4509                	li	a0,2
1c00c646:	f16ff0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00c64a:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00c64e:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00c650:	4601                	li	a2,0
1c00c652:	54658593          	addi	a1,a1,1350 # 1c00c546 <__rt_time_poweron>
1c00c656:	450d                	li	a0,3
1c00c658:	f04ff0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
1c00c65c:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c00c65e:	c10d                	beqz	a0,1c00c680 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00c660:	01402673          	csrr	a2,uhartid
1c00c664:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00c668:	40565593          	srai	a1,a2,0x5
1c00c66c:	f265b5b3          	p.bclr	a1,a1,25,6
1c00c670:	f4563633          	p.bclr	a2,a2,26,5
1c00c674:	06850513          	addi	a0,a0,104 # 1c010068 <__clz_tab+0x8dc>
1c00c678:	7b1010ef          	jal	ra,1c00e628 <printf>
1c00c67c:	731010ef          	jal	ra,1c00e5ac <abort>
}
1c00c680:	40b2                	lw	ra,12(sp)
1c00c682:	4422                	lw	s0,8(sp)
1c00c684:	0141                	addi	sp,sp,16
1c00c686:	8082                	ret

1c00c688 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c00c688:	7179                	addi	sp,sp,-48
1c00c68a:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c00c68c:	1c01c637          	lui	a2,0x1c01c
{
1c00c690:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c00c692:	74062783          	lw	a5,1856(a2) # 1c01c740 <first_delayed>
{
1c00c696:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00c698:	002006b7          	lui	a3,0x200
1c00c69c:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c00c6a0:	d61a                	sw	t1,44(sp)
1c00c6a2:	d42a                	sw	a0,40(sp)
1c00c6a4:	d22e                	sw	a1,36(sp)
1c00c6a6:	cc3a                	sw	a4,24(sp)
1c00c6a8:	c842                	sw	a6,16(sp)
1c00c6aa:	c646                	sw	a7,12(sp)
1c00c6ac:	c472                	sw	t3,8(sp)
1c00c6ae:	c276                	sw	t4,4(sp)
1c00c6b0:	0086a683          	lw	a3,8(a3)
1c00c6b4:	01c00593          	li	a1,28
1c00c6b8:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c00c6bc:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00c6be:	80000337          	lui	t1,0x80000
1c00c6c2:	4801                	li	a6,0
1c00c6c4:	4881                	li	a7,0
1c00c6c6:	01c00e93          	li	t4,28
1c00c6ca:	ffe34313          	xori	t1,t1,-2
1c00c6ce:	e7ad                	bnez	a5,1c00c738 <__rt_timer_handler+0xb0>
1c00c6d0:	00088463          	beqz	a7,1c00c6d8 <__rt_timer_handler+0x50>
1c00c6d4:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00c6d8:	00080463          	beqz	a6,1c00c6e0 <__rt_timer_handler+0x58>
1c00c6dc:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c6e0:	002007b7          	lui	a5,0x200
1c00c6e4:	08100713          	li	a4,129
1c00c6e8:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c00c6ec:	74062023          	sw	zero,1856(a2)
1c00c6f0:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c00c6f4:	6785                	lui	a5,0x1
1c00c6f6:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00c6fa:	00204737          	lui	a4,0x204
1c00c6fe:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c00c702:	5332                	lw	t1,44(sp)
1c00c704:	5522                	lw	a0,40(sp)
1c00c706:	5592                	lw	a1,36(sp)
1c00c708:	5602                	lw	a2,32(sp)
1c00c70a:	46f2                	lw	a3,28(sp)
1c00c70c:	4762                	lw	a4,24(sp)
1c00c70e:	47d2                	lw	a5,20(sp)
1c00c710:	4842                	lw	a6,16(sp)
1c00c712:	48b2                	lw	a7,12(sp)
1c00c714:	4e22                	lw	t3,8(sp)
1c00c716:	4e92                	lw	t4,4(sp)
1c00c718:	6145                	addi	sp,sp,48
1c00c71a:	30200073          	mret
  event->next = NULL;
1c00c71e:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c00c722:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c00c726:	c511                	beqz	a0,1c00c732 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c00c728:	c19c                	sw	a5,0(a1)
    event = next;
1c00c72a:	85be                	mv	a1,a5
1c00c72c:	4805                	li	a6,1
1c00c72e:	87f2                	mv	a5,t3
1c00c730:	bf79                	j	1c00c6ce <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c00c732:	853e                	mv	a0,a5
1c00c734:	4885                	li	a7,1
1c00c736:	bfd5                	j	1c00c72a <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00c738:	0387ae03          	lw	t3,56(a5)
1c00c73c:	41c68e33          	sub	t3,a3,t3
1c00c740:	fdc37fe3          	bleu	t3,t1,1c00c71e <__rt_timer_handler+0x96>
1c00c744:	00088463          	beqz	a7,1c00c74c <__rt_timer_handler+0xc4>
1c00c748:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00c74c:	00080463          	beqz	a6,1c00c754 <__rt_timer_handler+0xcc>
1c00c750:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00c754:	00200737          	lui	a4,0x200
1c00c758:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c00c75c:	74f62023          	sw	a5,1856(a2)
1c00c760:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c00c764:	5f9c                	lw	a5,56(a5)
1c00c766:	40d786b3          	sub	a3,a5,a3
1c00c76a:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c00c76c:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00c770:	08500793          	li	a5,133
1c00c774:	00f72023          	sw	a5,0(a4)
}
1c00c778:	b769                	j	1c00c702 <__rt_timer_handler+0x7a>

1c00c77a <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c00c77a:	7179                	addi	sp,sp,-48
1c00c77c:	d422                	sw	s0,40(sp)
1c00c77e:	842a                	mv	s0,a0
1c00c780:	d606                	sw	ra,44(sp)
1c00c782:	d226                	sw	s1,36(sp)
1c00c784:	d04a                	sw	s2,32(sp)
1c00c786:	30047973          	csrrci	s2,mstatus,8
1c00c78a:	4015d493          	srai	s1,a1,0x1
1c00c78e:	1a102537          	lui	a0,0x1a102
1c00c792:	049e                	slli	s1,s1,0x7
1c00c794:	94aa                	add	s1,s1,a0
1c00c796:	00459513          	slli	a0,a1,0x4
1c00c79a:	8941                	andi	a0,a0,16
1c00c79c:	94aa                	add	s1,s1,a0
1c00c79e:	853e                	mv	a0,a5
1c00c7a0:	ef89                	bnez	a5,1c00c7ba <rt_periph_copy+0x40>
1c00c7a2:	ce2e                	sw	a1,28(sp)
1c00c7a4:	cc32                	sw	a2,24(sp)
1c00c7a6:	ca36                	sw	a3,20(sp)
1c00c7a8:	c83a                	sw	a4,16(sp)
1c00c7aa:	c63e                	sw	a5,12(sp)
1c00c7ac:	9d3ff0ef          	jal	ra,1c00c17e <__rt_wait_event_prepare_blocking>
1c00c7b0:	47b2                	lw	a5,12(sp)
1c00c7b2:	4742                	lw	a4,16(sp)
1c00c7b4:	46d2                	lw	a3,20(sp)
1c00c7b6:	4662                	lw	a2,24(sp)
1c00c7b8:	45f2                	lw	a1,28(sp)
1c00c7ba:	e419                	bnez	s0,1c00c7c8 <rt_periph_copy+0x4e>
1c00c7bc:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa102014>
1c00c7c0:	04052223          	sw	zero,68(a0)
1c00c7c4:	04052a23          	sw	zero,84(a0)
1c00c7c8:	00c42803          	lw	a6,12(s0)
1c00c7cc:	c054                	sw	a3,4(s0)
1c00c7ce:	cc08                	sw	a0,24(s0)
1c00c7d0:	f6483833          	p.bclr	a6,a6,27,4
1c00c7d4:	4891                	li	a7,4
1c00c7d6:	c0474733          	p.bset	a4,a4,0,4
1c00c7da:	0908e163          	bltu	a7,a6,1c00c85c <rt_periph_copy+0xe2>
1c00c7de:	03000893          	li	a7,48
1c00c7e2:	0596                	slli	a1,a1,0x5
1c00c7e4:	98ae                	add	a7,a7,a1
1c00c7e6:	0008a303          	lw	t1,0(a7)
1c00c7ea:	00042a23          	sw	zero,20(s0)
1c00c7ee:	03000813          	li	a6,48
1c00c7f2:	02031b63          	bnez	t1,1c00c828 <rt_periph_copy+0xae>
1c00c7f6:	0088a023          	sw	s0,0(a7)
1c00c7fa:	00b808b3          	add	a7,a6,a1
1c00c7fe:	0088a303          	lw	t1,8(a7)
1c00c802:	0088a223          	sw	s0,4(a7)
1c00c806:	02031663          	bnez	t1,1c00c832 <rt_periph_copy+0xb8>
1c00c80a:	00848893          	addi	a7,s1,8
1c00c80e:	0008a883          	lw	a7,0(a7)
1c00c812:	0208f893          	andi	a7,a7,32
1c00c816:	00089e63          	bnez	a7,1c00c832 <rt_periph_copy+0xb8>
1c00c81a:	00c4a023          	sw	a2,0(s1)
1c00c81e:	00d4a223          	sw	a3,4(s1)
1c00c822:	00e4a423          	sw	a4,8(s1)
1c00c826:	a005                	j	1c00c846 <rt_periph_copy+0xcc>
1c00c828:	0048a883          	lw	a7,4(a7)
1c00c82c:	0088aa23          	sw	s0,20(a7)
1c00c830:	b7e9                	j	1c00c7fa <rt_periph_copy+0x80>
1c00c832:	00042823          	sw	zero,16(s0)
1c00c836:	c010                	sw	a2,0(s0)
1c00c838:	c054                	sw	a3,4(s0)
1c00c83a:	c418                	sw	a4,8(s0)
1c00c83c:	00031563          	bnez	t1,1c00c846 <rt_periph_copy+0xcc>
1c00c840:	982e                	add	a6,a6,a1
1c00c842:	00882423          	sw	s0,8(a6)
1c00c846:	e399                	bnez	a5,1c00c84c <rt_periph_copy+0xd2>
1c00c848:	a89ff0ef          	jal	ra,1c00c2d0 <__rt_wait_event>
1c00c84c:	30091073          	csrw	mstatus,s2
1c00c850:	50b2                	lw	ra,44(sp)
1c00c852:	5422                	lw	s0,40(sp)
1c00c854:	5492                	lw	s1,36(sp)
1c00c856:	5902                	lw	s2,32(sp)
1c00c858:	6145                	addi	sp,sp,48
1c00c85a:	8082                	ret
1c00c85c:	fe6835e3          	p.bneimm	a6,6,1c00c846 <rt_periph_copy+0xcc>
1c00c860:	03000893          	li	a7,48
1c00c864:	0596                	slli	a1,a1,0x5
1c00c866:	98ae                	add	a7,a7,a1
1c00c868:	0008a303          	lw	t1,0(a7)
1c00c86c:	00042a23          	sw	zero,20(s0)
1c00c870:	03000813          	li	a6,48
1c00c874:	00031f63          	bnez	t1,1c00c892 <rt_periph_copy+0x118>
1c00c878:	0088a023          	sw	s0,0(a7)
1c00c87c:	95c2                	add	a1,a1,a6
1c00c87e:	c1c0                	sw	s0,4(a1)
1c00c880:	00031e63          	bnez	t1,1c00c89c <rt_periph_copy+0x122>
1c00c884:	02442803          	lw	a6,36(s0)
1c00c888:	1a1025b7          	lui	a1,0x1a102
1c00c88c:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10217c>
1c00c890:	b769                	j	1c00c81a <rt_periph_copy+0xa0>
1c00c892:	0048a883          	lw	a7,4(a7)
1c00c896:	0088aa23          	sw	s0,20(a7)
1c00c89a:	b7cd                	j	1c00c87c <rt_periph_copy+0x102>
1c00c89c:	c418                	sw	a4,8(s0)
1c00c89e:	4598                	lw	a4,8(a1)
1c00c8a0:	c010                	sw	a2,0(s0)
1c00c8a2:	c054                	sw	a3,4(s0)
1c00c8a4:	00042823          	sw	zero,16(s0)
1c00c8a8:	ff59                	bnez	a4,1c00c846 <rt_periph_copy+0xcc>
1c00c8aa:	c580                	sw	s0,8(a1)
1c00c8ac:	bf69                	j	1c00c846 <rt_periph_copy+0xcc>

1c00c8ae <__rt_periph_wait_event>:
1c00c8ae:	30047673          	csrrci	a2,mstatus,8
1c00c8b2:	477d                	li	a4,31
1c00c8b4:	4781                	li	a5,0
1c00c8b6:	00a75463          	ble	a0,a4,1c00c8be <__rt_periph_wait_event+0x10>
1c00c8ba:	1501                	addi	a0,a0,-32
1c00c8bc:	4785                	li	a5,1
1c00c8be:	00279713          	slli	a4,a5,0x2
1c00c8c2:	4685                	li	a3,1
1c00c8c4:	03000793          	li	a5,48
1c00c8c8:	00a696b3          	sll	a3,a3,a0
1c00c8cc:	97ba                	add	a5,a5,a4
1c00c8ce:	00204837          	lui	a6,0x204
1c00c8d2:	2807a703          	lw	a4,640(a5)
1c00c8d6:	8f75                	and	a4,a4,a3
1c00c8d8:	cf19                	beqz	a4,1c00c8f6 <__rt_periph_wait_event+0x48>
1c00c8da:	c999                	beqz	a1,1c00c8f0 <__rt_periph_wait_event+0x42>
1c00c8dc:	2807a683          	lw	a3,640(a5)
1c00c8e0:	4705                	li	a4,1
1c00c8e2:	00a71533          	sll	a0,a4,a0
1c00c8e6:	fff54513          	not	a0,a0
1c00c8ea:	8d75                	and	a0,a0,a3
1c00c8ec:	28a7a023          	sw	a0,640(a5)
1c00c8f0:	30061073          	csrw	mstatus,a2
1c00c8f4:	8082                	ret
1c00c8f6:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c00c8fa:	30046773          	csrrsi	a4,mstatus,8
1c00c8fe:	30047773          	csrrci	a4,mstatus,8
1c00c902:	bfc1                	j	1c00c8d2 <__rt_periph_wait_event+0x24>

1c00c904 <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00c904:	1c000537          	lui	a0,0x1c000
1c00c908:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00c90c:	4601                	li	a2,0
1c00c90e:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c00c912:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00c916:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c00c91a:	014950fb          	lp.setupi	x1,20,1c00c93e <__rt_periph_init+0x3a>
1c00c91e:	40165793          	srai	a5,a2,0x1
1c00c922:	00461813          	slli	a6,a2,0x4
1c00c926:	079e                	slli	a5,a5,0x7
1c00c928:	97c6                	add	a5,a5,a7
1c00c92a:	01087813          	andi	a6,a6,16
1c00c92e:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c00c930:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00c934:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00c938:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c00c93a:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00c93c:	0605                	addi	a2,a2,1
1c00c93e:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c00c942:	1c0006b7          	lui	a3,0x1c000
1c00c946:	28870613          	addi	a2,a4,648
1c00c94a:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c00c94e:	00a250fb          	lp.setupi	x1,10,1c00c956 <__rt_periph_init+0x52>
1c00c952:	00d6222b          	p.sw	a3,4(a2!)
1c00c956:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c00c958:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c00c95c:	28072223          	sw	zero,644(a4)
}
1c00c960:	8082                	ret

1c00c962 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c00c962:	1141                	addi	sp,sp,-16
1c00c964:	c226                	sw	s1,4(sp)
1c00c966:	84ae                	mv	s1,a1
1c00c968:	c606                	sw	ra,12(sp)
1c00c96a:	c422                	sw	s0,8(sp)
1c00c96c:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c96e:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00c972:	1c01c437          	lui	s0,0x1c01c
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c00c976:	00153f63          	p.bneimm	a0,1,1c00c994 <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00c97a:	74440413          	addi	s0,s0,1860 # 1c01c744 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c00c97e:	294d                	jal	1c00ce30 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00c980:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c00c982:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c00c986:	40b2                	lw	ra,12(sp)
1c00c988:	4422                	lw	s0,8(sp)
1c00c98a:	4492                	lw	s1,4(sp)
1c00c98c:	4902                	lw	s2,0(sp)
1c00c98e:	4501                	li	a0,0
1c00c990:	0141                	addi	sp,sp,16
1c00c992:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c00c994:	4511                	li	a0,4
1c00c996:	c04ff0ef          	jal	ra,1c00bd9a <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c00c99a:	85a6                	mv	a1,s1
1c00c99c:	4501                	li	a0,0
1c00c99e:	2949                	jal	1c00ce30 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00c9a0:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c00c9a2:	74942223          	sw	s1,1860(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00c9a6:	bf4ff0ef          	jal	ra,1c00bd9a <__rt_cbsys_exec>
1c00c9aa:	bfe1                	j	1c00c982 <rt_freq_set_and_get+0x20>

1c00c9ac <__rt_freq_init>:

void __rt_freq_init()
{
1c00c9ac:	1141                	addi	sp,sp,-16
1c00c9ae:	c422                	sw	s0,8(sp)
1c00c9b0:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c00c9b2:	29b5                	jal	1c00ce2e <__rt_flls_constructor>
  return __rt_platform;
1c00c9b4:	1c0107b7          	lui	a5,0x1c010

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00c9b8:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
1c00c9bc:	1c01c437          	lui	s0,0x1c01c
1c00c9c0:	0017ae63          	p.beqimm	a5,1,1c00c9dc <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00c9c4:	4501                	li	a0,0
1c00c9c6:	2991                	jal	1c00ce1a <__rt_fll_init>
1c00c9c8:	74a42223          	sw	a0,1860(s0) # 1c01c744 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c00c9cc:	74440413          	addi	s0,s0,1860
1c00c9d0:	00042223          	sw	zero,4(s0)

}
1c00c9d4:	40b2                	lw	ra,12(sp)
1c00c9d6:	4422                	lw	s0,8(sp)
1c00c9d8:	0141                	addi	sp,sp,16
1c00c9da:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c00c9dc:	026267b7          	lui	a5,0x2626
1c00c9e0:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00c9e4:	74f42223          	sw	a5,1860(s0)
1c00c9e8:	b7d5                	j	1c00c9cc <__rt_freq_init+0x20>

1c00c9ea <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c00c9ea:	100517b3          	p.fl1	a5,a0
1c00c9ee:	4769                	li	a4,26
1c00c9f0:	8f1d                	sub	a4,a4,a5
1c00c9f2:	4785                	li	a5,1
1c00c9f4:	04f76733          	p.max	a4,a4,a5
1c00c9f8:	47a1                	li	a5,8
1c00c9fa:	04f74733          	p.min	a4,a4,a5
1c00c9fe:	fff70693          	addi	a3,a4,-1
1c00ca02:	00f55793          	srli	a5,a0,0xf
1c00ca06:	00d797b3          	sll	a5,a5,a3
1c00ca0a:	c19c                	sw	a5,0(a1)
1c00ca0c:	07be                	slli	a5,a5,0xf
1c00ca0e:	c218                	sw	a4,0(a2)
1c00ca10:	00d7d533          	srl	a0,a5,a3
1c00ca14:	8082                	ret

1c00ca16 <soc_eu_fcEventMask_setEvent>:
1c00ca16:	47fd                	li	a5,31
1c00ca18:	4721                	li	a4,8
1c00ca1a:	00f50463          	beq	a0,a5,1c00ca22 <soc_eu_fcEventMask_setEvent+0xc>
1c00ca1e:	1501                	addi	a0,a0,-32
1c00ca20:	4711                	li	a4,4
1c00ca22:	1a1066b7          	lui	a3,0x1a106
1c00ca26:	20e6f603          	p.lw	a2,a4(a3)
1c00ca2a:	4785                	li	a5,1
1c00ca2c:	00a79533          	sll	a0,a5,a0
1c00ca30:	fff54513          	not	a0,a0
1c00ca34:	8d71                	and	a0,a0,a2
1c00ca36:	00a6e723          	p.sw	a0,a4(a3)
1c00ca3a:	8082                	ret

1c00ca3c <__rt_pmu_cluster_power_down>:
1c00ca3c:	1c0107b7          	lui	a5,0x1c010
1c00ca40:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
1c00ca44:	0817a363          	p.beqimm	a5,1,1c00caca <__rt_pmu_cluster_power_down+0x8e>
1c00ca48:	1141                	addi	sp,sp,-16
1c00ca4a:	1a1046b7          	lui	a3,0x1a104
1c00ca4e:	c606                	sw	ra,12(sp)
1c00ca50:	c422                	sw	s0,8(sp)
1c00ca52:	c226                	sw	s1,4(sp)
1c00ca54:	c04a                	sw	s2,0(sp)
1c00ca56:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10404c>
1c00ca5a:	1c01c737          	lui	a4,0x1c01c
1c00ca5e:	27470713          	addi	a4,a4,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00ca62:	00874783          	lbu	a5,8(a4)
1c00ca66:	8436                	mv	s0,a3
1c00ca68:	c0079933          	p.extractu	s2,a5,0,0
1c00ca6c:	04193963          	p.bneimm	s2,1,1c00cabe <__rt_pmu_cluster_power_down+0x82>
1c00ca70:	01069613          	slli	a2,a3,0x10
1c00ca74:	04064563          	bltz	a2,1c00cabe <__rt_pmu_cluster_power_down+0x82>
1c00ca78:	c007b7b3          	p.bclr	a5,a5,0,0
1c00ca7c:	c0a92433          	p.insert	s0,s2,0,10
1c00ca80:	1a1044b7          	lui	s1,0x1a104
1c00ca84:	00f70423          	sb	a5,8(a4)
1c00ca88:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10404c>
1c00ca8c:	4585                	li	a1,1
1c00ca8e:	02300513          	li	a0,35
1c00ca92:	e1dff0ef          	jal	ra,1c00c8ae <__rt_periph_wait_event>
1c00ca96:	4785                	li	a5,1
1c00ca98:	00f4a623          	sw	a5,12(s1)
1c00ca9c:	c0302433          	p.insert	s0,zero,0,3
1c00caa0:	0684a823          	sw	s0,112(s1)
1c00caa4:	c0d92433          	p.insert	s0,s2,0,13
1c00caa8:	0684a823          	sw	s0,112(s1)
1c00caac:	4422                	lw	s0,8(sp)
1c00caae:	40b2                	lw	ra,12(sp)
1c00cab0:	4492                	lw	s1,4(sp)
1c00cab2:	4902                	lw	s2,0(sp)
1c00cab4:	4585                	li	a1,1
1c00cab6:	457d                	li	a0,31
1c00cab8:	0141                	addi	sp,sp,16
1c00caba:	df5ff06f          	j	1c00c8ae <__rt_periph_wait_event>
1c00cabe:	40b2                	lw	ra,12(sp)
1c00cac0:	4422                	lw	s0,8(sp)
1c00cac2:	4492                	lw	s1,4(sp)
1c00cac4:	4902                	lw	s2,0(sp)
1c00cac6:	0141                	addi	sp,sp,16
1c00cac8:	8082                	ret
1c00caca:	8082                	ret

1c00cacc <SetFllFrequency>:
1c00cacc:	7179                	addi	sp,sp,-48
1c00cace:	d422                	sw	s0,40(sp)
1c00cad0:	d226                	sw	s1,36(sp)
1c00cad2:	1c01c437          	lui	s0,0x1c01c
1c00cad6:	84aa                	mv	s1,a0
1c00cad8:	d606                	sw	ra,44(sp)
1c00cada:	852e                	mv	a0,a1
1c00cadc:	27440413          	addi	s0,s0,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00cae0:	0014be63          	p.bneimm	s1,1,1c00cafc <SetFllFrequency+0x30>
1c00cae4:	00844783          	lbu	a5,8(s0)
1c00cae8:	c0079733          	p.extractu	a4,a5,0,0
1c00caec:	08172763          	p.beqimm	a4,1,1c00cb7a <SetFllFrequency+0xae>
1c00caf0:	4501                	li	a0,0
1c00caf2:	50b2                	lw	ra,44(sp)
1c00caf4:	5422                	lw	s0,40(sp)
1c00caf6:	5492                	lw	s1,36(sp)
1c00caf8:	6145                	addi	sp,sp,48
1c00cafa:	8082                	ret
1c00cafc:	ce2d                	beqz	a2,1c00cb76 <SetFllFrequency+0xaa>
1c00cafe:	00844783          	lbu	a5,8(s0)
1c00cb02:	03200713          	li	a4,50
1c00cb06:	c21797b3          	p.extractu	a5,a5,1,1
1c00cb0a:	97a2                	add	a5,a5,s0
1c00cb0c:	00a7c783          	lbu	a5,10(a5)
1c00cb10:	00e787db          	p.mac	a5,a5,a4,zero
1c00cb14:	22678793          	addi	a5,a5,550
1c00cb18:	ecad                	bnez	s1,1c00cb92 <SetFllFrequency+0xc6>
1c00cb1a:	0007a6b7          	lui	a3,0x7a
1c00cb1e:	eb237737          	lui	a4,0xeb237
1c00cb22:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00cb26:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c00cb2a:	42d78733          	p.mac	a4,a5,a3
1c00cb2e:	fcb761e3          	bltu	a4,a1,1c00caf0 <SetFllFrequency+0x24>
1c00cb32:	c62a                	sw	a0,12(sp)
1c00cb34:	d76ff0ef          	jal	ra,1c00c0aa <__rt_bridge_req_shutdown>
1c00cb38:	4532                	lw	a0,12(sp)
1c00cb3a:	0870                	addi	a2,sp,28
1c00cb3c:	082c                	addi	a1,sp,24
1c00cb3e:	eadff0ef          	jal	ra,1c00c9ea <SetFllMultDivFactors>
1c00cb42:	4762                	lw	a4,24(sp)
1c00cb44:	800007b7          	lui	a5,0x80000
1c00cb48:	1a1006b7          	lui	a3,0x1a100
1c00cb4c:	de0727b3          	p.insert	a5,a4,15,0
1c00cb50:	4772                	lw	a4,28(sp)
1c00cb52:	c7a727b3          	p.insert	a5,a4,3,26
1c00cb56:	00449713          	slli	a4,s1,0x4
1c00cb5a:	0711                	addi	a4,a4,4
1c00cb5c:	00f6e723          	p.sw	a5,a4(a3)
1c00cb60:	00249793          	slli	a5,s1,0x2
1c00cb64:	943e                	add	s0,s0,a5
1c00cb66:	d008                	sw	a0,32(s0)
1c00cb68:	c808                	sw	a0,16(s0)
1c00cb6a:	f4c1                	bnez	s1,1c00caf2 <SetFllFrequency+0x26>
1c00cb6c:	c62a                	sw	a0,12(sp)
1c00cb6e:	c98ff0ef          	jal	ra,1c00c006 <__rt_bridge_set_available>
1c00cb72:	4532                	lw	a0,12(sp)
1c00cb74:	bfbd                	j	1c00caf2 <SetFllFrequency+0x26>
1c00cb76:	f0f1                	bnez	s1,1c00cb3a <SetFllFrequency+0x6e>
1c00cb78:	bf6d                	j	1c00cb32 <SetFllFrequency+0x66>
1c00cb7a:	d261                	beqz	a2,1c00cb3a <SetFllFrequency+0x6e>
1c00cb7c:	c21797b3          	p.extractu	a5,a5,1,1
1c00cb80:	97a2                	add	a5,a5,s0
1c00cb82:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c00cb86:	03200713          	li	a4,50
1c00cb8a:	00e787db          	p.mac	a5,a5,a4,zero
1c00cb8e:	22678793          	addi	a5,a5,550
1c00cb92:	0006b6b7          	lui	a3,0x6b
1c00cb96:	eaf5a737          	lui	a4,0xeaf5a
1c00cb9a:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c00cb9e:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c00cba2:	42d78733          	p.mac	a4,a5,a3
1c00cba6:	f8a77ae3          	bleu	a0,a4,1c00cb3a <SetFllFrequency+0x6e>
1c00cbaa:	b799                	j	1c00caf0 <SetFllFrequency+0x24>

1c00cbac <InitOneFll>:
1c00cbac:	7179                	addi	sp,sp,-48
1c00cbae:	00451713          	slli	a4,a0,0x4
1c00cbb2:	ce4e                	sw	s3,28(sp)
1c00cbb4:	1a1007b7          	lui	a5,0x1a100
1c00cbb8:	00470993          	addi	s3,a4,4
1c00cbbc:	d606                	sw	ra,44(sp)
1c00cbbe:	d422                	sw	s0,40(sp)
1c00cbc0:	d226                	sw	s1,36(sp)
1c00cbc2:	d04a                	sw	s2,32(sp)
1c00cbc4:	2137f783          	p.lw	a5,s3(a5)
1c00cbc8:	1c01c437          	lui	s0,0x1c01c
1c00cbcc:	27440413          	addi	s0,s0,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00cbd0:	00251913          	slli	s2,a0,0x2
1c00cbd4:	c585                	beqz	a1,1c00cbfc <InitOneFll+0x50>
1c00cbd6:	c7a79733          	p.extractu	a4,a5,3,26
1c00cbda:	1007d7b3          	p.exthz	a5,a5
1c00cbde:	07be                	slli	a5,a5,0xf
1c00cbe0:	c701                	beqz	a4,1c00cbe8 <InitOneFll+0x3c>
1c00cbe2:	177d                	addi	a4,a4,-1
1c00cbe4:	00e7d7b3          	srl	a5,a5,a4
1c00cbe8:	944a                	add	s0,s0,s2
1c00cbea:	d01c                	sw	a5,32(s0)
1c00cbec:	c81c                	sw	a5,16(s0)
1c00cbee:	50b2                	lw	ra,44(sp)
1c00cbf0:	5422                	lw	s0,40(sp)
1c00cbf2:	5492                	lw	s1,36(sp)
1c00cbf4:	5902                	lw	s2,32(sp)
1c00cbf6:	49f2                	lw	s3,28(sp)
1c00cbf8:	6145                	addi	sp,sp,48
1c00cbfa:	8082                	ret
1c00cbfc:	0007d363          	bgez	a5,1c00cc02 <InitOneFll+0x56>
1c00cc00:	c105                	beqz	a0,1c00cc20 <InitOneFll+0x74>
1c00cc02:	810047b7          	lui	a5,0x81004
1c00cc06:	1a1006b7          	lui	a3,0x1a100
1c00cc0a:	00870613          	addi	a2,a4,8
1c00cc0e:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c00cc12:	00f6e623          	p.sw	a5,a2(a3)
1c00cc16:	014c04b7          	lui	s1,0x14c0
1c00cc1a:	0731                	addi	a4,a4,12
1c00cc1c:	0096e723          	p.sw	s1,a4(a3)
1c00cc20:	02faf537          	lui	a0,0x2faf
1c00cc24:	0070                	addi	a2,sp,12
1c00cc26:	002c                	addi	a1,sp,8
1c00cc28:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00cc2c:	dbfff0ef          	jal	ra,1c00c9ea <SetFllMultDivFactors>
1c00cc30:	47a2                	lw	a5,8(sp)
1c00cc32:	c00004b7          	lui	s1,0xc0000
1c00cc36:	de07a4b3          	p.insert	s1,a5,15,0
1c00cc3a:	47b2                	lw	a5,12(sp)
1c00cc3c:	c7a7a4b3          	p.insert	s1,a5,3,26
1c00cc40:	1a1007b7          	lui	a5,0x1a100
1c00cc44:	0097e9a3          	p.sw	s1,s3(a5)
1c00cc48:	944a                	add	s0,s0,s2
1c00cc4a:	d008                	sw	a0,32(s0)
1c00cc4c:	c808                	sw	a0,16(s0)
1c00cc4e:	b745                	j	1c00cbee <InitOneFll+0x42>

1c00cc50 <__rt_pmu_cluster_power_up>:
1c00cc50:	1141                	addi	sp,sp,-16
1c00cc52:	c226                	sw	s1,4(sp)
1c00cc54:	1c01c4b7          	lui	s1,0x1c01c
1c00cc58:	c606                	sw	ra,12(sp)
1c00cc5a:	c422                	sw	s0,8(sp)
1c00cc5c:	c04a                	sw	s2,0(sp)
1c00cc5e:	27448793          	addi	a5,s1,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00cc62:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffe4>
1c00cc66:	4501                	li	a0,0
1c00cc68:	c00797b3          	p.extractu	a5,a5,0,0
1c00cc6c:	e785                	bnez	a5,1c00cc94 <__rt_pmu_cluster_power_up+0x44>
1c00cc6e:	1c0107b7          	lui	a5,0x1c010
1c00cc72:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
1c00cc76:	27448493          	addi	s1,s1,628
1c00cc7a:	0217b363          	p.bneimm	a5,1,1c00cca0 <__rt_pmu_cluster_power_up+0x50>
1c00cc7e:	1a1047b7          	lui	a5,0x1a104
1c00cc82:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fe8>
1c00cc86:	0084c783          	lbu	a5,8(s1)
1c00cc8a:	4505                	li	a0,1
1c00cc8c:	c007c7b3          	p.bset	a5,a5,0,0
1c00cc90:	00f48423          	sb	a5,8(s1)
1c00cc94:	40b2                	lw	ra,12(sp)
1c00cc96:	4422                	lw	s0,8(sp)
1c00cc98:	4492                	lw	s1,4(sp)
1c00cc9a:	4902                	lw	s2,0(sp)
1c00cc9c:	0141                	addi	sp,sp,16
1c00cc9e:	8082                	ret
1c00cca0:	1a104437          	lui	s0,0x1a104
1c00cca4:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10404c>
1c00cca8:	c0a417b3          	p.extractu	a5,s0,0,10
1c00ccac:	ef89                	bnez	a5,1c00ccc6 <__rt_pmu_cluster_power_up+0x76>
1c00ccae:	4785                	li	a5,1
1c00ccb0:	c0a7a433          	p.insert	s0,a5,0,10
1c00ccb4:	1a1047b7          	lui	a5,0x1a104
1c00ccb8:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10404c>
1c00ccbc:	4585                	li	a1,1
1c00ccbe:	02300513          	li	a0,35
1c00ccc2:	bedff0ef          	jal	ra,1c00c8ae <__rt_periph_wait_event>
1c00ccc6:	4785                	li	a5,1
1c00ccc8:	c037a433          	p.insert	s0,a5,0,3
1c00cccc:	1a104937          	lui	s2,0x1a104
1c00ccd0:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10404c>
1c00ccd4:	4585                	li	a1,1
1c00ccd6:	457d                	li	a0,31
1c00ccd8:	bd7ff0ef          	jal	ra,1c00c8ae <__rt_periph_wait_event>
1c00ccdc:	00092623          	sw	zero,12(s2)
1c00cce0:	c0d02433          	p.insert	s0,zero,0,13
1c00cce4:	06892823          	sw	s0,112(s2)
1c00cce8:	c0a02433          	p.insert	s0,zero,0,10
1c00ccec:	06892823          	sw	s0,112(s2)
1c00ccf0:	4585                	li	a1,1
1c00ccf2:	02300513          	li	a0,35
1c00ccf6:	bb9ff0ef          	jal	ra,1c00c8ae <__rt_periph_wait_event>
1c00ccfa:	01c4c783          	lbu	a5,28(s1)
1c00ccfe:	0207f793          	andi	a5,a5,32
1c00cd02:	e789                	bnez	a5,1c00cd0c <__rt_pmu_cluster_power_up+0xbc>
1c00cd04:	4581                	li	a1,0
1c00cd06:	4505                	li	a0,1
1c00cd08:	ea5ff0ef          	jal	ra,1c00cbac <InitOneFll>
1c00cd0c:	c0e44433          	p.bset	s0,s0,0,14
1c00cd10:	1a1047b7          	lui	a5,0x1a104
1c00cd14:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10404c>
1c00cd18:	b7bd                	j	1c00cc86 <__rt_pmu_cluster_power_up+0x36>

1c00cd1a <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00cd1a:	1141                	addi	sp,sp,-16
1c00cd1c:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00cd1e:	1c01c437          	lui	s0,0x1c01c
{
1c00cd22:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00cd24:	27440413          	addi	s0,s0,628 # 1c01c274 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00cd28:	b82ff0ef          	jal	ra,1c00c0aa <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00cd2c:	01c44583          	lbu	a1,28(s0)
1c00cd30:	4501                	li	a0,0
1c00cd32:	c04595b3          	p.extractu	a1,a1,0,4
1c00cd36:	e77ff0ef          	jal	ra,1c00cbac <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00cd3a:	00844783          	lbu	a5,8(s0)
1c00cd3e:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c00cd42:	0017b963          	p.bneimm	a5,1,1c00cd54 <InitFlls+0x3a>
1c00cd46:	01c44583          	lbu	a1,28(s0)
1c00cd4a:	4505                	li	a0,1
1c00cd4c:	c05595b3          	p.extractu	a1,a1,0,5
1c00cd50:	e5dff0ef          	jal	ra,1c00cbac <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c00cd54:	4422                	lw	s0,8(sp)
1c00cd56:	40b2                	lw	ra,12(sp)
1c00cd58:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00cd5a:	aacff06f          	j	1c00c006 <__rt_bridge_set_available>

1c00cd5e <__rt_pmu_init>:
1c00cd5e:	1c0107b7          	lui	a5,0x1c010
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c00cd62:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
1c00cd66:	0a17a963          	p.beqimm	a5,1,1c00ce18 <__rt_pmu_init+0xba>
{
1c00cd6a:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c00cd6c:	1c01c7b7          	lui	a5,0x1c01c
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c00cd70:	1a104637          	lui	a2,0x1a104
{
1c00cd74:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c00cd76:	7407a623          	sw	zero,1868(a5) # 1c01c74c <__rt_wakeup_use_fast>
1c00cd7a:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040dc>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c00cd7e:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c00cd82:	1c01c7b7          	lui	a5,0x1c01c
1c00cd86:	27478793          	addi	a5,a5,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00cd8a:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00cd8c:	c2e696b3          	p.extractu	a3,a3,1,14
1c00cd90:	96be                	add	a3,a3,a5
1c00cd92:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa100004>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c00cd96:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00cd9a:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c00cd9e:	c80716b3          	p.extractu	a3,a4,4,0
1c00cda2:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00cda6:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00cdaa:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00cdae:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00cdb2:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00cdb6:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c00cdba:	4705                	li	a4,1
1c00cdbc:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c00cdc0:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00cdc4:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00cdc8:	f53ff0ef          	jal	ra,1c00cd1a <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00cdcc:	457d                	li	a0,31
1c00cdce:	c49ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c00cdd2:	02000513          	li	a0,32
1c00cdd6:	c41ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00cdda:	02100513          	li	a0,33
1c00cdde:	c39ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c00cde2:	02200513          	li	a0,34
1c00cde6:	c31ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00cdea:	02300513          	li	a0,35
1c00cdee:	c29ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c00cdf2:	02400513          	li	a0,36
1c00cdf6:	c21ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00cdfa:	02500513          	li	a0,37
1c00cdfe:	c19ff0ef          	jal	ra,1c00ca16 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c00ce02:	1a1077b7          	lui	a5,0x1a107
1c00ce06:	471d                	li	a4,7
1c00ce08:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fe8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00ce0c:	4761                	li	a4,24
1c00ce0e:	00e7a823          	sw	a4,16(a5)
}
1c00ce12:	40b2                	lw	ra,12(sp)
1c00ce14:	0141                	addi	sp,sp,16
1c00ce16:	8082                	ret
1c00ce18:	8082                	ret

1c00ce1a <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00ce1a:	00251793          	slli	a5,a0,0x2
1c00ce1e:	1c01c537          	lui	a0,0x1c01c
1c00ce22:	27450513          	addi	a0,a0,628 # 1c01c274 <SystemStateToSCUFastSeq>
1c00ce26:	953e                	add	a0,a0,a5
}
1c00ce28:	5108                	lw	a0,32(a0)
1c00ce2a:	8082                	ret

1c00ce2c <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00ce2c:	8082                	ret

1c00ce2e <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c00ce2e:	8082                	ret

1c00ce30 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c00ce30:	4601                	li	a2,0
1c00ce32:	c9bff06f          	j	1c00cacc <SetFllFrequency>

1c00ce36 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00ce36:	04050713          	addi	a4,a0,64
1c00ce3a:	00400793          	li	a5,4
1c00ce3e:	01671613          	slli	a2,a4,0x16
1c00ce42:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00ce46:	1c01c6b7          	lui	a3,0x1c01c
1c00ce4a:	97b2                	add	a5,a5,a2
1c00ce4c:	77c68693          	addi	a3,a3,1916 # 1c01c77c <_bss_end>
1c00ce50:	02000713          	li	a4,32
1c00ce54:	8f95                	sub	a5,a5,a3
1c00ce56:	00f685b3          	add	a1,a3,a5
1c00ce5a:	02e04963          	bgtz	a4,1c00ce8c <__rt_init_cluster_data+0x56>
1c00ce5e:	1c01c7b7          	lui	a5,0x1c01c
1c00ce62:	02800713          	li	a4,40
1c00ce66:	75478793          	addi	a5,a5,1876 # 1c01c754 <__rt_fc_cluster_data>
1c00ce6a:	42e507b3          	p.mac	a5,a0,a4
1c00ce6e:	00201737          	lui	a4,0x201
1c00ce72:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00ce76:	9732                	add	a4,a4,a2
1c00ce78:	cb98                	sw	a4,16(a5)
1c00ce7a:	00400713          	li	a4,4
1c00ce7e:	e6c73733          	p.bclr	a4,a4,19,12
1c00ce82:	9732                	add	a4,a4,a2
1c00ce84:	0007a423          	sw	zero,8(a5)
1c00ce88:	cbd8                	sw	a4,20(a5)
1c00ce8a:	8082                	ret
1c00ce8c:	0046a80b          	p.lw	a6,4(a3!)
1c00ce90:	1771                	addi	a4,a4,-4
1c00ce92:	0105a023          	sw	a6,0(a1)
1c00ce96:	b7c1                	j	1c00ce56 <__rt_init_cluster_data+0x20>

1c00ce98 <__rt_cluster_init>:
1c00ce98:	1c01c537          	lui	a0,0x1c01c
1c00ce9c:	1141                	addi	sp,sp,-16
1c00ce9e:	02800613          	li	a2,40
1c00cea2:	4581                	li	a1,0
1c00cea4:	75450513          	addi	a0,a0,1876 # 1c01c754 <__rt_fc_cluster_data>
1c00cea8:	c606                	sw	ra,12(sp)
1c00ceaa:	442010ef          	jal	ra,1c00e2ec <memset>
1c00ceae:	1c00f5b7          	lui	a1,0x1c00f
1c00ceb2:	67058593          	addi	a1,a1,1648 # 1c00f670 <__rt_dma_2d>
1c00ceb6:	4525                	li	a0,9
1c00ceb8:	d39fe0ef          	jal	ra,1c00bbf0 <rt_irq_set_handler>
1c00cebc:	1c0005b7          	lui	a1,0x1c000
1c00cec0:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c00cec4:	4505                	li	a0,1
1c00cec6:	d2bfe0ef          	jal	ra,1c00bbf0 <rt_irq_set_handler>
1c00ceca:	4789                	li	a5,2
1c00cecc:	00204737          	lui	a4,0x204
1c00ced0:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00ced4:	00f72423          	sw	a5,8(a4)
1c00ced8:	1c0005b7          	lui	a1,0x1c000
1c00cedc:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c00cee0:	4511                	li	a0,4
1c00cee2:	d0ffe0ef          	jal	ra,1c00bbf0 <rt_irq_set_handler>
1c00cee6:	47c1                	li	a5,16
1c00cee8:	00204737          	lui	a4,0x204
1c00ceec:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00cef0:	00f72423          	sw	a5,8(a4)
1c00cef4:	40b2                	lw	ra,12(sp)
1c00cef6:	4501                	li	a0,0
1c00cef8:	0141                	addi	sp,sp,16
1c00cefa:	8082                	ret

1c00cefc <__rt_cluster_mount_step>:
{
1c00cefc:	7179                	addi	sp,sp,-48
1c00cefe:	ce4e                	sw	s3,28(sp)
1c00cf00:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00cf02:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00cf06:	00400993          	li	s3,4
1c00cf0a:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c00cf0e:	d422                	sw	s0,40(sp)
1c00cf10:	d606                	sw	ra,44(sp)
1c00cf12:	d226                	sw	s1,36(sp)
1c00cf14:	d04a                	sw	s2,32(sp)
1c00cf16:	ca56                	sw	s5,20(sp)
1c00cf18:	842a                	mv	s0,a0
1c00cf1a:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00cf1e:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c00cf22:	4c5c                	lw	a5,28(s0)
1c00cf24:	0217ad63          	p.beqimm	a5,1,1c00cf5e <__rt_cluster_mount_step+0x62>
1c00cf28:	0c27a663          	p.beqimm	a5,2,1c00cff4 <__rt_cluster_mount_step+0xf8>
1c00cf2c:	e3e1                	bnez	a5,1c00cfec <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c00cf2e:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c00cf30:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00cf34:	eb01                	bnez	a4,1c00cf44 <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00cf36:	5048                	lw	a0,36(s0)
1c00cf38:	006c                	addi	a1,sp,12
    int pending = 0;
1c00cf3a:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00cf3c:	d15ff0ef          	jal	ra,1c00cc50 <__rt_pmu_cluster_power_up>
    return pending;
1c00cf40:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00cf42:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00cf44:	4c58                	lw	a4,28(s0)
1c00cf46:	0705                	addi	a4,a4,1
1c00cf48:	cc58                	sw	a4,28(s0)
  while(!end)
1c00cf4a:	dfe1                	beqz	a5,1c00cf22 <__rt_cluster_mount_step+0x26>
}
1c00cf4c:	50b2                	lw	ra,44(sp)
1c00cf4e:	5422                	lw	s0,40(sp)
1c00cf50:	5492                	lw	s1,36(sp)
1c00cf52:	5902                	lw	s2,32(sp)
1c00cf54:	49f2                	lw	s3,28(sp)
1c00cf56:	4a62                	lw	s4,24(sp)
1c00cf58:	4ad2                	lw	s5,20(sp)
1c00cf5a:	6145                	addi	sp,sp,48
1c00cf5c:	8082                	ret
1c00cf5e:	02042a83          	lw	s5,32(s0)
1c00cf62:	040a8493          	addi	s1,s5,64
1c00cf66:	04da                	slli	s1,s1,0x16
1c00cf68:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c00cf6c:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c00cf70:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c00cf74:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c00cf78:	100007b7          	lui	a5,0x10000
1c00cf7c:	0207a023          	sw	zero,32(a5) # 10000020 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c00cf80:	1c0107b7          	lui	a5,0x1c010
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00cf84:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
1c00cf88:	0017af63          	p.beqimm	a5,1,1c00cfa6 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c00cf8c:	4505                	li	a0,1
1c00cf8e:	e8dff0ef          	jal	ra,1c00ce1a <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c00cf92:	1c01c7b7          	lui	a5,0x1c01c
1c00cf96:	74478793          	addi	a5,a5,1860 # 1c01c744 <__rt_freq_domains>
1c00cf9a:	43cc                	lw	a1,4(a5)
      if (freq)
1c00cf9c:	c9b1                	beqz	a1,1c00cff0 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c00cf9e:	4601                	li	a2,0
1c00cfa0:	4505                	li	a0,1
1c00cfa2:	9c1ff0ef          	jal	ra,1c00c962 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c00cfa6:	00200937          	lui	s2,0x200
1c00cfaa:	01248733          	add	a4,s1,s2
1c00cfae:	4785                	li	a5,1
1c00cfb0:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00cfb4:	8556                	mv	a0,s5
1c00cfb6:	e81ff0ef          	jal	ra,1c00ce36 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c00cfba:	8556                	mv	a0,s5
1c00cfbc:	c82ff0ef          	jal	ra,1c00c43e <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c00cfc0:	002017b7          	lui	a5,0x201
1c00cfc4:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00cfc8:	577d                	li	a4,-1
1c00cfca:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c00cfce:	00e4e7a3          	p.sw	a4,a5(s1)
1c00cfd2:	9926                	add	s2,s2,s1
1c00cfd4:	008250fb          	lp.setupi	x1,8,1c00cfdc <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00cfd8:	0149222b          	p.sw	s4,4(s2!)
1c00cfdc:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00cfde:	002007b7          	lui	a5,0x200
1c00cfe2:	07a1                	addi	a5,a5,8
1c00cfe4:	0ff00713          	li	a4,255
1c00cfe8:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00cfec:	4781                	li	a5,0
1c00cfee:	bf99                	j	1c00cf44 <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c00cff0:	c3c8                	sw	a0,4(a5)
1c00cff2:	bf55                	j	1c00cfa6 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00cff4:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00cff6:	5bd8                	lw	a4,52(a5)
1c00cff8:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00cffa:	57d8                	lw	a4,44(a5)
1c00cffc:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c00cffe:	5b98                	lw	a4,48(a5)
1c00d000:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c00d002:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00d006:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00d008:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00d00c:	01c00693          	li	a3,28
  event->next = NULL;
1c00d010:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00d014:	c611                	beqz	a2,1c00d020 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00d016:	42d8                	lw	a4,4(a3)
1c00d018:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00d01a:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00d01c:	4785                	li	a5,1
1c00d01e:	b71d                	j	1c00cf44 <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c00d020:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00d024:	bfdd                	j	1c00d01a <__rt_cluster_mount_step+0x11e>

1c00d026 <pi_cluster_conf_init>:
  conf->id = 0;
1c00d026:	00052223          	sw	zero,4(a0)
}
1c00d02a:	8082                	ret

1c00d02c <pi_cluster_open>:
{
1c00d02c:	1101                	addi	sp,sp,-32
1c00d02e:	ce06                	sw	ra,28(sp)
1c00d030:	cc22                	sw	s0,24(sp)
1c00d032:	ca26                	sw	s1,20(sp)
1c00d034:	c84a                	sw	s2,16(sp)
1c00d036:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d038:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00d03c:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00d040:	1c01c4b7          	lui	s1,0x1c01c
1c00d044:	02800793          	li	a5,40
  int cid = conf->id;
1c00d048:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00d04c:	75448493          	addi	s1,s1,1876 # 1c01c754 <__rt_fc_cluster_data>
1c00d050:	42f704b3          	p.mac	s1,a4,a5
1c00d054:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00d056:	928ff0ef          	jal	ra,1c00c17e <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00d05a:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d05e:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00d062:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00d066:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00d068:	04e79563          	bne	a5,a4,1c00d0b2 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c00d06c:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c00d06e:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c00d072:	d0c8                	sw	a0,36(s1)
1c00d074:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00d076:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c00d078:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00d07c:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00d07e:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c00d080:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00d082:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c00d084:	1c00d7b7          	lui	a5,0x1c00d
1c00d088:	efc78793          	addi	a5,a5,-260 # 1c00cefc <__rt_cluster_mount_step>
1c00d08c:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c00d08e:	4785                	li	a5,1
1c00d090:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c00d092:	8526                	mv	a0,s1
1c00d094:	e69ff0ef          	jal	ra,1c00cefc <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c00d098:	8522                	mv	a0,s0
1c00d09a:	a36ff0ef          	jal	ra,1c00c2d0 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00d09e:	30091073          	csrw	mstatus,s2
}
1c00d0a2:	40f2                	lw	ra,28(sp)
1c00d0a4:	4462                	lw	s0,24(sp)
1c00d0a6:	44d2                	lw	s1,20(sp)
1c00d0a8:	4942                	lw	s2,16(sp)
1c00d0aa:	49b2                	lw	s3,12(sp)
1c00d0ac:	4501                	li	a0,0
1c00d0ae:	6105                	addi	sp,sp,32
1c00d0b0:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c00d0b2:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00d0b6:	8526                	mv	a0,s1
1c00d0b8:	d7fff0ef          	jal	ra,1c00ce36 <__rt_init_cluster_data>
1c00d0bc:	04048513          	addi	a0,s1,64
1c00d0c0:	002017b7          	lui	a5,0x201
1c00d0c4:	055a                	slli	a0,a0,0x16
1c00d0c6:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00d0ca:	577d                	li	a4,-1
1c00d0cc:	00e567a3          	p.sw	a4,a5(a0)
1c00d0d0:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00d0d4:	1c000737          	lui	a4,0x1c000
1c00d0d8:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00d0dc:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c00d0e0:	97aa                	add	a5,a5,a0
1c00d0e2:	ce073733          	p.bclr	a4,a4,7,0
1c00d0e6:	007250fb          	lp.setupi	x1,7,1c00d0ee <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00d0ea:	00e7a22b          	p.sw	a4,4(a5!)
1c00d0ee:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00d0f0:	002007b7          	lui	a5,0x200
1c00d0f4:	07a1                	addi	a5,a5,8
1c00d0f6:	577d                	li	a4,-1
1c00d0f8:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00d0fc:	8522                	mv	a0,s0
1c00d0fe:	94aff0ef          	jal	ra,1c00c248 <rt_event_push>
1c00d102:	bf59                	j	1c00d098 <pi_cluster_open+0x6c>

1c00d104 <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00d104:	451c                	lw	a5,8(a0)
{
1c00d106:	1101                	addi	sp,sp,-32
1c00d108:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00d10a:	5380                	lw	s0,32(a5)
1c00d10c:	1c0107b7          	lui	a5,0x1c010
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00d110:	5cc7a783          	lw	a5,1484(a5) # 1c0105cc <__rt_platform>
{
1c00d114:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00d116:	0017a563          	p.beqimm	a5,1,1c00d120 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00d11a:	4505                	li	a0,1
1c00d11c:	d11ff0ef          	jal	ra,1c00ce2c <__rt_fll_deinit>
    int pending = 0;
1c00d120:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c00d122:	e409                	bnez	s0,1c00d12c <pi_cluster_close+0x28>
1c00d124:	006c                	addi	a1,sp,12
1c00d126:	4501                	li	a0,0
1c00d128:	915ff0ef          	jal	ra,1c00ca3c <__rt_pmu_cluster_power_down>
}
1c00d12c:	40f2                	lw	ra,28(sp)
1c00d12e:	4462                	lw	s0,24(sp)
1c00d130:	4501                	li	a0,0
1c00d132:	6105                	addi	sp,sp,32
1c00d134:	8082                	ret

1c00d136 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00d136:	100006b7          	lui	a3,0x10000
1c00d13a:	02068693          	addi	a3,a3,32 # 10000020 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c00d13e:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00d142:	4709                	li	a4,2
1c00d144:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00d148:	4190                	lw	a2,0(a1)
1c00d14a:	05f62063          	p.beqimm	a2,-1,1c00d18a <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d14e:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c00d152:	1c01c7b7          	lui	a5,0x1c01c
  return (hart_id >> 5) & 0x3f;
1c00d156:	8715                	srai	a4,a4,0x5
1c00d158:	f2673733          	p.bclr	a4,a4,25,6
1c00d15c:	02800613          	li	a2,40
1c00d160:	75478793          	addi	a5,a5,1876 # 1c01c754 <__rt_fc_cluster_data>
1c00d164:	42c707b3          	p.mac	a5,a4,a2
1c00d168:	4609                	li	a2,2
1c00d16a:	00204737          	lui	a4,0x204
1c00d16e:	43cc                	lw	a1,4(a5)
1c00d170:	e585                	bnez	a1,1c00d198 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c00d172:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c00d174:	1b2017b7          	lui	a5,0x1b201
1c00d178:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffa34>
  *(volatile signed int *)addr = value;
1c00d17c:	0006a023          	sw	zero,0(a3)
1c00d180:	002047b7          	lui	a5,0x204
1c00d184:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c00d188:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00d18a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00d18e:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00d192:	00e7a223          	sw	a4,4(a5)
1c00d196:	bf4d                	j	1c00d148 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00d198:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00d19c:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00d1a0:	00c72223          	sw	a2,4(a4)
1c00d1a4:	b7e9                	j	1c00d16e <__rt_cluster_push_fc_event+0x38>

1c00d1a6 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00d1a6:	1c00d5b7          	lui	a1,0x1c00d
{
1c00d1aa:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00d1ac:	4601                	li	a2,0
1c00d1ae:	e9858593          	addi	a1,a1,-360 # 1c00ce98 <__rt_cluster_init>
1c00d1b2:	4501                	li	a0,0
{
1c00d1b4:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00d1b6:	ba7fe0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00d1ba:	c10d                	beqz	a0,1c00d1dc <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d1bc:	01402673          	csrr	a2,uhartid
1c00d1c0:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00d1c4:	40565593          	srai	a1,a2,0x5
1c00d1c8:	f265b5b3          	p.bclr	a1,a1,25,6
1c00d1cc:	f4563633          	p.bclr	a2,a2,26,5
1c00d1d0:	06850513          	addi	a0,a0,104 # 1c010068 <__clz_tab+0x8dc>
1c00d1d4:	454010ef          	jal	ra,1c00e628 <printf>
1c00d1d8:	3d4010ef          	jal	ra,1c00e5ac <abort>
}
1c00d1dc:	40b2                	lw	ra,12(sp)
1c00d1de:	0141                	addi	sp,sp,16
1c00d1e0:	8082                	ret

1c00d1e2 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c00d1e2:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00d1e4:	45b1                	li	a1,12
1c00d1e6:	4505                	li	a0,1
{
1c00d1e8:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00d1ea:	9f6ff0ef          	jal	ra,1c00c3e0 <rt_alloc>
1c00d1ee:	1c01c7b7          	lui	a5,0x1c01c
1c00d1f2:	60a7ae23          	sw	a0,1564(a5) # 1c01c61c <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00d1f6:	e10d                	bnez	a0,1c00d218 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00d1f8:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00d1fc:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00d200:	40565593          	srai	a1,a2,0x5
1c00d204:	f265b5b3          	p.bclr	a1,a1,25,6
1c00d208:	f4563633          	p.bclr	a2,a2,26,5
1c00d20c:	0b050513          	addi	a0,a0,176 # 1c0100b0 <__clz_tab+0x924>
1c00d210:	418010ef          	jal	ra,1c00e628 <printf>
1c00d214:	398010ef          	jal	ra,1c00e5ac <abort>
    return;
  }
}
1c00d218:	40b2                	lw	ra,12(sp)
1c00d21a:	0141                	addi	sp,sp,16
1c00d21c:	8082                	ret

1c00d21e <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c00d21e:	7139                	addi	sp,sp,-64
1c00d220:	d84a                	sw	s2,48(sp)
1c00d222:	4906                	lw	s2,64(sp)
1c00d224:	dc22                	sw	s0,56(sp)
1c00d226:	842e                	mv	s0,a1
1c00d228:	de06                	sw	ra,60(sp)
1c00d22a:	da26                	sw	s1,52(sp)
1c00d22c:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d22e:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00d232:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00d234:	02091163          	bnez	s2,1c00d256 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00d238:	ce32                	sw	a2,28(sp)
1c00d23a:	cc36                	sw	a3,24(sp)
1c00d23c:	ca3a                	sw	a4,20(sp)
1c00d23e:	c83e                	sw	a5,16(sp)
1c00d240:	c642                	sw	a6,12(sp)
1c00d242:	c446                	sw	a7,8(sp)
1c00d244:	f3bfe0ef          	jal	ra,1c00c17e <__rt_wait_event_prepare_blocking>
1c00d248:	48a2                	lw	a7,8(sp)
1c00d24a:	4832                	lw	a6,12(sp)
1c00d24c:	47c2                	lw	a5,16(sp)
1c00d24e:	4752                	lw	a4,20(sp)
1c00d250:	46e2                	lw	a3,24(sp)
1c00d252:	4672                	lw	a2,28(sp)
1c00d254:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c00d256:	1c01c5b7          	lui	a1,0x1c01c
1c00d25a:	3e458513          	addi	a0,a1,996 # 1c01c3e4 <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c00d25e:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00d260:	1c01c7b7          	lui	a5,0x1c01c
1c00d264:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c00d266:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c00d268:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c00d26a:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c00d26e:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00d272:	61c7a503          	lw	a0,1564(a5) # 1c01c61c <__rt_fc_cluster_device>
1c00d276:	47b1                	li	a5,12
1c00d278:	8626                	mv	a2,s1
1c00d27a:	42f40533          	p.mac	a0,s0,a5
1c00d27e:	3e458593          	addi	a1,a1,996
1c00d282:	2061                	jal	1c00d30a <pi_cluster_send_task_to_cl_async>
1c00d284:	842a                	mv	s0,a0
1c00d286:	cd01                	beqz	a0,1c00d29e <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c00d288:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c00d28c:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c00d28e:	8522                	mv	a0,s0
1c00d290:	50f2                	lw	ra,60(sp)
1c00d292:	5462                	lw	s0,56(sp)
1c00d294:	54d2                	lw	s1,52(sp)
1c00d296:	5942                	lw	s2,48(sp)
1c00d298:	59b2                	lw	s3,44(sp)
1c00d29a:	6121                	addi	sp,sp,64
1c00d29c:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c00d29e:	00091563          	bnez	s2,1c00d2a8 <rt_cluster_call+0x8a>
1c00d2a2:	8526                	mv	a0,s1
1c00d2a4:	82cff0ef          	jal	ra,1c00c2d0 <__rt_wait_event>
1c00d2a8:	30099073          	csrw	mstatus,s3
  return 0;
1c00d2ac:	b7cd                	j	1c00d28e <rt_cluster_call+0x70>

1c00d2ae <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c00d2ae:	7139                	addi	sp,sp,-64
1c00d2b0:	dc22                	sw	s0,56(sp)
1c00d2b2:	da26                	sw	s1,52(sp)
1c00d2b4:	d84a                	sw	s2,48(sp)
1c00d2b6:	4431                	li	s0,12
1c00d2b8:	1c01c4b7          	lui	s1,0x1c01c
1c00d2bc:	de06                	sw	ra,60(sp)
1c00d2be:	d64e                	sw	s3,44(sp)
1c00d2c0:	8936                	mv	s2,a3
1c00d2c2:	02858433          	mul	s0,a1,s0
1c00d2c6:	61c48493          	addi	s1,s1,1564 # 1c01c61c <__rt_fc_cluster_device>
  if (mount)
1c00d2ca:	c91d                	beqz	a0,1c00d300 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00d2cc:	0028                	addi	a0,sp,8
1c00d2ce:	89ae                	mv	s3,a1
1c00d2d0:	d57ff0ef          	jal	ra,1c00d026 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c00d2d4:	4088                	lw	a0,0(s1)
1c00d2d6:	002c                	addi	a1,sp,8
1c00d2d8:	9522                	add	a0,a0,s0
1c00d2da:	913fe0ef          	jal	ra,1c00bbec <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00d2de:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c00d2e0:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00d2e2:	9522                	add	a0,a0,s0
1c00d2e4:	d49ff0ef          	jal	ra,1c00d02c <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00d2e8:	00090563          	beqz	s2,1c00d2f2 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00d2ec:	854a                	mv	a0,s2
1c00d2ee:	f5bfe0ef          	jal	ra,1c00c248 <rt_event_push>
}
1c00d2f2:	50f2                	lw	ra,60(sp)
1c00d2f4:	5462                	lw	s0,56(sp)
1c00d2f6:	54d2                	lw	s1,52(sp)
1c00d2f8:	5942                	lw	s2,48(sp)
1c00d2fa:	59b2                	lw	s3,44(sp)
1c00d2fc:	6121                	addi	sp,sp,64
1c00d2fe:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c00d300:	4088                	lw	a0,0(s1)
1c00d302:	9522                	add	a0,a0,s0
1c00d304:	e01ff0ef          	jal	ra,1c00d104 <pi_cluster_close>
1c00d308:	b7c5                	j	1c00d2e8 <rt_cluster_mount+0x3a>

1c00d30a <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00d30a:	1101                	addi	sp,sp,-32
1c00d30c:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c00d30e:	4504                	lw	s1,8(a0)
{
1c00d310:	cc22                	sw	s0,24(sp)
1c00d312:	c256                	sw	s5,4(sp)
1c00d314:	842e                	mv	s0,a1
1c00d316:	8ab2                	mv	s5,a2
1c00d318:	ce06                	sw	ra,28(sp)
1c00d31a:	c84a                	sw	s2,16(sp)
1c00d31c:	c64e                	sw	s3,12(sp)
1c00d31e:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d320:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c00d324:	4785                	li	a5,1
  task->done = 0;
1c00d326:	00060a23          	sb	zero,20(a2)
1c00d32a:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00d32c:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c00d32e:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c00d332:	e399                	bnez	a5,1c00d338 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c00d334:	47a1                	li	a5,8
1c00d336:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00d338:	441c                	lw	a5,8(s0)
1c00d33a:	ef85                	bnez	a5,1c00d372 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00d33c:	445c                	lw	a5,12(s0)
1c00d33e:	eb81                	bnez	a5,1c00d34e <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c00d340:	6785                	lui	a5,0x1
1c00d342:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00d346:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00d348:	40000793          	li	a5,1024
1c00d34c:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c00d34e:	481c                	lw	a5,16(s0)
1c00d350:	00c42903          	lw	s2,12(s0)
1c00d354:	e399                	bnez	a5,1c00d35a <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c00d356:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00d35a:	485c                	lw	a5,20(s0)
1c00d35c:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00d35e:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00d360:	17fd                	addi	a5,a5,-1
1c00d362:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00d366:	c9b5                	beqz	a1,1c00d3da <pi_cluster_send_task_to_cl_async+0xd0>
1c00d368:	44d0                	lw	a2,12(s1)
1c00d36a:	05261f63          	bne	a2,s2,1c00d3c8 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c00d36e:	449c                	lw	a5,8(s1)
1c00d370:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00d372:	4858                	lw	a4,20(s0)
1c00d374:	4785                	li	a5,1
  task->completion_callback = async_task;
1c00d376:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00d37a:	00e797b3          	sll	a5,a5,a4
1c00d37e:	17fd                	addi	a5,a5,-1
1c00d380:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c00d382:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c00d386:	0089a783          	lw	a5,8(s3)
1c00d38a:	cbb5                	beqz	a5,1c00d3fe <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c00d38c:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c00d38e:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c00d392:	0009a783          	lw	a5,0(s3)
1c00d396:	e399                	bnez	a5,1c00d39c <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c00d398:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00d39c:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c00d39e:	00201737          	lui	a4,0x201
1c00d3a2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00d3a6:	04078793          	addi	a5,a5,64
1c00d3aa:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00d3ac:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c00d3b0:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c00d3b4:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c00d3b6:	40f2                	lw	ra,28(sp)
1c00d3b8:	4462                	lw	s0,24(sp)
1c00d3ba:	44d2                	lw	s1,20(sp)
1c00d3bc:	4942                	lw	s2,16(sp)
1c00d3be:	49b2                	lw	s3,12(sp)
1c00d3c0:	4a22                	lw	s4,8(sp)
1c00d3c2:	4a92                	lw	s5,4(sp)
1c00d3c4:	6105                	addi	sp,sp,32
1c00d3c6:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00d3c8:	509c                	lw	a5,32(s1)
1c00d3ca:	1c01c737          	lui	a4,0x1c01c
1c00d3ce:	73472503          	lw	a0,1844(a4) # 1c01c734 <__rt_alloc_l1>
1c00d3d2:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c00d3d4:	953e                	add	a0,a0,a5
1c00d3d6:	fbffe0ef          	jal	ra,1c00c394 <rt_user_free>
1c00d3da:	509c                	lw	a5,32(s1)
1c00d3dc:	1c01c737          	lui	a4,0x1c01c
1c00d3e0:	73472503          	lw	a0,1844(a4) # 1c01c734 <__rt_alloc_l1>
1c00d3e4:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c00d3e6:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00d3ea:	85ca                	mv	a1,s2
1c00d3ec:	953e                	add	a0,a0,a5
1c00d3ee:	f5ffe0ef          	jal	ra,1c00c34c <rt_user_alloc>
1c00d3f2:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c00d3f4:	fd2d                	bnez	a0,1c00d36e <pi_cluster_send_task_to_cl_async+0x64>
1c00d3f6:	300a1073          	csrw	mstatus,s4
  return -1;
1c00d3fa:	557d                	li	a0,-1
1c00d3fc:	bf6d                	j	1c00d3b6 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c00d3fe:	0089a223          	sw	s0,4(s3)
1c00d402:	b771                	j	1c00d38e <pi_cluster_send_task_to_cl_async+0x84>

1c00d404 <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c00d404:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00d406:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00d408:	860a                	mv	a2,sp
{
1c00d40a:	c522                	sw	s0,136(sp)
1c00d40c:	c706                	sw	ra,140(sp)
1c00d40e:	c326                	sw	s1,132(sp)
1c00d410:	c14a                	sw	s2,128(sp)
1c00d412:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c00d414:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00d416:	d43e                	sw	a5,40(sp)
1c00d418:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00d41c:	eefff0ef          	jal	ra,1c00d30a <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c00d420:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00d422:	e509                	bnez	a0,1c00d42c <pi_cluster_send_task_to_cl+0x28>
1c00d424:	842a                	mv	s0,a0
  while(!task->done)
1c00d426:	01410783          	lb	a5,20(sp)
1c00d42a:	cb81                	beqz	a5,1c00d43a <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00d42c:	8522                	mv	a0,s0
1c00d42e:	40ba                	lw	ra,140(sp)
1c00d430:	442a                	lw	s0,136(sp)
1c00d432:	449a                	lw	s1,132(sp)
1c00d434:	490a                	lw	s2,128(sp)
1c00d436:	6149                	addi	sp,sp,144
1c00d438:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d43a:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00d43e:	4585                	li	a1,1
1c00d440:	01c00513          	li	a0,28
1c00d444:	e29fe0ef          	jal	ra,1c00c26c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00d448:	30091073          	csrw	mstatus,s2
1c00d44c:	bfe9                	j	1c00d426 <pi_cluster_send_task_to_cl+0x22>

1c00d44e <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00d44e:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00d452:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00d456:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00d45a:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c00d45e:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00d460:	953e                	add	a0,a0,a5
1c00d462:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00d464:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00d466:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c00d468:	478d                	li	a5,3
1c00d46a:	00e797b3          	sll	a5,a5,a4
1c00d46e:	fff7c793          	not	a5,a5
1c00d472:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c00d474:	00e595b3          	sll	a1,a1,a4
1c00d478:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c00d47a:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00d47c:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c00d480:	8082                	ret

1c00d482 <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c00d482:	87aa                	mv	a5,a0
1c00d484:	962e                	add	a2,a2,a1
1c00d486:	00c59363          	bne	a1,a2,1c00d48c <l2_memcpy+0xa>
1c00d48a:	8082                	ret
1c00d48c:	0015c70b          	p.lbu	a4,1(a1!)
1c00d490:	00e780ab          	p.sb	a4,1(a5!)
1c00d494:	bfcd                	j	1c00d486 <l2_memcpy+0x4>

1c00d496 <rt_event_enqueue>:
1c00d496:	300476f3          	csrrci	a3,mstatus,8
1c00d49a:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00d49e:	00052023          	sw	zero,0(a0)
1c00d4a2:	01c00713          	li	a4,28
1c00d4a6:	c619                	beqz	a2,1c00d4b4 <rt_event_enqueue+0x1e>
1c00d4a8:	435c                	lw	a5,4(a4)
1c00d4aa:	c388                	sw	a0,0(a5)
1c00d4ac:	c348                	sw	a0,4(a4)
1c00d4ae:	30069073          	csrw	mstatus,a3
1c00d4b2:	8082                	ret
1c00d4b4:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00d4b8:	bfd5                	j	1c00d4ac <rt_event_enqueue+0x16>

1c00d4ba <pi_task_wait_on.isra.4>:
1c00d4ba:	1141                	addi	sp,sp,-16
1c00d4bc:	c422                	sw	s0,8(sp)
1c00d4be:	c226                	sw	s1,4(sp)
1c00d4c0:	c606                	sw	ra,12(sp)
1c00d4c2:	c04a                	sw	s2,0(sp)
1c00d4c4:	842a                	mv	s0,a0
1c00d4c6:	00040783          	lb	a5,0(s0)
1c00d4ca:	c799                	beqz	a5,1c00d4d8 <pi_task_wait_on.isra.4+0x1e>
1c00d4cc:	40b2                	lw	ra,12(sp)
1c00d4ce:	4422                	lw	s0,8(sp)
1c00d4d0:	4492                	lw	s1,4(sp)
1c00d4d2:	4902                	lw	s2,0(sp)
1c00d4d4:	0141                	addi	sp,sp,16
1c00d4d6:	8082                	ret
1c00d4d8:	30047973          	csrrci	s2,mstatus,8
1c00d4dc:	4585                	li	a1,1
1c00d4de:	01c00513          	li	a0,28
1c00d4e2:	d8bfe0ef          	jal	ra,1c00c26c <__rt_event_execute>
1c00d4e6:	30091073          	csrw	mstatus,s2
1c00d4ea:	bff1                	j	1c00d4c6 <pi_task_wait_on.isra.4+0xc>

1c00d4ec <__pi_hyper_pin_settings>:
1c00d4ec:	1141                	addi	sp,sp,-16
1c00d4ee:	c422                	sw	s0,8(sp)
1c00d4f0:	1c010437          	lui	s0,0x1c010
1c00d4f4:	10440413          	addi	s0,s0,260 # 1c010104 <__hyper_pad>
1c00d4f8:	c226                	sw	s1,4(sp)
1c00d4fa:	c606                	sw	ra,12(sp)
1c00d4fc:	03440493          	addi	s1,s0,52
1c00d500:	0044250b          	p.lw	a0,4(s0!)
1c00d504:	458d                	li	a1,3
1c00d506:	f49ff0ef          	jal	ra,1c00d44e <pi_pad_set_function>
1c00d50a:	fe941be3          	bne	s0,s1,1c00d500 <__pi_hyper_pin_settings+0x14>
1c00d50e:	40b2                	lw	ra,12(sp)
1c00d510:	4422                	lw	s0,8(sp)
1c00d512:	4492                	lw	s1,4(sp)
1c00d514:	0141                	addi	sp,sp,16
1c00d516:	8082                	ret

1c00d518 <__pi_hyper_pin_reset_settings>:
1c00d518:	1141                	addi	sp,sp,-16
1c00d51a:	c422                	sw	s0,8(sp)
1c00d51c:	1c010437          	lui	s0,0x1c010
1c00d520:	10440413          	addi	s0,s0,260 # 1c010104 <__hyper_pad>
1c00d524:	c226                	sw	s1,4(sp)
1c00d526:	c606                	sw	ra,12(sp)
1c00d528:	03440493          	addi	s1,s0,52
1c00d52c:	0044250b          	p.lw	a0,4(s0!)
1c00d530:	4581                	li	a1,0
1c00d532:	f1dff0ef          	jal	ra,1c00d44e <pi_pad_set_function>
1c00d536:	fe941be3          	bne	s0,s1,1c00d52c <__pi_hyper_pin_reset_settings+0x14>
1c00d53a:	40b2                	lw	ra,12(sp)
1c00d53c:	4422                	lw	s0,8(sp)
1c00d53e:	4492                	lw	s1,4(sp)
1c00d540:	0141                	addi	sp,sp,16
1c00d542:	8082                	ret

1c00d544 <pi_hyper_conf_init>:
1c00d544:	57fd                	li	a5,-1
1c00d546:	00f50223          	sb	a5,4(a0)
1c00d54a:	4785                	li	a5,1
1c00d54c:	c55c                	sw	a5,12(a0)
1c00d54e:	00052423          	sw	zero,8(a0)
1c00d552:	8082                	ret

1c00d554 <pi_hyper_open>:
1c00d554:	1141                	addi	sp,sp,-16
1c00d556:	c422                	sw	s0,8(sp)
1c00d558:	c04a                	sw	s2,0(sp)
1c00d55a:	842a                	mv	s0,a0
1c00d55c:	00452903          	lw	s2,4(a0)
1c00d560:	4541                	li	a0,16
1c00d562:	c606                	sw	ra,12(sp)
1c00d564:	c226                	sw	s1,4(sp)
1c00d566:	fabfe0ef          	jal	ra,1c00c510 <pi_l2_malloc>
1c00d56a:	c115                	beqz	a0,1c00d58e <pi_hyper_open+0x3a>
1c00d56c:	00c92783          	lw	a5,12(s2)
1c00d570:	84aa                	mv	s1,a0
1c00d572:	0217b063          	p.bneimm	a5,1,1c00d592 <pi_hyper_open+0x3e>
1c00d576:	000f4637          	lui	a2,0xf4
1c00d57a:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c00d57e:	4581                	li	a1,0
1c00d580:	75a000ef          	jal	ra,1c00dcda <rt_extern_alloc_init>
1c00d584:	c519                	beqz	a0,1c00d592 <pi_hyper_open+0x3e>
1c00d586:	45c1                	li	a1,16
1c00d588:	8526                	mv	a0,s1
1c00d58a:	f95fe0ef          	jal	ra,1c00c51e <pi_l2_free>
1c00d58e:	557d                	li	a0,-1
1c00d590:	a0f1                	j	1c00d65c <pi_hyper_open+0x108>
1c00d592:	478d                	li	a5,3
1c00d594:	c0dc                	sw	a5,4(s1)
1c00d596:	00892783          	lw	a5,8(s2)
1c00d59a:	c49c                	sw	a5,8(s1)
1c00d59c:	00c92783          	lw	a5,12(s2)
1c00d5a0:	c4dc                	sw	a5,12(s1)
1c00d5a2:	1c01c7b7          	lui	a5,0x1c01c
1c00d5a6:	62478793          	addi	a5,a5,1572 # 1c01c624 <__rt_hyper_open_count>
1c00d5aa:	4398                	lw	a4,0(a5)
1c00d5ac:	00170693          	addi	a3,a4,1
1c00d5b0:	c394                	sw	a3,0(a5)
1c00d5b2:	e739                	bnez	a4,1c00d600 <pi_hyper_open+0xac>
1c00d5b4:	1a1067b7          	lui	a5,0x1a106
1c00d5b8:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fe4>
1c00d5bc:	c0673733          	p.bclr	a4,a4,0,6
1c00d5c0:	00e7a423          	sw	a4,8(a5)
1c00d5c4:	0087a703          	lw	a4,8(a5)
1c00d5c8:	c0773733          	p.bclr	a4,a4,0,7
1c00d5cc:	00e7a423          	sw	a4,8(a5)
1c00d5d0:	1a1027b7          	lui	a5,0x1a102
1c00d5d4:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10275c>
1c00d5d8:	4398                	lw	a4,0(a5)
1c00d5da:	c0374733          	p.bset	a4,a4,0,3
1c00d5de:	c398                	sw	a4,0(a5)
1c00d5e0:	1c0007b7          	lui	a5,0x1c000
1c00d5e4:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c00d5e8:	10f02623          	sw	a5,268(zero) # 10c <periph_channels+0xdc>
1c00d5ec:	0e002823          	sw	zero,240(zero) # f0 <periph_channels+0xc0>
1c00d5f0:	12f02623          	sw	a5,300(zero) # 12c <periph_channels+0xfc>
1c00d5f4:	10002823          	sw	zero,272(zero) # 110 <periph_channels+0xe0>
1c00d5f8:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c00d5fc:	ef1ff0ef          	jal	ra,1c00d4ec <__pi_hyper_pin_settings>
1c00d600:	00c92783          	lw	a5,12(s2)
1c00d604:	00892703          	lw	a4,8(s2)
1c00d608:	17fd                	addi	a5,a5,-1
1c00d60a:	0017b793          	seqz	a5,a5
1c00d60e:	078a                	slli	a5,a5,0x2
1c00d610:	ef21                	bnez	a4,1c00d668 <pi_hyper_open+0x114>
1c00d612:	1a102737          	lui	a4,0x1a102
1c00d616:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102190>
1c00d61a:	4214                	lw	a3,0(a2)
1c00d61c:	6591                	lui	a1,0x4
1c00d61e:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c00d622:	73b6f693          	andi	a3,a3,1851
1c00d626:	8fd5                	or	a5,a5,a3
1c00d628:	c21c                	sw	a5,0(a2)
1c00d62a:	1a870793          	addi	a5,a4,424
1c00d62e:	4394                	lw	a3,0(a5)
1c00d630:	f0058593          	addi	a1,a1,-256
1c00d634:	8ee9                	and	a3,a3,a0
1c00d636:	8eed                	and	a3,a3,a1
1c00d638:	1006c6b3          	p.exths	a3,a3
1c00d63c:	c394                	sw	a3,0(a5)
1c00d63e:	4214                	lw	a3,0(a2)
1c00d640:	7376f693          	andi	a3,a3,1847
1c00d644:	c214                	sw	a3,0(a2)
1c00d646:	4398                	lw	a4,0(a5)
1c00d648:	668d                	lui	a3,0x3
1c00d64a:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00d64e:	8f69                	and	a4,a4,a0
1c00d650:	8f75                	and	a4,a4,a3
1c00d652:	c4874733          	p.bset	a4,a4,2,8
1c00d656:	c398                	sw	a4,0(a5)
1c00d658:	c404                	sw	s1,8(s0)
1c00d65a:	4501                	li	a0,0
1c00d65c:	40b2                	lw	ra,12(sp)
1c00d65e:	4422                	lw	s0,8(sp)
1c00d660:	4492                	lw	s1,4(sp)
1c00d662:	4902                	lw	s2,0(sp)
1c00d664:	0141                	addi	sp,sp,16
1c00d666:	8082                	ret
1c00d668:	1a102737          	lui	a4,0x1a102
1c00d66c:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa1021a0>
1c00d670:	4214                	lw	a3,0(a2)
1c00d672:	1b870713          	addi	a4,a4,440
1c00d676:	03b6f693          	andi	a3,a3,59
1c00d67a:	8fd5                	or	a5,a5,a3
1c00d67c:	c21c                	sw	a5,0(a2)
1c00d67e:	431c                	lw	a5,0(a4)
1c00d680:	6691                	lui	a3,0x4
1c00d682:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c00d686:	8fed                	and	a5,a5,a1
1c00d688:	f0068693          	addi	a3,a3,-256
1c00d68c:	8ff5                	and	a5,a5,a3
1c00d68e:	c007c7b3          	p.bset	a5,a5,0,0
1c00d692:	1007c7b3          	p.exths	a5,a5
1c00d696:	c31c                	sw	a5,0(a4)
1c00d698:	4214                	lw	a3,0(a2)
1c00d69a:	0376f693          	andi	a3,a3,55
1c00d69e:	c214                	sw	a3,0(a2)
1c00d6a0:	431c                	lw	a5,0(a4)
1c00d6a2:	668d                	lui	a3,0x3
1c00d6a4:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00d6a8:	8fed                	and	a5,a5,a1
1c00d6aa:	8ff5                	and	a5,a5,a3
1c00d6ac:	c487c7b3          	p.bset	a5,a5,2,8
1c00d6b0:	c31c                	sw	a5,0(a4)
1c00d6b2:	b75d                	j	1c00d658 <pi_hyper_open+0x104>

1c00d6b4 <pi_hyper_close>:
1c00d6b4:	1c01c737          	lui	a4,0x1c01c
1c00d6b8:	62470713          	addi	a4,a4,1572 # 1c01c624 <__rt_hyper_open_count>
1c00d6bc:	431c                	lw	a5,0(a4)
1c00d6be:	1141                	addi	sp,sp,-16
1c00d6c0:	c422                	sw	s0,8(sp)
1c00d6c2:	c606                	sw	ra,12(sp)
1c00d6c4:	17fd                	addi	a5,a5,-1
1c00d6c6:	c31c                	sw	a5,0(a4)
1c00d6c8:	4500                	lw	s0,8(a0)
1c00d6ca:	e7ad                	bnez	a5,1c00d734 <pi_hyper_close+0x80>
1c00d6cc:	404c                	lw	a1,4(s0)
1c00d6ce:	47fd                	li	a5,31
1c00d6d0:	00159693          	slli	a3,a1,0x1
1c00d6d4:	06d7dc63          	ble	a3,a5,1c00d74c <pi_hyper_close+0x98>
1c00d6d8:	fe068513          	addi	a0,a3,-32
1c00d6dc:	4611                	li	a2,4
1c00d6de:	1a1067b7          	lui	a5,0x1a106
1c00d6e2:	20c7f803          	p.lw	a6,a2(a5)
1c00d6e6:	4705                	li	a4,1
1c00d6e8:	00a71733          	sll	a4,a4,a0
1c00d6ec:	01076733          	or	a4,a4,a6
1c00d6f0:	00e7e623          	p.sw	a4,a2(a5)
1c00d6f4:	00168713          	addi	a4,a3,1
1c00d6f8:	47fd                	li	a5,31
1c00d6fa:	4621                	li	a2,8
1c00d6fc:	00e7d563          	ble	a4,a5,1c00d706 <pi_hyper_close+0x52>
1c00d700:	fe168713          	addi	a4,a3,-31
1c00d704:	4611                	li	a2,4
1c00d706:	1a1066b7          	lui	a3,0x1a106
1c00d70a:	20c6f503          	p.lw	a0,a2(a3)
1c00d70e:	4785                	li	a5,1
1c00d710:	00e79733          	sll	a4,a5,a4
1c00d714:	8f49                	or	a4,a4,a0
1c00d716:	00e6e623          	p.sw	a4,a2(a3)
1c00d71a:	1a102737          	lui	a4,0x1a102
1c00d71e:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10275c>
1c00d722:	4314                	lw	a3,0(a4)
1c00d724:	00b797b3          	sll	a5,a5,a1
1c00d728:	fff7c793          	not	a5,a5
1c00d72c:	8ff5                	and	a5,a5,a3
1c00d72e:	c31c                	sw	a5,0(a4)
1c00d730:	de9ff0ef          	jal	ra,1c00d518 <__pi_hyper_pin_reset_settings>
1c00d734:	445c                	lw	a5,12(s0)
1c00d736:	0017b463          	p.bneimm	a5,1,1c00d73e <pi_hyper_close+0x8a>
1c00d73a:	8522                	mv	a0,s0
1c00d73c:	2bdd                	jal	1c00dd32 <rt_extern_alloc_deinit>
1c00d73e:	8522                	mv	a0,s0
1c00d740:	4422                	lw	s0,8(sp)
1c00d742:	40b2                	lw	ra,12(sp)
1c00d744:	45c1                	li	a1,16
1c00d746:	0141                	addi	sp,sp,16
1c00d748:	dd7fe06f          	j	1c00c51e <pi_l2_free>
1c00d74c:	8536                	mv	a0,a3
1c00d74e:	4621                	li	a2,8
1c00d750:	b779                	j	1c00d6de <pi_hyper_close+0x2a>

1c00d752 <__pi_hyper_copy_aligned>:
1c00d752:	40155793          	srai	a5,a0,0x1
1c00d756:	1a102837          	lui	a6,0x1a102
1c00d75a:	079e                	slli	a5,a5,0x7
1c00d75c:	0512                	slli	a0,a0,0x4
1c00d75e:	97c2                	add	a5,a5,a6
1c00d760:	8941                	andi	a0,a0,16
1c00d762:	953e                	add	a0,a0,a5
1c00d764:	20000813          	li	a6,512
1c00d768:	30800793          	li	a5,776
1c00d76c:	02d87c63          	bleu	a3,a6,1c00d7a4 <__pi_hyper_copy_aligned+0x52>
1c00d770:	cbd4                	sw	a3,20(a5)
1c00d772:	1c0006b7          	lui	a3,0x1c000
1c00d776:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c00d77a:	c394                	sw	a3,0(a5)
1c00d77c:	c3c8                	sw	a0,4(a5)
1c00d77e:	c790                	sw	a2,8(a5)
1c00d780:	c7cc                	sw	a1,12(a5)
1c00d782:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fec>
1c00d786:	20000693          	li	a3,512
1c00d78a:	cf98                	sw	a4,24(a5)
1c00d78c:	1a1027b7          	lui	a5,0x1a102
1c00d790:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10217c>
1c00d794:	00b52023          	sw	a1,0(a0)
1c00d798:	00d52223          	sw	a3,4(a0)
1c00d79c:	47c1                	li	a5,16
1c00d79e:	00f52423          	sw	a5,8(a0)
1c00d7a2:	8082                	ret
1c00d7a4:	0007a823          	sw	zero,16(a5)
1c00d7a8:	b7cd                	j	1c00d78a <__pi_hyper_copy_aligned+0x38>

1c00d7aa <__pi_hyper_copy_exec>:
1c00d7aa:	30800813          	li	a6,776
1c00d7ae:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101ff8>
1c00d7b2:	fa25b833          	p.bclr	a6,a1,29,2
1c00d7b6:	30800793          	li	a5,776
1c00d7ba:	02081463          	bnez	a6,1c00d7e2 <__pi_hyper_copy_exec+0x38>
1c00d7be:	fc163833          	p.bclr	a6,a2,30,1
1c00d7c2:	02081063          	bnez	a6,1c00d7e2 <__pi_hyper_copy_exec+0x38>
1c00d7c6:	fa26b833          	p.bclr	a6,a3,29,2
1c00d7ca:	00080a63          	beqz	a6,1c00d7de <__pi_hyper_copy_exec+0x34>
1c00d7ce:	fc153833          	p.bclr	a6,a0,30,1
1c00d7d2:	00080863          	beqz	a6,1c00d7e2 <__pi_hyper_copy_exec+0x38>
1c00d7d6:	fc16b833          	p.bclr	a6,a3,30,1
1c00d7da:	00081463          	bnez	a6,1c00d7e2 <__pi_hyper_copy_exec+0x38>
1c00d7de:	f75ff06f          	j	1c00d752 <__pi_hyper_copy_aligned>
1c00d7e2:	d388                	sw	a0,32(a5)
1c00d7e4:	853a                	mv	a0,a4
1c00d7e6:	d3d0                	sw	a2,36(a5)
1c00d7e8:	d78c                	sw	a1,40(a5)
1c00d7ea:	d7d4                	sw	a3,44(a5)
1c00d7ec:	02078823          	sb	zero,48(a5)
1c00d7f0:	dbd8                	sw	a4,52(a5)
1c00d7f2:	aa31                	j	1c00d90e <__pi_hyper_copy_misaligned>

1c00d7f4 <__pi_hyper_copy>:
1c00d7f4:	1141                	addi	sp,sp,-16
1c00d7f6:	c606                	sw	ra,12(sp)
1c00d7f8:	c422                	sw	s0,8(sp)
1c00d7fa:	30047473          	csrrci	s0,mstatus,8
1c00d7fe:	c781                	beqz	a5,1c00d806 <__pi_hyper_copy+0x12>
1c00d800:	010007b7          	lui	a5,0x1000
1c00d804:	963e                	add	a2,a2,a5
1c00d806:	30800813          	li	a6,776
1c00d80a:	01c82803          	lw	a6,28(a6)
1c00d80e:	30800793          	li	a5,776
1c00d812:	02080963          	beqz	a6,1c00d844 <__pi_hyper_copy+0x50>
1c00d816:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c00d81a:	02080363          	beqz	a6,1c00d840 <__pi_hyper_copy+0x4c>
1c00d81e:	03c7a803          	lw	a6,60(a5)
1c00d822:	00e82e23          	sw	a4,28(a6)
1c00d826:	dfd8                	sw	a4,60(a5)
1c00d828:	00072e23          	sw	zero,28(a4)
1c00d82c:	df08                	sw	a0,56(a4)
1c00d82e:	df4c                	sw	a1,60(a4)
1c00d830:	c330                	sw	a2,64(a4)
1c00d832:	c374                	sw	a3,68(a4)
1c00d834:	30041073          	csrw	mstatus,s0
1c00d838:	40b2                	lw	ra,12(sp)
1c00d83a:	4422                	lw	s0,8(sp)
1c00d83c:	0141                	addi	sp,sp,16
1c00d83e:	8082                	ret
1c00d840:	df98                	sw	a4,56(a5)
1c00d842:	b7d5                	j	1c00d826 <__pi_hyper_copy+0x32>
1c00d844:	f67ff0ef          	jal	ra,1c00d7aa <__pi_hyper_copy_exec>
1c00d848:	b7f5                	j	1c00d834 <__pi_hyper_copy+0x40>

1c00d84a <pi_hyper_read_async>:
1c00d84a:	451c                	lw	a5,8(a0)
1c00d84c:	00070a23          	sb	zero,20(a4)
1c00d850:	8832                	mv	a6,a2
1c00d852:	43c8                	lw	a0,4(a5)
1c00d854:	479c                	lw	a5,8(a5)
1c00d856:	862e                	mv	a2,a1
1c00d858:	0506                	slli	a0,a0,0x1
1c00d85a:	85c2                	mv	a1,a6
1c00d85c:	f99ff06f          	j	1c00d7f4 <__pi_hyper_copy>

1c00d860 <pi_hyper_read>:
1c00d860:	7175                	addi	sp,sp,-144
1c00d862:	4785                	li	a5,1
1c00d864:	870a                	mv	a4,sp
1c00d866:	c706                	sw	ra,140(sp)
1c00d868:	cc3e                	sw	a5,24(sp)
1c00d86a:	d43e                	sw	a5,40(sp)
1c00d86c:	c202                	sw	zero,4(sp)
1c00d86e:	00010a23          	sb	zero,20(sp)
1c00d872:	fd9ff0ef          	jal	ra,1c00d84a <pi_hyper_read_async>
1c00d876:	0848                	addi	a0,sp,20
1c00d878:	c43ff0ef          	jal	ra,1c00d4ba <pi_task_wait_on.isra.4>
1c00d87c:	40ba                	lw	ra,140(sp)
1c00d87e:	6149                	addi	sp,sp,144
1c00d880:	8082                	ret

1c00d882 <pi_hyper_write_async>:
1c00d882:	451c                	lw	a5,8(a0)
1c00d884:	00070a23          	sb	zero,20(a4)
1c00d888:	8832                	mv	a6,a2
1c00d88a:	43c8                	lw	a0,4(a5)
1c00d88c:	479c                	lw	a5,8(a5)
1c00d88e:	862e                	mv	a2,a1
1c00d890:	0506                	slli	a0,a0,0x1
1c00d892:	85c2                	mv	a1,a6
1c00d894:	0505                	addi	a0,a0,1
1c00d896:	f5fff06f          	j	1c00d7f4 <__pi_hyper_copy>

1c00d89a <pi_hyper_write>:
1c00d89a:	7175                	addi	sp,sp,-144
1c00d89c:	4785                	li	a5,1
1c00d89e:	870a                	mv	a4,sp
1c00d8a0:	c706                	sw	ra,140(sp)
1c00d8a2:	cc3e                	sw	a5,24(sp)
1c00d8a4:	d43e                	sw	a5,40(sp)
1c00d8a6:	c202                	sw	zero,4(sp)
1c00d8a8:	00010a23          	sb	zero,20(sp)
1c00d8ac:	fd7ff0ef          	jal	ra,1c00d882 <pi_hyper_write_async>
1c00d8b0:	0848                	addi	a0,sp,20
1c00d8b2:	c09ff0ef          	jal	ra,1c00d4ba <pi_task_wait_on.isra.4>
1c00d8b6:	40ba                	lw	ra,140(sp)
1c00d8b8:	6149                	addi	sp,sp,144
1c00d8ba:	8082                	ret

1c00d8bc <exec_pending_task>:
1c00d8bc:	30800793          	li	a5,776
1c00d8c0:	5f98                	lw	a4,56(a5)
1c00d8c2:	c729                	beqz	a4,1c00d90c <exec_pending_task+0x50>
1c00d8c4:	4f54                	lw	a3,28(a4)
1c00d8c6:	03872803          	lw	a6,56(a4)
1c00d8ca:	5f4c                	lw	a1,60(a4)
1c00d8cc:	df94                	sw	a3,56(a5)
1c00d8ce:	ee883533          	p.bclr	a0,a6,23,8
1c00d8d2:	ce881833          	p.extractu	a6,a6,7,8
1c00d8d6:	4330                	lw	a2,64(a4)
1c00d8d8:	4374                	lw	a3,68(a4)
1c00d8da:	00081463          	bnez	a6,1c00d8e2 <exec_pending_task+0x26>
1c00d8de:	ecdff06f          	j	1c00d7aa <__pi_hyper_copy_exec>
1c00d8e2:	04c72803          	lw	a6,76(a4)
1c00d8e6:	04872883          	lw	a7,72(a4)
1c00d8ea:	d388                	sw	a0,32(a5)
1c00d8ec:	d3d0                	sw	a2,36(a5)
1c00d8ee:	853a                	mv	a0,a4
1c00d8f0:	0506d633          	p.minu	a2,a3,a6
1c00d8f4:	cfd8                	sw	a4,28(a5)
1c00d8f6:	d78c                	sw	a1,40(a5)
1c00d8f8:	d7d0                	sw	a2,44(a5)
1c00d8fa:	02078823          	sb	zero,48(a5)
1c00d8fe:	dbd8                	sw	a4,52(a5)
1c00d900:	c3b4                	sw	a3,64(a5)
1c00d902:	0507a223          	sw	a6,68(a5)
1c00d906:	0517a423          	sw	a7,72(a5)
1c00d90a:	a011                	j	1c00d90e <__pi_hyper_copy_misaligned>
1c00d90c:	8082                	ret

1c00d90e <__pi_hyper_copy_misaligned>:
1c00d90e:	7179                	addi	sp,sp,-48
1c00d910:	d422                	sw	s0,40(sp)
1c00d912:	30800793          	li	a5,776
1c00d916:	ce4e                	sw	s3,28(sp)
1c00d918:	89aa                	mv	s3,a0
1c00d91a:	5388                	lw	a0,32(a5)
1c00d91c:	d606                	sw	ra,44(sp)
1c00d91e:	d226                	sw	s1,36(sp)
1c00d920:	d04a                	sw	s2,32(sp)
1c00d922:	cc52                	sw	s4,24(sp)
1c00d924:	ca56                	sw	s5,20(sp)
1c00d926:	c85a                	sw	s6,16(sp)
1c00d928:	c65e                	sw	s7,12(sp)
1c00d92a:	c462                	sw	s8,8(sp)
1c00d92c:	fc1537b3          	p.bclr	a5,a0,30,1
1c00d930:	30800413          	li	s0,776
1c00d934:	e7a1                	bnez	a5,1c00d97c <__pi_hyper_copy_misaligned+0x6e>
1c00d936:	1c01cc37          	lui	s8,0x1c01c
1c00d93a:	410c0913          	addi	s2,s8,1040 # 1c01c410 <__pi_hyper_temp_buffer>
1c00d93e:	4a0d                	li	s4,3
1c00d940:	07c00a93          	li	s5,124
1c00d944:	00190b13          	addi	s6,s2,1
1c00d948:	5408                	lw	a0,40(s0)
1c00d94a:	5444                	lw	s1,44(s0)
1c00d94c:	5050                	lw	a2,36(s0)
1c00d94e:	00350793          	addi	a5,a0,3
1c00d952:	c207b7b3          	p.bclr	a5,a5,1,0
1c00d956:	8f89                	sub	a5,a5,a0
1c00d958:	8bbe                	mv	s7,a5
1c00d95a:	009a6363          	bltu	s4,s1,1c00d960 <__pi_hyper_copy_misaligned+0x52>
1c00d95e:	8ba6                	mv	s7,s1
1c00d960:	1c0b8663          	beqz	s7,1c00db2c <__pi_hyper_copy_misaligned+0x21e>
1c00d964:	03044783          	lbu	a5,48(s0)
1c00d968:	16079f63          	bnez	a5,1c00dae6 <__pi_hyper_copy_misaligned+0x1d8>
1c00d96c:	4701                	li	a4,0
1c00d96e:	4691                	li	a3,4
1c00d970:	c0063633          	p.bclr	a2,a2,0,0
1c00d974:	410c0593          	addi	a1,s8,1040
1c00d978:	5008                	lw	a0,32(s0)
1c00d97a:	a889                	j	1c00d9cc <__pi_hyper_copy_misaligned+0xbe>
1c00d97c:	540c                	lw	a1,40(s0)
1c00d97e:	04442883          	lw	a7,68(s0)
1c00d982:	04842303          	lw	t1,72(s0)
1c00d986:	00358793          	addi	a5,a1,3
1c00d98a:	5050                	lw	a2,36(s0)
1c00d98c:	5454                	lw	a3,44(s0)
1c00d98e:	4038                	lw	a4,64(s0)
1c00d990:	c207b7b3          	p.bclr	a5,a5,1,0
1c00d994:	8f8d                	sub	a5,a5,a1
1c00d996:	41130333          	sub	t1,t1,a7
1c00d99a:	4801                	li	a6,0
1c00d99c:	4e0d                	li	t3,3
1c00d99e:	84be                	mv	s1,a5
1c00d9a0:	00de6363          	bltu	t3,a3,1c00d9a6 <__pi_hyper_copy_misaligned+0x98>
1c00d9a4:	84b6                	mv	s1,a3
1c00d9a6:	c4b5                	beqz	s1,1c00da12 <__pi_hyper_copy_misaligned+0x104>
1c00d9a8:	00080563          	beqz	a6,1c00d9b2 <__pi_hyper_copy_misaligned+0xa4>
1c00d9ac:	d050                	sw	a2,36(s0)
1c00d9ae:	d454                	sw	a3,44(s0)
1c00d9b0:	c038                	sw	a4,64(s0)
1c00d9b2:	03044703          	lbu	a4,48(s0)
1c00d9b6:	1c01c937          	lui	s2,0x1c01c
1c00d9ba:	41090793          	addi	a5,s2,1040 # 1c01c410 <__pi_hyper_temp_buffer>
1c00d9be:	ef09                	bnez	a4,1c00d9d8 <__pi_hyper_copy_misaligned+0xca>
1c00d9c0:	4691                	li	a3,4
1c00d9c2:	c0063633          	p.bclr	a2,a2,0,0
1c00d9c6:	41090593          	addi	a1,s2,1040
1c00d9ca:	157d                	addi	a0,a0,-1
1c00d9cc:	d87ff0ef          	jal	ra,1c00d752 <__pi_hyper_copy_aligned>
1c00d9d0:	4785                	li	a5,1
1c00d9d2:	02f40823          	sb	a5,48(s0)
1c00d9d6:	aa3d                	j	1c00db14 <__pi_hyper_copy_misaligned+0x206>
1c00d9d8:	fc163533          	p.bclr	a0,a2,30,1
1c00d9dc:	953e                	add	a0,a0,a5
1c00d9de:	8626                	mv	a2,s1
1c00d9e0:	02040823          	sb	zero,48(s0)
1c00d9e4:	a9fff0ef          	jal	ra,1c00d482 <l2_memcpy>
1c00d9e8:	5050                	lw	a2,36(s0)
1c00d9ea:	5008                	lw	a0,32(s0)
1c00d9ec:	4701                	li	a4,0
1c00d9ee:	4691                	li	a3,4
1c00d9f0:	c0063633          	p.bclr	a2,a2,0,0
1c00d9f4:	41090593          	addi	a1,s2,1040
1c00d9f8:	d5bff0ef          	jal	ra,1c00d752 <__pi_hyper_copy_aligned>
1c00d9fc:	505c                	lw	a5,36(s0)
1c00d9fe:	97a6                	add	a5,a5,s1
1c00da00:	d05c                	sw	a5,36(s0)
1c00da02:	541c                	lw	a5,40(s0)
1c00da04:	97a6                	add	a5,a5,s1
1c00da06:	d41c                	sw	a5,40(s0)
1c00da08:	545c                	lw	a5,44(s0)
1c00da0a:	409784b3          	sub	s1,a5,s1
1c00da0e:	d444                	sw	s1,44(s0)
1c00da10:	a211                	j	1c00db14 <__pi_hyper_copy_misaligned+0x206>
1c00da12:	c2d1                	beqz	a3,1c00da96 <__pi_hyper_copy_misaligned+0x188>
1c00da14:	00080563          	beqz	a6,1c00da1e <__pi_hyper_copy_misaligned+0x110>
1c00da18:	d050                	sw	a2,36(s0)
1c00da1a:	d454                	sw	a3,44(s0)
1c00da1c:	c038                	sw	a4,64(s0)
1c00da1e:	97b2                	add	a5,a5,a2
1c00da20:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00da24:	c206b4b3          	p.bclr	s1,a3,1,0
1c00da28:	ef89                	bnez	a5,1c00da42 <__pi_hyper_copy_misaligned+0x134>
1c00da2a:	4701                	li	a4,0
1c00da2c:	86a6                	mv	a3,s1
1c00da2e:	d25ff0ef          	jal	ra,1c00d752 <__pi_hyper_copy_aligned>
1c00da32:	505c                	lw	a5,36(s0)
1c00da34:	5454                	lw	a3,44(s0)
1c00da36:	97a6                	add	a5,a5,s1
1c00da38:	d05c                	sw	a5,36(s0)
1c00da3a:	541c                	lw	a5,40(s0)
1c00da3c:	97a6                	add	a5,a5,s1
1c00da3e:	d41c                	sw	a5,40(s0)
1c00da40:	a881                	j	1c00da90 <__pi_hyper_copy_misaligned+0x182>
1c00da42:	03044703          	lbu	a4,48(s0)
1c00da46:	1c01c937          	lui	s2,0x1c01c
1c00da4a:	41090793          	addi	a5,s2,1040 # 1c01c410 <__pi_hyper_temp_buffer>
1c00da4e:	db2d                	beqz	a4,1c00d9c0 <__pi_hyper_copy_misaligned+0xb2>
1c00da50:	07c00693          	li	a3,124
1c00da54:	04d4d4b3          	p.minu	s1,s1,a3
1c00da58:	00178513          	addi	a0,a5,1
1c00da5c:	fff48613          	addi	a2,s1,-1
1c00da60:	02040823          	sb	zero,48(s0)
1c00da64:	a1fff0ef          	jal	ra,1c00d482 <l2_memcpy>
1c00da68:	5050                	lw	a2,36(s0)
1c00da6a:	5008                	lw	a0,32(s0)
1c00da6c:	86a6                	mv	a3,s1
1c00da6e:	4701                	li	a4,0
1c00da70:	c0063633          	p.bclr	a2,a2,0,0
1c00da74:	41090593          	addi	a1,s2,1040
1c00da78:	cdbff0ef          	jal	ra,1c00d752 <__pi_hyper_copy_aligned>
1c00da7c:	505c                	lw	a5,36(s0)
1c00da7e:	5454                	lw	a3,44(s0)
1c00da80:	17fd                	addi	a5,a5,-1
1c00da82:	97a6                	add	a5,a5,s1
1c00da84:	d05c                	sw	a5,36(s0)
1c00da86:	541c                	lw	a5,40(s0)
1c00da88:	0685                	addi	a3,a3,1
1c00da8a:	17fd                	addi	a5,a5,-1
1c00da8c:	97a6                	add	a5,a5,s1
1c00da8e:	d41c                	sw	a5,40(s0)
1c00da90:	409684b3          	sub	s1,a3,s1
1c00da94:	bfad                	j	1c00da0e <__pi_hyper_copy_misaligned+0x100>
1c00da96:	e719                	bnez	a4,1c00daa4 <__pi_hyper_copy_misaligned+0x196>
1c00da98:	00080c63          	beqz	a6,1c00dab0 <__pi_hyper_copy_misaligned+0x1a2>
1c00da9c:	d050                	sw	a2,36(s0)
1c00da9e:	02042623          	sw	zero,44(s0)
1c00daa2:	a029                	j	1c00daac <__pi_hyper_copy_misaligned+0x19e>
1c00daa4:	02e8ea63          	bltu	a7,a4,1c00dad8 <__pi_hyper_copy_misaligned+0x1ca>
1c00daa8:	fe081ae3          	bnez	a6,1c00da9c <__pi_hyper_copy_misaligned+0x18e>
1c00daac:	04042023          	sw	zero,64(s0)
1c00dab0:	854e                	mv	a0,s3
1c00dab2:	02042a23          	sw	zero,52(s0)
1c00dab6:	00042e23          	sw	zero,28(s0)
1c00daba:	9ddff0ef          	jal	ra,1c00d496 <rt_event_enqueue>
1c00dabe:	5422                	lw	s0,40(sp)
1c00dac0:	50b2                	lw	ra,44(sp)
1c00dac2:	5492                	lw	s1,36(sp)
1c00dac4:	5902                	lw	s2,32(sp)
1c00dac6:	49f2                	lw	s3,28(sp)
1c00dac8:	4a62                	lw	s4,24(sp)
1c00daca:	4ad2                	lw	s5,20(sp)
1c00dacc:	4b42                	lw	s6,16(sp)
1c00dace:	4bb2                	lw	s7,12(sp)
1c00dad0:	4c22                	lw	s8,8(sp)
1c00dad2:	6145                	addi	sp,sp,48
1c00dad4:	de9ff06f          	j	1c00d8bc <exec_pending_task>
1c00dad8:	41170733          	sub	a4,a4,a7
1c00dadc:	961a                	add	a2,a2,t1
1c00dade:	4805                	li	a6,1
1c00dae0:	04e8d6b3          	p.minu	a3,a7,a4
1c00dae4:	bd6d                	j	1c00d99e <__pi_hyper_copy_misaligned+0x90>
1c00dae6:	fc1635b3          	p.bclr	a1,a2,30,1
1c00daea:	95ca                	add	a1,a1,s2
1c00daec:	865e                	mv	a2,s7
1c00daee:	02040823          	sb	zero,48(s0)
1c00daf2:	991ff0ef          	jal	ra,1c00d482 <l2_memcpy>
1c00daf6:	505c                	lw	a5,36(s0)
1c00daf8:	97de                	add	a5,a5,s7
1c00dafa:	d05c                	sw	a5,36(s0)
1c00dafc:	541c                	lw	a5,40(s0)
1c00dafe:	97de                	add	a5,a5,s7
1c00db00:	d41c                	sw	a5,40(s0)
1c00db02:	545c                	lw	a5,44(s0)
1c00db04:	41778bb3          	sub	s7,a5,s7
1c00db08:	03742623          	sw	s7,44(s0)
1c00db0c:	e20b9ee3          	bnez	s7,1c00d948 <__pi_hyper_copy_misaligned+0x3a>
1c00db10:	545c                	lw	a5,44(s0)
1c00db12:	c7a5                	beqz	a5,1c00db7a <__pi_hyper_copy_misaligned+0x26c>
1c00db14:	50b2                	lw	ra,44(sp)
1c00db16:	5422                	lw	s0,40(sp)
1c00db18:	5492                	lw	s1,36(sp)
1c00db1a:	5902                	lw	s2,32(sp)
1c00db1c:	49f2                	lw	s3,28(sp)
1c00db1e:	4a62                	lw	s4,24(sp)
1c00db20:	4ad2                	lw	s5,20(sp)
1c00db22:	4b42                	lw	s6,16(sp)
1c00db24:	4bb2                	lw	s7,12(sp)
1c00db26:	4c22                	lw	s8,8(sp)
1c00db28:	6145                	addi	sp,sp,48
1c00db2a:	8082                	ret
1c00db2c:	d0f5                	beqz	s1,1c00db10 <__pi_hyper_copy_misaligned+0x202>
1c00db2e:	97b2                	add	a5,a5,a2
1c00db30:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00db34:	c204b4b3          	p.bclr	s1,s1,1,0
1c00db38:	e791                	bnez	a5,1c00db44 <__pi_hyper_copy_misaligned+0x236>
1c00db3a:	85aa                	mv	a1,a0
1c00db3c:	4701                	li	a4,0
1c00db3e:	86a6                	mv	a3,s1
1c00db40:	5008                	lw	a0,32(s0)
1c00db42:	b5f5                	j	1c00da2e <__pi_hyper_copy_misaligned+0x120>
1c00db44:	03044783          	lbu	a5,48(s0)
1c00db48:	0554d4b3          	p.minu	s1,s1,s5
1c00db4c:	e789                	bnez	a5,1c00db56 <__pi_hyper_copy_misaligned+0x248>
1c00db4e:	4701                	li	a4,0
1c00db50:	00448693          	addi	a3,s1,4
1c00db54:	bd31                	j	1c00d970 <__pi_hyper_copy_misaligned+0x62>
1c00db56:	8626                	mv	a2,s1
1c00db58:	85da                	mv	a1,s6
1c00db5a:	02040823          	sb	zero,48(s0)
1c00db5e:	925ff0ef          	jal	ra,1c00d482 <l2_memcpy>
1c00db62:	505c                	lw	a5,36(s0)
1c00db64:	5454                	lw	a3,44(s0)
1c00db66:	97a6                	add	a5,a5,s1
1c00db68:	d05c                	sw	a5,36(s0)
1c00db6a:	541c                	lw	a5,40(s0)
1c00db6c:	97a6                	add	a5,a5,s1
1c00db6e:	409684b3          	sub	s1,a3,s1
1c00db72:	d41c                	sw	a5,40(s0)
1c00db74:	d444                	sw	s1,44(s0)
1c00db76:	dcc9                	beqz	s1,1c00db10 <__pi_hyper_copy_misaligned+0x202>
1c00db78:	bbc1                	j	1c00d948 <__pi_hyper_copy_misaligned+0x3a>
1c00db7a:	4038                	lw	a4,64(s0)
1c00db7c:	db15                	beqz	a4,1c00dab0 <__pi_hyper_copy_misaligned+0x1a2>
1c00db7e:	407c                	lw	a5,68(s0)
1c00db80:	00e7ff63          	bleu	a4,a5,1c00db9e <__pi_hyper_copy_misaligned+0x290>
1c00db84:	8f1d                	sub	a4,a4,a5
1c00db86:	c038                	sw	a4,64(s0)
1c00db88:	4034                	lw	a3,64(s0)
1c00db8a:	d29d                	beqz	a3,1c00dab0 <__pi_hyper_copy_misaligned+0x1a2>
1c00db8c:	5058                	lw	a4,36(s0)
1c00db8e:	4430                	lw	a2,72(s0)
1c00db90:	9732                	add	a4,a4,a2
1c00db92:	8f1d                	sub	a4,a4,a5
1c00db94:	04d7d7b3          	p.minu	a5,a5,a3
1c00db98:	d058                	sw	a4,36(s0)
1c00db9a:	d45c                	sw	a5,44(s0)
1c00db9c:	b375                	j	1c00d948 <__pi_hyper_copy_misaligned+0x3a>
1c00db9e:	04042023          	sw	zero,64(s0)
1c00dba2:	b7dd                	j	1c00db88 <__pi_hyper_copy_misaligned+0x27a>

1c00dba4 <__pi_hyper_copy_2d>:
1c00dba4:	1141                	addi	sp,sp,-16
1c00dba6:	c606                	sw	ra,12(sp)
1c00dba8:	c422                	sw	s0,8(sp)
1c00dbaa:	30047473          	csrrci	s0,mstatus,8
1c00dbae:	00088563          	beqz	a7,1c00dbb8 <__pi_hyper_copy_2d+0x14>
1c00dbb2:	010008b7          	lui	a7,0x1000
1c00dbb6:	9646                	add	a2,a2,a7
1c00dbb8:	30800893          	li	a7,776
1c00dbbc:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00dbc0:	30800313          	li	t1,776
1c00dbc4:	040e0563          	beqz	t3,1c00dc0e <__pi_hyper_copy_2d+0x6a>
1c00dbc8:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00dbcc:	02088e63          	beqz	a7,1c00dc08 <__pi_hyper_copy_2d+0x64>
1c00dbd0:	03c32883          	lw	a7,60(t1)
1c00dbd4:	0108ae23          	sw	a6,28(a7)
1c00dbd8:	c0854533          	p.bset	a0,a0,0,8
1c00dbdc:	03032e23          	sw	a6,60(t1)
1c00dbe0:	00082e23          	sw	zero,28(a6)
1c00dbe4:	02a82c23          	sw	a0,56(a6)
1c00dbe8:	02b82e23          	sw	a1,60(a6)
1c00dbec:	04c82023          	sw	a2,64(a6)
1c00dbf0:	04d82223          	sw	a3,68(a6)
1c00dbf4:	04e82423          	sw	a4,72(a6)
1c00dbf8:	04f82623          	sw	a5,76(a6)
1c00dbfc:	30041073          	csrw	mstatus,s0
1c00dc00:	40b2                	lw	ra,12(sp)
1c00dc02:	4422                	lw	s0,8(sp)
1c00dc04:	0141                	addi	sp,sp,16
1c00dc06:	8082                	ret
1c00dc08:	03032c23          	sw	a6,56(t1)
1c00dc0c:	b7f1                	j	1c00dbd8 <__pi_hyper_copy_2d+0x34>
1c00dc0e:	02a8a023          	sw	a0,32(a7)
1c00dc12:	02c8a223          	sw	a2,36(a7)
1c00dc16:	8542                	mv	a0,a6
1c00dc18:	04f6d633          	p.minu	a2,a3,a5
1c00dc1c:	0108ae23          	sw	a6,28(a7)
1c00dc20:	02b8a423          	sw	a1,40(a7)
1c00dc24:	02c8a623          	sw	a2,44(a7)
1c00dc28:	02088823          	sb	zero,48(a7)
1c00dc2c:	0308aa23          	sw	a6,52(a7)
1c00dc30:	04d8a023          	sw	a3,64(a7)
1c00dc34:	04f8a223          	sw	a5,68(a7)
1c00dc38:	04e8a423          	sw	a4,72(a7)
1c00dc3c:	cd3ff0ef          	jal	ra,1c00d90e <__pi_hyper_copy_misaligned>
1c00dc40:	bf75                	j	1c00dbfc <__pi_hyper_copy_2d+0x58>

1c00dc42 <pi_hyper_read_2d_async>:
1c00dc42:	8332                	mv	t1,a2
1c00dc44:	4510                	lw	a2,8(a0)
1c00dc46:	00080a23          	sb	zero,20(a6)
1c00dc4a:	4248                	lw	a0,4(a2)
1c00dc4c:	00862883          	lw	a7,8(a2)
1c00dc50:	862e                	mv	a2,a1
1c00dc52:	0506                	slli	a0,a0,0x1
1c00dc54:	859a                	mv	a1,t1
1c00dc56:	f4fff06f          	j	1c00dba4 <__pi_hyper_copy_2d>

1c00dc5a <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00dc5a:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00dc5e:	cb1ff06f          	j	1c00d90e <__pi_hyper_copy_misaligned>

1c00dc62 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00dc62:	c5bff06f          	j	1c00d8bc <exec_pending_task>

1c00dc66 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00dc66:	1c01c737          	lui	a4,0x1c01c
  __rt_hyper_end_task = NULL;
1c00dc6a:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00dc6e:	62072023          	sw	zero,1568(a4) # 1c01c620 <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00dc72:	577d                	li	a4,-1
1c00dc74:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00dc76:	1c01c737          	lui	a4,0x1c01c
  __rt_hyper_end_task = NULL;
1c00dc7a:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00dc7e:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00dc82:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00dc86:	62072223          	sw	zero,1572(a4) # 1c01c624 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00dc8a:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00dc8e:	0407a023          	sw	zero,64(a5)
}
1c00dc92:	8082                	ret

1c00dc94 <__pos_i2s_init>:
    return 0;
}

static void __attribute__((constructor)) __pos_i2s_init()
{
    __pos_i2s_global_open_count = 0;
1c00dc94:	1c01c7b7          	lui	a5,0x1c01c
1c00dc98:	6207a423          	sw	zero,1576(a5) # 1c01c628 <__pos_i2s_global_open_count>

    for (int i=0; i<ARCHI_UDMA_NB_I2S; i++)
    {
        __pos_i2s[i].open_count = 0;
1c00dc9c:	1c01c7b7          	lui	a5,0x1c01c
1c00dca0:	48078d23          	sb	zero,1178(a5) # 1c01c49a <__pos_i2s+0xa>
    }
1c00dca4:	8082                	ret

1c00dca6 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00dca6:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00dcaa:	4158                	lw	a4,4(a0)
1c00dcac:	1a1047b7          	lui	a5,0x1a104
1c00dcb0:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa10411c>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00dcb4:	430c                	lw	a1,0(a4)
1c00dcb6:	c20c                	sw	a1,0(a2)
1c00dcb8:	434c                	lw	a1,4(a4)
1c00dcba:	14478613          	addi	a2,a5,324
1c00dcbe:	14878793          	addi	a5,a5,328
1c00dcc2:	c20c                	sw	a1,0(a2)
1c00dcc4:	4718                	lw	a4,8(a4)
1c00dcc6:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00dcc8:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00dccc:	8082                	ret

1c00dcce <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00dcce:	1c010537          	lui	a0,0x1c010
1c00dcd2:	4ec50513          	addi	a0,a0,1260 # 1c0104ec <__rt_padframe_profiles>
1c00dcd6:	fd1ff06f          	j	1c00dca6 <rt_padframe_set>

1c00dcda <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00dcda:	1101                	addi	sp,sp,-32
1c00dcdc:	c84a                	sw	s2,16(sp)
1c00dcde:	ce06                	sw	ra,28(sp)
1c00dce0:	cc22                	sw	s0,24(sp)
1c00dce2:	ca26                	sw	s1,20(sp)
1c00dce4:	892a                	mv	s2,a0
  if (size)
1c00dce6:	c229                	beqz	a2,1c00dd28 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00dce8:	00758493          	addi	s1,a1,7
1c00dcec:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00dcee:	4505                	li	a0,1
1c00dcf0:	45b1                	li	a1,12
1c00dcf2:	c632                	sw	a2,12(sp)
1c00dcf4:	eecfe0ef          	jal	ra,1c00c3e0 <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00dcf8:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00dcfc:	4632                	lw	a2,12(sp)
1c00dcfe:	c905                	beqz	a0,1c00dd2e <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00dd00:	9432                	add	s0,s0,a2
1c00dd02:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00dd04:	4601                	li	a2,0
    if (size > 0) {
1c00dd06:	00805a63          	blez	s0,1c00dd1a <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00dd0a:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00dd0e:	c4043433          	p.bclr	s0,s0,2,0
1c00dd12:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00dd14:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00dd18:	c504                	sw	s1,8(a0)
}
1c00dd1a:	40f2                	lw	ra,28(sp)
1c00dd1c:	4462                	lw	s0,24(sp)
1c00dd1e:	44d2                	lw	s1,20(sp)
1c00dd20:	4942                	lw	s2,16(sp)
1c00dd22:	8532                	mv	a0,a2
1c00dd24:	6105                	addi	sp,sp,32
1c00dd26:	8082                	ret
    a->first_free = NULL;
1c00dd28:	00052023          	sw	zero,0(a0)
1c00dd2c:	b7fd                	j	1c00dd1a <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00dd2e:	567d                	li	a2,-1
1c00dd30:	b7ed                	j	1c00dd1a <rt_extern_alloc_init+0x40>

1c00dd32 <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00dd32:	410c                	lw	a1,0(a0)
1c00dd34:	4631                	li	a2,12
1c00dd36:	4505                	li	a0,1
1c00dd38:	ed8fe06f          	j	1c00c410 <rt_free>

1c00dd3c <__pi_gpio_handler>:
  }
}


void __pi_gpio_handler(void *arg)
{
1c00dd3c:	1141                	addi	sp,sp,-16
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTTYPE(id));
}

static inline unsigned int hal_gpio_intstatus_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTSTATUS);
1c00dd3e:	1a1017b7          	lui	a5,0x1a101
  (void) arg;

  /* Retrieve IRQ status from GPIO. Handle task if needed. */
  pi_gpio_t *gpio = &__rt_gpio[0];
  gpio->irq_status = hal_gpio_intstatus_get();
1c00dd42:	1c01c6b7          	lui	a3,0x1c01c
{
1c00dd46:	c422                	sw	s0,8(sp)
1c00dd48:	4f80                	lw	s0,24(a5)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00dd4a:	4e468793          	addi	a5,a3,1252 # 1c01c4e4 <__rt_gpio>
{
1c00dd4e:	c226                	sw	s1,4(sp)

  if (gpio->cb != NULL)
1c00dd50:	4bc4                	lw	s1,20(a5)
{
1c00dd52:	c606                	sw	ra,12(sp)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00dd54:	c780                	sw	s0,8(a5)
  if (gpio->cb != NULL)
1c00dd56:	cc91                	beqz	s1,1c00dd72 <__pi_gpio_handler+0x36>
    if (irq_mask & tmp_cb->pin_mask)
1c00dd58:	409c                	lw	a5,0(s1)
1c00dd5a:	8fe1                	and	a5,a5,s0
1c00dd5c:	c781                	beqz	a5,1c00dd64 <__pi_gpio_handler+0x28>
      tmp_cb->handler(tmp_cb->args);
1c00dd5e:	40dc                	lw	a5,4(s1)
1c00dd60:	4488                	lw	a0,8(s1)
1c00dd62:	9782                	jalr	a5
    tmp_cb = tmp_cb->next;
1c00dd64:	44c4                	lw	s1,12(s1)
  while (tmp_cb != NULL)
1c00dd66:	f8ed                	bnez	s1,1c00dd58 <__pi_gpio_handler+0x1c>
      }
      irq_mask = irq_mask >> 1;
      pin++;
    }
  }
}
1c00dd68:	40b2                	lw	ra,12(sp)
1c00dd6a:	4422                	lw	s0,8(sp)
1c00dd6c:	4492                	lw	s1,4(sp)
1c00dd6e:	0141                	addi	sp,sp,16
1c00dd70:	8082                	ret
1c00dd72:	4e468693          	addi	a3,a3,1252
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00dd76:	46dc                	lw	a5,12(a3)
    uint8_t pin = 0;
1c00dd78:	4701                	li	a4,0
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00dd7a:	8fe1                	and	a5,a5,s0
1c00dd7c:	01c00513          	li	a0,28
    while (irq_mask)
1c00dd80:	d7e5                	beqz	a5,1c00dd68 <__pi_gpio_handler+0x2c>
      if (irq_mask & 0x1)
1c00dd82:	fc17b633          	p.bclr	a2,a5,30,1
1c00dd86:	c615                	beqz	a2,1c00ddb2 <__pi_gpio_handler+0x76>
        task = gpio->event_task[pin];
1c00dd88:	00470613          	addi	a2,a4,4
1c00dd8c:	060a                	slli	a2,a2,0x2
1c00dd8e:	9636                	add	a2,a2,a3
1c00dd90:	4610                	lw	a2,8(a2)
        if (task != NULL)
1c00dd92:	c205                	beqz	a2,1c00ddb2 <__pi_gpio_handler+0x76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00dd94:	30047873          	csrrci	a6,mstatus,8
  if (sched->first) {
1c00dd98:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00dd9c:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c00dda0:	00088e63          	beqz	a7,1c00ddbc <__pi_gpio_handler+0x80>
    sched->last->next = event;
1c00dda4:	00452883          	lw	a7,4(a0)
1c00dda8:	00c8a023          	sw	a2,0(a7)
  sched->last = event;
1c00ddac:	c150                	sw	a2,4(a0)
  __builtin_pulp_spr_write(reg, val);
1c00ddae:	30081073          	csrw	mstatus,a6
      pin++;
1c00ddb2:	0705                	addi	a4,a4,1
      irq_mask = irq_mask >> 1;
1c00ddb4:	8385                	srli	a5,a5,0x1
      pin++;
1c00ddb6:	0ff77713          	andi	a4,a4,255
1c00ddba:	b7d9                	j	1c00dd80 <__pi_gpio_handler+0x44>
    sched->first = event;
1c00ddbc:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00ddc0:	b7f5                	j	1c00ddac <__pi_gpio_handler+0x70>

1c00ddc2 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00ddc2:	1c01c7b7          	lui	a5,0x1c01c
1c00ddc6:	4d18                	lw	a4,24(a0)
1c00ddc8:	7447a783          	lw	a5,1860(a5) # 1c01c744 <__rt_freq_domains>
1c00ddcc:	068416b7          	lui	a3,0x6841
1c00ddd0:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00ddd4:	02e7c7b3          	div	a5,a5,a4
1c00ddd8:	02954703          	lbu	a4,41(a0)
1c00dddc:	177d                	addi	a4,a4,-1
1c00ddde:	c0874733          	p.bset	a4,a4,0,8
1c00dde2:	17fd                	addi	a5,a5,-1
1c00dde4:	8785                	srai	a5,a5,0x1
1c00dde6:	07c2                	slli	a5,a5,0x10
1c00dde8:	8fd9                	or	a5,a5,a4
1c00ddea:	02554703          	lbu	a4,37(a0)
1c00ddee:	9736                	add	a4,a4,a3
1c00ddf0:	070a                	slli	a4,a4,0x2
1c00ddf2:	c31c                	sw	a5,0(a4)
1c00ddf4:	8082                	ret

1c00ddf6 <__rt_i2s_setfreq_after>:
1c00ddf6:	1141                	addi	sp,sp,-16
1c00ddf8:	1c01c7b7          	lui	a5,0x1c01c
1c00ddfc:	c422                	sw	s0,8(sp)
1c00ddfe:	62c7a403          	lw	s0,1580(a5) # 1c01c62c <__rt_i2s_first>
1c00de02:	c606                	sw	ra,12(sp)
1c00de04:	e411                	bnez	s0,1c00de10 <__rt_i2s_setfreq_after+0x1a>
1c00de06:	40b2                	lw	ra,12(sp)
1c00de08:	4422                	lw	s0,8(sp)
1c00de0a:	4501                	li	a0,0
1c00de0c:	0141                	addi	sp,sp,16
1c00de0e:	8082                	ret
1c00de10:	02844783          	lbu	a5,40(s0)
1c00de14:	c781                	beqz	a5,1c00de1c <__rt_i2s_setfreq_after+0x26>
1c00de16:	8522                	mv	a0,s0
1c00de18:	fabff0ef          	jal	ra,1c00ddc2 <__rt_i2s_resume>
1c00de1c:	4c40                	lw	s0,28(s0)
1c00de1e:	b7dd                	j	1c00de04 <__rt_i2s_setfreq_after+0xe>

1c00de20 <__rt_i2s_setfreq_before>:
1c00de20:	1c01c7b7          	lui	a5,0x1c01c
1c00de24:	62c7a783          	lw	a5,1580(a5) # 1c01c62c <__rt_i2s_first>
1c00de28:	068416b7          	lui	a3,0x6841
1c00de2c:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00de30:	e399                	bnez	a5,1c00de36 <__rt_i2s_setfreq_before+0x16>
1c00de32:	4501                	li	a0,0
1c00de34:	8082                	ret
1c00de36:	0287c703          	lbu	a4,40(a5)
1c00de3a:	c719                	beqz	a4,1c00de48 <__rt_i2s_setfreq_before+0x28>
1c00de3c:	0257c703          	lbu	a4,37(a5)
1c00de40:	9736                	add	a4,a4,a3
1c00de42:	070a                	slli	a4,a4,0x2
1c00de44:	00072023          	sw	zero,0(a4)
1c00de48:	4fdc                	lw	a5,28(a5)
1c00de4a:	b7dd                	j	1c00de30 <__rt_i2s_setfreq_before+0x10>

1c00de4c <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00de4c:	1c00e5b7          	lui	a1,0x1c00e
{
1c00de50:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00de52:	4601                	li	a2,0
1c00de54:	e2058593          	addi	a1,a1,-480 # 1c00de20 <__rt_i2s_setfreq_before>
1c00de58:	4511                	li	a0,4
{
1c00de5a:	c606                	sw	ra,12(sp)
1c00de5c:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00de5e:	efffd0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00de62:	1c00e5b7          	lui	a1,0x1c00e
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00de66:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00de68:	4601                	li	a2,0
1c00de6a:	df658593          	addi	a1,a1,-522 # 1c00ddf6 <__rt_i2s_setfreq_after>
1c00de6e:	4515                	li	a0,5
1c00de70:	eedfd0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
1c00de74:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00de76:	c10d                	beqz	a0,1c00de98 <__rt_i2s_init+0x4c>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00de78:	01402673          	csrr	a2,uhartid
1c00de7c:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00de80:	40565593          	srai	a1,a2,0x5
1c00de84:	f265b5b3          	p.bclr	a1,a1,25,6
1c00de88:	f4563633          	p.bclr	a2,a2,26,5
1c00de8c:	15450513          	addi	a0,a0,340 # 1c010154 <__hyper_pad+0x50>
1c00de90:	798000ef          	jal	ra,1c00e628 <printf>
1c00de94:	718000ef          	jal	ra,1c00e5ac <abort>
}
1c00de98:	40b2                	lw	ra,12(sp)
1c00de9a:	4422                	lw	s0,8(sp)
1c00de9c:	0141                	addi	sp,sp,16
1c00de9e:	8082                	ret

1c00dea0 <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00dea0:	1b0017b7          	lui	a5,0x1b001
1c00dea4:	ba078c23          	sb	zero,-1096(a5) # 1b000bb8 <camera_isAwaked>
}
1c00dea8:	8082                	ret

1c00deaa <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00deaa:	1c01c7b7          	lui	a5,0x1c01c
1c00deae:	2a078793          	addi	a5,a5,672 # 1c01c2a0 <__rt_i2c>
1c00deb2:	00078223          	sb	zero,4(a5)
1c00deb6:	00078a23          	sb	zero,20(a5)
  }
}
1c00deba:	8082                	ret

1c00debc <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00debc:	35800793          	li	a5,856
1c00dec0:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00dec4:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00dec8:	0207aa23          	sw	zero,52(a5)
}
1c00decc:	8082                	ret

1c00dece <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00dece:	1c01c7b7          	lui	a5,0x1c01c
1c00ded2:	63078793          	addi	a5,a5,1584 # 1c01c630 <__rt_spim_open_count>
1c00ded6:	0007a023          	sw	zero,0(a5)
1c00deda:	0007a223          	sw	zero,4(a5)
  }
}
1c00dede:	8082                	ret

1c00dee0 <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00dee0:	1c01c7b7          	lui	a5,0x1c01c
1c00dee4:	6207ae23          	sw	zero,1596(a5) # 1c01c63c <__rt_io_pending_flush>
1c00dee8:	00052c23          	sw	zero,24(a0)
1c00deec:	8082                	ret

1c00deee <__rt_io_uart_wait_req>:
1c00deee:	1141                	addi	sp,sp,-16
1c00def0:	c226                	sw	s1,4(sp)
1c00def2:	84aa                	mv	s1,a0
1c00def4:	c606                	sw	ra,12(sp)
1c00def6:	c422                	sw	s0,8(sp)
1c00def8:	c04a                	sw	s2,0(sp)
1c00defa:	30047973          	csrrci	s2,mstatus,8
1c00defe:	1c01c437          	lui	s0,0x1c01c
1c00df02:	63840413          	addi	s0,s0,1592 # 1c01c638 <__rt_io_event_current>
1c00df06:	4008                	lw	a0,0(s0)
1c00df08:	c509                	beqz	a0,1c00df12 <__rt_io_uart_wait_req+0x24>
1c00df0a:	bf2fe0ef          	jal	ra,1c00c2fc <rt_event_wait>
1c00df0e:	00042023          	sw	zero,0(s0)
1c00df12:	4785                	li	a5,1
1c00df14:	08f48023          	sb	a5,128(s1)
1c00df18:	0814c783          	lbu	a5,129(s1)
1c00df1c:	00201737          	lui	a4,0x201
1c00df20:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00df24:	04078793          	addi	a5,a5,64
1c00df28:	07da                	slli	a5,a5,0x16
1c00df2a:	0007e723          	p.sw	zero,a4(a5)
1c00df2e:	30091073          	csrw	mstatus,s2
1c00df32:	40b2                	lw	ra,12(sp)
1c00df34:	4422                	lw	s0,8(sp)
1c00df36:	4492                	lw	s1,4(sp)
1c00df38:	4902                	lw	s2,0(sp)
1c00df3a:	0141                	addi	sp,sp,16
1c00df3c:	8082                	ret

1c00df3e <__rt_do_putc_host>:
1c00df3e:	1c01c737          	lui	a4,0x1c01c
1c00df42:	64070793          	addi	a5,a4,1600 # 1c01c640 <__rt_putc_host_buffer_index>
1c00df46:	4390                	lw	a2,0(a5)
1c00df48:	64070713          	addi	a4,a4,1600
1c00df4c:	00160693          	addi	a3,a2,1
1c00df50:	c394                	sw	a3,0(a5)
1c00df52:	1c01c7b7          	lui	a5,0x1c01c
1c00df56:	2c078593          	addi	a1,a5,704 # 1c01c2c0 <__rt_putc_host_buffer>
1c00df5a:	00a5c623          	p.sb	a0,a2(a1)
1c00df5e:	07f00593          	li	a1,127
1c00df62:	2c078613          	addi	a2,a5,704
1c00df66:	00b68463          	beq	a3,a1,1c00df6e <__rt_do_putc_host+0x30>
1c00df6a:	00a53a63          	p.bneimm	a0,10,1c00df7e <__rt_do_putc_host+0x40>
1c00df6e:	2c078513          	addi	a0,a5,704
1c00df72:	000646a3          	p.sb	zero,a3(a2)
1c00df76:	00072023          	sw	zero,0(a4)
1c00df7a:	a19fd06f          	j	1c00b992 <semihost_write0>
1c00df7e:	8082                	ret

1c00df80 <__rt_io_start>:
1c00df80:	1101                	addi	sp,sp,-32
1c00df82:	0028                	addi	a0,sp,8
1c00df84:	ce06                	sw	ra,28(sp)
1c00df86:	cc22                	sw	s0,24(sp)
1c00df88:	3ee010ef          	jal	ra,1c00f376 <rt_uart_conf_init>
1c00df8c:	4585                	li	a1,1
1c00df8e:	4501                	li	a0,0
1c00df90:	a06fe0ef          	jal	ra,1c00c196 <rt_event_alloc>
1c00df94:	547d                	li	s0,-1
1c00df96:	ed0d                	bnez	a0,1c00dfd0 <__rt_io_start+0x50>
1c00df98:	1c0107b7          	lui	a5,0x1c010
1c00df9c:	5c87a783          	lw	a5,1480(a5) # 1c0105c8 <__rt_iodev_uart_baudrate>
1c00dfa0:	842a                	mv	s0,a0
1c00dfa2:	1c01c537          	lui	a0,0x1c01c
1c00dfa6:	01c00593          	li	a1,28
1c00dfaa:	57c50513          	addi	a0,a0,1404 # 1c01c57c <__rt_io_event>
1c00dfae:	c43e                	sw	a5,8(sp)
1c00dfb0:	9a6fe0ef          	jal	ra,1c00c156 <__rt_event_init>
1c00dfb4:	1c01c7b7          	lui	a5,0x1c01c
1c00dfb8:	6147a503          	lw	a0,1556(a5) # 1c01c614 <__rt_iodev_uart_channel>
1c00dfbc:	4681                	li	a3,0
1c00dfbe:	4601                	li	a2,0
1c00dfc0:	002c                	addi	a1,sp,8
1c00dfc2:	0511                	addi	a0,a0,4
1c00dfc4:	3c2010ef          	jal	ra,1c00f386 <__rt_uart_open>
1c00dfc8:	1c01c7b7          	lui	a5,0x1c01c
1c00dfcc:	64a7a223          	sw	a0,1604(a5) # 1c01c644 <_rt_io_uart>
1c00dfd0:	8522                	mv	a0,s0
1c00dfd2:	40f2                	lw	ra,28(sp)
1c00dfd4:	4462                	lw	s0,24(sp)
1c00dfd6:	6105                	addi	sp,sp,32
1c00dfd8:	8082                	ret

1c00dfda <rt_event_execute.isra.4.constprop.12>:
1c00dfda:	1141                	addi	sp,sp,-16
1c00dfdc:	c606                	sw	ra,12(sp)
1c00dfde:	c422                	sw	s0,8(sp)
1c00dfe0:	30047473          	csrrci	s0,mstatus,8
1c00dfe4:	4585                	li	a1,1
1c00dfe6:	01c00513          	li	a0,28
1c00dfea:	a82fe0ef          	jal	ra,1c00c26c <__rt_event_execute>
1c00dfee:	30041073          	csrw	mstatus,s0
1c00dff2:	40b2                	lw	ra,12(sp)
1c00dff4:	4422                	lw	s0,8(sp)
1c00dff6:	0141                	addi	sp,sp,16
1c00dff8:	8082                	ret

1c00dffa <__rt_io_lock>:
1c00dffa:	1c0107b7          	lui	a5,0x1c010
1c00dffe:	5147a783          	lw	a5,1300(a5) # 1c010514 <__hal_debug_struct+0x10>
1c00e002:	cf81                	beqz	a5,1c00e01a <__rt_io_lock+0x20>
1c00e004:	1c01c7b7          	lui	a5,0x1c01c
1c00e008:	6447a783          	lw	a5,1604(a5) # 1c01c644 <_rt_io_uart>
1c00e00c:	e799                	bnez	a5,1c00e01a <__rt_io_lock+0x20>
1c00e00e:	1c01c7b7          	lui	a5,0x1c01c
1c00e012:	6107a783          	lw	a5,1552(a5) # 1c01c610 <__rt_iodev>
1c00e016:	0427b963          	p.bneimm	a5,2,1c00e068 <__rt_io_lock+0x6e>
1c00e01a:	7135                	addi	sp,sp,-160
1c00e01c:	014027f3          	csrr	a5,uhartid
1c00e020:	cf06                	sw	ra,156(sp)
1c00e022:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e026:	02000713          	li	a4,32
1c00e02a:	1b001537          	lui	a0,0x1b001
1c00e02e:	00e79963          	bne	a5,a4,1c00e040 <__rt_io_lock+0x46>
1c00e032:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00e036:	db7fd0ef          	jal	ra,1c00bdec <__rt_fc_lock>
1c00e03a:	40fa                	lw	ra,156(sp)
1c00e03c:	610d                	addi	sp,sp,160
1c00e03e:	8082                	ret
1c00e040:	004c                	addi	a1,sp,4
1c00e042:	bbc50513          	addi	a0,a0,-1092
1c00e046:	e0dfd0ef          	jal	ra,1c00be52 <__rt_fc_cluster_lock>
1c00e04a:	4689                	li	a3,2
1c00e04c:	00204737          	lui	a4,0x204
1c00e050:	08c14783          	lbu	a5,140(sp)
1c00e054:	0ff7f793          	andi	a5,a5,255
1c00e058:	f3ed                	bnez	a5,1c00e03a <__rt_io_lock+0x40>
1c00e05a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e05e:	03c76783          	p.elw	a5,60(a4)
1c00e062:	00d72223          	sw	a3,4(a4)
1c00e066:	b7ed                	j	1c00e050 <__rt_io_lock+0x56>
1c00e068:	8082                	ret

1c00e06a <__rt_putc_host_cluster_req>:
1c00e06a:	1141                	addi	sp,sp,-16
1c00e06c:	c422                	sw	s0,8(sp)
1c00e06e:	c606                	sw	ra,12(sp)
1c00e070:	842a                	mv	s0,a0
1c00e072:	08954503          	lbu	a0,137(a0)
1c00e076:	ec9ff0ef          	jal	ra,1c00df3e <__rt_do_putc_host>
1c00e07a:	08844783          	lbu	a5,136(s0)
1c00e07e:	4705                	li	a4,1
1c00e080:	08e42223          	sw	a4,132(s0)
1c00e084:	00201737          	lui	a4,0x201
1c00e088:	40b2                	lw	ra,12(sp)
1c00e08a:	4422                	lw	s0,8(sp)
1c00e08c:	04078793          	addi	a5,a5,64
1c00e090:	07da                	slli	a5,a5,0x16
1c00e092:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00e096:	0007e723          	p.sw	zero,a4(a5)
1c00e09a:	0141                	addi	sp,sp,16
1c00e09c:	8082                	ret

1c00e09e <__rt_io_unlock>:
1c00e09e:	1c0107b7          	lui	a5,0x1c010
1c00e0a2:	5147a783          	lw	a5,1300(a5) # 1c010514 <__hal_debug_struct+0x10>
1c00e0a6:	cf81                	beqz	a5,1c00e0be <__rt_io_unlock+0x20>
1c00e0a8:	1c01c7b7          	lui	a5,0x1c01c
1c00e0ac:	6447a783          	lw	a5,1604(a5) # 1c01c644 <_rt_io_uart>
1c00e0b0:	e799                	bnez	a5,1c00e0be <__rt_io_unlock+0x20>
1c00e0b2:	1c01c7b7          	lui	a5,0x1c01c
1c00e0b6:	6107a783          	lw	a5,1552(a5) # 1c01c610 <__rt_iodev>
1c00e0ba:	0427b963          	p.bneimm	a5,2,1c00e10c <__rt_io_unlock+0x6e>
1c00e0be:	7135                	addi	sp,sp,-160
1c00e0c0:	014027f3          	csrr	a5,uhartid
1c00e0c4:	cf06                	sw	ra,156(sp)
1c00e0c6:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e0ca:	02000713          	li	a4,32
1c00e0ce:	1b001537          	lui	a0,0x1b001
1c00e0d2:	00e79963          	bne	a5,a4,1c00e0e4 <__rt_io_unlock+0x46>
1c00e0d6:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00e0da:	d45fd0ef          	jal	ra,1c00be1e <__rt_fc_unlock>
1c00e0de:	40fa                	lw	ra,156(sp)
1c00e0e0:	610d                	addi	sp,sp,160
1c00e0e2:	8082                	ret
1c00e0e4:	004c                	addi	a1,sp,4
1c00e0e6:	bbc50513          	addi	a0,a0,-1092
1c00e0ea:	da1fd0ef          	jal	ra,1c00be8a <__rt_fc_cluster_unlock>
1c00e0ee:	4689                	li	a3,2
1c00e0f0:	00204737          	lui	a4,0x204
1c00e0f4:	08c14783          	lbu	a5,140(sp)
1c00e0f8:	0ff7f793          	andi	a5,a5,255
1c00e0fc:	f3ed                	bnez	a5,1c00e0de <__rt_io_unlock+0x40>
1c00e0fe:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e102:	03c76783          	p.elw	a5,60(a4)
1c00e106:	00d72223          	sw	a3,4(a4)
1c00e10a:	b7ed                	j	1c00e0f4 <__rt_io_unlock+0x56>
1c00e10c:	8082                	ret

1c00e10e <__rt_io_uart_flush.constprop.11>:
1c00e10e:	7171                	addi	sp,sp,-176
1c00e110:	d522                	sw	s0,168(sp)
1c00e112:	d706                	sw	ra,172(sp)
1c00e114:	d326                	sw	s1,164(sp)
1c00e116:	d14a                	sw	s2,160(sp)
1c00e118:	cf4e                	sw	s3,156(sp)
1c00e11a:	cd52                	sw	s4,152(sp)
1c00e11c:	1c01c437          	lui	s0,0x1c01c
1c00e120:	63c42783          	lw	a5,1596(s0) # 1c01c63c <__rt_io_pending_flush>
1c00e124:	63c40993          	addi	s3,s0,1596
1c00e128:	efad                	bnez	a5,1c00e1a2 <__rt_io_uart_flush.constprop.11+0x94>
1c00e12a:	1c010637          	lui	a2,0x1c010
1c00e12e:	50460793          	addi	a5,a2,1284 # 1c010504 <__hal_debug_struct>
1c00e132:	4f80                	lw	s0,24(a5)
1c00e134:	50460a13          	addi	s4,a2,1284
1c00e138:	cc29                	beqz	s0,1c00e192 <__rt_io_uart_flush.constprop.11+0x84>
1c00e13a:	1c01c737          	lui	a4,0x1c01c
1c00e13e:	014027f3          	csrr	a5,uhartid
1c00e142:	64472483          	lw	s1,1604(a4) # 1c01c644 <_rt_io_uart>
1c00e146:	ca5797b3          	p.extractu	a5,a5,5,5
1c00e14a:	02000713          	li	a4,32
1c00e14e:	1c010937          	lui	s2,0x1c010
1c00e152:	06e79263          	bne	a5,a4,1c00e1b6 <__rt_io_uart_flush.constprop.11+0xa8>
1c00e156:	1c00e5b7          	lui	a1,0x1c00e
1c00e15a:	4785                	li	a5,1
1c00e15c:	50460613          	addi	a2,a2,1284
1c00e160:	ee058593          	addi	a1,a1,-288 # 1c00dee0 <__rt_io_end_of_flush>
1c00e164:	4501                	li	a0,0
1c00e166:	00f9a023          	sw	a5,0(s3)
1c00e16a:	8a2fe0ef          	jal	ra,1c00c20c <rt_event_get>
1c00e16e:	40cc                	lw	a1,4(s1)
1c00e170:	87aa                	mv	a5,a0
1c00e172:	4701                	li	a4,0
1c00e174:	0586                	slli	a1,a1,0x1
1c00e176:	86a2                	mv	a3,s0
1c00e178:	52090613          	addi	a2,s2,1312 # 1c010520 <__hal_debug_struct+0x1c>
1c00e17c:	0585                	addi	a1,a1,1
1c00e17e:	4501                	li	a0,0
1c00e180:	dfafe0ef          	jal	ra,1c00c77a <rt_periph_copy>
1c00e184:	f1bff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e188:	0009a783          	lw	a5,0(s3)
1c00e18c:	e395                	bnez	a5,1c00e1b0 <__rt_io_uart_flush.constprop.11+0xa2>
1c00e18e:	e6dff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e192:	50ba                	lw	ra,172(sp)
1c00e194:	542a                	lw	s0,168(sp)
1c00e196:	549a                	lw	s1,164(sp)
1c00e198:	590a                	lw	s2,160(sp)
1c00e19a:	49fa                	lw	s3,156(sp)
1c00e19c:	4a6a                	lw	s4,152(sp)
1c00e19e:	614d                	addi	sp,sp,176
1c00e1a0:	8082                	ret
1c00e1a2:	efdff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e1a6:	e35ff0ef          	jal	ra,1c00dfda <rt_event_execute.isra.4.constprop.12>
1c00e1aa:	e51ff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e1ae:	bf8d                	j	1c00e120 <__rt_io_uart_flush.constprop.11+0x12>
1c00e1b0:	e2bff0ef          	jal	ra,1c00dfda <rt_event_execute.isra.4.constprop.12>
1c00e1b4:	bfd1                	j	1c00e188 <__rt_io_uart_flush.constprop.11+0x7a>
1c00e1b6:	868a                	mv	a3,sp
1c00e1b8:	8622                	mv	a2,s0
1c00e1ba:	52090593          	addi	a1,s2,1312
1c00e1be:	8526                	mv	a0,s1
1c00e1c0:	2a2010ef          	jal	ra,1c00f462 <rt_uart_cluster_write>
1c00e1c4:	4689                	li	a3,2
1c00e1c6:	00204737          	lui	a4,0x204
1c00e1ca:	08c14783          	lbu	a5,140(sp)
1c00e1ce:	0ff7f793          	andi	a5,a5,255
1c00e1d2:	c781                	beqz	a5,1c00e1da <__rt_io_uart_flush.constprop.11+0xcc>
1c00e1d4:	000a2c23          	sw	zero,24(s4)
1c00e1d8:	bf6d                	j	1c00e192 <__rt_io_uart_flush.constprop.11+0x84>
1c00e1da:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e1de:	03c76783          	p.elw	a5,60(a4)
1c00e1e2:	00d72223          	sw	a3,4(a4)
1c00e1e6:	b7d5                	j	1c00e1ca <__rt_io_uart_flush.constprop.11+0xbc>

1c00e1e8 <__rt_io_uart_wait_pending>:
1c00e1e8:	7135                	addi	sp,sp,-160
1c00e1ea:	cd22                	sw	s0,152(sp)
1c00e1ec:	cf06                	sw	ra,156(sp)
1c00e1ee:	1c01c437          	lui	s0,0x1c01c
1c00e1f2:	63c42783          	lw	a5,1596(s0) # 1c01c63c <__rt_io_pending_flush>
1c00e1f6:	eb85                	bnez	a5,1c00e226 <__rt_io_uart_wait_pending+0x3e>
1c00e1f8:	1c01c437          	lui	s0,0x1c01c
1c00e1fc:	63840413          	addi	s0,s0,1592 # 1c01c638 <__rt_io_event_current>
1c00e200:	4008                	lw	a0,0(s0)
1c00e202:	cd11                	beqz	a0,1c00e21e <__rt_io_uart_wait_pending+0x36>
1c00e204:	014027f3          	csrr	a5,uhartid
1c00e208:	8795                	srai	a5,a5,0x5
1c00e20a:	f267b7b3          	p.bclr	a5,a5,25,6
1c00e20e:	02000713          	li	a4,32
1c00e212:	02e79163          	bne	a5,a4,1c00e234 <__rt_io_uart_wait_pending+0x4c>
1c00e216:	8e6fe0ef          	jal	ra,1c00c2fc <rt_event_wait>
1c00e21a:	00042023          	sw	zero,0(s0)
1c00e21e:	40fa                	lw	ra,156(sp)
1c00e220:	446a                	lw	s0,152(sp)
1c00e222:	610d                	addi	sp,sp,160
1c00e224:	8082                	ret
1c00e226:	e79ff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e22a:	db1ff0ef          	jal	ra,1c00dfda <rt_event_execute.isra.4.constprop.12>
1c00e22e:	dcdff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e232:	b7c1                	j	1c00e1f2 <__rt_io_uart_wait_pending+0xa>
1c00e234:	08f106a3          	sb	a5,141(sp)
1c00e238:	1c00e7b7          	lui	a5,0x1c00e
1c00e23c:	eee78793          	addi	a5,a5,-274 # 1c00deee <__rt_io_uart_wait_req>
1c00e240:	4705                	li	a4,1
1c00e242:	c83e                	sw	a5,16(sp)
1c00e244:	0068                	addi	a0,sp,12
1c00e246:	1c01c7b7          	lui	a5,0x1c01c
1c00e24a:	5ae7a023          	sw	a4,1440(a5) # 1c01c5a0 <__rt_io_event+0x24>
1c00e24e:	08010623          	sb	zero,140(sp)
1c00e252:	d802                	sw	zero,48(sp)
1c00e254:	da02                	sw	zero,52(sp)
1c00e256:	ca2a                	sw	a0,20(sp)
1c00e258:	edffe0ef          	jal	ra,1c00d136 <__rt_cluster_push_fc_event>
1c00e25c:	4689                	li	a3,2
1c00e25e:	00204737          	lui	a4,0x204
1c00e262:	08c14783          	lbu	a5,140(sp)
1c00e266:	0ff7f793          	andi	a5,a5,255
1c00e26a:	fbd5                	bnez	a5,1c00e21e <__rt_io_uart_wait_pending+0x36>
1c00e26c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00e270:	03c76783          	p.elw	a5,60(a4)
1c00e274:	00d72223          	sw	a3,4(a4)
1c00e278:	b7ed                	j	1c00e262 <__rt_io_uart_wait_pending+0x7a>

1c00e27a <__rt_io_stop>:
1c00e27a:	1141                	addi	sp,sp,-16
1c00e27c:	c422                	sw	s0,8(sp)
1c00e27e:	1c01c437          	lui	s0,0x1c01c
1c00e282:	c606                	sw	ra,12(sp)
1c00e284:	64440413          	addi	s0,s0,1604 # 1c01c644 <_rt_io_uart>
1c00e288:	f61ff0ef          	jal	ra,1c00e1e8 <__rt_io_uart_wait_pending>
1c00e28c:	4008                	lw	a0,0(s0)
1c00e28e:	4581                	li	a1,0
1c00e290:	184010ef          	jal	ra,1c00f414 <rt_uart_close>
1c00e294:	40b2                	lw	ra,12(sp)
1c00e296:	00042023          	sw	zero,0(s0)
1c00e29a:	4422                	lw	s0,8(sp)
1c00e29c:	4501                	li	a0,0
1c00e29e:	0141                	addi	sp,sp,16
1c00e2a0:	8082                	ret

1c00e2a2 <strcmp>:
1c00e2a2:	0015478b          	p.lbu	a5,1(a0!)
1c00e2a6:	0015c70b          	p.lbu	a4,1(a1!)
1c00e2aa:	c399                	beqz	a5,1c00e2b0 <strcmp+0xe>
1c00e2ac:	fee78be3          	beq	a5,a4,1c00e2a2 <strcmp>
1c00e2b0:	40e78533          	sub	a0,a5,a4
1c00e2b4:	8082                	ret

1c00e2b6 <strncmp>:
1c00e2b6:	ce11                	beqz	a2,1c00e2d2 <strncmp+0x1c>
1c00e2b8:	962a                	add	a2,a2,a0
1c00e2ba:	0015478b          	p.lbu	a5,1(a0!)
1c00e2be:	0015c70b          	p.lbu	a4,1(a1!)
1c00e2c2:	00e79563          	bne	a5,a4,1c00e2cc <strncmp+0x16>
1c00e2c6:	00c50363          	beq	a0,a2,1c00e2cc <strncmp+0x16>
1c00e2ca:	fbe5                	bnez	a5,1c00e2ba <strncmp+0x4>
1c00e2cc:	40e78533          	sub	a0,a5,a4
1c00e2d0:	8082                	ret
1c00e2d2:	4501                	li	a0,0
1c00e2d4:	8082                	ret

1c00e2d6 <strlen>:
1c00e2d6:	87aa                	mv	a5,a0
1c00e2d8:	0007c703          	lbu	a4,0(a5)
1c00e2dc:	00178693          	addi	a3,a5,1
1c00e2e0:	e701                	bnez	a4,1c00e2e8 <strlen+0x12>
1c00e2e2:	40a78533          	sub	a0,a5,a0
1c00e2e6:	8082                	ret
1c00e2e8:	87b6                	mv	a5,a3
1c00e2ea:	b7fd                	j	1c00e2d8 <strlen+0x2>

1c00e2ec <memset>:
1c00e2ec:	962a                	add	a2,a2,a0
1c00e2ee:	87aa                	mv	a5,a0
1c00e2f0:	00c79363          	bne	a5,a2,1c00e2f6 <memset+0xa>
1c00e2f4:	8082                	ret
1c00e2f6:	00b780ab          	p.sb	a1,1(a5!)
1c00e2fa:	bfdd                	j	1c00e2f0 <memset+0x4>

1c00e2fc <memcpy>:
1c00e2fc:	00a5e733          	or	a4,a1,a0
1c00e300:	fa273733          	p.bclr	a4,a4,29,2
1c00e304:	87aa                	mv	a5,a0
1c00e306:	c709                	beqz	a4,1c00e310 <memcpy+0x14>
1c00e308:	962e                	add	a2,a2,a1
1c00e30a:	00c59f63          	bne	a1,a2,1c00e328 <memcpy+0x2c>
1c00e30e:	8082                	ret
1c00e310:	fa263733          	p.bclr	a4,a2,29,2
1c00e314:	fb75                	bnez	a4,1c00e308 <memcpy+0xc>
1c00e316:	962e                	add	a2,a2,a1
1c00e318:	00c59363          	bne	a1,a2,1c00e31e <memcpy+0x22>
1c00e31c:	8082                	ret
1c00e31e:	0045a70b          	p.lw	a4,4(a1!)
1c00e322:	00e7a22b          	p.sw	a4,4(a5!)
1c00e326:	bfcd                	j	1c00e318 <memcpy+0x1c>
1c00e328:	0015c70b          	p.lbu	a4,1(a1!)
1c00e32c:	00e780ab          	p.sb	a4,1(a5!)
1c00e330:	bfe9                	j	1c00e30a <memcpy+0xe>

1c00e332 <strchr>:
1c00e332:	0ff5f593          	andi	a1,a1,255
1c00e336:	00054703          	lbu	a4,0(a0)
1c00e33a:	87aa                	mv	a5,a0
1c00e33c:	0505                	addi	a0,a0,1
1c00e33e:	00b70563          	beq	a4,a1,1c00e348 <strchr+0x16>
1c00e342:	fb75                	bnez	a4,1c00e336 <strchr+0x4>
1c00e344:	c191                	beqz	a1,1c00e348 <strchr+0x16>
1c00e346:	4781                	li	a5,0
1c00e348:	853e                	mv	a0,a5
1c00e34a:	8082                	ret

1c00e34c <__rt_putc_debug_bridge>:
1c00e34c:	1141                	addi	sp,sp,-16
1c00e34e:	c422                	sw	s0,8(sp)
1c00e350:	1c010437          	lui	s0,0x1c010
1c00e354:	c226                	sw	s1,4(sp)
1c00e356:	c606                	sw	ra,12(sp)
1c00e358:	84aa                	mv	s1,a0
1c00e35a:	50440413          	addi	s0,s0,1284 # 1c010504 <__hal_debug_struct>
1c00e35e:	485c                	lw	a5,20(s0)
1c00e360:	c791                	beqz	a5,1c00e36c <__rt_putc_debug_bridge+0x20>
1c00e362:	06400513          	li	a0,100
1c00e366:	a72fe0ef          	jal	ra,1c00c5d8 <rt_time_wait_us>
1c00e36a:	bfd5                	j	1c00e35e <__rt_putc_debug_bridge+0x12>
1c00e36c:	4c1c                	lw	a5,24(s0)
1c00e36e:	00178713          	addi	a4,a5,1
1c00e372:	97a2                	add	a5,a5,s0
1c00e374:	00978e23          	sb	s1,28(a5)
1c00e378:	cc18                	sw	a4,24(s0)
1c00e37a:	4c14                	lw	a3,24(s0)
1c00e37c:	08000793          	li	a5,128
1c00e380:	00f68463          	beq	a3,a5,1c00e388 <__rt_putc_debug_bridge+0x3c>
1c00e384:	00a4b663          	p.bneimm	s1,10,1c00e390 <__rt_putc_debug_bridge+0x44>
1c00e388:	c701                	beqz	a4,1c00e390 <__rt_putc_debug_bridge+0x44>
1c00e38a:	c858                	sw	a4,20(s0)
1c00e38c:	00042c23          	sw	zero,24(s0)
1c00e390:	4c1c                	lw	a5,24(s0)
1c00e392:	e799                	bnez	a5,1c00e3a0 <__rt_putc_debug_bridge+0x54>
1c00e394:	4422                	lw	s0,8(sp)
1c00e396:	40b2                	lw	ra,12(sp)
1c00e398:	4492                	lw	s1,4(sp)
1c00e39a:	0141                	addi	sp,sp,16
1c00e39c:	ccdfd06f          	j	1c00c068 <__rt_bridge_printf_flush>
1c00e3a0:	40b2                	lw	ra,12(sp)
1c00e3a2:	4422                	lw	s0,8(sp)
1c00e3a4:	4492                	lw	s1,4(sp)
1c00e3a6:	0141                	addi	sp,sp,16
1c00e3a8:	8082                	ret

1c00e3aa <__rt_putc_uart>:
1c00e3aa:	1101                	addi	sp,sp,-32
1c00e3ac:	c62a                	sw	a0,12(sp)
1c00e3ae:	ce06                	sw	ra,28(sp)
1c00e3b0:	e39ff0ef          	jal	ra,1c00e1e8 <__rt_io_uart_wait_pending>
1c00e3b4:	1c0107b7          	lui	a5,0x1c010
1c00e3b8:	50478793          	addi	a5,a5,1284 # 1c010504 <__hal_debug_struct>
1c00e3bc:	4f94                	lw	a3,24(a5)
1c00e3be:	4532                	lw	a0,12(sp)
1c00e3c0:	00168713          	addi	a4,a3,1
1c00e3c4:	cf98                	sw	a4,24(a5)
1c00e3c6:	97b6                	add	a5,a5,a3
1c00e3c8:	00a78e23          	sb	a0,28(a5)
1c00e3cc:	08000793          	li	a5,128
1c00e3d0:	00f70463          	beq	a4,a5,1c00e3d8 <__rt_putc_uart+0x2e>
1c00e3d4:	00a53663          	p.bneimm	a0,10,1c00e3e0 <__rt_putc_uart+0x36>
1c00e3d8:	40f2                	lw	ra,28(sp)
1c00e3da:	6105                	addi	sp,sp,32
1c00e3dc:	d33ff06f          	j	1c00e10e <__rt_io_uart_flush.constprop.11>
1c00e3e0:	40f2                	lw	ra,28(sp)
1c00e3e2:	6105                	addi	sp,sp,32
1c00e3e4:	8082                	ret

1c00e3e6 <tfp_putc.isra.9>:
1c00e3e6:	1c01c7b7          	lui	a5,0x1c01c
1c00e3ea:	6107a783          	lw	a5,1552(a5) # 1c01c610 <__rt_iodev>
1c00e3ee:	7135                	addi	sp,sp,-160
1c00e3f0:	cf06                	sw	ra,156(sp)
1c00e3f2:	0427bf63          	p.bneimm	a5,2,1c00e450 <tfp_putc.isra.9+0x6a>
1c00e3f6:	014027f3          	csrr	a5,uhartid
1c00e3fa:	8795                	srai	a5,a5,0x5
1c00e3fc:	f267b7b3          	p.bclr	a5,a5,25,6
1c00e400:	02000713          	li	a4,32
1c00e404:	00e79763          	bne	a5,a4,1c00e412 <tfp_putc.isra.9+0x2c>
1c00e408:	b37ff0ef          	jal	ra,1c00df3e <__rt_do_putc_host>
1c00e40c:	40fa                	lw	ra,156(sp)
1c00e40e:	610d                	addi	sp,sp,160
1c00e410:	8082                	ret
1c00e412:	08f10623          	sb	a5,140(sp)
1c00e416:	1c00e7b7          	lui	a5,0x1c00e
1c00e41a:	4705                	li	a4,1
1c00e41c:	06a78793          	addi	a5,a5,106 # 1c00e06a <__rt_putc_host_cluster_req>
1c00e420:	08a106a3          	sb	a0,141(sp)
1c00e424:	0048                	addi	a0,sp,4
1c00e426:	d63a                	sw	a4,44(sp)
1c00e428:	c43e                	sw	a5,8(sp)
1c00e42a:	c502                	sw	zero,136(sp)
1c00e42c:	ce02                	sw	zero,28(sp)
1c00e42e:	c62a                	sw	a0,12(sp)
1c00e430:	00010c23          	sb	zero,24(sp)
1c00e434:	d03fe0ef          	jal	ra,1c00d136 <__rt_cluster_push_fc_event>
1c00e438:	4709                	li	a4,2
1c00e43a:	002047b7          	lui	a5,0x204
1c00e43e:	46aa                	lw	a3,136(sp)
1c00e440:	f6f1                	bnez	a3,1c00e40c <tfp_putc.isra.9+0x26>
1c00e442:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00e446:	03c7e683          	p.elw	a3,60(a5)
1c00e44a:	00e7a223          	sw	a4,4(a5)
1c00e44e:	bfc5                	j	1c00e43e <tfp_putc.isra.9+0x58>
1c00e450:	1c01c7b7          	lui	a5,0x1c01c
1c00e454:	6447a783          	lw	a5,1604(a5) # 1c01c644 <_rt_io_uart>
1c00e458:	c781                	beqz	a5,1c00e460 <tfp_putc.isra.9+0x7a>
1c00e45a:	f51ff0ef          	jal	ra,1c00e3aa <__rt_putc_uart>
1c00e45e:	b77d                	j	1c00e40c <tfp_putc.isra.9+0x26>
1c00e460:	1c0107b7          	lui	a5,0x1c010
1c00e464:	5147a783          	lw	a5,1300(a5) # 1c010514 <__hal_debug_struct+0x10>
1c00e468:	c395                	beqz	a5,1c00e48c <tfp_putc.isra.9+0xa6>
1c00e46a:	014027f3          	csrr	a5,uhartid
1c00e46e:	00379713          	slli	a4,a5,0x3
1c00e472:	1a1106b7          	lui	a3,0x1a110
1c00e476:	ee873733          	p.bclr	a4,a4,23,8
1c00e47a:	9736                	add	a4,a4,a3
1c00e47c:	6689                	lui	a3,0x2
1c00e47e:	078a                	slli	a5,a5,0x2
1c00e480:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00e484:	8ff5                	and	a5,a5,a3
1c00e486:	00a767a3          	p.sw	a0,a5(a4)
1c00e48a:	b749                	j	1c00e40c <tfp_putc.isra.9+0x26>
1c00e48c:	ec1ff0ef          	jal	ra,1c00e34c <__rt_putc_debug_bridge>
1c00e490:	bfb5                	j	1c00e40c <tfp_putc.isra.9+0x26>

1c00e492 <puts>:
1c00e492:	1141                	addi	sp,sp,-16
1c00e494:	c422                	sw	s0,8(sp)
1c00e496:	c606                	sw	ra,12(sp)
1c00e498:	842a                	mv	s0,a0
1c00e49a:	b61ff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e49e:	0014450b          	p.lbu	a0,1(s0!)
1c00e4a2:	c501                	beqz	a0,1c00e4aa <puts+0x18>
1c00e4a4:	f43ff0ef          	jal	ra,1c00e3e6 <tfp_putc.isra.9>
1c00e4a8:	bfdd                	j	1c00e49e <puts+0xc>
1c00e4aa:	4529                	li	a0,10
1c00e4ac:	f3bff0ef          	jal	ra,1c00e3e6 <tfp_putc.isra.9>
1c00e4b0:	befff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e4b4:	40b2                	lw	ra,12(sp)
1c00e4b6:	4422                	lw	s0,8(sp)
1c00e4b8:	4501                	li	a0,0
1c00e4ba:	0141                	addi	sp,sp,16
1c00e4bc:	8082                	ret

1c00e4be <fputc_locked>:
1c00e4be:	1141                	addi	sp,sp,-16
1c00e4c0:	c422                	sw	s0,8(sp)
1c00e4c2:	842a                	mv	s0,a0
1c00e4c4:	0ff57513          	andi	a0,a0,255
1c00e4c8:	c606                	sw	ra,12(sp)
1c00e4ca:	f1dff0ef          	jal	ra,1c00e3e6 <tfp_putc.isra.9>
1c00e4ce:	8522                	mv	a0,s0
1c00e4d0:	40b2                	lw	ra,12(sp)
1c00e4d2:	4422                	lw	s0,8(sp)
1c00e4d4:	0141                	addi	sp,sp,16
1c00e4d6:	8082                	ret

1c00e4d8 <fputc>:
1c00e4d8:	1141                	addi	sp,sp,-16
1c00e4da:	c606                	sw	ra,12(sp)
1c00e4dc:	c422                	sw	s0,8(sp)
1c00e4de:	842a                	mv	s0,a0
1c00e4e0:	b1bff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e4e4:	0ff47513          	andi	a0,s0,255
1c00e4e8:	effff0ef          	jal	ra,1c00e3e6 <tfp_putc.isra.9>
1c00e4ec:	1c0107b7          	lui	a5,0x1c010
1c00e4f0:	5147a783          	lw	a5,1300(a5) # 1c010514 <__hal_debug_struct+0x10>
1c00e4f4:	e399                	bnez	a5,1c00e4fa <fputc+0x22>
1c00e4f6:	b73fd0ef          	jal	ra,1c00c068 <__rt_bridge_printf_flush>
1c00e4fa:	ba5ff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e4fe:	8522                	mv	a0,s0
1c00e500:	40b2                	lw	ra,12(sp)
1c00e502:	4422                	lw	s0,8(sp)
1c00e504:	0141                	addi	sp,sp,16
1c00e506:	8082                	ret

1c00e508 <putchar>:
1c00e508:	4589                	li	a1,2
1c00e50a:	fcfff06f          	j	1c00e4d8 <fputc>

1c00e50e <_prf_locked>:
1c00e50e:	1101                	addi	sp,sp,-32
1c00e510:	ce06                	sw	ra,28(sp)
1c00e512:	c02a                	sw	a0,0(sp)
1c00e514:	c62e                	sw	a1,12(sp)
1c00e516:	c432                	sw	a2,8(sp)
1c00e518:	c236                	sw	a3,4(sp)
1c00e51a:	ae1ff0ef          	jal	ra,1c00dffa <__rt_io_lock>
1c00e51e:	4692                	lw	a3,4(sp)
1c00e520:	4622                	lw	a2,8(sp)
1c00e522:	45b2                	lw	a1,12(sp)
1c00e524:	4502                	lw	a0,0(sp)
1c00e526:	2ca1                	jal	1c00e77e <_prf>
1c00e528:	c02a                	sw	a0,0(sp)
1c00e52a:	b75ff0ef          	jal	ra,1c00e09e <__rt_io_unlock>
1c00e52e:	40f2                	lw	ra,28(sp)
1c00e530:	4502                	lw	a0,0(sp)
1c00e532:	6105                	addi	sp,sp,32
1c00e534:	8082                	ret

1c00e536 <exit>:
1c00e536:	1101                	addi	sp,sp,-32
1c00e538:	cc22                	sw	s0,24(sp)
1c00e53a:	c84a                	sw	s2,16(sp)
1c00e53c:	c62a                	sw	a0,12(sp)
1c00e53e:	ce06                	sw	ra,28(sp)
1c00e540:	ca26                	sw	s1,20(sp)
1c00e542:	e82fd0ef          	jal	ra,1c00bbc4 <__rt_deinit>
1c00e546:	4532                	lw	a0,12(sp)
1c00e548:	1a104437          	lui	s0,0x1a104
1c00e54c:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10407c>
1c00e550:	c1f54933          	p.bset	s2,a0,0,31
1c00e554:	0127a023          	sw	s2,0(a5)
1c00e558:	1c01c7b7          	lui	a5,0x1c01c
1c00e55c:	6107a783          	lw	a5,1552(a5) # 1c01c610 <__rt_iodev>
1c00e560:	0027bf63          	p.bneimm	a5,2,1c00e57e <exit+0x48>
1c00e564:	c901                	beqz	a0,1c00e574 <exit+0x3e>
1c00e566:	00020537          	lui	a0,0x20
1c00e56a:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00e56e:	cb2fd0ef          	jal	ra,1c00ba20 <semihost_exit>
1c00e572:	a001                	j	1c00e572 <exit+0x3c>
1c00e574:	00020537          	lui	a0,0x20
1c00e578:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00e57c:	bfcd                	j	1c00e56e <exit+0x38>
1c00e57e:	1c0104b7          	lui	s1,0x1c010
1c00e582:	50448493          	addi	s1,s1,1284 # 1c010504 <__hal_debug_struct>
1c00e586:	ae3fd0ef          	jal	ra,1c00c068 <__rt_bridge_printf_flush>
1c00e58a:	0124a623          	sw	s2,12(s1)
1c00e58e:	a97fd0ef          	jal	ra,1c00c024 <__rt_bridge_send_notif>
1c00e592:	449c                	lw	a5,8(s1)
1c00e594:	dff9                	beqz	a5,1c00e572 <exit+0x3c>
1c00e596:	07440413          	addi	s0,s0,116
1c00e59a:	401c                	lw	a5,0(s0)
1c00e59c:	83a5                	srli	a5,a5,0x9
1c00e59e:	f837b7b3          	p.bclr	a5,a5,28,3
1c00e5a2:	fe77bce3          	p.bneimm	a5,7,1c00e59a <exit+0x64>
1c00e5a6:	aa1fd0ef          	jal	ra,1c00c046 <__rt_bridge_clear_notif>
1c00e5aa:	b7e1                	j	1c00e572 <exit+0x3c>

1c00e5ac <abort>:
1c00e5ac:	1141                	addi	sp,sp,-16
1c00e5ae:	557d                	li	a0,-1
1c00e5b0:	c606                	sw	ra,12(sp)
1c00e5b2:	f85ff0ef          	jal	ra,1c00e536 <exit>

1c00e5b6 <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00e5b6:	1c01c7b7          	lui	a5,0x1c01c
1c00e5ba:	6407a023          	sw	zero,1600(a5) # 1c01c640 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00e5be:	1b0017b7          	lui	a5,0x1b001
1c00e5c2:	bbc78793          	addi	a5,a5,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00e5c6:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00e5ca:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00e5ce:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00e5d2:	1c01c7b7          	lui	a5,0x1c01c
1c00e5d6:	6407a223          	sw	zero,1604(a5) # 1c01c644 <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00e5da:	1c01c7b7          	lui	a5,0x1c01c
1c00e5de:	6207ac23          	sw	zero,1592(a5) # 1c01c638 <__rt_io_event_current>
  return __rt_iodev;
1c00e5e2:	1c01c7b7          	lui	a5,0x1c01c

  if (rt_iodev() == RT_IODEV_UART)
1c00e5e6:	6107a783          	lw	a5,1552(a5) # 1c01c610 <__rt_iodev>
1c00e5ea:	0217be63          	p.bneimm	a5,1,1c00e626 <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00e5ee:	1c00e5b7          	lui	a1,0x1c00e
{
1c00e5f2:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00e5f4:	4601                	li	a2,0
1c00e5f6:	f8058593          	addi	a1,a1,-128 # 1c00df80 <__rt_io_start>
1c00e5fa:	4501                	li	a0,0
{
1c00e5fc:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00e5fe:	f5efd0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00e602:	1c00e5b7          	lui	a1,0x1c00e
1c00e606:	27a58593          	addi	a1,a1,634 # 1c00e27a <__rt_io_stop>
1c00e60a:	4601                	li	a2,0
1c00e60c:	4505                	li	a0,1
1c00e60e:	f4efd0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00e612:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00e614:	1c01c7b7          	lui	a5,0x1c01c
1c00e618:	6207ae23          	sw	zero,1596(a5) # 1c01c63c <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00e61c:	4585                	li	a1,1
1c00e61e:	4501                	li	a0,0
}
1c00e620:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00e622:	b75fd06f          	j	1c00c196 <rt_event_alloc>
1c00e626:	8082                	ret

1c00e628 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00e628:	7139                	addi	sp,sp,-64
1c00e62a:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00e62c:	862a                	mv	a2,a0
1c00e62e:	1c00e537          	lui	a0,0x1c00e
{
1c00e632:	d22e                	sw	a1,36(sp)
1c00e634:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00e636:	4589                	li	a1,2
	va_start(vargs, format);
1c00e638:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00e63a:	4be50513          	addi	a0,a0,1214 # 1c00e4be <fputc_locked>
{
1c00e63e:	ce06                	sw	ra,28(sp)
1c00e640:	d83a                	sw	a4,48(sp)
1c00e642:	da3e                	sw	a5,52(sp)
1c00e644:	dc42                	sw	a6,56(sp)
1c00e646:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00e648:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00e64a:	ec5ff0ef          	jal	ra,1c00e50e <_prf_locked>
	va_end(vargs);

	return r;
}
1c00e64e:	40f2                	lw	ra,28(sp)
1c00e650:	6121                	addi	sp,sp,64
1c00e652:	8082                	ret

1c00e654 <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00e654:	7179                	addi	sp,sp,-48
1c00e656:	d422                	sw	s0,40(sp)
1c00e658:	d226                	sw	s1,36(sp)
1c00e65a:	ce4e                	sw	s3,28(sp)
1c00e65c:	cc52                	sw	s4,24(sp)
1c00e65e:	ca56                	sw	s5,20(sp)
1c00e660:	c85a                	sw	s6,16(sp)
1c00e662:	d606                	sw	ra,44(sp)
1c00e664:	d04a                	sw	s2,32(sp)
1c00e666:	c65e                	sw	s7,12(sp)
1c00e668:	84aa                	mv	s1,a0
1c00e66a:	89ae                	mv	s3,a1
1c00e66c:	8a32                	mv	s4,a2
1c00e66e:	8ab6                	mv	s5,a3
1c00e670:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00e672:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00e674:	8656                	mv	a2,s5
1c00e676:	4681                	li	a3,0
1c00e678:	854e                	mv	a0,s3
1c00e67a:	85d2                	mv	a1,s4
1c00e67c:	ab4f20ef          	jal	ra,1c000930 <__umoddi3>
		n /= base;
1c00e680:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00e682:	892a                	mv	s2,a0
		n /= base;
1c00e684:	8656                	mv	a2,s5
1c00e686:	854e                	mv	a0,s3
1c00e688:	4681                	li	a3,0
1c00e68a:	f6bf10ef          	jal	ra,1c0005f4 <__udivdi3>
1c00e68e:	89aa                	mv	s3,a0
1c00e690:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00e692:	02700713          	li	a4,39
1c00e696:	012b6363          	bltu	s6,s2,1c00e69c <_to_x+0x48>
1c00e69a:	4701                	li	a4,0
1c00e69c:	03090913          	addi	s2,s2,48
1c00e6a0:	974a                	add	a4,a4,s2
1c00e6a2:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00e6a6:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00e6a8:	00140793          	addi	a5,s0,1
	} while (n);
1c00e6ac:	e195                	bnez	a1,1c00e6d0 <_to_x+0x7c>

	*buf = 0;
1c00e6ae:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00e6b2:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00e6b6:	0084ef63          	bltu	s1,s0,1c00e6d4 <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00e6ba:	50b2                	lw	ra,44(sp)
1c00e6bc:	5422                	lw	s0,40(sp)
1c00e6be:	5492                	lw	s1,36(sp)
1c00e6c0:	5902                	lw	s2,32(sp)
1c00e6c2:	49f2                	lw	s3,28(sp)
1c00e6c4:	4a62                	lw	s4,24(sp)
1c00e6c6:	4ad2                	lw	s5,20(sp)
1c00e6c8:	4b42                	lw	s6,16(sp)
1c00e6ca:	4bb2                	lw	s7,12(sp)
1c00e6cc:	6145                	addi	sp,sp,48
1c00e6ce:	8082                	ret
1c00e6d0:	843e                	mv	s0,a5
1c00e6d2:	b74d                	j	1c00e674 <_to_x+0x20>
		*buf = *start;
1c00e6d4:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00e6d8:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00e6dc:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00e6e0:	00f480ab          	p.sb	a5,1(s1!)
1c00e6e4:	bfc9                	j	1c00e6b6 <_to_x+0x62>

1c00e6e6 <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00e6e6:	411c                	lw	a5,0(a0)
1c00e6e8:	4154                	lw	a3,4(a0)
1c00e6ea:	fc17b733          	p.bclr	a4,a5,30,1
1c00e6ee:	01f69613          	slli	a2,a3,0x1f
1c00e6f2:	8385                	srli	a5,a5,0x1
1c00e6f4:	8fd1                	or	a5,a5,a2
1c00e6f6:	97ba                	add	a5,a5,a4
1c00e6f8:	8285                	srli	a3,a3,0x1
1c00e6fa:	00e7b733          	sltu	a4,a5,a4
1c00e6fe:	9736                	add	a4,a4,a3
1c00e700:	c11c                	sw	a5,0(a0)
1c00e702:	c158                	sw	a4,4(a0)
}
1c00e704:	8082                	ret

1c00e706 <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00e706:	4118                	lw	a4,0(a0)
1c00e708:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00e70a:	4615                	li	a2,5
	rem += 2U;
1c00e70c:	00270793          	addi	a5,a4,2
1c00e710:	00e7b733          	sltu	a4,a5,a4
1c00e714:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00e716:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00e71a:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00e71e:	01d71693          	slli	a3,a4,0x1d
1c00e722:	0037d713          	srli	a4,a5,0x3
1c00e726:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00e728:	02c75733          	divu	a4,a4,a2
1c00e72c:	01d75693          	srli	a3,a4,0x1d
1c00e730:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00e732:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00e736:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00e738:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00e73c:	973e                	add	a4,a4,a5
1c00e73e:	00f737b3          	sltu	a5,a4,a5
1c00e742:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00e744:	c118                	sw	a4,0(a0)
1c00e746:	c15c                	sw	a5,4(a0)
}
1c00e748:	8082                	ret

1c00e74a <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00e74a:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00e74c:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00e750:	02f05563          	blez	a5,1c00e77a <_get_digit+0x30>
		*digit_count -= 1;
1c00e754:	17fd                	addi	a5,a5,-1
1c00e756:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00e758:	411c                	lw	a5,0(a0)
1c00e75a:	4729                	li	a4,10
1c00e75c:	4150                	lw	a2,4(a0)
1c00e75e:	02f706b3          	mul	a3,a4,a5
1c00e762:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00e766:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00e768:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00e76c:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00e770:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00e774:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00e778:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00e77a:	853a                	mv	a0,a4
1c00e77c:	8082                	ret

1c00e77e <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00e77e:	7135                	addi	sp,sp,-160
1c00e780:	c94a                	sw	s2,144(sp)
1c00e782:	c74e                	sw	s3,140(sp)
1c00e784:	c15a                	sw	s6,128(sp)
1c00e786:	dede                	sw	s7,124(sp)
1c00e788:	cf06                	sw	ra,156(sp)
1c00e78a:	cd22                	sw	s0,152(sp)
1c00e78c:	cb26                	sw	s1,148(sp)
1c00e78e:	c552                	sw	s4,136(sp)
1c00e790:	c356                	sw	s5,132(sp)
1c00e792:	dce2                	sw	s8,120(sp)
1c00e794:	dae6                	sw	s9,116(sp)
1c00e796:	d8ea                	sw	s10,112(sp)
1c00e798:	d6ee                	sw	s11,108(sp)
1c00e79a:	8b2a                	mv	s6,a0
1c00e79c:	8bae                	mv	s7,a1
1c00e79e:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00e7a0:	4981                	li	s3,0

	while ((c = *format++)) {
1c00e7a2:	00064503          	lbu	a0,0(a2)
1c00e7a6:	00160c13          	addi	s8,a2,1
1c00e7aa:	c911                	beqz	a0,1c00e7be <_prf+0x40>
		if (c != '%') {
1c00e7ac:	02500793          	li	a5,37
1c00e7b0:	14f50563          	beq	a0,a5,1c00e8fa <_prf+0x17c>
			PUTC(c);
1c00e7b4:	85de                	mv	a1,s7
1c00e7b6:	9b02                	jalr	s6
1c00e7b8:	13f53fe3          	p.bneimm	a0,-1,1c00f0f6 <_prf+0x978>
1c00e7bc:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00e7be:	40fa                	lw	ra,156(sp)
1c00e7c0:	446a                	lw	s0,152(sp)
1c00e7c2:	854e                	mv	a0,s3
1c00e7c4:	44da                	lw	s1,148(sp)
1c00e7c6:	494a                	lw	s2,144(sp)
1c00e7c8:	49ba                	lw	s3,140(sp)
1c00e7ca:	4a2a                	lw	s4,136(sp)
1c00e7cc:	4a9a                	lw	s5,132(sp)
1c00e7ce:	4b0a                	lw	s6,128(sp)
1c00e7d0:	5bf6                	lw	s7,124(sp)
1c00e7d2:	5c66                	lw	s8,120(sp)
1c00e7d4:	5cd6                	lw	s9,116(sp)
1c00e7d6:	5d46                	lw	s10,112(sp)
1c00e7d8:	5db6                	lw	s11,108(sp)
1c00e7da:	610d                	addi	sp,sp,160
1c00e7dc:	8082                	ret
				switch (c) {
1c00e7de:	108d8663          	beq	s11,s0,1c00e8ea <_prf+0x16c>
1c00e7e2:	0fb46863          	bltu	s0,s11,1c00e8d2 <_prf+0x154>
1c00e7e6:	fc0d8ce3          	beqz	s11,1c00e7be <_prf+0x40>
1c00e7ea:	0ecd8d63          	beq	s11,a2,1c00e8e4 <_prf+0x166>
					fplus = true;
1c00e7ee:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00e7f0:	000c4d83          	lbu	s11,0(s8)
1c00e7f4:	1c010737          	lui	a4,0x1c010
1c00e7f8:	19c70513          	addi	a0,a4,412 # 1c01019c <__hyper_pad+0x98>
1c00e7fc:	85ee                	mv	a1,s11
1c00e7fe:	c232                	sw	a2,4(sp)
1c00e800:	b33ff0ef          	jal	ra,1c00e332 <strchr>
1c00e804:	001c0a13          	addi	s4,s8,1
1c00e808:	4612                	lw	a2,4(sp)
1c00e80a:	f971                	bnez	a0,1c00e7de <_prf+0x60>
			if (c == '*') {
1c00e80c:	02a00713          	li	a4,42
1c00e810:	10ed9563          	bne	s11,a4,1c00e91a <_prf+0x19c>
				width = va_arg(vargs, int);
1c00e814:	00092c83          	lw	s9,0(s2)
1c00e818:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00e81c:	000cd663          	bgez	s9,1c00e828 <_prf+0xaa>
					fminus = true;
1c00e820:	4785                	li	a5,1
					width = -width;
1c00e822:	41900cb3          	neg	s9,s9
					fminus = true;
1c00e826:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00e828:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00e82c:	893a                	mv	s2,a4
				c = *format++;
1c00e82e:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00e832:	02e00713          	li	a4,46
			precision = -1;
1c00e836:	547d                	li	s0,-1
			if (c == '.') {
1c00e838:	00ed9f63          	bne	s11,a4,1c00e856 <_prf+0xd8>
				if (c == '*') {
1c00e83c:	000a4703          	lbu	a4,0(s4)
1c00e840:	02a00793          	li	a5,42
1c00e844:	10f71e63          	bne	a4,a5,1c00e960 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00e848:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00e84c:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00e84e:	0911                	addi	s2,s2,4
				c = *format++;
1c00e850:	000a4d83          	lbu	s11,0(s4)
1c00e854:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00e856:	1c010737          	lui	a4,0x1c010
1c00e85a:	85ee                	mv	a1,s11
1c00e85c:	1a470513          	addi	a0,a4,420 # 1c0101a4 <__hyper_pad+0xa0>
1c00e860:	84ee                	mv	s1,s11
1c00e862:	ad1ff0ef          	jal	ra,1c00e332 <strchr>
1c00e866:	10050e63          	beqz	a0,1c00e982 <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00e86a:	06c00693          	li	a3,108
				c = *format++;
1c00e86e:	001a0c13          	addi	s8,s4,1
1c00e872:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00e876:	0ed49963          	bne	s1,a3,1c00e968 <_prf+0x1ea>
1c00e87a:	009d9863          	bne	s11,s1,1c00e88a <_prf+0x10c>
					c = *format++;
1c00e87e:	001a4d83          	lbu	s11,1(s4)
1c00e882:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00e886:	04c00493          	li	s1,76
			switch (c) {
1c00e88a:	06700693          	li	a3,103
1c00e88e:	17b6e263          	bltu	a3,s11,1c00e9f2 <_prf+0x274>
1c00e892:	06500693          	li	a3,101
1c00e896:	32ddfc63          	bleu	a3,s11,1c00ebce <_prf+0x450>
1c00e89a:	04700693          	li	a3,71
1c00e89e:	0fb6e563          	bltu	a3,s11,1c00e988 <_prf+0x20a>
1c00e8a2:	04500713          	li	a4,69
1c00e8a6:	32edf463          	bleu	a4,s11,1c00ebce <_prf+0x450>
1c00e8aa:	f00d8ae3          	beqz	s11,1c00e7be <_prf+0x40>
1c00e8ae:	02500713          	li	a4,37
1c00e8b2:	02ed8de3          	beq	s11,a4,1c00f0ec <_prf+0x96e>
				PUTC('%');
1c00e8b6:	85de                	mv	a1,s7
1c00e8b8:	02500513          	li	a0,37
1c00e8bc:	9b02                	jalr	s6
1c00e8be:	eff52fe3          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
				PUTC(c);
1c00e8c2:	85de                	mv	a1,s7
1c00e8c4:	856e                	mv	a0,s11
1c00e8c6:	9b02                	jalr	s6
1c00e8c8:	eff52ae3          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
				count += 2;
1c00e8cc:	0989                	addi	s3,s3,2
1c00e8ce:	02b0006f          	j	1c00f0f8 <_prf+0x97a>
				switch (c) {
1c00e8d2:	039d8163          	beq	s11,s9,1c00e8f4 <_prf+0x176>
1c00e8d6:	009d8c63          	beq	s11,s1,1c00e8ee <_prf+0x170>
1c00e8da:	f1ad9ae3          	bne	s11,s10,1c00e7ee <_prf+0x70>
					fplus = true;
1c00e8de:	4705                	li	a4,1
1c00e8e0:	c63a                	sw	a4,12(sp)
					break;
1c00e8e2:	b731                	j	1c00e7ee <_prf+0x70>
					fspace = true;
1c00e8e4:	4785                	li	a5,1
1c00e8e6:	c83e                	sw	a5,16(sp)
					break;
1c00e8e8:	b719                	j	1c00e7ee <_prf+0x70>
					falt = true;
1c00e8ea:	4a85                	li	s5,1
					break;
1c00e8ec:	b709                	j	1c00e7ee <_prf+0x70>
					fzero = true;
1c00e8ee:	4705                	li	a4,1
1c00e8f0:	ce3a                	sw	a4,28(sp)
					break;
1c00e8f2:	bdf5                	j	1c00e7ee <_prf+0x70>
					fminus = true;
1c00e8f4:	4785                	li	a5,1
1c00e8f6:	cc3e                	sw	a5,24(sp)
1c00e8f8:	bddd                	j	1c00e7ee <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00e8fa:	ce02                	sw	zero,28(sp)
1c00e8fc:	c802                	sw	zero,16(sp)
1c00e8fe:	c602                	sw	zero,12(sp)
1c00e900:	cc02                	sw	zero,24(sp)
1c00e902:	4a81                	li	s5,0
				switch (c) {
1c00e904:	02300413          	li	s0,35
1c00e908:	02d00c93          	li	s9,45
1c00e90c:	03000493          	li	s1,48
1c00e910:	02b00d13          	li	s10,43
1c00e914:	02000613          	li	a2,32
1c00e918:	bde1                	j	1c00e7f0 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00e91a:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00e91e:	46a5                	li	a3,9
				width = 0;
1c00e920:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00e922:	f0e6e8e3          	bltu	a3,a4,1c00e832 <_prf+0xb4>
	while (isdigit(*p)) {
1c00e926:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00e928:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00e92a:	8a62                	mv	s4,s8
1c00e92c:	001a4d8b          	p.lbu	s11,1(s4!)
1c00e930:	fd0d8693          	addi	a3,s11,-48
1c00e934:	eed76fe3          	bltu	a4,a3,1c00e832 <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00e938:	87ee                	mv	a5,s11
1c00e93a:	42cc87b3          	p.mac	a5,s9,a2
1c00e93e:	8c52                	mv	s8,s4
1c00e940:	fd078c93          	addi	s9,a5,-48
1c00e944:	b7dd                	j	1c00e92a <_prf+0x1ac>
1c00e946:	42b407b3          	p.mac	a5,s0,a1
1c00e94a:	8a3a                	mv	s4,a4
1c00e94c:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00e950:	8752                	mv	a4,s4
1c00e952:	0017478b          	p.lbu	a5,1(a4!)
1c00e956:	fd078613          	addi	a2,a5,-48
1c00e95a:	fec6f6e3          	bleu	a2,a3,1c00e946 <_prf+0x1c8>
1c00e95e:	bdcd                	j	1c00e850 <_prf+0xd2>
	int i = 0;
1c00e960:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00e962:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00e964:	45a9                	li	a1,10
1c00e966:	b7ed                	j	1c00e950 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00e968:	06800693          	li	a3,104
1c00e96c:	f0d49fe3          	bne	s1,a3,1c00e88a <_prf+0x10c>
1c00e970:	f09d9de3          	bne	s11,s1,1c00e88a <_prf+0x10c>
					c = *format++;
1c00e974:	002a0c13          	addi	s8,s4,2
1c00e978:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00e97c:	04800493          	li	s1,72
1c00e980:	b729                	j	1c00e88a <_prf+0x10c>
1c00e982:	8c52                	mv	s8,s4
			i = 0;
1c00e984:	4481                	li	s1,0
1c00e986:	b711                	j	1c00e88a <_prf+0x10c>
			switch (c) {
1c00e988:	06300693          	li	a3,99
1c00e98c:	12dd8a63          	beq	s11,a3,1c00eac0 <_prf+0x342>
1c00e990:	09b6e163          	bltu	a3,s11,1c00ea12 <_prf+0x294>
1c00e994:	05800693          	li	a3,88
1c00e998:	f0dd9fe3          	bne	s11,a3,1c00e8b6 <_prf+0x138>
				switch (i) {
1c00e99c:	06c00693          	li	a3,108
1c00e9a0:	6cd48363          	beq	s1,a3,1c00f066 <_prf+0x8e8>
1c00e9a4:	07a00693          	li	a3,122
1c00e9a8:	6ad48f63          	beq	s1,a3,1c00f066 <_prf+0x8e8>
1c00e9ac:	04c00693          	li	a3,76
1c00e9b0:	6ad49b63          	bne	s1,a3,1c00f066 <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00e9b4:	091d                	addi	s2,s2,7
1c00e9b6:	c4093933          	p.bclr	s2,s2,2,0
1c00e9ba:	00092583          	lw	a1,0(s2)
1c00e9be:	00492603          	lw	a2,4(s2)
1c00e9c2:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00e9c6:	06f00713          	li	a4,111
1c00e9ca:	00c4                	addi	s1,sp,68
1c00e9cc:	6aed9d63          	bne	s11,a4,1c00f086 <_prf+0x908>
	if (alt_form) {
1c00e9d0:	6a0a8163          	beqz	s5,1c00f072 <_prf+0x8f4>
		*buf++ = '0';
1c00e9d4:	03000793          	li	a5,48
1c00e9d8:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00e9dc:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00e9e0:	04510513          	addi	a0,sp,69
		if (!value) {
1c00e9e4:	68079863          	bnez	a5,1c00f074 <_prf+0x8f6>
			*buf++ = 0;
1c00e9e8:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00e9ec:	4901                	li	s2,0
			return 1;
1c00e9ee:	4d85                	li	s11,1
1c00e9f0:	a069                	j	1c00ea7a <_prf+0x2fc>
			switch (c) {
1c00e9f2:	07000693          	li	a3,112
1c00e9f6:	62dd8f63          	beq	s11,a3,1c00f034 <_prf+0x8b6>
1c00e9fa:	09b6e663          	bltu	a3,s11,1c00ea86 <_prf+0x308>
1c00e9fe:	06e00693          	li	a3,110
1c00ea02:	5edd8463          	beq	s11,a3,1c00efea <_prf+0x86c>
1c00ea06:	f9b6ebe3          	bltu	a3,s11,1c00e99c <_prf+0x21e>
1c00ea0a:	06900693          	li	a3,105
1c00ea0e:	eadd94e3          	bne	s11,a3,1c00e8b6 <_prf+0x138>
				switch (i) {
1c00ea12:	06c00793          	li	a5,108
1c00ea16:	18f48563          	beq	s1,a5,1c00eba0 <_prf+0x422>
1c00ea1a:	07a00793          	li	a5,122
1c00ea1e:	18f48163          	beq	s1,a5,1c00eba0 <_prf+0x422>
1c00ea22:	04c00793          	li	a5,76
1c00ea26:	16f49d63          	bne	s1,a5,1c00eba0 <_prf+0x422>
					val = va_arg(vargs, long long);
1c00ea2a:	091d                	addi	s2,s2,7
1c00ea2c:	c4093933          	p.bclr	s2,s2,2,0
1c00ea30:	00092583          	lw	a1,0(s2)
1c00ea34:	00492a83          	lw	s5,4(s2)
1c00ea38:	00890a13          	addi	s4,s2,8
1c00ea3c:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00ea40:	160ad763          	bgez	s5,1c00ebae <_prf+0x430>
		*buf++ = '-';
1c00ea44:	02d00793          	li	a5,45
		value = -value;
1c00ea48:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00ea4c:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00ea50:	41500633          	neg	a2,s5
1c00ea54:	00b037b3          	snez	a5,a1
1c00ea58:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00ea5a:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00ea5e:	854a                	mv	a0,s2
1c00ea60:	46a9                	li	a3,10
1c00ea62:	bf3ff0ef          	jal	ra,1c00e654 <_to_x>
				if (fplus || fspace || val < 0) {
1c00ea66:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00ea68:	954a                	add	a0,a0,s2
1c00ea6a:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00ea6e:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00ea70:	e789                	bnez	a5,1c00ea7a <_prf+0x2fc>
1c00ea72:	4742                	lw	a4,16(sp)
1c00ea74:	e319                	bnez	a4,1c00ea7a <_prf+0x2fc>
1c00ea76:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00ea7a:	04045c63          	bgez	s0,1c00ead2 <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00ea7e:	4401                	li	s0,0
1c00ea80:	4a81                	li	s5,0
1c00ea82:	4681                	li	a3,0
1c00ea84:	a401                	j	1c00ec84 <_prf+0x506>
			switch (c) {
1c00ea86:	07500693          	li	a3,117
1c00ea8a:	f0dd89e3          	beq	s11,a3,1c00e99c <_prf+0x21e>
1c00ea8e:	07800693          	li	a3,120
1c00ea92:	f0dd85e3          	beq	s11,a3,1c00e99c <_prf+0x21e>
1c00ea96:	07300713          	li	a4,115
1c00ea9a:	e0ed9ee3          	bne	s11,a4,1c00e8b6 <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00ea9e:	00490a13          	addi	s4,s2,4
1c00eaa2:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00eaa6:	00045663          	bgez	s0,1c00eab2 <_prf+0x334>
					precision = INT_MAX;
1c00eaaa:	80000737          	lui	a4,0x80000
1c00eaae:	fff74413          	not	s0,a4
1c00eab2:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00eab4:	4d81                	li	s11,0
1c00eab6:	5bb41263          	bne	s0,s11,1c00f05a <_prf+0x8dc>
1c00eaba:	4901                	li	s2,0
1c00eabc:	4401                	li	s0,0
1c00eabe:	a819                	j	1c00ead4 <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00eac0:	00092783          	lw	a5,0(s2)
1c00eac4:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00eac8:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00eaca:	04f10223          	sb	a5,68(sp)
				break;
1c00eace:	4901                	li	s2,0
1c00ead0:	4401                	li	s0,0
1c00ead2:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00ead4:	41b40d33          	sub	s10,s0,s11
1c00ead8:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00eada:	4401                	li	s0,0
1c00eadc:	4a81                	li	s5,0
1c00eade:	4681                	li	a3,0
1c00eae0:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00eae4:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00eae6:	01bd0633          	add	a2,s10,s11
1c00eaea:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00eaee:	e701                	bnez	a4,1c00eaf6 <_prf+0x378>
1c00eaf0:	84e6                	mv	s1,s9
1c00eaf2:	63904263          	bgtz	s9,1c00f116 <_prf+0x998>
1c00eaf6:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00eafa:	62979463          	bne	a5,s1,1c00f122 <_prf+0x9a4>
1c00eafe:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00eb00:	14fd                	addi	s1,s1,-1
1c00eb02:	63f4bc63          	p.bneimm	s1,-1,1c00f13a <_prf+0x9bc>
			clen -= prefix;
1c00eb06:	412d84b3          	sub	s1,s11,s2
1c00eb0a:	8726                	mv	a4,s1
			if (zero.predot) {
1c00eb0c:	c295                	beqz	a3,1c00eb30 <_prf+0x3b2>
				c = *cptr;
1c00eb0e:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00eb12:	8dbe                	mv	s11,a5
1c00eb14:	00978833          	add	a6,a5,s1
1c00eb18:	4625                	li	a2,9
1c00eb1a:	fd050593          	addi	a1,a0,-48
1c00eb1e:	41b80733          	sub	a4,a6,s11
1c00eb22:	62b67863          	bleu	a1,a2,1c00f152 <_prf+0x9d4>
1c00eb26:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00eb28:	64061363          	bnez	a2,1c00f16e <_prf+0x9f0>
				clen -= zero.predot;
1c00eb2c:	8f15                	sub	a4,a4,a3
1c00eb2e:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00eb30:	020a8e63          	beqz	s5,1c00eb6c <_prf+0x3ee>
1c00eb34:	8dbe                	mv	s11,a5
1c00eb36:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00eb3a:	02e00613          	li	a2,46
					c = *cptr++;
1c00eb3e:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00eb42:	85de                	mv	a1,s7
1c00eb44:	c232                	sw	a2,4(sp)
1c00eb46:	8536                	mv	a0,a3
1c00eb48:	c036                	sw	a3,0(sp)
1c00eb4a:	c442                	sw	a6,8(sp)
1c00eb4c:	9b02                	jalr	s6
1c00eb4e:	4612                	lw	a2,4(sp)
1c00eb50:	4682                	lw	a3,0(sp)
1c00eb52:	4822                	lw	a6,8(sp)
1c00eb54:	c7f524e3          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
1c00eb58:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00eb5c:	fec691e3          	bne	a3,a2,1c00eb3e <_prf+0x3c0>
1c00eb60:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00eb62:	62d04563          	bgtz	a3,1c00f18c <_prf+0xa0e>
				clen -= zero.postdot;
1c00eb66:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00eb6a:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00eb6c:	c415                	beqz	s0,1c00eb98 <_prf+0x41a>
				c = *cptr;
1c00eb6e:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00eb72:	8dbe                	mv	s11,a5
1c00eb74:	973e                	add	a4,a4,a5
1c00eb76:	4625                	li	a2,9
1c00eb78:	02e00693          	li	a3,46
1c00eb7c:	fd050593          	addi	a1,a0,-48
1c00eb80:	41b70ab3          	sub	s5,a4,s11
1c00eb84:	62b67163          	bleu	a1,a2,1c00f1a6 <_prf+0xa28>
1c00eb88:	60d50f63          	beq	a0,a3,1c00f1a6 <_prf+0xa28>
1c00eb8c:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00eb8e:	62e04a63          	bgtz	a4,1c00f1c2 <_prf+0xa44>
				clen -= zero.trail;
1c00eb92:	408a8733          	sub	a4,s5,s0
1c00eb96:	87ee                	mv	a5,s11
1c00eb98:	843e                	mv	s0,a5
1c00eb9a:	00e78ab3          	add	s5,a5,a4
1c00eb9e:	a599                	j	1c00f1e4 <_prf+0xa66>
					val = va_arg(vargs, int);
1c00eba0:	00092583          	lw	a1,0(s2)
1c00eba4:	00490a13          	addi	s4,s2,4
1c00eba8:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00ebac:	bd41                	j	1c00ea3c <_prf+0x2be>
	} else if (fplus) {
1c00ebae:	47b2                	lw	a5,12(sp)
1c00ebb0:	c799                	beqz	a5,1c00ebbe <_prf+0x440>
		*buf++ = '+';
1c00ebb2:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00ebb6:	04f10223          	sb	a5,68(sp)
1c00ebba:	8656                	mv	a2,s5
1c00ebbc:	bd79                	j	1c00ea5a <_prf+0x2dc>
	} else if (fspace) {
1c00ebbe:	4742                	lw	a4,16(sp)
1c00ebc0:	c701                	beqz	a4,1c00ebc8 <_prf+0x44a>
		*buf++ = ' ';
1c00ebc2:	02000793          	li	a5,32
1c00ebc6:	bfc5                	j	1c00ebb6 <_prf+0x438>
	} else if (fspace) {
1c00ebc8:	8656                	mv	a2,s5
1c00ebca:	896e                	mv	s2,s11
1c00ebcc:	bd49                	j	1c00ea5e <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00ebce:	091d                	addi	s2,s2,7
1c00ebd0:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00ebd4:	00092583          	lw	a1,0(s2)
1c00ebd8:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00ebdc:	800007b7          	lui	a5,0x80000
1c00ebe0:	0155d613          	srli	a2,a1,0x15
1c00ebe4:	00b69713          	slli	a4,a3,0xb
1c00ebe8:	8f51                	or	a4,a4,a2
1c00ebea:	fff7c793          	not	a5,a5
1c00ebee:	05ae                	slli	a1,a1,0xb
1c00ebf0:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00ebf2:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00ebf6:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00ebf8:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00ebfc:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00ebfe:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00ec02:	0806d863          	bgez	a3,1c00ec92 <_prf+0x514>
		*buf++ = '-';
1c00ec06:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00ec0a:	04d10223          	sb	a3,68(sp)
1c00ec0e:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00ec12:	7ff00693          	li	a3,2047
1c00ec16:	0cd91363          	bne	s2,a3,1c00ecdc <_prf+0x55e>
		if (!fract) {
1c00ec1a:	8f4d                	or	a4,a4,a1
1c00ec1c:	fbfd8793          	addi	a5,s11,-65
1c00ec20:	00348513          	addi	a0,s1,3
1c00ec24:	eb49                	bnez	a4,1c00ecb6 <_prf+0x538>
			if (isupper(c)) {
1c00ec26:	4765                	li	a4,25
1c00ec28:	06f76f63          	bltu	a4,a5,1c00eca6 <_prf+0x528>
				*buf++ = 'I';
1c00ec2c:	6795                	lui	a5,0x5
1c00ec2e:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00ec32:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00ec36:	04600793          	li	a5,70
		return buf - start;
1c00ec3a:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00ec3e:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00ec42:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00ec46:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00ec4a:	4401                	li	s0,0
1c00ec4c:	4a81                	li	s5,0
1c00ec4e:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00ec50:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00ec52:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00ec54:	eb09                	bnez	a4,1c00ec66 <_prf+0x4e8>
1c00ec56:	47c2                	lw	a5,16(sp)
1c00ec58:	e799                	bnez	a5,1c00ec66 <_prf+0x4e8>
1c00ec5a:	04414903          	lbu	s2,68(sp)
1c00ec5e:	fd390913          	addi	s2,s2,-45
1c00ec62:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00ec66:	1098                	addi	a4,sp,96
1c00ec68:	012707b3          	add	a5,a4,s2
1c00ec6c:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00ec70:	015684b3          	add	s1,a3,s5
1c00ec74:	94a2                	add	s1,s1,s0
1c00ec76:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00ec7a:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00ec7c:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00ec80:	46f66e63          	bltu	a2,a5,1c00f0fc <_prf+0x97e>
			} else if (fzero) {
1c00ec84:	47f2                	lw	a5,28(sp)
1c00ec86:	46078b63          	beqz	a5,1c00f0fc <_prf+0x97e>
				zero_head = width - clen;
1c00ec8a:	41bc8d33          	sub	s10,s9,s11
1c00ec8e:	00dc                	addi	a5,sp,68
1c00ec90:	bd81                	j	1c00eae0 <_prf+0x362>
	} else if (fplus) {
1c00ec92:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00ec94:	02b00693          	li	a3,43
	} else if (fplus) {
1c00ec98:	fbad                	bnez	a5,1c00ec0a <_prf+0x48c>
	} else if (fspace) {
1c00ec9a:	47c2                	lw	a5,16(sp)
1c00ec9c:	00c4                	addi	s1,sp,68
1c00ec9e:	dbb5                	beqz	a5,1c00ec12 <_prf+0x494>
		*buf++ = ' ';
1c00eca0:	02000693          	li	a3,32
1c00eca4:	b79d                	j	1c00ec0a <_prf+0x48c>
				*buf++ = 'i';
1c00eca6:	679d                	lui	a5,0x7
1c00eca8:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00ecac:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00ecb0:	06600793          	li	a5,102
1c00ecb4:	b759                	j	1c00ec3a <_prf+0x4bc>
			if (isupper(c)) {
1c00ecb6:	4765                	li	a4,25
1c00ecb8:	00f76a63          	bltu	a4,a5,1c00eccc <_prf+0x54e>
				*buf++ = 'N';
1c00ecbc:	6791                	lui	a5,0x4
1c00ecbe:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00ecc2:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00ecc6:	04e00793          	li	a5,78
1c00ecca:	bf85                	j	1c00ec3a <_prf+0x4bc>
				*buf++ = 'n';
1c00eccc:	6799                	lui	a5,0x6
1c00ecce:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00ecd2:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00ecd6:	06e00793          	li	a5,110
1c00ecda:	b785                	j	1c00ec3a <_prf+0x4bc>
	if (c == 'F') {
1c00ecdc:	04600693          	li	a3,70
1c00ece0:	00dd9463          	bne	s11,a3,1c00ece8 <_prf+0x56a>
		c = 'f';
1c00ece4:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00ece8:	41f95613          	srai	a2,s2,0x1f
1c00ecec:	00b966b3          	or	a3,s2,a1
1c00ecf0:	8e59                	or	a2,a2,a4
1c00ecf2:	8ed1                	or	a3,a3,a2
1c00ecf4:	1c068263          	beqz	a3,1c00eeb8 <_prf+0x73a>
		if (exp == 0) {
1c00ecf8:	10090d63          	beqz	s2,1c00ee12 <_prf+0x694>
		fract |= HIGHBIT64;
1c00ecfc:	5752                	lw	a4,52(sp)
1c00ecfe:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00ed02:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00ed06:	8f5d                	or	a4,a4,a5
1c00ed08:	da3a                	sw	a4,52(sp)
1c00ed0a:	4d01                	li	s10,0
	while (exp <= -3) {
1c00ed0c:	5779                	li	a4,-2
1c00ed0e:	10e94f63          	blt	s2,a4,1c00ee2c <_prf+0x6ae>
	while (exp > 0) {
1c00ed12:	17204663          	bgtz	s2,1c00ee7e <_prf+0x700>
		_rlrshift(&fract);
1c00ed16:	1808                	addi	a0,sp,48
		exp++;
1c00ed18:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00ed1a:	9cdff0ef          	jal	ra,1c00e6e6 <_rlrshift>
	while (exp < (0 + 4)) {
1c00ed1e:	fe493ce3          	p.bneimm	s2,4,1c00ed16 <_prf+0x598>
	if (precision < 0) {
1c00ed22:	00045363          	bgez	s0,1c00ed28 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00ed26:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00ed28:	0dfdf713          	andi	a4,s11,223
1c00ed2c:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00ed30:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00ed32:	02d71563          	bne	a4,a3,1c00ed5c <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00ed36:	5775                	li	a4,-3
1c00ed38:	00ed4463          	blt	s10,a4,1c00ed40 <_prf+0x5c2>
1c00ed3c:	19a45163          	ble	s10,s0,1c00eebe <_prf+0x740>
			c += 'e' - 'g';
1c00ed40:	ffed8793          	addi	a5,s11,-2
1c00ed44:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00ed48:	4c040e63          	beqz	s0,1c00f224 <_prf+0xaa6>
				precision--;
1c00ed4c:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00ed4e:	4c0a9b63          	bnez	s5,1c00f224 <_prf+0xaa6>
1c00ed52:	00802933          	sgtz	s2,s0
1c00ed56:	0ff97913          	andi	s2,s2,255
1c00ed5a:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00ed5c:	06600713          	li	a4,102
1c00ed60:	4ced9363          	bne	s11,a4,1c00f226 <_prf+0xaa8>
		exp = precision + decexp;
1c00ed64:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00ed68:	06600d93          	li	s11,102
1c00ed6c:	4a075f63          	bgez	a4,1c00f22a <_prf+0xaac>
	digit_count = 16;
1c00ed70:	4741                	li	a4,16
1c00ed72:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00ed74:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00ed76:	4601                	li	a2,0
1c00ed78:	080006b7          	lui	a3,0x8000
1c00ed7c:	dc32                	sw	a2,56(sp)
1c00ed7e:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00ed80:	197d                	addi	s2,s2,-1
1c00ed82:	15f93563          	p.bneimm	s2,-1,1c00eecc <_prf+0x74e>
	fract += ltemp;
1c00ed86:	5742                	lw	a4,48(sp)
1c00ed88:	56e2                	lw	a3,56(sp)
1c00ed8a:	5652                	lw	a2,52(sp)
1c00ed8c:	55f2                	lw	a1,60(sp)
1c00ed8e:	96ba                	add	a3,a3,a4
1c00ed90:	00e6b733          	sltu	a4,a3,a4
1c00ed94:	962e                	add	a2,a2,a1
1c00ed96:	9732                	add	a4,a4,a2
1c00ed98:	da3a                	sw	a4,52(sp)
1c00ed9a:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00ed9c:	f6073733          	p.bclr	a4,a4,27,0
1c00eda0:	cb01                	beqz	a4,1c00edb0 <_prf+0x632>
		_ldiv5(&fract);
1c00eda2:	1808                	addi	a0,sp,48
1c00eda4:	963ff0ef          	jal	ra,1c00e706 <_ldiv5>
		_rlrshift(&fract);
1c00eda8:	1808                	addi	a0,sp,48
1c00edaa:	93dff0ef          	jal	ra,1c00e6e6 <_rlrshift>
		decexp++;
1c00edae:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00edb0:	06600713          	li	a4,102
1c00edb4:	16ed9163          	bne	s11,a4,1c00ef16 <_prf+0x798>
		if (decexp > 0) {
1c00edb8:	8926                	mv	s2,s1
1c00edba:	13a04963          	bgtz	s10,1c00eeec <_prf+0x76e>
			*buf++ = '0';
1c00edbe:	03000713          	li	a4,48
1c00edc2:	00e48023          	sb	a4,0(s1)
1c00edc6:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00edca:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00edcc:	120a8763          	beqz	s5,1c00eefa <_prf+0x77c>
			*buf++ = '.';
1c00edd0:	02e00593          	li	a1,46
1c00edd4:	00b90023          	sb	a1,0(s2)
1c00edd8:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00eddc:	440d0263          	beqz	s10,1c00f220 <_prf+0xaa2>
1c00ede0:	12805863          	blez	s0,1c00ef10 <_prf+0x792>
			zp->postdot = -decexp;
1c00ede4:	41a00ab3          	neg	s5,s10
1c00ede8:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00edec:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00edf0:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00edf2:	10805763          	blez	s0,1c00ef00 <_prf+0x782>
1c00edf6:	5732                	lw	a4,44(sp)
1c00edf8:	10e05463          	blez	a4,1c00ef00 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00edfc:	106c                	addi	a1,sp,44
1c00edfe:	1808                	addi	a0,sp,48
1c00ee00:	c036                	sw	a3,0(sp)
1c00ee02:	949ff0ef          	jal	ra,1c00e74a <_get_digit>
1c00ee06:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00ee0a:	147d                	addi	s0,s0,-1
1c00ee0c:	4682                	lw	a3,0(sp)
1c00ee0e:	b7d5                	j	1c00edf2 <_prf+0x674>
				exp--;
1c00ee10:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00ee12:	01f5d693          	srli	a3,a1,0x1f
1c00ee16:	0706                	slli	a4,a4,0x1
1c00ee18:	8f55                	or	a4,a4,a3
1c00ee1a:	0586                	slli	a1,a1,0x1
1c00ee1c:	fe075ae3          	bgez	a4,1c00ee10 <_prf+0x692>
1c00ee20:	d82e                	sw	a1,48(sp)
1c00ee22:	da3a                	sw	a4,52(sp)
1c00ee24:	bde1                	j	1c00ecfc <_prf+0x57e>
			_rlrshift(&fract);
1c00ee26:	1808                	addi	a0,sp,48
1c00ee28:	8bfff0ef          	jal	ra,1c00e6e6 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00ee2c:	55d2                	lw	a1,52(sp)
1c00ee2e:	33333737          	lui	a4,0x33333
1c00ee32:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x17316b96>
1c00ee36:	5642                	lw	a2,48(sp)
1c00ee38:	0905                	addi	s2,s2,1
1c00ee3a:	feb766e3          	bltu	a4,a1,1c00ee26 <_prf+0x6a8>
		fract *= 5U;
1c00ee3e:	4695                	li	a3,5
1c00ee40:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00ee44:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00ee46:	02c68633          	mul	a2,a3,a2
1c00ee4a:	42b68733          	p.mac	a4,a3,a1
1c00ee4e:	d832                	sw	a2,48(sp)
		decexp--;
1c00ee50:	4681                	li	a3,0
		fract *= 5U;
1c00ee52:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00ee54:	800007b7          	lui	a5,0x80000
1c00ee58:	fff7c793          	not	a5,a5
1c00ee5c:	00e7f763          	bleu	a4,a5,1c00ee6a <_prf+0x6ec>
1c00ee60:	ea0686e3          	beqz	a3,1c00ed0c <_prf+0x58e>
1c00ee64:	d832                	sw	a2,48(sp)
1c00ee66:	da3a                	sw	a4,52(sp)
1c00ee68:	b555                	j	1c00ed0c <_prf+0x58e>
			fract <<= 1;
1c00ee6a:	01f65593          	srli	a1,a2,0x1f
1c00ee6e:	00171693          	slli	a3,a4,0x1
1c00ee72:	00d5e733          	or	a4,a1,a3
1c00ee76:	0606                	slli	a2,a2,0x1
			exp--;
1c00ee78:	197d                	addi	s2,s2,-1
1c00ee7a:	4685                	li	a3,1
1c00ee7c:	bfe1                	j	1c00ee54 <_prf+0x6d6>
		_ldiv5(&fract);
1c00ee7e:	1808                	addi	a0,sp,48
1c00ee80:	887ff0ef          	jal	ra,1c00e706 <_ldiv5>
1c00ee84:	5642                	lw	a2,48(sp)
1c00ee86:	5752                	lw	a4,52(sp)
		exp--;
1c00ee88:	197d                	addi	s2,s2,-1
		decexp++;
1c00ee8a:	0d05                	addi	s10,s10,1
1c00ee8c:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00ee8e:	800007b7          	lui	a5,0x80000
1c00ee92:	fff7c793          	not	a5,a5
1c00ee96:	00e7f763          	bleu	a4,a5,1c00eea4 <_prf+0x726>
1c00ee9a:	e6068ce3          	beqz	a3,1c00ed12 <_prf+0x594>
1c00ee9e:	d832                	sw	a2,48(sp)
1c00eea0:	da3a                	sw	a4,52(sp)
1c00eea2:	bd85                	j	1c00ed12 <_prf+0x594>
			fract <<= 1;
1c00eea4:	01f65593          	srli	a1,a2,0x1f
1c00eea8:	00171693          	slli	a3,a4,0x1
1c00eeac:	00d5e733          	or	a4,a1,a3
1c00eeb0:	0606                	slli	a2,a2,0x1
			exp--;
1c00eeb2:	197d                	addi	s2,s2,-1
1c00eeb4:	4685                	li	a3,1
1c00eeb6:	bfe1                	j	1c00ee8e <_prf+0x710>
	if ((exp | fract) != 0) {
1c00eeb8:	4d01                	li	s10,0
1c00eeba:	4901                	li	s2,0
1c00eebc:	bda9                	j	1c00ed16 <_prf+0x598>
			precision -= decexp;
1c00eebe:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00eec2:	ea0a91e3          	bnez	s5,1c00ed64 <_prf+0x5e6>
			c = 'f';
1c00eec6:	06600d93          	li	s11,102
1c00eeca:	b561                	j	1c00ed52 <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00eecc:	1828                	addi	a0,sp,56
1c00eece:	839ff0ef          	jal	ra,1c00e706 <_ldiv5>
		_rlrshift(&ltemp);
1c00eed2:	1828                	addi	a0,sp,56
1c00eed4:	813ff0ef          	jal	ra,1c00e6e6 <_rlrshift>
1c00eed8:	b565                	j	1c00ed80 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00eeda:	106c                	addi	a1,sp,44
1c00eedc:	1808                	addi	a0,sp,48
1c00eede:	86dff0ef          	jal	ra,1c00e74a <_get_digit>
1c00eee2:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00eee6:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00eee8:	000d0563          	beqz	s10,1c00eef2 <_prf+0x774>
1c00eeec:	5732                	lw	a4,44(sp)
1c00eeee:	fee046e3          	bgtz	a4,1c00eeda <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00eef2:	300a9f63          	bnez	s5,1c00f210 <_prf+0xa92>
			zp->predot = decexp;
1c00eef6:	86ea                	mv	a3,s10
			decexp = 0;
1c00eef8:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00eefa:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00eefc:	ec804ae3          	bgtz	s0,1c00edd0 <_prf+0x652>
	if (prune_zero) {
1c00ef00:	4752                	lw	a4,20(sp)
1c00ef02:	eb31                	bnez	a4,1c00ef56 <_prf+0x7d8>
	return buf - start;
1c00ef04:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00ef06:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00ef0a:	40a90533          	sub	a0,s2,a0
1c00ef0e:	b389                	j	1c00ec50 <_prf+0x4d2>
			*buf++ = '.';
1c00ef10:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00ef12:	4a81                	li	s5,0
1c00ef14:	b7f5                	j	1c00ef00 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00ef16:	106c                	addi	a1,sp,44
1c00ef18:	1808                	addi	a0,sp,48
1c00ef1a:	831ff0ef          	jal	ra,1c00e74a <_get_digit>
1c00ef1e:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00ef22:	03000713          	li	a4,48
1c00ef26:	00e50363          	beq	a0,a4,1c00ef2c <_prf+0x7ae>
			decexp--;
1c00ef2a:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00ef2c:	000a9663          	bnez	s5,1c00ef38 <_prf+0x7ba>
		if (*buf++ != '0') {
1c00ef30:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00ef34:	00805d63          	blez	s0,1c00ef4e <_prf+0x7d0>
			*buf++ = '.';
1c00ef38:	02e00713          	li	a4,46
1c00ef3c:	00248913          	addi	s2,s1,2
1c00ef40:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00ef44:	00805563          	blez	s0,1c00ef4e <_prf+0x7d0>
1c00ef48:	5732                	lw	a4,44(sp)
1c00ef4a:	08e04663          	bgtz	a4,1c00efd6 <_prf+0x858>
	if (prune_zero) {
1c00ef4e:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00ef50:	4a81                	li	s5,0
1c00ef52:	4681                	li	a3,0
	if (prune_zero) {
1c00ef54:	cf99                	beqz	a5,1c00ef72 <_prf+0x7f4>
		while (*--buf == '0')
1c00ef56:	03000513          	li	a0,48
1c00ef5a:	fff90713          	addi	a4,s2,-1
1c00ef5e:	00074583          	lbu	a1,0(a4)
1c00ef62:	08a58263          	beq	a1,a0,1c00efe6 <_prf+0x868>
		if (*buf != '.') {
1c00ef66:	02e00513          	li	a0,46
		zp->trail = 0;
1c00ef6a:	4401                	li	s0,0
		if (*buf != '.') {
1c00ef6c:	00a59363          	bne	a1,a0,1c00ef72 <_prf+0x7f4>
		while (*--buf == '0')
1c00ef70:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00ef72:	0dfdf713          	andi	a4,s11,223
1c00ef76:	04500593          	li	a1,69
1c00ef7a:	f8b715e3          	bne	a4,a1,1c00ef04 <_prf+0x786>
		*buf++ = c;
1c00ef7e:	85ca                	mv	a1,s2
1c00ef80:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00ef84:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00ef88:	000d5663          	bgez	s10,1c00ef94 <_prf+0x816>
			decexp = -decexp;
1c00ef8c:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00ef90:	02d00793          	li	a5,45
			*buf++ = '+';
1c00ef94:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00ef98:	06300793          	li	a5,99
1c00ef9c:	01a7de63          	ble	s10,a5,1c00efb8 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00efa0:	06400713          	li	a4,100
1c00efa4:	02ed47b3          	div	a5,s10,a4
1c00efa8:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00efac:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00efb0:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00efb4:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00efb8:	47a9                	li	a5,10
1c00efba:	892e                	mv	s2,a1
1c00efbc:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00efc0:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00efc4:	03070713          	addi	a4,a4,48
1c00efc8:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00efcc:	03088893          	addi	a7,a7,48
1c00efd0:	011580a3          	sb	a7,1(a1)
1c00efd4:	bf05                	j	1c00ef04 <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00efd6:	106c                	addi	a1,sp,44
1c00efd8:	1808                	addi	a0,sp,48
1c00efda:	f70ff0ef          	jal	ra,1c00e74a <_get_digit>
1c00efde:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00efe2:	147d                	addi	s0,s0,-1
1c00efe4:	b785                	j	1c00ef44 <_prf+0x7c6>
		while (*--buf == '0')
1c00efe6:	893a                	mv	s2,a4
1c00efe8:	bf8d                	j	1c00ef5a <_prf+0x7dc>
1c00efea:	8a4a                	mv	s4,s2
				switch (i) {
1c00efec:	04c00693          	li	a3,76
1c00eff0:	004a278b          	p.lw	a5,4(s4!)
1c00eff4:	02d48a63          	beq	s1,a3,1c00f028 <_prf+0x8aa>
1c00eff8:	0096c963          	blt	a3,s1,1c00f00a <_prf+0x88c>
1c00effc:	04800693          	li	a3,72
1c00f000:	02d48063          	beq	s1,a3,1c00f020 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00f004:	0137a023          	sw	s3,0(a5)
					break;
1c00f008:	a801                	j	1c00f018 <_prf+0x89a>
				switch (i) {
1c00f00a:	06800693          	li	a3,104
1c00f00e:	fed49be3          	bne	s1,a3,1c00f004 <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00f012:	874e                	mv	a4,s3
1c00f014:	00e79023          	sh	a4,0(a5)
				continue;
1c00f018:	8952                	mv	s2,s4
1c00f01a:	8662                	mv	a2,s8
1c00f01c:	f86ff06f          	j	1c00e7a2 <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00f020:	874e                	mv	a4,s3
1c00f022:	00e78023          	sb	a4,0(a5)
					break;
1c00f026:	bfcd                	j	1c00f018 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00f028:	41f9d713          	srai	a4,s3,0x1f
1c00f02c:	0137a023          	sw	s3,0(a5)
1c00f030:	c3d8                	sw	a4,4(a5)
					break;
1c00f032:	b7dd                	j	1c00f018 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00f034:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00f038:	77e1                	lui	a5,0xffff8
1c00f03a:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00f03e:	46c1                	li	a3,16
1c00f040:	4601                	li	a2,0
1c00f042:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00f046:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00f04a:	e0aff0ef          	jal	ra,1c00e654 <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00f04e:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00f052:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00f056:	4909                	li	s2,2
				break;
1c00f058:	b40d                	j	1c00ea7a <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00f05a:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00f05e:	a4060ee3          	beqz	a2,1c00eaba <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00f062:	0d85                	addi	s11,s11,1
1c00f064:	bc89                	j	1c00eab6 <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00f066:	00490a13          	addi	s4,s2,4
1c00f06a:	00092583          	lw	a1,0(s2)
1c00f06e:	4601                	li	a2,0
					break;
1c00f070:	ba99                	j	1c00e9c6 <_prf+0x248>
	if (alt_form) {
1c00f072:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00f074:	46a1                	li	a3,8
1c00f076:	409504b3          	sub	s1,a0,s1
1c00f07a:	ddaff0ef          	jal	ra,1c00e654 <_to_x>
1c00f07e:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00f082:	4901                	li	s2,0
1c00f084:	badd                	j	1c00ea7a <_prf+0x2fc>
				} else if (c == 'u') {
1c00f086:	07500713          	li	a4,117
1c00f08a:	00ed9863          	bne	s11,a4,1c00f09a <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00f08e:	46a9                	li	a3,10
1c00f090:	8526                	mv	a0,s1
1c00f092:	dc2ff0ef          	jal	ra,1c00e654 <_to_x>
1c00f096:	8daa                	mv	s11,a0
1c00f098:	b7ed                	j	1c00f082 <_prf+0x904>
	if (alt_form) {
1c00f09a:	8d26                	mv	s10,s1
1c00f09c:	000a8963          	beqz	s5,1c00f0ae <_prf+0x930>
		*buf++ = '0';
1c00f0a0:	7761                	lui	a4,0xffff8
1c00f0a2:	83074713          	xori	a4,a4,-2000
1c00f0a6:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00f0aa:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00f0ae:	46c1                	li	a3,16
1c00f0b0:	856a                	mv	a0,s10
1c00f0b2:	da2ff0ef          	jal	ra,1c00e654 <_to_x>
	if (prefix == 'X') {
1c00f0b6:	05800713          	li	a4,88
1c00f0ba:	02ed9263          	bne	s11,a4,1c00f0de <_prf+0x960>
1c00f0be:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00f0c0:	45e5                	li	a1,25
1c00f0c2:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00f0c6:	f9f68613          	addi	a2,a3,-97
1c00f0ca:	0ff67613          	andi	a2,a2,255
1c00f0ce:	00c5e563          	bltu	a1,a2,1c00f0d8 <_prf+0x95a>
			*buf += 'A' - 'a';
1c00f0d2:	1681                	addi	a3,a3,-32
1c00f0d4:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00f0d8:	fff7c703          	lbu	a4,-1(a5)
1c00f0dc:	f37d                	bnez	a4,1c00f0c2 <_prf+0x944>
	return len + (buf - buf0);
1c00f0de:	409d0733          	sub	a4,s10,s1
1c00f0e2:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00f0e6:	001a9913          	slli	s2,s5,0x1
1c00f0ea:	ba41                	j	1c00ea7a <_prf+0x2fc>
				PUTC('%');
1c00f0ec:	85de                	mv	a1,s7
1c00f0ee:	02500513          	li	a0,37
1c00f0f2:	ec4ff06f          	j	1c00e7b6 <_prf+0x38>
				count++;
1c00f0f6:	0985                	addi	s3,s3,1
				continue;
1c00f0f8:	8a4a                	mv	s4,s2
1c00f0fa:	bf39                	j	1c00f018 <_prf+0x89a>
1c00f0fc:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00f0fe:	4d01                	li	s10,0
1c00f100:	b2d5                	j	1c00eae4 <_prf+0x366>
					PUTC(' ');
1c00f102:	85de                	mv	a1,s7
1c00f104:	02000513          	li	a0,32
1c00f108:	c036                	sw	a3,0(sp)
1c00f10a:	c43e                	sw	a5,8(sp)
1c00f10c:	9b02                	jalr	s6
1c00f10e:	4682                	lw	a3,0(sp)
1c00f110:	47a2                	lw	a5,8(sp)
1c00f112:	ebf52563          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
				while (width-- > 0) {
1c00f116:	14fd                	addi	s1,s1,-1
1c00f118:	fff4b5e3          	p.bneimm	s1,-1,1c00f102 <_prf+0x984>
				count += width;
1c00f11c:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00f11e:	5cfd                	li	s9,-1
1c00f120:	bad9                	j	1c00eaf6 <_prf+0x378>
				PUTC(*cptr++);
1c00f122:	0017c50b          	p.lbu	a0,1(a5!)
1c00f126:	85de                	mv	a1,s7
1c00f128:	c036                	sw	a3,0(sp)
1c00f12a:	c43e                	sw	a5,8(sp)
1c00f12c:	9b02                	jalr	s6
1c00f12e:	4682                	lw	a3,0(sp)
1c00f130:	47a2                	lw	a5,8(sp)
1c00f132:	9df534e3          	p.bneimm	a0,-1,1c00eafa <_prf+0x37c>
1c00f136:	e86ff06f          	j	1c00e7bc <_prf+0x3e>
				PUTC('0');
1c00f13a:	85de                	mv	a1,s7
1c00f13c:	03000513          	li	a0,48
1c00f140:	c036                	sw	a3,0(sp)
1c00f142:	c43e                	sw	a5,8(sp)
1c00f144:	9b02                	jalr	s6
1c00f146:	4682                	lw	a3,0(sp)
1c00f148:	47a2                	lw	a5,8(sp)
1c00f14a:	9bf53be3          	p.bneimm	a0,-1,1c00eb00 <_prf+0x382>
1c00f14e:	e6eff06f          	j	1c00e7bc <_prf+0x3e>
					PUTC(c);
1c00f152:	85de                	mv	a1,s7
1c00f154:	c232                	sw	a2,4(sp)
1c00f156:	c036                	sw	a3,0(sp)
1c00f158:	c442                	sw	a6,8(sp)
1c00f15a:	9b02                	jalr	s6
1c00f15c:	4612                	lw	a2,4(sp)
1c00f15e:	4682                	lw	a3,0(sp)
1c00f160:	4822                	lw	a6,8(sp)
1c00f162:	e5f52d63          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
					c = *++cptr;
1c00f166:	0d85                	addi	s11,s11,1
1c00f168:	000dc503          	lbu	a0,0(s11)
1c00f16c:	b27d                	j	1c00eb1a <_prf+0x39c>
					PUTC('0');
1c00f16e:	85de                	mv	a1,s7
1c00f170:	03000513          	li	a0,48
1c00f174:	c232                	sw	a2,4(sp)
1c00f176:	c036                	sw	a3,0(sp)
1c00f178:	c43a                	sw	a4,8(sp)
1c00f17a:	9b02                	jalr	s6
1c00f17c:	4612                	lw	a2,4(sp)
1c00f17e:	4682                	lw	a3,0(sp)
1c00f180:	4722                	lw	a4,8(sp)
1c00f182:	167d                	addi	a2,a2,-1
1c00f184:	9bf532e3          	p.bneimm	a0,-1,1c00eb28 <_prf+0x3aa>
1c00f188:	e34ff06f          	j	1c00e7bc <_prf+0x3e>
					PUTC('0');
1c00f18c:	85de                	mv	a1,s7
1c00f18e:	03000513          	li	a0,48
1c00f192:	c036                	sw	a3,0(sp)
1c00f194:	c43a                	sw	a4,8(sp)
1c00f196:	9b02                	jalr	s6
1c00f198:	4682                	lw	a3,0(sp)
1c00f19a:	4722                	lw	a4,8(sp)
1c00f19c:	16fd                	addi	a3,a3,-1
1c00f19e:	9df532e3          	p.bneimm	a0,-1,1c00eb62 <_prf+0x3e4>
1c00f1a2:	e1aff06f          	j	1c00e7bc <_prf+0x3e>
					PUTC(c);
1c00f1a6:	85de                	mv	a1,s7
1c00f1a8:	c232                	sw	a2,4(sp)
1c00f1aa:	c036                	sw	a3,0(sp)
1c00f1ac:	c43a                	sw	a4,8(sp)
1c00f1ae:	9b02                	jalr	s6
1c00f1b0:	4612                	lw	a2,4(sp)
1c00f1b2:	4682                	lw	a3,0(sp)
1c00f1b4:	4722                	lw	a4,8(sp)
1c00f1b6:	e1f52363          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
					c = *++cptr;
1c00f1ba:	0d85                	addi	s11,s11,1
1c00f1bc:	000dc503          	lbu	a0,0(s11)
1c00f1c0:	ba75                	j	1c00eb7c <_prf+0x3fe>
					PUTC('0');
1c00f1c2:	85de                	mv	a1,s7
1c00f1c4:	03000513          	li	a0,48
1c00f1c8:	c43a                	sw	a4,8(sp)
1c00f1ca:	9b02                	jalr	s6
1c00f1cc:	4722                	lw	a4,8(sp)
1c00f1ce:	177d                	addi	a4,a4,-1
1c00f1d0:	9bf53fe3          	p.bneimm	a0,-1,1c00eb8e <_prf+0x410>
1c00f1d4:	de8ff06f          	j	1c00e7bc <_prf+0x3e>
				PUTC(*cptr++);
1c00f1d8:	0014450b          	p.lbu	a0,1(s0!)
1c00f1dc:	85de                	mv	a1,s7
1c00f1de:	9b02                	jalr	s6
1c00f1e0:	ddf52e63          	p.beqimm	a0,-1,1c00e7bc <_prf+0x3e>
1c00f1e4:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00f1e8:	fef048e3          	bgtz	a5,1c00f1d8 <_prf+0xa5a>
			count += prefix;
1c00f1ec:	994e                	add	s2,s2,s3
			count += zero_head;
1c00f1ee:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00f1f2:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00f1f4:	e39052e3          	blez	s9,1c00f018 <_prf+0x89a>
				count += width;
1c00f1f8:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00f1fa:	1cfd                	addi	s9,s9,-1
1c00f1fc:	e1fcaee3          	p.beqimm	s9,-1,1c00f018 <_prf+0x89a>
					PUTC(' ');
1c00f200:	85de                	mv	a1,s7
1c00f202:	02000513          	li	a0,32
1c00f206:	9b02                	jalr	s6
1c00f208:	fff539e3          	p.bneimm	a0,-1,1c00f1fa <_prf+0xa7c>
1c00f20c:	db0ff06f          	j	1c00e7bc <_prf+0x3e>
			*buf++ = '.';
1c00f210:	02e00693          	li	a3,46
1c00f214:	00d90023          	sb	a3,0(s2)
1c00f218:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00f21c:	86ea                	mv	a3,s10
			decexp = 0;
1c00f21e:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00f220:	4a81                	li	s5,0
1c00f222:	b6f9                	j	1c00edf0 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00f224:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00f226:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00f22a:	46c1                	li	a3,16
1c00f22c:	d636                	sw	a3,44(sp)
1c00f22e:	04d74933          	p.min	s2,a4,a3
1c00f232:	b691                	j	1c00ed76 <_prf+0x5f8>

1c00f234 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00f234:	300476f3          	csrrci	a3,mstatus,8
1c00f238:	4785                	li	a5,1
1c00f23a:	08f50623          	sb	a5,140(a0)
1c00f23e:	08d54783          	lbu	a5,141(a0)
1c00f242:	00201737          	lui	a4,0x201
1c00f246:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00f24a:	04078793          	addi	a5,a5,64
1c00f24e:	07da                	slli	a5,a5,0x16
1c00f250:	0007e723          	p.sw	zero,a4(a5)
1c00f254:	30069073          	csrw	mstatus,a3
1c00f258:	8082                	ret

1c00f25a <__rt_uart_setup.isra.5>:
1c00f25a:	1c01c737          	lui	a4,0x1c01c
1c00f25e:	74472703          	lw	a4,1860(a4) # 1c01c744 <__rt_freq_domains>
1c00f262:	00155793          	srli	a5,a0,0x1
1c00f266:	97ba                	add	a5,a5,a4
1c00f268:	02a7d7b3          	divu	a5,a5,a0
1c00f26c:	1a102737          	lui	a4,0x1a102
1c00f270:	17fd                	addi	a5,a5,-1
1c00f272:	07c2                	slli	a5,a5,0x10
1c00f274:	3067e793          	ori	a5,a5,774
1c00f278:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa102200>
1c00f27c:	8082                	ret

1c00f27e <__rt_uart_setfreq_after>:
1c00f27e:	1c01c7b7          	lui	a5,0x1c01c
1c00f282:	5fc78793          	addi	a5,a5,1532 # 1c01c5fc <__rt_uart>
1c00f286:	4398                	lw	a4,0(a5)
1c00f288:	cb11                	beqz	a4,1c00f29c <__rt_uart_setfreq_after+0x1e>
1c00f28a:	4788                	lw	a0,8(a5)
1c00f28c:	1141                	addi	sp,sp,-16
1c00f28e:	c606                	sw	ra,12(sp)
1c00f290:	fcbff0ef          	jal	ra,1c00f25a <__rt_uart_setup.isra.5>
1c00f294:	40b2                	lw	ra,12(sp)
1c00f296:	4501                	li	a0,0
1c00f298:	0141                	addi	sp,sp,16
1c00f29a:	8082                	ret
1c00f29c:	4501                	li	a0,0
1c00f29e:	8082                	ret

1c00f2a0 <__rt_uart_wait_tx_done.isra.6>:
1c00f2a0:	1a102737          	lui	a4,0x1a102
1c00f2a4:	1141                	addi	sp,sp,-16
1c00f2a6:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021f4>
1c00f2aa:	002046b7          	lui	a3,0x204
1c00f2ae:	431c                	lw	a5,0(a4)
1c00f2b0:	8bc1                	andi	a5,a5,16
1c00f2b2:	e38d                	bnez	a5,1c00f2d4 <__rt_uart_wait_tx_done.isra.6+0x34>
1c00f2b4:	1a102737          	lui	a4,0x1a102
1c00f2b8:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021fc>
1c00f2bc:	431c                	lw	a5,0(a4)
1c00f2be:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00f2c2:	ffed                	bnez	a5,1c00f2bc <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00f2c4:	c602                	sw	zero,12(sp)
1c00f2c6:	7cf00713          	li	a4,1999
1c00f2ca:	47b2                	lw	a5,12(sp)
1c00f2cc:	00f75763          	ble	a5,a4,1c00f2da <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00f2d0:	0141                	addi	sp,sp,16
1c00f2d2:	8082                	ret
1c00f2d4:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00f2d8:	bfd9                	j	1c00f2ae <__rt_uart_wait_tx_done.isra.6+0xe>
1c00f2da:	47b2                	lw	a5,12(sp)
1c00f2dc:	0785                	addi	a5,a5,1
1c00f2de:	c63e                	sw	a5,12(sp)
1c00f2e0:	b7ed                	j	1c00f2ca <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00f2e2 <__rt_uart_setfreq_before>:
1c00f2e2:	1c01c7b7          	lui	a5,0x1c01c
1c00f2e6:	5fc7a783          	lw	a5,1532(a5) # 1c01c5fc <__rt_uart>
1c00f2ea:	c385                	beqz	a5,1c00f30a <__rt_uart_setfreq_before+0x28>
1c00f2ec:	1141                	addi	sp,sp,-16
1c00f2ee:	c606                	sw	ra,12(sp)
1c00f2f0:	fb1ff0ef          	jal	ra,1c00f2a0 <__rt_uart_wait_tx_done.isra.6>
1c00f2f4:	40b2                	lw	ra,12(sp)
1c00f2f6:	005007b7          	lui	a5,0x500
1c00f2fa:	1a102737          	lui	a4,0x1a102
1c00f2fe:	0799                	addi	a5,a5,6
1c00f300:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa102200>
1c00f304:	4501                	li	a0,0
1c00f306:	0141                	addi	sp,sp,16
1c00f308:	8082                	ret
1c00f30a:	4501                	li	a0,0
1c00f30c:	8082                	ret

1c00f30e <__rt_uart_cluster_req>:
1c00f30e:	1141                	addi	sp,sp,-16
1c00f310:	c606                	sw	ra,12(sp)
1c00f312:	c422                	sw	s0,8(sp)
1c00f314:	30047473          	csrrci	s0,mstatus,8
1c00f318:	1c00f7b7          	lui	a5,0x1c00f
1c00f31c:	23478793          	addi	a5,a5,564 # 1c00f234 <__rt_uart_cluster_req_done>
1c00f320:	c91c                	sw	a5,16(a0)
1c00f322:	4785                	li	a5,1
1c00f324:	d91c                	sw	a5,48(a0)
1c00f326:	411c                	lw	a5,0(a0)
1c00f328:	02052a23          	sw	zero,52(a0)
1c00f32c:	c948                	sw	a0,20(a0)
1c00f32e:	43cc                	lw	a1,4(a5)
1c00f330:	4514                	lw	a3,8(a0)
1c00f332:	4150                	lw	a2,4(a0)
1c00f334:	0586                	slli	a1,a1,0x1
1c00f336:	00c50793          	addi	a5,a0,12
1c00f33a:	4701                	li	a4,0
1c00f33c:	0585                	addi	a1,a1,1
1c00f33e:	4501                	li	a0,0
1c00f340:	c3afd0ef          	jal	ra,1c00c77a <rt_periph_copy>
1c00f344:	30041073          	csrw	mstatus,s0
1c00f348:	40b2                	lw	ra,12(sp)
1c00f34a:	4422                	lw	s0,8(sp)
1c00f34c:	0141                	addi	sp,sp,16
1c00f34e:	8082                	ret

1c00f350 <soc_eu_fcEventMask_setEvent>:
1c00f350:	47fd                	li	a5,31
1c00f352:	4721                	li	a4,8
1c00f354:	00a7d463          	ble	a0,a5,1c00f35c <soc_eu_fcEventMask_setEvent+0xc>
1c00f358:	1501                	addi	a0,a0,-32
1c00f35a:	4711                	li	a4,4
1c00f35c:	1a1066b7          	lui	a3,0x1a106
1c00f360:	20e6f603          	p.lw	a2,a4(a3)
1c00f364:	4785                	li	a5,1
1c00f366:	00a79533          	sll	a0,a5,a0
1c00f36a:	fff54513          	not	a0,a0
1c00f36e:	8d71                	and	a0,a0,a2
1c00f370:	00a6e723          	p.sw	a0,a4(a3)
1c00f374:	8082                	ret

1c00f376 <rt_uart_conf_init>:
1c00f376:	000997b7          	lui	a5,0x99
1c00f37a:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00f37e:	c11c                	sw	a5,0(a0)
1c00f380:	57fd                	li	a5,-1
1c00f382:	c15c                	sw	a5,4(a0)
1c00f384:	8082                	ret

1c00f386 <__rt_uart_open>:
1c00f386:	1141                	addi	sp,sp,-16
1c00f388:	c606                	sw	ra,12(sp)
1c00f38a:	c422                	sw	s0,8(sp)
1c00f38c:	c226                	sw	s1,4(sp)
1c00f38e:	c04a                	sw	s2,0(sp)
1c00f390:	30047973          	csrrci	s2,mstatus,8
1c00f394:	cd8d                	beqz	a1,1c00f3ce <__rt_uart_open+0x48>
1c00f396:	4198                	lw	a4,0(a1)
1c00f398:	1c01c6b7          	lui	a3,0x1c01c
1c00f39c:	ffc50793          	addi	a5,a0,-4
1c00f3a0:	5fc68413          	addi	s0,a3,1532 # 1c01c5fc <__rt_uart>
1c00f3a4:	0792                	slli	a5,a5,0x4
1c00f3a6:	943e                	add	s0,s0,a5
1c00f3a8:	4010                	lw	a2,0(s0)
1c00f3aa:	5fc68693          	addi	a3,a3,1532
1c00f3ae:	c60d                	beqz	a2,1c00f3d8 <__rt_uart_open+0x52>
1c00f3b0:	c589                	beqz	a1,1c00f3ba <__rt_uart_open+0x34>
1c00f3b2:	418c                	lw	a1,0(a1)
1c00f3b4:	4418                	lw	a4,8(s0)
1c00f3b6:	04e59d63          	bne	a1,a4,1c00f410 <__rt_uart_open+0x8a>
1c00f3ba:	0605                	addi	a2,a2,1
1c00f3bc:	00c6e7a3          	p.sw	a2,a5(a3)
1c00f3c0:	8522                	mv	a0,s0
1c00f3c2:	40b2                	lw	ra,12(sp)
1c00f3c4:	4422                	lw	s0,8(sp)
1c00f3c6:	4492                	lw	s1,4(sp)
1c00f3c8:	4902                	lw	s2,0(sp)
1c00f3ca:	0141                	addi	sp,sp,16
1c00f3cc:	8082                	ret
1c00f3ce:	00099737          	lui	a4,0x99
1c00f3d2:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00f3d6:	b7c9                	j	1c00f398 <__rt_uart_open+0x12>
1c00f3d8:	c418                	sw	a4,8(s0)
1c00f3da:	4785                	li	a5,1
1c00f3dc:	1a102737          	lui	a4,0x1a102
1c00f3e0:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10275c>
1c00f3e4:	c01c                	sw	a5,0(s0)
1c00f3e6:	c048                	sw	a0,4(s0)
1c00f3e8:	4314                	lw	a3,0(a4)
1c00f3ea:	00a797b3          	sll	a5,a5,a0
1c00f3ee:	00151493          	slli	s1,a0,0x1
1c00f3f2:	8fd5                	or	a5,a5,a3
1c00f3f4:	c31c                	sw	a5,0(a4)
1c00f3f6:	8526                	mv	a0,s1
1c00f3f8:	f59ff0ef          	jal	ra,1c00f350 <soc_eu_fcEventMask_setEvent>
1c00f3fc:	00148513          	addi	a0,s1,1
1c00f400:	f51ff0ef          	jal	ra,1c00f350 <soc_eu_fcEventMask_setEvent>
1c00f404:	4408                	lw	a0,8(s0)
1c00f406:	e55ff0ef          	jal	ra,1c00f25a <__rt_uart_setup.isra.5>
1c00f40a:	30091073          	csrw	mstatus,s2
1c00f40e:	bf4d                	j	1c00f3c0 <__rt_uart_open+0x3a>
1c00f410:	4401                	li	s0,0
1c00f412:	b77d                	j	1c00f3c0 <__rt_uart_open+0x3a>

1c00f414 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00f414:	1141                	addi	sp,sp,-16
1c00f416:	c606                	sw	ra,12(sp)
1c00f418:	c422                	sw	s0,8(sp)
1c00f41a:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00f41c:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00f420:	411c                	lw	a5,0(a0)
1c00f422:	17fd                	addi	a5,a5,-1
1c00f424:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00f426:	e79d                	bnez	a5,1c00f454 <rt_uart_close+0x40>
1c00f428:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00f42a:	e77ff0ef          	jal	ra,1c00f2a0 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00f42e:	1a102737          	lui	a4,0x1a102
1c00f432:	005007b7          	lui	a5,0x500
1c00f436:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa102200>
1c00f43a:	0799                	addi	a5,a5,6
1c00f43c:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00f43e:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00f440:	78070713          	addi	a4,a4,1920
1c00f444:	4314                	lw	a3,0(a4)
1c00f446:	4785                	li	a5,1
1c00f448:	00c797b3          	sll	a5,a5,a2
1c00f44c:	fff7c793          	not	a5,a5
1c00f450:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00f452:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00f454:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00f458:	40b2                	lw	ra,12(sp)
1c00f45a:	4422                	lw	s0,8(sp)
1c00f45c:	4492                	lw	s1,4(sp)
1c00f45e:	0141                	addi	sp,sp,16
1c00f460:	8082                	ret

1c00f462 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00f462:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00f466:	8795                	srai	a5,a5,0x5
1c00f468:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00f46c:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00f470:	1c00f7b7          	lui	a5,0x1c00f
1c00f474:	30e78793          	addi	a5,a5,782 # 1c00f30e <__rt_uart_cluster_req>
1c00f478:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00f47a:	4785                	li	a5,1
  req->uart = handle;
1c00f47c:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00f47e:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00f480:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00f482:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00f486:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00f48a:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00f48c:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00f48e:	00c68513          	addi	a0,a3,12
1c00f492:	ca5fd06f          	j	1c00d136 <__rt_cluster_push_fc_event>

1c00f496 <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00f496:	1c00f5b7          	lui	a1,0x1c00f
{
1c00f49a:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00f49c:	4601                	li	a2,0
1c00f49e:	2e258593          	addi	a1,a1,738 # 1c00f2e2 <__rt_uart_setfreq_before>
1c00f4a2:	4511                	li	a0,4
{
1c00f4a4:	c606                	sw	ra,12(sp)
1c00f4a6:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00f4a8:	8b5fc0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00f4ac:	1c00f5b7          	lui	a1,0x1c00f
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00f4b0:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00f4b2:	4601                	li	a2,0
1c00f4b4:	27e58593          	addi	a1,a1,638 # 1c00f27e <__rt_uart_setfreq_after>
1c00f4b8:	4515                	li	a0,5
1c00f4ba:	8a3fc0ef          	jal	ra,1c00bd5c <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00f4be:	1c01c7b7          	lui	a5,0x1c01c
1c00f4c2:	5e07ae23          	sw	zero,1532(a5) # 1c01c5fc <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00f4c6:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00f4c8:	c10d                	beqz	a0,1c00f4ea <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00f4ca:	01402673          	csrr	a2,uhartid
1c00f4ce:	1c010537          	lui	a0,0x1c010
  return (hart_id >> 5) & 0x3f;
1c00f4d2:	40565593          	srai	a1,a2,0x5
1c00f4d6:	f265b5b3          	p.bclr	a1,a1,25,6
1c00f4da:	f4563633          	p.bclr	a2,a2,26,5
1c00f4de:	1a850513          	addi	a0,a0,424 # 1c0101a8 <__hyper_pad+0xa4>
1c00f4e2:	946ff0ef          	jal	ra,1c00e628 <printf>
1c00f4e6:	8c6ff0ef          	jal	ra,1c00e5ac <abort>
}
1c00f4ea:	40b2                	lw	ra,12(sp)
1c00f4ec:	4422                	lw	s0,8(sp)
1c00f4ee:	0141                	addi	sp,sp,16
1c00f4f0:	8082                	ret
	...

1c00f4f4 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00f4f4:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00f4f8:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00f4fc:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00f4fe:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00f502:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00f506:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00f50a:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00f50e:	10059063          	bnez	a1,1c00f60e <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00f512:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00f516:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00f51a:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00f51e:	e3ff1417          	auipc	s0,0xe3ff1
1c00f522:	ae640413          	addi	s0,s0,-1306 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00f526:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00f52a:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00f52c:	00000a97          	auipc	s5,0x0
1c00f530:	038a8a93          	addi	s5,s5,56 # 1c00f564 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00f534:	0000db97          	auipc	s7,0xd
1c00f538:	220b8b93          	addi	s7,s7,544 # 1c01c754 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00f53c:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00f540:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00f544:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00f546:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00f548:	1b201cb7          	lui	s9,0x1b201
1c00f54c:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffa34>
    li      s8, 1
1c00f550:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00f552:	00000d17          	auipc	s10,0x0
1c00f556:	0fad0d13          	addi	s10,s10,250 # 1c00f64c <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00f55a:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00f55e:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00f562:	a819                	j	1c00f578 <__rt_master_loop>

1c00f564 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00f564:	000b0a63          	beqz	s6,1c00f578 <__rt_master_loop>

1c00f568 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00f568:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00f56c:	08029a63          	bnez	t0,1c00f600 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00f570:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00f574:	018ca023          	sw	s8,0(s9)

1c00f578 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00f578:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00f57c:	060e0b63          	beqz	t3,1c00f5f2 <__rt_master_sleep>

1c00f580 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00f580:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00f584:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00f588:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00f58c:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00f590:	ffee98e3          	bne	t4,t5,1c00f580 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00f594:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00f598:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00f59c:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00f5a0:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00f5a4:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00f5a8:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00f5ac:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00f5b0:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00f5b4:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00f5b8:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00f5ba:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00f5bc:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00f5c0:	00030a63          	beqz	t1,1c00f5d4 <__rt_no_stack_check>
    sub     t4, sp, t1
1c00f5c4:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00f5c8:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00f5cc:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00f5d0:	7d00d073          	csrwi	0x7d0,1

1c00f5d4 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00f5d4:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00f5d8:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00f5dc:	21e9a623          	sw	t5,524(s3)

1c00f5e0 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00f5e0:	000f2863          	p.beqimm	t5,0,1c00f5f0 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00f5e4:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00f5e8:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00f5ec:	0829a023          	sw	sp,128(s3)

1c00f5f0 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00f5f0:	8282                	jr	t0

1c00f5f2 <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00f5f2:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00f5f6:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00f5fa:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00f5fe:	bfad                	j	1c00f578 <__rt_master_loop>

1c00f600 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00f600:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00f604:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00f608:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00f60c:	bfb1                	j	1c00f568 <__rt_push_event_to_fc_retry>

1c00f60e <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00f60e:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00f612:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00f616:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00f61a:	00000a17          	auipc	s4,0x0
1c00f61e:	012a0a13          	addi	s4,s4,18 # 1c00f62c <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00f622:	00000a97          	auipc	s5,0x0
1c00f626:	00ea8a93          	addi	s5,s5,14 # 1c00f630 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00f62a:	a019                	j	1c00f630 <__rt_wait_for_dispatch>

1c00f62c <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00f62c:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00f630 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00f630:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00f634:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00f638:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00f63c:	00031563          	bnez	t1,1c00f646 <__rt_other_entry>

1c00f640 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00f640:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00f644:	8282                	jr	t0

1c00f646 <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00f646:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00f64a:	8282                	jr	t0

1c00f64c <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00f64c:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00f650:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00f654:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00f658:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00f65c:	c909                	beqz	a0,1c00f66e <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00f65e:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00f662:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00f666:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00f66a:	7d00d073          	csrwi	0x7d0,1

1c00f66e <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00f66e:	8082                	ret

1c00f670 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00f670:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00f674:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00f678:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00f67c:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00f680:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00f684:	00204637          	lui	a2,0x204
1c00f688:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00f68c:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00f690:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00f692:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00f694:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00f698:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00f69a:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00f69c:	c131                	beqz	a0,1c00f6e0 <__rt_dma_2d_done>

1c00f69e <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00f69e:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00f6a0:	00a5c363          	blt	a1,a0,1c00f6a6 <__rt_dma_2d_not_last>
    mv  a1, a0
1c00f6a4:	85aa                	mv	a1,a0

1c00f6a6 <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00f6a6:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00f6a8:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00f6aa:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00f6ac:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00f6b0:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00f6b2:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00f6b4:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00f6b6:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00f6b8:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00f6ba:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00f6bc:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00f6be:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00f6c0:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00f6c2:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00f6c4:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00f6c6:	cc08                	sw	a0,24(s0)

1c00f6c8 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00f6c8:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00f6cc:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00f6d0:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00f6d4:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00f6d8:	fec12603          	lw	a2,-20(sp)

    mret
1c00f6dc:	30200073          	mret

1c00f6e0 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00f6e0:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00f6e4:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00f6e6:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00f6ea:	00204437          	lui	s0,0x204
1c00f6ee:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00f6f2:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00f6f6:	d8e9                	beqz	s1,1c00f6c8 <__rt_dma_2d_exit>

    mv  x8, x9
1c00f6f8:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00f6fa:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00f6fc:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00f6fe:	b745                	j	1c00f69e <__rt_dma_2d_redo>
